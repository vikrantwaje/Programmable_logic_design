// alt_sld_fab_alt_sld_fab_stfabric.v

// This file was auto-generated from altera_debug_fabric_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 16.1 196

`timescale 1 ps / 1 ps
module alt_sld_fab_alt_sld_fab_stfabric (
		input  wire       clk_clk,             //     clk.clk
		input  wire       reset_reset,         //   reset.reset
		output wire       h2t_ready,           //     h2t.ready
		input  wire       h2t_valid,           //        .valid
		input  wire [7:0] h2t_data,            //        .data
		input  wire       h2t_startofpacket,   //        .startofpacket
		input  wire       h2t_endofpacket,     //        .endofpacket
		input  wire [7:0] h2t_channel,         //        .channel
		input  wire       t2h_ready,           //     t2h.ready
		output wire       t2h_valid,           //        .valid
		output wire [7:0] t2h_data,            //        .data
		output wire       t2h_startofpacket,   //        .startofpacket
		output wire       t2h_endofpacket,     //        .endofpacket
		output wire [7:0] t2h_channel,         //        .channel
		input  wire       mgmt_valid,          //    mgmt.valid
		input  wire       mgmt_data,           //        .data
		input  wire [7:0] mgmt_channel,        //        .channel
		input  wire       clk_0_clk,           //   clk_0.clk
		output wire       reset_0_reset,       // reset_0.reset
		input  wire       h2t_0_ready,         //   h2t_0.ready
		output wire       h2t_0_valid,         //        .valid
		output wire [7:0] h2t_0_data,          //        .data
		output wire       h2t_0_startofpacket, //        .startofpacket
		output wire       h2t_0_endofpacket,   //        .endofpacket
		output wire       h2t_0_channel,       //        .channel
		output wire       t2h_0_ready,         //   t2h_0.ready
		input  wire       t2h_0_valid,         //        .valid
		input  wire [7:0] t2h_0_data,          //        .data
		input  wire       t2h_0_startofpacket, //        .startofpacket
		input  wire       t2h_0_endofpacket,   //        .endofpacket
		input  wire       t2h_0_channel        //        .channel
	);

	wire        mgmt_demux_out0_valid;              // mgmt_demux:out0_valid -> mgmt_demux_port_adap:in_valid
	wire        mgmt_demux_out0_data;               // mgmt_demux:out0_data -> mgmt_demux_port_adap:in_data
	wire        mgmt_demux_out0_ready;              // mgmt_demux_port_adap:in_ready -> mgmt_demux:out0_ready
	wire        mgmt_demux_out0_channel;            // mgmt_demux:out0_channel -> mgmt_demux_port_adap:in_channel
	wire        h2t_channel_adap_out_valid;         // h2t_channel_adap:out_valid -> demux:in_valid
	wire  [7:0] h2t_channel_adap_out_data;          // h2t_channel_adap:out_data -> demux:in_data
	wire        h2t_channel_adap_out_ready;         // demux:in_ready -> h2t_channel_adap:out_ready
	wire  [1:0] h2t_channel_adap_out_channel;       // h2t_channel_adap:out_channel -> demux:in_channel
	wire        h2t_channel_adap_out_startofpacket; // h2t_channel_adap:out_startofpacket -> demux:in_startofpacket
	wire        h2t_channel_adap_out_endofpacket;   // h2t_channel_adap:out_endofpacket -> demux:in_endofpacket
	wire        mux_out_valid;                      // mux:out_valid -> t2h_channel_adap:in_valid
	wire  [7:0] mux_out_data;                       // mux:out_data -> t2h_channel_adap:in_data
	wire        mux_out_ready;                      // t2h_channel_adap:in_ready -> mux:out_ready
	wire  [1:0] mux_out_channel;                    // mux:out_channel -> t2h_channel_adap:in_channel
	wire        mux_out_startofpacket;              // mux:out_startofpacket -> t2h_channel_adap:in_startofpacket
	wire        mux_out_endofpacket;                // mux:out_endofpacket -> t2h_channel_adap:in_endofpacket
	wire        mgmt_channel_adap_out_valid;        // mgmt_channel_adap:out_valid -> mgmt_demux:in_valid
	wire        mgmt_channel_adap_out_data;         // mgmt_channel_adap:out_data -> mgmt_demux:in_data
	wire        mgmt_channel_adap_out_ready;        // mgmt_demux:in_ready -> mgmt_channel_adap:out_ready
	wire  [1:0] mgmt_channel_adap_out_channel;      // mgmt_channel_adap:out_channel -> mgmt_demux:in_channel
	wire        mgmt_time_adap_out_valid;           // mgmt_time_adap:out_valid -> mgmt_channel_adap:in_valid
	wire        mgmt_time_adap_out_data;            // mgmt_time_adap:out_data -> mgmt_channel_adap:in_data
	wire        mgmt_time_adap_out_ready;           // mgmt_channel_adap:in_ready -> mgmt_time_adap:out_ready
	wire  [7:0] mgmt_time_adap_out_channel;         // mgmt_time_adap:out_channel -> mgmt_channel_adap:in_channel
	wire        demux_out0_valid;                   // demux:out0_valid -> mux:in0_valid
	wire  [7:0] demux_out0_data;                    // demux:out0_data -> mux:in0_data
	wire        demux_out0_ready;                   // mux:in0_ready -> demux:out0_ready
	wire        demux_out0_channel;                 // demux:out0_channel -> mux:in0_channel
	wire        demux_out0_startofpacket;           // demux:out0_startofpacket -> mux:in0_startofpacket
	wire        demux_out0_endofpacket;             // demux:out0_endofpacket -> mux:in0_endofpacket
	wire        mgmt_demux_out1_valid;              // mgmt_demux:out1_valid -> rst_chan_adap0:in_valid
	wire        mgmt_demux_out1_data;               // mgmt_demux:out1_data -> rst_chan_adap0:in_data
	wire        mgmt_demux_out1_ready;              // rst_chan_adap0:in_ready -> mgmt_demux:out1_ready
	wire        mgmt_demux_out1_channel;            // mgmt_demux:out1_channel -> rst_chan_adap0:in_channel
	wire        rst_chan_adap0_out_valid;           // rst_chan_adap0:out_valid -> mgmt_reset_0:mgmt_valid
	wire        rst_chan_adap0_out_data;            // rst_chan_adap0:out_data -> mgmt_reset_0:mgmt_data
	wire        rst_chan_adap0_out_ready;           // mgmt_reset_0:mgmt_ready -> rst_chan_adap0:out_ready
	wire        mgmt_reset_0_reset_source_reset;    // mgmt_reset_0:agent_reset -> mgmt_rst_synch_0:reset_in0
	wire        demux_out1_valid;                   // demux:out1_valid -> h2t0_fifo:in_valid
	wire  [7:0] demux_out1_data;                    // demux:out1_data -> h2t0_fifo:in_data
	wire        demux_out1_ready;                   // h2t0_fifo:in_ready -> demux:out1_ready
	wire        demux_out1_channel;                 // demux:out1_channel -> h2t0_fifo:in_channel
	wire        demux_out1_startofpacket;           // demux:out1_startofpacket -> h2t0_fifo:in_startofpacket
	wire        demux_out1_endofpacket;             // demux:out1_endofpacket -> h2t0_fifo:in_endofpacket
	wire        t2h0_fifo_out_valid;                // t2h0_fifo:out_valid -> mux:in1_valid
	wire  [7:0] t2h0_fifo_out_data;                 // t2h0_fifo:out_data -> mux:in1_data
	wire        t2h0_fifo_out_ready;                // mux:in1_ready -> t2h0_fifo:out_ready
	wire  [0:0] t2h0_fifo_out_channel;              // t2h0_fifo:out_channel -> mux:in1_channel
	wire        t2h0_fifo_out_startofpacket;        // t2h0_fifo:out_startofpacket -> mux:in1_startofpacket
	wire        t2h0_fifo_out_endofpacket;          // t2h0_fifo:out_endofpacket -> mux:in1_endofpacket

	alt_sld_fab_alt_sld_fab_stfabric_demux demux (
		.clk                (clk_clk),                            //   clk.clk
		.reset_n            (~reset_reset),                       // reset.reset_n
		.in_data            (h2t_channel_adap_out_data),          //    in.data
		.in_valid           (h2t_channel_adap_out_valid),         //      .valid
		.in_ready           (h2t_channel_adap_out_ready),         //      .ready
		.in_startofpacket   (h2t_channel_adap_out_startofpacket), //      .startofpacket
		.in_endofpacket     (h2t_channel_adap_out_endofpacket),   //      .endofpacket
		.in_channel         (h2t_channel_adap_out_channel),       //      .channel
		.out0_data          (demux_out0_data),                    //  out0.data
		.out0_valid         (demux_out0_valid),                   //      .valid
		.out0_ready         (demux_out0_ready),                   //      .ready
		.out0_startofpacket (demux_out0_startofpacket),           //      .startofpacket
		.out0_endofpacket   (demux_out0_endofpacket),             //      .endofpacket
		.out0_channel       (demux_out0_channel),                 //      .channel
		.out1_data          (demux_out1_data),                    //  out1.data
		.out1_valid         (demux_out1_valid),                   //      .valid
		.out1_ready         (demux_out1_ready),                   //      .ready
		.out1_startofpacket (demux_out1_startofpacket),           //      .startofpacket
		.out1_endofpacket   (demux_out1_endofpacket),             //      .endofpacket
		.out1_channel       (demux_out1_channel)                  //      .channel
	);

	alt_sld_fab_alt_sld_fab_stfabric_mux mux (
		.clk               (clk_clk),                     //   clk.clk
		.reset_n           (~reset_reset),                // reset.reset_n
		.out_data          (mux_out_data),                //   out.data
		.out_valid         (mux_out_valid),               //      .valid
		.out_ready         (mux_out_ready),               //      .ready
		.out_startofpacket (mux_out_startofpacket),       //      .startofpacket
		.out_endofpacket   (mux_out_endofpacket),         //      .endofpacket
		.out_channel       (mux_out_channel),             //      .channel
		.in0_data          (demux_out0_data),             //   in0.data
		.in0_valid         (demux_out0_valid),            //      .valid
		.in0_ready         (demux_out0_ready),            //      .ready
		.in0_startofpacket (demux_out0_startofpacket),    //      .startofpacket
		.in0_endofpacket   (demux_out0_endofpacket),      //      .endofpacket
		.in0_channel       (demux_out0_channel),          //      .channel
		.in1_data          (t2h0_fifo_out_data),          //   in1.data
		.in1_valid         (t2h0_fifo_out_valid),         //      .valid
		.in1_ready         (t2h0_fifo_out_ready),         //      .ready
		.in1_startofpacket (t2h0_fifo_out_startofpacket), //      .startofpacket
		.in1_endofpacket   (t2h0_fifo_out_endofpacket),   //      .endofpacket
		.in1_channel       (t2h0_fifo_out_channel)        //      .channel
	);

	alt_sld_fab_alt_sld_fab_stfabric_mgmt_demux mgmt_demux (
		.clk          (clk_clk),                       //   clk.clk
		.reset_n      (~reset_reset),                  // reset.reset_n
		.in_data      (mgmt_channel_adap_out_data),    //    in.data
		.in_valid     (mgmt_channel_adap_out_valid),   //      .valid
		.in_ready     (mgmt_channel_adap_out_ready),   //      .ready
		.in_channel   (mgmt_channel_adap_out_channel), //      .channel
		.out0_data    (mgmt_demux_out0_data),          //  out0.data
		.out0_valid   (mgmt_demux_out0_valid),         //      .valid
		.out0_ready   (mgmt_demux_out0_ready),         //      .ready
		.out0_channel (mgmt_demux_out0_channel),       //      .channel
		.out1_data    (mgmt_demux_out1_data),          //  out1.data
		.out1_valid   (mgmt_demux_out1_valid),         //      .valid
		.out1_ready   (mgmt_demux_out1_ready),         //      .ready
		.out1_channel (mgmt_demux_out1_channel)        //      .channel
	);

	alt_sld_fab_alt_sld_fab_stfabric_mgmt_demux_port_adap mgmt_demux_port_adap (
		.clk        (clk_clk),                 //   clk.clk
		.reset_n    (~reset_reset),            // reset.reset_n
		.in_data    (mgmt_demux_out0_data),    //    in.data
		.in_valid   (mgmt_demux_out0_valid),   //      .valid
		.in_ready   (mgmt_demux_out0_ready),   //      .ready
		.in_channel (mgmt_demux_out0_channel), //      .channel
		.out_data   (),                        //   out.data
		.out_valid  (),                        //      .valid
		.out_ready  (1'b1)                     //      .ready
	);

	alt_sld_fab_alt_sld_fab_stfabric_h2t_channel_adap h2t_channel_adap (
		.clk               (clk_clk),                            //   clk.clk
		.reset_n           (~reset_reset),                       // reset.reset_n
		.in_data           (h2t_data),                           //    in.data
		.in_valid          (h2t_valid),                          //      .valid
		.in_ready          (h2t_ready),                          //      .ready
		.in_startofpacket  (h2t_startofpacket),                  //      .startofpacket
		.in_endofpacket    (h2t_endofpacket),                    //      .endofpacket
		.in_channel        (h2t_channel),                        //      .channel
		.out_data          (h2t_channel_adap_out_data),          //   out.data
		.out_valid         (h2t_channel_adap_out_valid),         //      .valid
		.out_ready         (h2t_channel_adap_out_ready),         //      .ready
		.out_startofpacket (h2t_channel_adap_out_startofpacket), //      .startofpacket
		.out_endofpacket   (h2t_channel_adap_out_endofpacket),   //      .endofpacket
		.out_channel       (h2t_channel_adap_out_channel)        //      .channel
	);

	alt_sld_fab_alt_sld_fab_stfabric_t2h_channel_adap t2h_channel_adap (
		.clk               (clk_clk),               //   clk.clk
		.reset_n           (~reset_reset),          // reset.reset_n
		.in_data           (mux_out_data),          //    in.data
		.in_valid          (mux_out_valid),         //      .valid
		.in_ready          (mux_out_ready),         //      .ready
		.in_startofpacket  (mux_out_startofpacket), //      .startofpacket
		.in_endofpacket    (mux_out_endofpacket),   //      .endofpacket
		.in_channel        (mux_out_channel),       //      .channel
		.out_data          (t2h_data),              //   out.data
		.out_valid         (t2h_valid),             //      .valid
		.out_ready         (t2h_ready),             //      .ready
		.out_startofpacket (t2h_startofpacket),     //      .startofpacket
		.out_endofpacket   (t2h_endofpacket),       //      .endofpacket
		.out_channel       (t2h_channel)            //      .channel
	);

	alt_sld_fab_alt_sld_fab_stfabric_mgmt_channel_adap mgmt_channel_adap (
		.clk         (clk_clk),                       //   clk.clk
		.reset_n     (~reset_reset),                  // reset.reset_n
		.in_data     (mgmt_time_adap_out_data),       //    in.data
		.in_valid    (mgmt_time_adap_out_valid),      //      .valid
		.in_ready    (mgmt_time_adap_out_ready),      //      .ready
		.in_channel  (mgmt_time_adap_out_channel),    //      .channel
		.out_data    (mgmt_channel_adap_out_data),    //   out.data
		.out_valid   (mgmt_channel_adap_out_valid),   //      .valid
		.out_ready   (mgmt_channel_adap_out_ready),   //      .ready
		.out_channel (mgmt_channel_adap_out_channel)  //      .channel
	);

	alt_sld_fab_alt_sld_fab_stfabric_mgmt_time_adap mgmt_time_adap (
		.clk         (clk_clk),                    //   clk.clk
		.reset_n     (~reset_reset),               // reset.reset_n
		.in_data     (mgmt_data),                  //    in.data
		.in_valid    (mgmt_valid),                 //      .valid
		.in_channel  (mgmt_channel),               //      .channel
		.out_data    (mgmt_time_adap_out_data),    //   out.data
		.out_valid   (mgmt_time_adap_out_valid),   //      .valid
		.out_ready   (mgmt_time_adap_out_ready),   //      .ready
		.out_channel (mgmt_time_adap_out_channel)  //      .channel
	);

	alt_sld_fab_alt_sld_fab_stfabric_mgmt_demux_port_adap rst_chan_adap0 (
		.clk        (clk_clk),                  //   clk.clk
		.reset_n    (~reset_reset),             // reset.reset_n
		.in_data    (mgmt_demux_out1_data),     //    in.data
		.in_valid   (mgmt_demux_out1_valid),    //      .valid
		.in_ready   (mgmt_demux_out1_ready),    //      .ready
		.in_channel (mgmt_demux_out1_channel),  //      .channel
		.out_data   (rst_chan_adap0_out_data),  //   out.data
		.out_valid  (rst_chan_adap0_out_valid), //      .valid
		.out_ready  (rst_chan_adap0_out_ready)  //      .ready
	);

	altera_mgmt_reset mgmt_reset_0 (
		.clk         (clk_clk),                         //          clk.clk
		.reset       (reset_reset),                     //        reset.reset
		.mgmt_data   (rst_chan_adap0_out_data),         //         mgmt.data
		.mgmt_valid  (rst_chan_adap0_out_valid),        //             .valid
		.mgmt_ready  (rst_chan_adap0_out_ready),        //             .ready
		.agent_reset (mgmt_reset_0_reset_source_reset)  // reset_source.reset
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) mgmt_rst_synch_0 (
		.reset_in0      (mgmt_reset_0_reset_source_reset), // reset_in0.reset
		.clk            (clk_0_clk),                       //       clk.clk
		.reset_out      (reset_0_reset),                   // reset_out.reset
		.reset_req      (),                                // (terminated)
		.reset_req_in0  (1'b0),                            // (terminated)
		.reset_in1      (1'b0),                            // (terminated)
		.reset_req_in1  (1'b0),                            // (terminated)
		.reset_in2      (1'b0),                            // (terminated)
		.reset_req_in2  (1'b0),                            // (terminated)
		.reset_in3      (1'b0),                            // (terminated)
		.reset_req_in3  (1'b0),                            // (terminated)
		.reset_in4      (1'b0),                            // (terminated)
		.reset_req_in4  (1'b0),                            // (terminated)
		.reset_in5      (1'b0),                            // (terminated)
		.reset_req_in5  (1'b0),                            // (terminated)
		.reset_in6      (1'b0),                            // (terminated)
		.reset_req_in6  (1'b0),                            // (terminated)
		.reset_in7      (1'b0),                            // (terminated)
		.reset_req_in7  (1'b0),                            // (terminated)
		.reset_in8      (1'b0),                            // (terminated)
		.reset_req_in8  (1'b0),                            // (terminated)
		.reset_in9      (1'b0),                            // (terminated)
		.reset_req_in9  (1'b0),                            // (terminated)
		.reset_in10     (1'b0),                            // (terminated)
		.reset_req_in10 (1'b0),                            // (terminated)
		.reset_in11     (1'b0),                            // (terminated)
		.reset_req_in11 (1'b0),                            // (terminated)
		.reset_in12     (1'b0),                            // (terminated)
		.reset_req_in12 (1'b0),                            // (terminated)
		.reset_in13     (1'b0),                            // (terminated)
		.reset_req_in13 (1'b0),                            // (terminated)
		.reset_in14     (1'b0),                            // (terminated)
		.reset_req_in14 (1'b0),                            // (terminated)
		.reset_in15     (1'b0),                            // (terminated)
		.reset_req_in15 (1'b0)                             // (terminated)
	);

	altera_avalon_dc_fifo #(
		.SYMBOLS_PER_BEAT   (1),
		.BITS_PER_SYMBOL    (8),
		.FIFO_DEPTH         (16),
		.CHANNEL_WIDTH      (1),
		.ERROR_WIDTH        (0),
		.USE_PACKETS        (1),
		.USE_IN_FILL_LEVEL  (0),
		.USE_OUT_FILL_LEVEL (0),
		.WR_SYNC_DEPTH      (3),
		.RD_SYNC_DEPTH      (3)
	) h2t0_fifo (
		.in_clk            (clk_clk),                              //        in_clk.clk
		.in_reset_n        (~reset_reset),                         //  in_clk_reset.reset_n
		.out_clk           (clk_0_clk),                            //       out_clk.clk
		.out_reset_n       (~reset_0_reset),                       // out_clk_reset.reset_n
		.in_data           (demux_out1_data),                      //            in.data
		.in_valid          (demux_out1_valid),                     //              .valid
		.in_ready          (demux_out1_ready),                     //              .ready
		.in_startofpacket  (demux_out1_startofpacket),             //              .startofpacket
		.in_endofpacket    (demux_out1_endofpacket),               //              .endofpacket
		.in_channel        (demux_out1_channel),                   //              .channel
		.out_data          (h2t_0_data),                           //           out.data
		.out_valid         (h2t_0_valid),                          //              .valid
		.out_ready         (h2t_0_ready),                          //              .ready
		.out_startofpacket (h2t_0_startofpacket),                  //              .startofpacket
		.out_endofpacket   (h2t_0_endofpacket),                    //              .endofpacket
		.out_channel       (h2t_0_channel),                        //              .channel
		.in_csr_address    (1'b0),                                 //   (terminated)
		.in_csr_read       (1'b0),                                 //   (terminated)
		.in_csr_write      (1'b0),                                 //   (terminated)
		.in_csr_readdata   (),                                     //   (terminated)
		.in_csr_writedata  (32'b00000000000000000000000000000000), //   (terminated)
		.out_csr_address   (1'b0),                                 //   (terminated)
		.out_csr_read      (1'b0),                                 //   (terminated)
		.out_csr_write     (1'b0),                                 //   (terminated)
		.out_csr_readdata  (),                                     //   (terminated)
		.out_csr_writedata (32'b00000000000000000000000000000000), //   (terminated)
		.in_empty          (1'b0),                                 //   (terminated)
		.out_empty         (),                                     //   (terminated)
		.in_error          (1'b0),                                 //   (terminated)
		.out_error         (),                                     //   (terminated)
		.space_avail_data  ()                                      //   (terminated)
	);

	altera_avalon_dc_fifo #(
		.SYMBOLS_PER_BEAT   (1),
		.BITS_PER_SYMBOL    (8),
		.FIFO_DEPTH         (16),
		.CHANNEL_WIDTH      (1),
		.ERROR_WIDTH        (0),
		.USE_PACKETS        (1),
		.USE_IN_FILL_LEVEL  (0),
		.USE_OUT_FILL_LEVEL (0),
		.WR_SYNC_DEPTH      (3),
		.RD_SYNC_DEPTH      (3)
	) t2h0_fifo (
		.in_clk            (clk_0_clk),                            //        in_clk.clk
		.in_reset_n        (~reset_0_reset),                       //  in_clk_reset.reset_n
		.out_clk           (clk_clk),                              //       out_clk.clk
		.out_reset_n       (~reset_reset),                         // out_clk_reset.reset_n
		.in_data           (t2h_0_data),                           //            in.data
		.in_valid          (t2h_0_valid),                          //              .valid
		.in_ready          (t2h_0_ready),                          //              .ready
		.in_startofpacket  (t2h_0_startofpacket),                  //              .startofpacket
		.in_endofpacket    (t2h_0_endofpacket),                    //              .endofpacket
		.in_channel        (t2h_0_channel),                        //              .channel
		.out_data          (t2h0_fifo_out_data),                   //           out.data
		.out_valid         (t2h0_fifo_out_valid),                  //              .valid
		.out_ready         (t2h0_fifo_out_ready),                  //              .ready
		.out_startofpacket (t2h0_fifo_out_startofpacket),          //              .startofpacket
		.out_endofpacket   (t2h0_fifo_out_endofpacket),            //              .endofpacket
		.out_channel       (t2h0_fifo_out_channel),                //              .channel
		.in_csr_address    (1'b0),                                 //   (terminated)
		.in_csr_read       (1'b0),                                 //   (terminated)
		.in_csr_write      (1'b0),                                 //   (terminated)
		.in_csr_readdata   (),                                     //   (terminated)
		.in_csr_writedata  (32'b00000000000000000000000000000000), //   (terminated)
		.out_csr_address   (1'b0),                                 //   (terminated)
		.out_csr_read      (1'b0),                                 //   (terminated)
		.out_csr_write     (1'b0),                                 //   (terminated)
		.out_csr_readdata  (),                                     //   (terminated)
		.out_csr_writedata (32'b00000000000000000000000000000000), //   (terminated)
		.in_empty          (1'b0),                                 //   (terminated)
		.out_empty         (),                                     //   (terminated)
		.in_error          (1'b0),                                 //   (terminated)
		.out_error         (),                                     //   (terminated)
		.space_avail_data  ()                                      //   (terminated)
	);

endmodule
