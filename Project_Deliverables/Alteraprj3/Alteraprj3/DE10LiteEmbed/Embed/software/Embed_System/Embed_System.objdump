
Embed_System.elf:     file format elf32-littlenios2
Embed_System.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0400016c

Program Header:
    LOAD off    0x00001020 vaddr 0x09404020 paddr 0x04000000 align 2**12
         filesz 0x0000016c memsz 0x0000016c flags r-x
    LOAD off    0x0000216c vaddr 0x0400016c paddr 0x0400016c align 2**12
         filesz 0x00004fcc memsz 0x00004fcc flags r-x
    LOAD off    0x00007138 vaddr 0x04005138 paddr 0x04005cc8 align 2**12
         filesz 0x00000b90 memsz 0x00000b90 flags rw-
    LOAD off    0x00008858 vaddr 0x04006858 paddr 0x04006858 align 2**12
         filesz 0x00000000 memsz 0x000001e4 flags rw-
    LOAD off    0x00008000 vaddr 0x09404000 paddr 0x09404000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  09404000  09404000  00008000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000016c  09404020  04000000  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00004ca4  0400016c  0400016c  0000216c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000328  04004e10  04004e10  00006e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000b90  04005138  04005cc8  00007138  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000001e4  04006858  04006858  00008858  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  04006a3c  04006a3c  00008020  2**0
                  CONTENTS
  7 .onchip_flash_0_data 00000000  09200000  09200000  00008020  2**0
                  CONTENTS
  8 .onchip_ram   00000000  0940418c  0940418c  00008020  2**0
                  CONTENTS
  9 .comment      00000023  00000000  00000000  00008020  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00000b30  00000000  00000000  00008048  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00019eb5  00000000  00000000  00008b78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000071cc  00000000  00000000  00022a2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000075ac  00000000  00000000  00029bf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000015ac  00000000  00000000  000311a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002e91  00000000  00000000  00032754  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00006523  00000000  00000000  000355e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000060  00000000  00000000  0003bb08  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00000848  00000000  00000000  0003bb68  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000003  00000000  00000000  0003f069  2**0
                  CONTENTS, READONLY
 20 .cpu          0000000c  00000000  00000000  0003f06c  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  0003f078  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  0003f079  2**0
                  CONTENTS, READONLY
 23 .sysid_hash   00000004  00000000  00000000  0003f07a  2**0
                  CONTENTS, READONLY
 24 .sysid_base   00000004  00000000  00000000  0003f07e  2**0
                  CONTENTS, READONLY
 25 .sysid_time   00000004  00000000  00000000  0003f082  2**0
                  CONTENTS, READONLY
 26 .stderr_dev   00000009  00000000  00000000  0003f086  2**0
                  CONTENTS, READONLY
 27 .stdin_dev    00000009  00000000  00000000  0003f08f  2**0
                  CONTENTS, READONLY
 28 .stdout_dev   00000009  00000000  00000000  0003f098  2**0
                  CONTENTS, READONLY
 29 .sopc_system_name 00000005  00000000  00000000  0003f0a1  2**0
                  CONTENTS, READONLY
 30 .quartus_project_dir 00000021  00000000  00000000  0003f0a6  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000aac65  00000000  00000000  0003f0c7  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
09404000 l    d  .entry	00000000 .entry
09404020 l    d  .exceptions	00000000 .exceptions
0400016c l    d  .text	00000000 .text
04004e10 l    d  .rodata	00000000 .rodata
04005138 l    d  .rwdata	00000000 .rwdata
04006858 l    d  .bss	00000000 .bss
04006a3c l    d  .sdram	00000000 .sdram
09200000 l    d  .onchip_flash_0_data	00000000 .onchip_flash_0_data
0940418c l    d  .onchip_ram	00000000 .onchip_ram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Embed_System_bsp//obj/HAL/src/crt0.o
040001b4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 alarm_util.c
00000000 l    df *ABS*	00000000 delay_wait.c
00000000 l    df *ABS*	00000000 error_loop.c
00000000 l    df *ABS*	00000000 jtag_uart_util.c
00000000 l    df *ABS*	00000000 led_util.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
04005274 l     O .rwdata	0000002c jtag_uart
04005238 l     O .rwdata	0000003c modular_adc_0
04005138 l     O .rwdata	00000100 onchip_flash_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
04000e28 l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_modular_adc.c
04000eac l     F .text	00000064 alt_adc_irq
00000000 l    df *ABS*	00000000 altera_onchip_flash.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
04001cc4 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
04001f14 l     F .text	00000074 alt_open_fd.constprop.0
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 impure.c
04005448 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
04002fb0 l     F .text	00000008 __fp_unlock
04002fc4 l     F .text	0000019c __sinit.part.1
04003160 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 refill.c
040043fc l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
04005cc4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
040068a0 g     O .bss	00000004 alt_instruction_exception_handler
04001010 g     F .text	00000020 adc_stop
04004990 g     F .text	00000054 _isatty_r
040009ec g     F .text	00000050 alt_main
04000384 g     F .text	00000014 my_alarm_callback
0400693c g     O .bss	00000100 alt_irq
040049e4 g     F .text	00000060 _lseek_r
04005cc8 g       *ABS*	00000000 __flash_rwdata_start
04006a3c g       *ABS*	00000000 __alt_heap_start
04004718 g     F .text	0000005c __sseek
04003300 g     F .text	00000010 __sinit
040028dc g     F .text	00000140 __swbuf_r
04003168 g     F .text	00000068 __sfmoreglue
04004c34 g     F .text	00000004 __malloc_unlock
04006878 g     O .bss	00000004 LAST_DELAY
04006880 g     O .bss	00000004 PRINT_STDIO_WRAP_COUNT
040032e8 g     F .text	00000018 _cleanup
04002198 g     F .text	00000008 altera_nios2_gen2_irq_init
09404000 g     F .entry	0000001c __reset
040010cc g     F .text	00000018 adc_interrupt_disable
04000000 g       *ABS*	00000000 __flash_exceptions_start
04004934 g     F .text	0000005c _fstat_r
040068a4 g     O .bss	00000004 errno
04002830 g     F .text	00000014 __srget
04004694 g     F .text	00000008 __seofread
04000f48 g     F .text	00000064 altera_modular_adc_init
04006884 g     O .bss	00000001 LED_MASK
0400688c g     O .bss	00000004 alt_argv
0400dc74 g       *ABS*	00000000 _gp
04006885 g     O .bss	00000001 LED_STATE
04001ad8 g     F .text	00000060 alt_onchip_flash_poll_for_status_write_passed
040052a0 g     O .rwdata	00000180 alt_fd_list
04002398 g     F .text	00000070 _getc_r
04002408 g     F .text	00000088 getc
04001d38 g     F .text	00000078 alt_find_dev
0400250c g     F .text	00000148 memcpy
09200000 g       *ABS*	00000000 __alt_mem_onchip_flash_0_data
04002fb8 g     F .text	0000000c _cleanup_r
04001058 g     F .text	00000014 adc_set_mode_run_continuously
04001f88 g     F .text	00000074 alt_io_redirect
040022ec g     F .text	00000074 alt_exception_cause_generated_bad_addr
04000d80 g     F .text	00000074 altera_avalon_jtag_uart_read
04000790 g     F .text	00000064 .hidden __udivsi3
04004b30 g     F .text	00000084 isatty
04001a78 g     F .text	00000060 alt_onchip_flash_poll_for_status_erase_passed
0400229c g     F .text	00000050 alt_icache_flush
040068b0 g     O .bss	00000004 __malloc_top_pad
04005c88 g     O .rwdata	00000008 altera_onchip_flash_list
040045ec g     F .text	00000054 _sbrk_r
04004a44 g     F .text	00000060 _read_r
04005c80 g     O .rwdata	00000008 altera_modular_adc_list
04001c6c g     F .text	00000040 alt_dcache_flush
040011d4 g     F .text	00000178 alt_onchip_flash_erase_block
04005c90 g     O .rwdata	00000004 alt_max_fd
04004830 g     F .text	000000f0 _fclose_r
04002f80 g     F .text	00000030 fflush
040068ac g     O .bss	00000004 __malloc_max_sbrked_mem
04004bb4 g     F .text	0000007c lseek
04005cb4 g     O .rwdata	00000004 _global_impure_ptr
04006a3c g       *ABS*	00000000 __bss_end
04001eac g     F .text	00000068 alt_iic_isr_register
040008cc g     F .text	0000000c alt_getchar
04000bf8 g     F .text	000000f4 alt_tick
040068dc g     O .bss	00000018 ALARM_100MS
04001108 g     F .text	00000014 adc_wait_for_interrupt
04003320 g     F .text	00000018 __fp_lock_all
04001e94 g     F .text	00000018 alt_ic_irq_enabled
04000bc4 g     F .text	00000034 alt_alarm_stop
0400689c g     O .bss	00000004 alt_irq_active
0400059c g     F .text	00000014 set_delay_mode_100ms
094040fc g     F .exceptions	00000064 alt_irq_handler
04005420 g     O .rwdata	00000028 alt_dev_null
040068f4 g     O .bss	00000018 ALARM_1MS
040005c4 g     F .text	00000014 set_delay_mode_1ms
04001040 g     F .text	00000018 adc_set_mode_run_once
04001cac g     F .text	00000018 alt_dcache_flush_all
04005cc8 g       *ABS*	00000000 __ram_rwdata_end
0400687c g     O .bss	00000004 PRINT_STDIO_MASK
04005c94 g     O .rwdata	00000008 alt_dev_list
04004d4c g     F .text	000000c4 write
04002654 g     F .text	000000a0 _putc_r
040005d8 g     F .text	00000008 set_delay_mode_none
04005138 g       *ABS*	00000000 __ram_rodata_end
04004ab8 g     F .text	00000078 fstat
040005e0 g     F .text	00000024 error_loop
04001030 g     F .text	00000010 adc_start
040007f4 g     F .text	00000058 .hidden __umodsi3
04006a3c g       *ABS*	00000000 end
04006858 g     O .bss	00000008 ALARM_250MS_CONTEXT
09404160 g     F .exceptions	0000002c alt_instruction_exception_entry
08000000 g       *ABS*	00000000 __alt_stack_pointer
04000e64 g     F .text	00000048 alt_avalon_timer_sc_init
04000df4 g     F .text	00000034 altera_avalon_jtag_uart_write
04003310 g     F .text	00000004 __sfp_lock_acquire
0400118c g     F .text	00000048 alt_onchip_flash_get_info
04003474 g     F .text	00000310 _free_r
04000a3c g     F .text	0000017c alt_printf
040027bc g     F .text	00000074 __srget_r
04002b88 g     F .text	00000180 __call_exitprocs
04005cbc g     O .rwdata	00000004 __malloc_sbrk_base
0400016c g     F .text	0000004c _start
04006898 g     O .bss	00000004 _alt_tick_rate
04006894 g     O .bss	00000004 _alt_nticks
04004c38 g     F .text	000000c8 read
04000d0c g     F .text	00000054 alt_sys_init
04006860 g     O .bss	00000008 ALARM_100MS_CONTEXT
04005138 g       *ABS*	00000000 __ram_rwdata_start
04004e10 g       *ABS*	00000000 __ram_rodata_start
040068b4 g     O .bss	00000028 __malloc_current_mallinfo
04000d60 g     F .text	00000010 altera_avalon_jtag_uart_read_fd
0400224c g     F .text	00000050 alt_get_fd
0400690c g     O .bss	00000018 ALARM_250MS
04001b38 g     F .text	00000078 alt_busy_sleep
040047dc g     F .text	00000054 _close_r
040004cc g     F .text	000000bc delay_wait
04002490 g     F .text	0000007c memcmp
04006a3c g       *ABS*	00000000 __alt_stack_base
04002a34 g     F .text	00000154 __swsetup_r
040010b8 g     F .text	00000014 adc_interrupt_enable
0400111c g     F .text	00000070 alt_onchip_flash_read
040031d0 g     F .text	00000118 __sfp
0400586c g     O .rwdata	00000408 __malloc_av_
0400331c g     F .text	00000004 __sinit_lock_release
04004640 g     F .text	00000054 __sread
040021a0 g     F .text	000000ac alt_find_file
04001ccc g     F .text	0000006c alt_dev_llist_insert
04004c30 g     F .text	00000004 __malloc_lock
04004d00 g     F .text	0000004c sbrk
04002f24 g     F .text	0000005c _fflush_r
04005ca8 g     O .rwdata	00000008 alt_flash_dev_list
04006858 g       *ABS*	00000000 __bss_start
040042d4 g     F .text	00000128 memset
040001b8 g     F .text	000001cc main
04006888 g     O .bss	00000004 alt_envp
040068a8 g     O .bss	00000004 __malloc_max_total_mem
04000d70 g     F .text	00000010 altera_avalon_jtag_uart_write_fd
04002a1c g     F .text	00000018 __swbuf
04000f10 g     F .text	00000038 alt_adc_word_read
04006868 g     O .bss	00000008 ALARM_10MS_CONTEXT
04004774 g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
04004920 g     F .text	00000014 fclose
04003ac8 g     F .text	0000080c _malloc_r
04005ca4 g     O .rwdata	00000004 alt_errno
04001a1c g     F .text	0000005c alt_onchip_flash_poll_for_status_to_go_idle
04003784 g     F .text	000000c4 _fwalk
040026f4 g     F .text	000000c8 putc
04000698 g     F .text	00000084 .hidden __divsi3
04003350 g     F .text	00000124 _malloc_trim_r
04001778 g     F .text	000002a4 altera_onchip_flash_init
04004e10 g       *ABS*	00000000 __flash_rodata_start
04000cec g     F .text	00000020 alt_irq_init
04002174 g     F .text	00000024 alt_release_fd
0400477c g     F .text	00000060 _write_r
04000660 g     F .text	00000038 update_led
04005cb8 g     O .rwdata	00000004 _impure_ptr
04006890 g     O .bss	00000004 alt_argc
04002d08 g     F .text	0000021c __sflush_r
04004418 g     F .text	000001d4 __srefill_r
04000588 g     F .text	00000014 set_delay_mode_250ms
09404020 g       .exceptions	00000000 alt_irq_entry
04003338 g     F .text	00000018 __fp_unlock_all
04005c9c g     O .rwdata	00000008 alt_fs_list
0400134c g     F .text	00000220 alt_onchip_flash_write_block
09404020 g       *ABS*	00000000 __ram_exceptions_start
04001e20 g     F .text	00000004 alt_ic_isr_register
04000604 g     F .text	0000005c print_binary_count_stdio
04005cc8 g       *ABS*	00000000 _edata
0400156c g     F .text	0000020c alt_onchip_flash_write
04006a3c g       *ABS*	00000000 _end
04001db0 g     F .text	00000050 alt_flash_open_dev
04006924 g     O .bss	00000018 ALARM_10MS
040010f8 g     F .text	00000010 adc_interrupt_asserted
0940418c g       *ABS*	00000000 __ram_exceptions_end
04001e5c g     F .text	00000038 alt_ic_irq_disable
0400469c g     F .text	0000007c __swrite
04005cc0 g     O .rwdata	00000004 __malloc_trim_threshold
040010e4 g     F .text	00000014 adc_clear_interrupt_status
04002360 g     F .text	00000038 exit
04003848 g     F .text	000000c4 _fwalk_reent
04001e00 g     F .text	00000014 alt_flash_close_dev
0400071c g     F .text	00000074 .hidden __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
09404020 g     F .exceptions	00000000 alt_exception
04003314 g     F .text	00000004 __sfp_lock_release
04000000 g       *ABS*	00000000 __alt_mem_sdram
09404000 g       *ABS*	00000000 __alt_mem_onchip_ram
04001008 g     F .text	00000008 altera_modular_adc_open
04004aa4 g     F .text	00000014 _exit
0400084c g     F .text	00000080 alt_alarm_start
0400390c g     F .text	000001bc __smakebuf_r
04002844 g     F .text	00000098 strlen
04001ffc g     F .text	00000178 open
04000398 g     F .text	00000134 alarm_init
04000bb8 g     F .text	0000000c alt_putchar
0400106c g     F .text	0000004c adc_recalibrate
04006870 g     O .bss	00000008 ALARM_1MS_CONTEXT
04001e14 g     F .text	0000000c alt_icache_flush_all
04005cb0 g     O .rwdata	00000004 alt_priority_mask
04001e24 g     F .text	00000038 alt_ic_irq_enable
040005b0 g     F .text	00000014 set_delay_mode_10ms
04005c74 g     O .rwdata	00000001 DELAY_MODE
04005c78 g     O .rwdata	00000008 alt_alarm_list
04001bb0 g     F .text	000000bc close
040008d8 g     F .text	00000114 alt_load
04000fac g     F .text	0000005c alt_adc_register_callback
04003318 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

09404000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 9404000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
 9404004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 9404008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 940400c:	00bffd16 	blt	zero,r2,9404004 <__ram_exceptions_end+0xfffffe78>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 9404010:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 9404014:	08405b14 	ori	at,at,364
    jmp r1
 9404018:	0800683a 	jmp	at
 940401c:	00000000 	call	0 <__alt_mem_sdram-0x4000000>

Disassembly of section .exceptions:

09404020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 9404020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 9404024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 9404028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 940402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 9404030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 9404034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 9404038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 940403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 9404040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 9404044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 9404048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 940404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 9404050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 9404054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 9404058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 940405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 9404060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 9404064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 9404068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 940406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 9404070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 9404074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 9404078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 940407c:	10000326 	beq	r2,zero,940408c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 9404080:	20000226 	beq	r4,zero,940408c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 9404084:	94040fc0 	call	94040fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 9404088:	00000706 	br	94040a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 940408c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 9404090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 9404094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 9404098:	94041600 	call	9404160 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 940409c:	1000021e 	bne	r2,zero,94040a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 94040a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 94040a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 94040a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 94040ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 94040b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 94040b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 94040b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 94040bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 94040c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 94040c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 94040c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 94040cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 94040d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 94040d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 94040d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 94040dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 94040e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 94040e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 94040e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 94040ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 94040f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 94040f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 94040f8:	ef80083a 	eret

094040fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 94040fc:	defffe04 	addi	sp,sp,-8
 9404100:	dfc00115 	stw	ra,4(sp)
 9404104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 9404108:	000b313a 	rdctl	r5,ipending
 940410c:	04010034 	movhi	r16,1024
 9404110:	841a4f04 	addi	r16,r16,26940
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 9404114:	2880004c 	andi	r2,r5,1

  active = alt_irq_pending ();

  do
  {
    i = 0;
 9404118:	0007883a 	mov	r3,zero
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 940411c:	1000051e 	bne	r2,zero,9404134 <alt_irq_handler+0x38>
 9404120:	00800044 	movi	r2,1
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 9404124:	1085883a 	add	r2,r2,r2
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 9404128:	2888703a 	and	r4,r5,r2
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
      i++;
 940412c:	18c00044 	addi	r3,r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 9404130:	203ffc26 	beq	r4,zero,9404124 <__ram_exceptions_end+0xffffff98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 9404134:	180690fa 	slli	r3,r3,3
 9404138:	80c7883a 	add	r3,r16,r3
 940413c:	18800017 	ldw	r2,0(r3)
 9404140:	19000117 	ldw	r4,4(r3)
 9404144:	103ee83a 	callr	r2
 9404148:	000b313a 	rdctl	r5,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 940414c:	283ff11e 	bne	r5,zero,9404114 <__ram_exceptions_end+0xffffff88>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 9404150:	dfc00117 	ldw	ra,4(sp)
 9404154:	dc000017 	ldw	r16,0(sp)
 9404158:	dec00204 	addi	sp,sp,8
 940415c:	f800283a 	ret

09404160 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 9404160:	200b883a 	mov	r5,r4
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 9404164:	000931fa 	rdctl	r4,exception
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 9404168:	000d333a 	rdctl	r6,badaddr
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 940416c:	d0a30b17 	ldw	r2,-29652(gp)
 9404170:	10000326 	beq	r2,zero,9404180 <alt_instruction_exception_entry+0x20>
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 9404174:	21001f0c 	andi	r4,r4,124
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 9404178:	2008d0ba 	srli	r4,r4,2
 940417c:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 9404180:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
 9404184:	0005883a 	mov	r2,zero
 9404188:	f800283a 	ret

Disassembly of section .text:

0400016c <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 400016c:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 4000170:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 4000174:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 4000178:	00bffd16 	blt	zero,r2,4000170 <__ram_exceptions_end+0xfabfbfe4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 400017c:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 4000180:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 4000184:	06810034 	movhi	gp,1024
    ori gp, gp, %lo(_gp)
 4000188:	d6b71d14 	ori	gp,gp,56436
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 400018c:	00810034 	movhi	r2,1024
    ori r2, r2, %lo(__bss_start)
 4000190:	109a1614 	ori	r2,r2,26712

    movhi r3, %hi(__bss_end)
 4000194:	00c10034 	movhi	r3,1024
    ori r3, r3, %lo(__bss_end)
 4000198:	18da8f14 	ori	r3,r3,27196

    beq r2, r3, 1f
 400019c:	10c00326 	beq	r2,r3,40001ac <_start+0x40>

0:
    stw zero, (r2)
 40001a0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 40001a4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 40001a8:	10fffd36 	bltu	r2,r3,40001a0 <__ram_exceptions_end+0xfabfc014>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 40001ac:	40008d80 	call	40008d8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 40001b0:	40009ec0 	call	40009ec <alt_main>

040001b4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 40001b4:	003fff06 	br	40001b4 <__ram_exceptions_end+0xfabfc028>

040001b8 <main>:
  alt_u8 binary_count;
  char input;
  int dir;
  
  // announce that we're running on STDOUT
  alt_printf("\nled_control program starting...\n\n");
 40001b8:	01010034 	movhi	r4,1024

#define MAX_COUNT 0xFF  //use a 8-bit maximum count value since we have a 8-bit LED PIO

// the main() application routine
int main(void)
{
 40001bc:	defffb04 	addi	sp,sp,-20
  alt_u8 binary_count;
  char input;
  int dir;
  
  // announce that we're running on STDOUT
  alt_printf("\nled_control program starting...\n\n");
 40001c0:	21138404 	addi	r4,r4,19984

#define MAX_COUNT 0xFF  //use a 8-bit maximum count value since we have a 8-bit LED PIO

// the main() application routine
int main(void)
{
 40001c4:	dfc00415 	stw	ra,16(sp)
 40001c8:	dcc00315 	stw	r19,12(sp)
 40001cc:	dc800215 	stw	r18,8(sp)
 40001d0:	dc400115 	stw	r17,4(sp)
 40001d4:	dc000015 	stw	r16,0(sp)
  alt_u8 binary_count;
  char input;
  int dir;
  
  // announce that we're running on STDOUT
  alt_printf("\nled_control program starting...\n\n");
 40001d8:	4000a3c0 	call	4000a3c <alt_printf>
  alt_printf ("CONGRATULATIONS!  You have successfully compiled a Nios II project!\n");
 40001dc:	01010034 	movhi	r4,1024
 40001e0:	21138d04 	addi	r4,r4,20020
        alt_printf(" -  counting up by 5\n");
    }
    else {
        dir = 1;
        binary_count = MAX_COUNT;
        alt_printf("INVALID ENTRY");
 40001e4:	04c03fc4 	movi	r19,255
  char input;
  int dir;
  
  // announce that we're running on STDOUT
  alt_printf("\nled_control program starting...\n\n");
  alt_printf ("CONGRATULATIONS!  You have successfully compiled a Nios II project!\n");
 40001e8:	4000a3c0 	call	4000a3c <alt_printf>

  // initialize some peripherals and helper routines
  alarm_init();           // see src/alarm_util.c
 40001ec:	40003980 	call	4000398 <alarm_init>
  
  // start an infinite loop

  while(1) {

    alt_printf("\nPress 'u' to count up\n");
 40001f0:	01010034 	movhi	r4,1024
 40001f4:	21139f04 	addi	r4,r4,20092
 40001f8:	4000a3c0 	call	4000a3c <alt_printf>
    alt_printf("Press 'd' to count down\n");
 40001fc:	01010034 	movhi	r4,1024
 4000200:	2113a504 	addi	r4,r4,20116
 4000204:	4000a3c0 	call	4000a3c <alt_printf>
    alt_printf("Press '3' to count by threes\n");
 4000208:	01010034 	movhi	r4,1024
 400020c:	2113ac04 	addi	r4,r4,20144
 4000210:	4000a3c0 	call	4000a3c <alt_printf>
    alt_printf("Press 't' to count down by ten\n");
 4000214:	01010034 	movhi	r4,1024
 4000218:	2113b404 	addi	r4,r4,20176
 400021c:	4000a3c0 	call	4000a3c <alt_printf>
    alt_printf("Press '5' to count up by 5\n");
 4000220:	01010034 	movhi	r4,1024
 4000224:	2113bc04 	addi	r4,r4,20208
 4000228:	4000a3c0 	call	4000a3c <alt_printf>
    input = alt_getchar();
 400022c:	40008cc0 	call	40008cc <alt_getchar>
 4000230:	1021883a 	mov	r16,r2
    alt_getchar();
    alt_printf("You selected: '%c'\n",input);
 4000234:	84003fcc 	andi	r16,r16,255
    alt_printf("Press 'd' to count down\n");
    alt_printf("Press '3' to count by threes\n");
    alt_printf("Press 't' to count down by ten\n");
    alt_printf("Press '5' to count up by 5\n");
    input = alt_getchar();
    alt_getchar();
 4000238:	40008cc0 	call	40008cc <alt_getchar>
    alt_printf("You selected: '%c'\n",input);
 400023c:	8400201c 	xori	r16,r16,128
 4000240:	01010034 	movhi	r4,1024
 4000244:	843fe004 	addi	r16,r16,-128
 4000248:	2113c304 	addi	r4,r4,20236
 400024c:	800b883a 	mov	r5,r16
 4000250:	4000a3c0 	call	4000a3c <alt_printf>
	if (input == 'u') {
 4000254:	00801d44 	movi	r2,117
 4000258:	80802e26 	beq	r16,r2,4000314 <main+0x15c>
        dir = 1;
    	binary_count = 0;
        alt_printf(" -  counting up by 1\n");
    }
    else if (input == 'd') {
 400025c:	00801904 	movi	r2,100
 4000260:	80803326 	beq	r16,r2,4000330 <main+0x178>
        dir = -1;
    	binary_count = MAX_COUNT;
        alt_printf(" -  counting down by 1\n");
    }
    else if (input == '3') {
 4000264:	00800cc4 	movi	r2,51
 4000268:	80803826 	beq	r16,r2,400034c <main+0x194>
        dir = 3;
    	binary_count = 0;
        alt_printf(" -  counting up by 3\n");
    }
    else if( input == 't'){
 400026c:	00801d04 	movi	r2,116
 4000270:	80803d26 	beq	r16,r2,4000368 <main+0x1b0>
    	dir = -10 ;
    	binary_count = MAX_COUNT ;
        alt_printf(" -  counting down by 10\n");
    }

    else if( input == '5'){
 4000274:	00800d44 	movi	r2,53
 4000278:	80801f26 	beq	r16,r2,40002f8 <main+0x140>
        alt_printf(" -  counting up by 5\n");
    }
    else {
        dir = 1;
        binary_count = MAX_COUNT;
        alt_printf("INVALID ENTRY");
 400027c:	01010034 	movhi	r4,1024
 4000280:	2113e704 	addi	r4,r4,20380
 4000284:	04403fc4 	movi	r17,255
    	dir = 5 ;
    	binary_count = 0 ;
        alt_printf(" -  counting up by 5\n");
    }
    else {
        dir = 1;
 4000288:	04800044 	movi	r18,1
        binary_count = MAX_COUNT;
        alt_printf("INVALID ENTRY");
 400028c:	4000a3c0 	call	4000a3c <alt_printf>
    	binary_count = 0 ;
        alt_printf(" -  counting up by 5\n");
    }
    else {
        dir = 1;
        binary_count = MAX_COUNT;
 4000290:	043fffc4 	movi	r16,-1
        
    // initialize the line wrap count variable
    PRINT_STDIO_WRAP_COUNT = 0;

    // print the binary count out the STDOUT
    print_binary_count_stdio(binary_count);         // see src/jtag_uart_util.c
 4000294:	8809883a 	mov	r4,r17
        binary_count = MAX_COUNT;
        alt_printf("INVALID ENTRY");
    }
        
    // initialize the line wrap count variable
    PRINT_STDIO_WRAP_COUNT = 0;
 4000298:	d0230315 	stw	zero,-29684(gp)

    // print the binary count out the STDOUT
    print_binary_count_stdio(binary_count);         // see src/jtag_uart_util.c
 400029c:	40006040 	call	4000604 <print_binary_count_stdio>

    // update the green led display with the binary count
    update_led(binary_count);                      // see src/led_util.c
 40002a0:	8809883a 	mov	r4,r17
 40002a4:	40006600 	call	4000660 <update_led>

    // wait for the delay period
    delay_wait();                                   // see src/delay_wait.c
 40002a8:	40004cc0 	call	40004cc <delay_wait>

    // count until we reach all the maximum count
    while( (binary_count < MAX_COUNT && dir > 0) || (binary_count > 0 && dir < 0) )
 40002ac:	00000406 	br	40002c0 <main+0x108>
    {
        // increment the binary counter
        binary_count= binary_count + dir;

        // print the binary count out the STDOUT
        print_binary_count_stdio(binary_count);         // see src/jtag_uart_util.c
 40002b0:	40006040 	call	4000604 <print_binary_count_stdio>
            
        // update the green led display with the binary count
        update_led(binary_count);                      // see src/led_util.c
 40002b4:	8809883a 	mov	r4,r17
 40002b8:	40006600 	call	4000660 <update_led>
    
        // wait for the delay period
        delay_wait();                                   // see src/delay_wait.c
 40002bc:	40004cc0 	call	40004cc <delay_wait>
 40002c0:	9405883a 	add	r2,r18,r16
    {
        // increment the binary counter
        binary_count= binary_count + dir;

        // print the binary count out the STDOUT
        print_binary_count_stdio(binary_count);         // see src/jtag_uart_util.c
 40002c4:	14403fcc 	andi	r17,r2,255

    // wait for the delay period
    delay_wait();                                   // see src/delay_wait.c

    // count until we reach all the maximum count
    while( (binary_count < MAX_COUNT && dir > 0) || (binary_count > 0 && dir < 0) )
 40002c8:	80c03fcc 	andi	r3,r16,255
    {
        // increment the binary counter
        binary_count= binary_count + dir;

        // print the binary count out the STDOUT
        print_binary_count_stdio(binary_count);         // see src/jtag_uart_util.c
 40002cc:	8809883a 	mov	r4,r17
 40002d0:	1021883a 	mov	r16,r2

    // wait for the delay period
    delay_wait();                                   // see src/delay_wait.c

    // count until we reach all the maximum count
    while( (binary_count < MAX_COUNT && dir > 0) || (binary_count > 0 && dir < 0) )
 40002d4:	1cc00226 	beq	r3,r19,40002e0 <main+0x128>
 40002d8:	04bff516 	blt	zero,r18,40002b0 <__ram_exceptions_end+0xfabfc124>
 40002dc:	18000126 	beq	r3,zero,40002e4 <main+0x12c>
 40002e0:	903ff316 	blt	r18,zero,40002b0 <__ram_exceptions_end+0xfabfc124>
    
        // wait for the delay period
        delay_wait();                                   // see src/delay_wait.c
    }
    // announce loop completion on STDOUT and the UART
    alt_printf("\n\n LED control program completed its loop ...\n\n");
 40002e4:	01010034 	movhi	r4,1024
 40002e8:	2113eb04 	addi	r4,r4,20396
 40002ec:	4000a3c0 	call	4000a3c <alt_printf>

    // wait for the delay period
    delay_wait();                                   // see src/delay_wait.c
 40002f0:	40004cc0 	call	40004cc <delay_wait>
        
  }
 40002f4:	003fbe06 	br	40001f0 <__ram_exceptions_end+0xfabfc064>
    }

    else if( input == '5'){
    	dir = 5 ;
    	binary_count = 0 ;
        alt_printf(" -  counting up by 5\n");
 40002f8:	01010034 	movhi	r4,1024
 40002fc:	2113e104 	addi	r4,r4,20356
 4000300:	0023883a 	mov	r17,zero
    	binary_count = MAX_COUNT ;
        alt_printf(" -  counting down by 10\n");
    }

    else if( input == '5'){
    	dir = 5 ;
 4000304:	04800144 	movi	r18,5
    	binary_count = 0 ;
        alt_printf(" -  counting up by 5\n");
 4000308:	4000a3c0 	call	4000a3c <alt_printf>
        alt_printf(" -  counting down by 10\n");
    }

    else if( input == '5'){
    	dir = 5 ;
    	binary_count = 0 ;
 400030c:	0021883a 	mov	r16,zero
 4000310:	003fe006 	br	4000294 <__ram_exceptions_end+0xfabfc108>
    alt_getchar();
    alt_printf("You selected: '%c'\n",input);
	if (input == 'u') {
        dir = 1;
    	binary_count = 0;
        alt_printf(" -  counting up by 1\n");
 4000314:	01010034 	movhi	r4,1024
 4000318:	2113c804 	addi	r4,r4,20256
 400031c:	0023883a 	mov	r17,zero
    alt_printf("Press '5' to count up by 5\n");
    input = alt_getchar();
    alt_getchar();
    alt_printf("You selected: '%c'\n",input);
	if (input == 'u') {
        dir = 1;
 4000320:	04800044 	movi	r18,1
    	binary_count = 0;
        alt_printf(" -  counting up by 1\n");
 4000324:	4000a3c0 	call	4000a3c <alt_printf>
    input = alt_getchar();
    alt_getchar();
    alt_printf("You selected: '%c'\n",input);
	if (input == 'u') {
        dir = 1;
    	binary_count = 0;
 4000328:	0021883a 	mov	r16,zero
 400032c:	003fd906 	br	4000294 <__ram_exceptions_end+0xfabfc108>
        alt_printf(" -  counting up by 1\n");
    }
    else if (input == 'd') {
        dir = -1;
    	binary_count = MAX_COUNT;
        alt_printf(" -  counting down by 1\n");
 4000330:	01010034 	movhi	r4,1024
 4000334:	2113ce04 	addi	r4,r4,20280
        dir = 1;
    	binary_count = 0;
        alt_printf(" -  counting up by 1\n");
    }
    else if (input == 'd') {
        dir = -1;
 4000338:	04bfffc4 	movi	r18,-1
 400033c:	04403fc4 	movi	r17,255
    	binary_count = MAX_COUNT;
        alt_printf(" -  counting down by 1\n");
 4000340:	4000a3c0 	call	4000a3c <alt_printf>
    	binary_count = 0;
        alt_printf(" -  counting up by 1\n");
    }
    else if (input == 'd') {
        dir = -1;
    	binary_count = MAX_COUNT;
 4000344:	9021883a 	mov	r16,r18
 4000348:	003fd206 	br	4000294 <__ram_exceptions_end+0xfabfc108>
        alt_printf(" -  counting down by 1\n");
    }
    else if (input == '3') {
        dir = 3;
    	binary_count = 0;
        alt_printf(" -  counting up by 3\n");
 400034c:	01010034 	movhi	r4,1024
 4000350:	2113d404 	addi	r4,r4,20304
 4000354:	0023883a 	mov	r17,zero
        dir = -1;
    	binary_count = MAX_COUNT;
        alt_printf(" -  counting down by 1\n");
    }
    else if (input == '3') {
        dir = 3;
 4000358:	048000c4 	movi	r18,3
    	binary_count = 0;
        alt_printf(" -  counting up by 3\n");
 400035c:	4000a3c0 	call	4000a3c <alt_printf>
    	binary_count = MAX_COUNT;
        alt_printf(" -  counting down by 1\n");
    }
    else if (input == '3') {
        dir = 3;
    	binary_count = 0;
 4000360:	0021883a 	mov	r16,zero
 4000364:	003fcb06 	br	4000294 <__ram_exceptions_end+0xfabfc108>
        alt_printf(" -  counting up by 3\n");
    }
    else if( input == 't'){
    	dir = -10 ;
    	binary_count = MAX_COUNT ;
        alt_printf(" -  counting down by 10\n");
 4000368:	01010034 	movhi	r4,1024
 400036c:	2113da04 	addi	r4,r4,20328
 4000370:	04403fc4 	movi	r17,255
        dir = 3;
    	binary_count = 0;
        alt_printf(" -  counting up by 3\n");
    }
    else if( input == 't'){
    	dir = -10 ;
 4000374:	04bffd84 	movi	r18,-10
    	binary_count = MAX_COUNT ;
        alt_printf(" -  counting down by 10\n");
 4000378:	4000a3c0 	call	4000a3c <alt_printf>
    	binary_count = 0;
        alt_printf(" -  counting up by 3\n");
    }
    else if( input == 't'){
    	dir = -10 ;
    	binary_count = MAX_COUNT ;
 400037c:	043fffc4 	movi	r16,-1
 4000380:	003fc406 	br	4000294 <__ram_exceptions_end+0xfabfc108>

04000384 <my_alarm_callback>:

    // cast the context pointer into our alarm context structure pointer
    my_alarm_context = context;

    // increment the alarm count
    my_alarm_context->alarm_count++;
 4000384:	20800117 	ldw	r2,4(r4)
 4000388:	10800044 	addi	r2,r2,1
 400038c:	20800115 	stw	r2,4(r4)

    // return the timeout value for this alarm
    return (my_alarm_context->alarm_timeout);
 4000390:	20800017 	ldw	r2,0(r4)
}
 4000394:	f800283a 	ret

04000398 <alarm_init>:
void alarm_init(void)
{
    int return_result;

    // initialize the context structure for the 250ms alarm and start it running
    ALARM_250MS_CONTEXT.alarm_timeout = alt_ticks_per_second()/4;
 4000398:	d0a30917 	ldw	r2,-29660(gp)
    ALARM_250MS_CONTEXT.alarm_count = 0;
    return_result = alt_alarm_start (
 400039c:	01810034 	movhi	r6,1024
 40003a0:	01010034 	movhi	r4,1024
void alarm_init(void)
{
    int return_result;

    // initialize the context structure for the 250ms alarm and start it running
    ALARM_250MS_CONTEXT.alarm_timeout = alt_ticks_per_second()/4;
 40003a4:	1004d0ba 	srli	r2,r2,2
alt_alarm ALARM_1MS;
MY_ALARM_STRUCT ALARM_1MS_CONTEXT;

// main() should call this initialization routine when it starts to get the alarms running
void alarm_init(void)
{
 40003a8:	deffff04 	addi	sp,sp,-4
    int return_result;

    // initialize the context structure for the 250ms alarm and start it running
    ALARM_250MS_CONTEXT.alarm_timeout = alt_ticks_per_second()/4;
    ALARM_250MS_CONTEXT.alarm_count = 0;
    return_result = alt_alarm_start (
 40003ac:	3180e104 	addi	r6,r6,900
void alarm_init(void)
{
    int return_result;

    // initialize the context structure for the 250ms alarm and start it running
    ALARM_250MS_CONTEXT.alarm_timeout = alt_ticks_per_second()/4;
 40003b0:	d0a2f915 	stw	r2,-29724(gp)
    ALARM_250MS_CONTEXT.alarm_count = 0;
 40003b4:	d022fa15 	stw	zero,-29720(gp)
    return_result = alt_alarm_start (
 40003b8:	d162f917 	ldw	r5,-29724(gp)
 40003bc:	211a4304 	addi	r4,r4,26892
 40003c0:	d1e2f904 	addi	r7,gp,-29724
alt_alarm ALARM_1MS;
MY_ALARM_STRUCT ALARM_1MS_CONTEXT;

// main() should call this initialization routine when it starts to get the alarms running
void alarm_init(void)
{
 40003c4:	dfc00015 	stw	ra,0(sp)
    int return_result;

    // initialize the context structure for the 250ms alarm and start it running
    ALARM_250MS_CONTEXT.alarm_timeout = alt_ticks_per_second()/4;
    ALARM_250MS_CONTEXT.alarm_count = 0;
    return_result = alt_alarm_start (
 40003c8:	400084c0 	call	400084c <alt_alarm_start>
                        ALARM_250MS_CONTEXT.alarm_timeout,  //alt_u32 nticks
                        my_alarm_callback,                  //alt_u32 (*callback) (void* context)
                        (void*)(&ALARM_250MS_CONTEXT)       //void* context
                    );

    if(return_result)
 40003cc:	10003a1e 	bne	r2,zero,40004b8 <alarm_init+0x120>
        alt_printf("\n\nError when starting 250ms alarm...\n");
        error_loop();
    }

    // initialize the context structure for the 100ms alarm and start it running
    ALARM_100MS_CONTEXT.alarm_timeout = alt_ticks_per_second()/10;
 40003d0:	d1230917 	ldw	r4,-29660(gp)
 40003d4:	01400284 	movi	r5,10
 40003d8:	40007900 	call	4000790 <__udivsi3>
 40003dc:	d0a2fb15 	stw	r2,-29716(gp)
    ALARM_100MS_CONTEXT.alarm_count = 0;
 40003e0:	d022fc15 	stw	zero,-29712(gp)
    return_result = alt_alarm_start (
 40003e4:	d162fb17 	ldw	r5,-29716(gp)
 40003e8:	01810034 	movhi	r6,1024
 40003ec:	01010034 	movhi	r4,1024
 40003f0:	3180e104 	addi	r6,r6,900
 40003f4:	211a3704 	addi	r4,r4,26844
 40003f8:	d1e2fb04 	addi	r7,gp,-29716
 40003fc:	400084c0 	call	400084c <alt_alarm_start>
                        ALARM_100MS_CONTEXT.alarm_timeout,  //alt_u32 nticks
                        my_alarm_callback,                  //alt_u32 (*callback) (void* context)
                        (void*)(&ALARM_100MS_CONTEXT)       //void* context
                    );

    if(return_result)
 4000400:	1000281e 	bne	r2,zero,40004a4 <alarm_init+0x10c>
        alt_printf("\n\nError when starting 100ms alarm...\n");
        error_loop();
    }

    // initialize the context structure for the 10ms alarm and start it running
    ALARM_10MS_CONTEXT.alarm_timeout = alt_ticks_per_second()/100;
 4000404:	d1230917 	ldw	r4,-29660(gp)
 4000408:	01401904 	movi	r5,100
 400040c:	40007900 	call	4000790 <__udivsi3>
 4000410:	d0a2fd15 	stw	r2,-29708(gp)
    ALARM_10MS_CONTEXT.alarm_count = 0;
 4000414:	d022fe15 	stw	zero,-29704(gp)
    return_result = alt_alarm_start (
 4000418:	d162fd17 	ldw	r5,-29708(gp)
 400041c:	01810034 	movhi	r6,1024
 4000420:	01010034 	movhi	r4,1024
 4000424:	3180e104 	addi	r6,r6,900
 4000428:	211a4904 	addi	r4,r4,26916
 400042c:	d1e2fd04 	addi	r7,gp,-29708
 4000430:	400084c0 	call	400084c <alt_alarm_start>
                        ALARM_10MS_CONTEXT.alarm_timeout,   //alt_u32 nticks
                        my_alarm_callback,                  //alt_u32 (*callback) (void* context)
                        (void*)(&ALARM_10MS_CONTEXT)        //void* context
                    );

    if(return_result)
 4000434:	1000161e 	bne	r2,zero,4000490 <alarm_init+0xf8>
        alt_printf("\n\nError when starting 10ms alarm...\n");
        error_loop();
    }

    // initialize the context structure for the 1ms alarm and start it running
    ALARM_1MS_CONTEXT.alarm_timeout = alt_ticks_per_second()/1000;
 4000438:	d1230917 	ldw	r4,-29660(gp)
 400043c:	0140fa04 	movi	r5,1000
 4000440:	40007900 	call	4000790 <__udivsi3>
 4000444:	d0a2ff15 	stw	r2,-29700(gp)
    ALARM_1MS_CONTEXT.alarm_count = 0;
 4000448:	d0230015 	stw	zero,-29696(gp)
    return_result = alt_alarm_start (
 400044c:	d162ff17 	ldw	r5,-29700(gp)
 4000450:	01810034 	movhi	r6,1024
 4000454:	01010034 	movhi	r4,1024
 4000458:	3180e104 	addi	r6,r6,900
 400045c:	211a3d04 	addi	r4,r4,26868
 4000460:	d1e2ff04 	addi	r7,gp,-29700
 4000464:	400084c0 	call	400084c <alt_alarm_start>
                        ALARM_1MS_CONTEXT.alarm_timeout,    //alt_u32 nticks
                        my_alarm_callback,                  //alt_u32 (*callback) (void* context)
                        (void*)(&ALARM_1MS_CONTEXT)         //void* context
                    );

    if(return_result)
 4000468:	1000031e 	bne	r2,zero,4000478 <alarm_init+0xe0>
    {
        alt_printf("\n\nError when starting 1ms alarm...\n");
        error_loop();
    }

}
 400046c:	dfc00017 	ldw	ra,0(sp)
 4000470:	dec00104 	addi	sp,sp,4
 4000474:	f800283a 	ret
                        (void*)(&ALARM_1MS_CONTEXT)         //void* context
                    );

    if(return_result)
    {
        alt_printf("\n\nError when starting 1ms alarm...\n");
 4000478:	01010034 	movhi	r4,1024
 400047c:	21141504 	addi	r4,r4,20564
 4000480:	4000a3c0 	call	4000a3c <alt_printf>
        error_loop();
    }

}
 4000484:	dfc00017 	ldw	ra,0(sp)
 4000488:	dec00104 	addi	sp,sp,4
                    );

    if(return_result)
    {
        alt_printf("\n\nError when starting 1ms alarm...\n");
        error_loop();
 400048c:	40005e01 	jmpi	40005e0 <error_loop>
                        (void*)(&ALARM_10MS_CONTEXT)        //void* context
                    );

    if(return_result)
    {
        alt_printf("\n\nError when starting 10ms alarm...\n");
 4000490:	01010034 	movhi	r4,1024
 4000494:	21140b04 	addi	r4,r4,20524
 4000498:	4000a3c0 	call	4000a3c <alt_printf>
        error_loop();
 400049c:	40005e00 	call	40005e0 <error_loop>
 40004a0:	003fe506 	br	4000438 <__ram_exceptions_end+0xfabfc2ac>
                        (void*)(&ALARM_100MS_CONTEXT)       //void* context
                    );

    if(return_result)
    {
        alt_printf("\n\nError when starting 100ms alarm...\n");
 40004a4:	01010034 	movhi	r4,1024
 40004a8:	21140104 	addi	r4,r4,20484
 40004ac:	4000a3c0 	call	4000a3c <alt_printf>
        error_loop();
 40004b0:	40005e00 	call	40005e0 <error_loop>
 40004b4:	003fd306 	br	4000404 <__ram_exceptions_end+0xfabfc278>
                        (void*)(&ALARM_250MS_CONTEXT)       //void* context
                    );

    if(return_result)
    {
        alt_printf("\n\nError when starting 250ms alarm...\n");
 40004b8:	01010034 	movhi	r4,1024
 40004bc:	2113f704 	addi	r4,r4,20444
 40004c0:	4000a3c0 	call	4000a3c <alt_printf>
        error_loop();
 40004c4:	40005e00 	call	40005e0 <error_loop>
 40004c8:	003fc106 	br	40003d0 <__ram_exceptions_end+0xfabfc244>

040004cc <delay_wait>:
volatile alt_u32 LAST_DELAY = 0;
volatile alt_u8  DELAY_MODE = DELAY_MODE_100MS;

// the main() loop can call this routine to delay based on the current delay mode
void delay_wait(void)
{
 40004cc:	defffa04 	addi	sp,sp,-24
 40004d0:	dc000015 	stw	r16,0(sp)
    alt_u32 this_delay = LAST_DELAY;
 40004d4:	d4230117 	ldw	r16,-29692(gp)

    if(DELAY_MODE != DELAY_MODE_NONE)
 40004d8:	d0a00003 	ldbu	r2,-32768(gp)
volatile alt_u32 LAST_DELAY = 0;
volatile alt_u8  DELAY_MODE = DELAY_MODE_100MS;

// the main() loop can call this routine to delay based on the current delay mode
void delay_wait(void)
{
 40004dc:	dfc00515 	stw	ra,20(sp)
 40004e0:	dd000415 	stw	r20,16(sp)
 40004e4:	dcc00315 	stw	r19,12(sp)
 40004e8:	dc800215 	stw	r18,8(sp)
 40004ec:	dc400115 	stw	r17,4(sp)
    alt_u32 this_delay = LAST_DELAY;

    if(DELAY_MODE != DELAY_MODE_NONE)
 40004f0:	10803fcc 	andi	r2,r2,255
 40004f4:	10001326 	beq	r2,zero,4000544 <delay_wait+0x78>
    {
        do      // wait until we see the proper delay count increment
        {
            switch(DELAY_MODE)
 40004f8:	04400084 	movi	r17,2
 40004fc:	048000c4 	movi	r18,3
 4000500:	05000104 	movi	r20,4
 4000504:	04c00044 	movi	r19,1
 4000508:	00000506 	br	4000520 <delay_wait+0x54>
 400050c:	14801c26 	beq	r2,r18,4000580 <delay_wait+0xb4>
 4000510:	1500161e 	bne	r2,r20,400056c <delay_wait+0xa0>
            {
                case(DELAY_MODE_250MS):
                    this_delay = ALARM_250MS_CONTEXT.alarm_count;
 4000514:	d422fa17 	ldw	r16,-29720(gp)
                    break;
                default:
                    alt_printf("Error: invalid delay mode detected...\n");
                    error_loop();
            }
        } while(LAST_DELAY == this_delay);
 4000518:	d0a30117 	ldw	r2,-29692(gp)
 400051c:	8080081e 	bne	r16,r2,4000540 <delay_wait+0x74>

    if(DELAY_MODE != DELAY_MODE_NONE)
    {
        do      // wait until we see the proper delay count increment
        {
            switch(DELAY_MODE)
 4000520:	d0a00003 	ldbu	r2,-32768(gp)
 4000524:	10803fcc 	andi	r2,r2,255
 4000528:	14400e26 	beq	r2,r17,4000564 <delay_wait+0x98>
 400052c:	88bff736 	bltu	r17,r2,400050c <__ram_exceptions_end+0xfabfc380>
 4000530:	14c00e1e 	bne	r2,r19,400056c <delay_wait+0xa0>
                    break;
                case(DELAY_MODE_10MS):
                    this_delay = ALARM_10MS_CONTEXT.alarm_count;
                    break;
                case(DELAY_MODE_1MS):
                    this_delay = ALARM_1MS_CONTEXT.alarm_count;
 4000534:	d4230017 	ldw	r16,-29696(gp)
                    break;
                default:
                    alt_printf("Error: invalid delay mode detected...\n");
                    error_loop();
            }
        } while(LAST_DELAY == this_delay);
 4000538:	d0a30117 	ldw	r2,-29692(gp)
 400053c:	80bff826 	beq	r16,r2,4000520 <__ram_exceptions_end+0xfabfc394>

        LAST_DELAY = this_delay;
 4000540:	d4230115 	stw	r16,-29692(gp)
    }

}
 4000544:	dfc00517 	ldw	ra,20(sp)
 4000548:	dd000417 	ldw	r20,16(sp)
 400054c:	dcc00317 	ldw	r19,12(sp)
 4000550:	dc800217 	ldw	r18,8(sp)
 4000554:	dc400117 	ldw	r17,4(sp)
 4000558:	dc000017 	ldw	r16,0(sp)
 400055c:	dec00604 	addi	sp,sp,24
 4000560:	f800283a 	ret
                    break;
                case(DELAY_MODE_100MS):
                    this_delay = ALARM_100MS_CONTEXT.alarm_count;
                    break;
                case(DELAY_MODE_10MS):
                    this_delay = ALARM_10MS_CONTEXT.alarm_count;
 4000564:	d422fe17 	ldw	r16,-29704(gp)
                    break;
 4000568:	003feb06 	br	4000518 <__ram_exceptions_end+0xfabfc38c>
                case(DELAY_MODE_1MS):
                    this_delay = ALARM_1MS_CONTEXT.alarm_count;
                    break;
                default:
                    alt_printf("Error: invalid delay mode detected...\n");
 400056c:	01010034 	movhi	r4,1024
 4000570:	21141e04 	addi	r4,r4,20600
 4000574:	4000a3c0 	call	4000a3c <alt_printf>
                    error_loop();
 4000578:	40005e00 	call	40005e0 <error_loop>
 400057c:	003fe606 	br	4000518 <__ram_exceptions_end+0xfabfc38c>
            {
                case(DELAY_MODE_250MS):
                    this_delay = ALARM_250MS_CONTEXT.alarm_count;
                    break;
                case(DELAY_MODE_100MS):
                    this_delay = ALARM_100MS_CONTEXT.alarm_count;
 4000580:	d422fc17 	ldw	r16,-29712(gp)
                    break;
 4000584:	003fe406 	br	4000518 <__ram_exceptions_end+0xfabfc38c>

04000588 <set_delay_mode_250ms>:
}

// these are convenience routines for setting the delay modes
void set_delay_mode_250ms(void)
{
   DELAY_MODE = DELAY_MODE_250MS;
 4000588:	00800104 	movi	r2,4
 400058c:	d0a00005 	stb	r2,-32768(gp)
   LAST_DELAY = ALARM_250MS_CONTEXT.alarm_count;
 4000590:	d0a2fa17 	ldw	r2,-29720(gp)
 4000594:	d0a30115 	stw	r2,-29692(gp)
 4000598:	f800283a 	ret

0400059c <set_delay_mode_100ms>:
}

void set_delay_mode_100ms(void)
{
   DELAY_MODE = DELAY_MODE_100MS;
 400059c:	008000c4 	movi	r2,3
 40005a0:	d0a00005 	stb	r2,-32768(gp)
   LAST_DELAY = ALARM_100MS_CONTEXT.alarm_count;
 40005a4:	d0a2fc17 	ldw	r2,-29712(gp)
 40005a8:	d0a30115 	stw	r2,-29692(gp)
 40005ac:	f800283a 	ret

040005b0 <set_delay_mode_10ms>:
}

void set_delay_mode_10ms(void)
{
   DELAY_MODE = DELAY_MODE_10MS;
 40005b0:	00800084 	movi	r2,2
 40005b4:	d0a00005 	stb	r2,-32768(gp)
   LAST_DELAY = ALARM_10MS_CONTEXT.alarm_count;
 40005b8:	d0a2fe17 	ldw	r2,-29704(gp)
 40005bc:	d0a30115 	stw	r2,-29692(gp)
 40005c0:	f800283a 	ret

040005c4 <set_delay_mode_1ms>:
}

void set_delay_mode_1ms(void)
{
   DELAY_MODE = DELAY_MODE_1MS;
 40005c4:	00800044 	movi	r2,1
 40005c8:	d0a00005 	stb	r2,-32768(gp)
   LAST_DELAY = ALARM_1MS_CONTEXT.alarm_count;
 40005cc:	d0a30017 	ldw	r2,-29696(gp)
 40005d0:	d0a30115 	stw	r2,-29692(gp)
 40005d4:	f800283a 	ret

040005d8 <set_delay_mode_none>:
}

void set_delay_mode_none(void)
{
   DELAY_MODE = DELAY_MODE_NONE;
 40005d8:	d0200005 	stb	zero,-32768(gp)
 40005dc:	f800283a 	ret

040005e0 <error_loop>:

// any non-recoverable errors that are detected in the application can jump to here
void error_loop(void)
{
    // indicate that we got into the error loop
    alt_printf("\nError loop entered...\n");
 40005e0:	01010034 	movhi	r4,1024

#include "../inc/main_includes.h"

// any non-recoverable errors that are detected in the application can jump to here
void error_loop(void)
{
 40005e4:	deffff04 	addi	sp,sp,-4
    // indicate that we got into the error loop
    alt_printf("\nError loop entered...\n");
 40005e8:	21142804 	addi	r4,r4,20640

#include "../inc/main_includes.h"

// any non-recoverable errors that are detected in the application can jump to here
void error_loop(void)
{
 40005ec:	dfc00015 	stw	ra,0(sp)
    // indicate that we got into the error loop
    alt_printf("\nError loop entered...\n");
 40005f0:	4000a3c0 	call	4000a3c <alt_printf>
    alt_printf("\nApplication halted...\n");
 40005f4:	01010034 	movhi	r4,1024
 40005f8:	21142e04 	addi	r4,r4,20664
 40005fc:	4000a3c0 	call	4000a3c <alt_printf>
 4000600:	003fff06 	br	4000600 <__ram_exceptions_end+0xfabfc474>

04000604 <print_binary_count_stdio>:

// this routine is called by the main() loop
void print_binary_count_stdio(alt_u16 binary_count)
{
    // print if we aren't masked off
    if(!PRINT_STDIO_MASK)
 4000604:	d0a30217 	ldw	r2,-29688(gp)
 4000608:	10000126 	beq	r2,zero,4000610 <print_binary_count_stdio+0xc>
        {
            alt_printf("\n");
            PRINT_STDIO_WRAP_COUNT = 0;
        }
    }
}
 400060c:	f800283a 	ret
 4000610:	200b883a 	mov	r5,r4
{
    // print if we aren't masked off
    if(!PRINT_STDIO_MASK)
    {
        // print the binary count
        alt_printf("0x%x ", binary_count);
 4000614:	01010034 	movhi	r4,1024
volatile int PRINT_STDIO_WRAP_COUNT = 0;
volatile int PRINT_STDIO_MASK = 0;

// this routine is called by the main() loop
void print_binary_count_stdio(alt_u16 binary_count)
{
 4000618:	deffff04 	addi	sp,sp,-4
    // print if we aren't masked off
    if(!PRINT_STDIO_MASK)
    {
        // print the binary count
        alt_printf("0x%x ", binary_count);
 400061c:	21143404 	addi	r4,r4,20688
 4000620:	297fffcc 	andi	r5,r5,65535
volatile int PRINT_STDIO_WRAP_COUNT = 0;
volatile int PRINT_STDIO_MASK = 0;

// this routine is called by the main() loop
void print_binary_count_stdio(alt_u16 binary_count)
{
 4000624:	dfc00015 	stw	ra,0(sp)
    // print if we aren't masked off
    if(!PRINT_STDIO_MASK)
    {
        // print the binary count
        alt_printf("0x%x ", binary_count);
 4000628:	4000a3c0 	call	4000a3c <alt_printf>

        // print a new line character after every 16 prints
        PRINT_STDIO_WRAP_COUNT++;
 400062c:	d0a30317 	ldw	r2,-29684(gp)
        if(PRINT_STDIO_WRAP_COUNT >= 16)
 4000630:	00c003c4 	movi	r3,15
    {
        // print the binary count
        alt_printf("0x%x ", binary_count);

        // print a new line character after every 16 prints
        PRINT_STDIO_WRAP_COUNT++;
 4000634:	10800044 	addi	r2,r2,1
 4000638:	d0a30315 	stw	r2,-29684(gp)
        if(PRINT_STDIO_WRAP_COUNT >= 16)
 400063c:	d0a30317 	ldw	r2,-29684(gp)
 4000640:	1880040e 	bge	r3,r2,4000654 <print_binary_count_stdio+0x50>
        {
            alt_printf("\n");
 4000644:	01010034 	movhi	r4,1024
 4000648:	21140a04 	addi	r4,r4,20520
 400064c:	4000a3c0 	call	4000a3c <alt_printf>
            PRINT_STDIO_WRAP_COUNT = 0;
 4000650:	d0230315 	stw	zero,-29684(gp)
        }
    }
}
 4000654:	dfc00017 	ldw	ra,0(sp)
 4000658:	dec00104 	addi	sp,sp,4
 400065c:	f800283a 	ret

04000660 <update_led>:
volatile alt_u8  LED_MASK = 0;

// convenience routine for updating the bank of leds
void update_led(alt_u8 display_value)
{
			display_value = ~display_value;
 4000660:	0108303a 	nor	r4,zero,r4
            LED_STATE = display_value & 0xFF;
 4000664:	d1230445 	stb	r4,-29679(gp)
            LED_STATE &= ~LED_MASK;
 4000668:	d0a30403 	ldbu	r2,-29680(gp)
 400066c:	d0e30443 	ldbu	r3,-29679(gp)
 4000670:	10803fcc 	andi	r2,r2,255
 4000674:	0084303a 	nor	r2,zero,r2
 4000678:	10c4703a 	and	r2,r2,r3
 400067c:	d0a30445 	stb	r2,-29679(gp)
            IOWR_ALTERA_AVALON_PIO_DATA(LED_PIO_BASE, LED_STATE);
 4000680:	d0a30443 	ldbu	r2,-29679(gp)
 4000684:	00c20034 	movhi	r3,2048
 4000688:	18c00c04 	addi	r3,r3,48
 400068c:	10803fcc 	andi	r2,r2,255
 4000690:	18800035 	stwio	r2,0(r3)
 4000694:	f800283a 	ret

04000698 <__divsi3>:
 4000698:	20001b16 	blt	r4,zero,4000708 <__divsi3+0x70>
 400069c:	000f883a 	mov	r7,zero
 40006a0:	28001616 	blt	r5,zero,40006fc <__divsi3+0x64>
 40006a4:	200d883a 	mov	r6,r4
 40006a8:	29001a2e 	bgeu	r5,r4,4000714 <__divsi3+0x7c>
 40006ac:	00800804 	movi	r2,32
 40006b0:	00c00044 	movi	r3,1
 40006b4:	00000106 	br	40006bc <__divsi3+0x24>
 40006b8:	10000d26 	beq	r2,zero,40006f0 <__divsi3+0x58>
 40006bc:	294b883a 	add	r5,r5,r5
 40006c0:	10bfffc4 	addi	r2,r2,-1
 40006c4:	18c7883a 	add	r3,r3,r3
 40006c8:	293ffb36 	bltu	r5,r4,40006b8 <__ram_exceptions_end+0xfabfc52c>
 40006cc:	0005883a 	mov	r2,zero
 40006d0:	18000726 	beq	r3,zero,40006f0 <__divsi3+0x58>
 40006d4:	0005883a 	mov	r2,zero
 40006d8:	31400236 	bltu	r6,r5,40006e4 <__divsi3+0x4c>
 40006dc:	314dc83a 	sub	r6,r6,r5
 40006e0:	10c4b03a 	or	r2,r2,r3
 40006e4:	1806d07a 	srli	r3,r3,1
 40006e8:	280ad07a 	srli	r5,r5,1
 40006ec:	183ffa1e 	bne	r3,zero,40006d8 <__ram_exceptions_end+0xfabfc54c>
 40006f0:	38000126 	beq	r7,zero,40006f8 <__divsi3+0x60>
 40006f4:	0085c83a 	sub	r2,zero,r2
 40006f8:	f800283a 	ret
 40006fc:	014bc83a 	sub	r5,zero,r5
 4000700:	39c0005c 	xori	r7,r7,1
 4000704:	003fe706 	br	40006a4 <__ram_exceptions_end+0xfabfc518>
 4000708:	0109c83a 	sub	r4,zero,r4
 400070c:	01c00044 	movi	r7,1
 4000710:	003fe306 	br	40006a0 <__ram_exceptions_end+0xfabfc514>
 4000714:	00c00044 	movi	r3,1
 4000718:	003fee06 	br	40006d4 <__ram_exceptions_end+0xfabfc548>

0400071c <__modsi3>:
 400071c:	20001716 	blt	r4,zero,400077c <__modsi3+0x60>
 4000720:	000f883a 	mov	r7,zero
 4000724:	2005883a 	mov	r2,r4
 4000728:	28001216 	blt	r5,zero,4000774 <__modsi3+0x58>
 400072c:	2900162e 	bgeu	r5,r4,4000788 <__modsi3+0x6c>
 4000730:	01800804 	movi	r6,32
 4000734:	00c00044 	movi	r3,1
 4000738:	00000106 	br	4000740 <__modsi3+0x24>
 400073c:	30000a26 	beq	r6,zero,4000768 <__modsi3+0x4c>
 4000740:	294b883a 	add	r5,r5,r5
 4000744:	31bfffc4 	addi	r6,r6,-1
 4000748:	18c7883a 	add	r3,r3,r3
 400074c:	293ffb36 	bltu	r5,r4,400073c <__ram_exceptions_end+0xfabfc5b0>
 4000750:	18000526 	beq	r3,zero,4000768 <__modsi3+0x4c>
 4000754:	1806d07a 	srli	r3,r3,1
 4000758:	11400136 	bltu	r2,r5,4000760 <__modsi3+0x44>
 400075c:	1145c83a 	sub	r2,r2,r5
 4000760:	280ad07a 	srli	r5,r5,1
 4000764:	183ffb1e 	bne	r3,zero,4000754 <__ram_exceptions_end+0xfabfc5c8>
 4000768:	38000126 	beq	r7,zero,4000770 <__modsi3+0x54>
 400076c:	0085c83a 	sub	r2,zero,r2
 4000770:	f800283a 	ret
 4000774:	014bc83a 	sub	r5,zero,r5
 4000778:	003fec06 	br	400072c <__ram_exceptions_end+0xfabfc5a0>
 400077c:	0109c83a 	sub	r4,zero,r4
 4000780:	01c00044 	movi	r7,1
 4000784:	003fe706 	br	4000724 <__ram_exceptions_end+0xfabfc598>
 4000788:	00c00044 	movi	r3,1
 400078c:	003ff106 	br	4000754 <__ram_exceptions_end+0xfabfc5c8>

04000790 <__udivsi3>:
 4000790:	200d883a 	mov	r6,r4
 4000794:	2900152e 	bgeu	r5,r4,40007ec <__udivsi3+0x5c>
 4000798:	28001416 	blt	r5,zero,40007ec <__udivsi3+0x5c>
 400079c:	00800804 	movi	r2,32
 40007a0:	00c00044 	movi	r3,1
 40007a4:	00000206 	br	40007b0 <__udivsi3+0x20>
 40007a8:	10000e26 	beq	r2,zero,40007e4 <__udivsi3+0x54>
 40007ac:	28000516 	blt	r5,zero,40007c4 <__udivsi3+0x34>
 40007b0:	294b883a 	add	r5,r5,r5
 40007b4:	10bfffc4 	addi	r2,r2,-1
 40007b8:	18c7883a 	add	r3,r3,r3
 40007bc:	293ffa36 	bltu	r5,r4,40007a8 <__ram_exceptions_end+0xfabfc61c>
 40007c0:	18000826 	beq	r3,zero,40007e4 <__udivsi3+0x54>
 40007c4:	0005883a 	mov	r2,zero
 40007c8:	31400236 	bltu	r6,r5,40007d4 <__udivsi3+0x44>
 40007cc:	314dc83a 	sub	r6,r6,r5
 40007d0:	10c4b03a 	or	r2,r2,r3
 40007d4:	1806d07a 	srli	r3,r3,1
 40007d8:	280ad07a 	srli	r5,r5,1
 40007dc:	183ffa1e 	bne	r3,zero,40007c8 <__ram_exceptions_end+0xfabfc63c>
 40007e0:	f800283a 	ret
 40007e4:	0005883a 	mov	r2,zero
 40007e8:	f800283a 	ret
 40007ec:	00c00044 	movi	r3,1
 40007f0:	003ff406 	br	40007c4 <__ram_exceptions_end+0xfabfc638>

040007f4 <__umodsi3>:
 40007f4:	2005883a 	mov	r2,r4
 40007f8:	2900122e 	bgeu	r5,r4,4000844 <__umodsi3+0x50>
 40007fc:	28001116 	blt	r5,zero,4000844 <__umodsi3+0x50>
 4000800:	01800804 	movi	r6,32
 4000804:	00c00044 	movi	r3,1
 4000808:	00000206 	br	4000814 <__umodsi3+0x20>
 400080c:	30000c26 	beq	r6,zero,4000840 <__umodsi3+0x4c>
 4000810:	28000516 	blt	r5,zero,4000828 <__umodsi3+0x34>
 4000814:	294b883a 	add	r5,r5,r5
 4000818:	31bfffc4 	addi	r6,r6,-1
 400081c:	18c7883a 	add	r3,r3,r3
 4000820:	293ffa36 	bltu	r5,r4,400080c <__ram_exceptions_end+0xfabfc680>
 4000824:	18000626 	beq	r3,zero,4000840 <__umodsi3+0x4c>
 4000828:	1806d07a 	srli	r3,r3,1
 400082c:	11400136 	bltu	r2,r5,4000834 <__umodsi3+0x40>
 4000830:	1145c83a 	sub	r2,r2,r5
 4000834:	280ad07a 	srli	r5,r5,1
 4000838:	183ffb1e 	bne	r3,zero,4000828 <__ram_exceptions_end+0xfabfc69c>
 400083c:	f800283a 	ret
 4000840:	f800283a 	ret
 4000844:	00c00044 	movi	r3,1
 4000848:	003ff706 	br	4000828 <__ram_exceptions_end+0xfabfc69c>

0400084c <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
 400084c:	d0a30917 	ldw	r2,-29660(gp)
 4000850:	10001a26 	beq	r2,zero,40008bc <alt_alarm_start+0x70>
  {
    if (alarm)
 4000854:	20001b26 	beq	r4,zero,40008c4 <alt_alarm_start+0x78>
    {
      alarm->callback = callback;
 4000858:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
 400085c:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4000860:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4000864:	00bfff84 	movi	r2,-2
 4000868:	1884703a 	and	r2,r3,r2
 400086c:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4000870:	d0a30817 	ldw	r2,-29664(gp)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
 4000874:	11800044 	addi	r6,r2,1
 4000878:	314b883a 	add	r5,r6,r5
 400087c:	21400215 	stw	r5,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 4000880:	28800b36 	bltu	r5,r2,40008b0 <alt_alarm_start+0x64>
      {
        alarm->rollover = 1;
      }
      else
      {
        alarm->rollover = 0;
 4000884:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4000888:	d0a00104 	addi	r2,gp,-32764
 400088c:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
 4000890:	d0a00117 	ldw	r2,-32764(gp)
 4000894:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
 4000898:	d0a00117 	ldw	r2,-32764(gp)
  list->next           = entry;
 400089c:	d1200115 	stw	r4,-32764(gp)
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
 40008a0:	11000115 	stw	r4,4(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40008a4:	1801703a 	wrctl	status,r3
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
      alt_irq_enable_all (irq_context);

      return 0;
 40008a8:	0005883a 	mov	r2,zero
 40008ac:	f800283a 	ret
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
      {
        alarm->rollover = 1;
 40008b0:	00800044 	movi	r2,1
 40008b4:	20800405 	stb	r2,16(r4)
 40008b8:	003ff306 	br	4000888 <__ram_exceptions_end+0xfabfc6fc>
      return -EINVAL;
    }
  }
  else
  {
    return -ENOTSUP;
 40008bc:	00bfde84 	movi	r2,-134
 40008c0:	f800283a 	ret

      return 0;
    }
    else
    {
      return -EINVAL;
 40008c4:	00bffa84 	movi	r2,-22
  }
  else
  {
    return -ENOTSUP;
  }
}
 40008c8:	f800283a 	ret

040008cc <alt_getchar>:
    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
        return -1;
    }
    return c;
#else
    return getchar();
 40008cc:	d0a01117 	ldw	r2,-32700(gp)
 40008d0:	11000117 	ldw	r4,4(r2)
 40008d4:	40024081 	jmpi	4002408 <getc>

040008d8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 40008d8:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 40008dc:	01810034 	movhi	r6,1024
 40008e0:	01c10034 	movhi	r7,1024
 40008e4:	dfc00015 	stw	ra,0(sp)
 40008e8:	31944e04 	addi	r6,r6,20792
 40008ec:	39d73204 	addi	r7,r7,23752
 40008f0:	31c01026 	beq	r6,r7,4000934 <alt_load+0x5c>
  {
    while( to != end )
 40008f4:	00810034 	movhi	r2,1024
 40008f8:	10973204 	addi	r2,r2,23752
 40008fc:	30800d26 	beq	r6,r2,4000934 <alt_load+0x5c>
 4000900:	30c00104 	addi	r3,r6,4
 4000904:	10c7c83a 	sub	r3,r2,r3
 4000908:	1806d0ba 	srli	r3,r3,2
 400090c:	0005883a 	mov	r2,zero
 4000910:	18c00044 	addi	r3,r3,1
 4000914:	18c7883a 	add	r3,r3,r3
 4000918:	18c7883a 	add	r3,r3,r3
    {
      *to++ = *from++;
 400091c:	11c9883a 	add	r4,r2,r7
 4000920:	21400017 	ldw	r5,0(r4)
 4000924:	1189883a 	add	r4,r2,r6
 4000928:	10800104 	addi	r2,r2,4
 400092c:	21400015 	stw	r5,0(r4)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 4000930:	10fffa1e 	bne	r2,r3,400091c <__ram_exceptions_end+0xfabfc790>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 4000934:	01825034 	movhi	r6,2368
 4000938:	01c10034 	movhi	r7,1024
 400093c:	31900804 	addi	r6,r6,16416
 4000940:	39c00004 	addi	r7,r7,0
 4000944:	31c01026 	beq	r6,r7,4000988 <alt_load+0xb0>
  {
    while( to != end )
 4000948:	00825034 	movhi	r2,2368
 400094c:	10906304 	addi	r2,r2,16780
 4000950:	30800d26 	beq	r6,r2,4000988 <alt_load+0xb0>
 4000954:	30c00104 	addi	r3,r6,4
 4000958:	10c7c83a 	sub	r3,r2,r3
 400095c:	1806d0ba 	srli	r3,r3,2
 4000960:	0005883a 	mov	r2,zero
 4000964:	18c00044 	addi	r3,r3,1
 4000968:	18c7883a 	add	r3,r3,r3
 400096c:	18c7883a 	add	r3,r3,r3
    {
      *to++ = *from++;
 4000970:	11c9883a 	add	r4,r2,r7
 4000974:	21400017 	ldw	r5,0(r4)
 4000978:	1189883a 	add	r4,r2,r6
 400097c:	10800104 	addi	r2,r2,4
 4000980:	21400015 	stw	r5,0(r4)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 4000984:	18bffa1e 	bne	r3,r2,4000970 <__ram_exceptions_end+0xfabfc7e4>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 4000988:	01810034 	movhi	r6,1024
 400098c:	01c10034 	movhi	r7,1024
 4000990:	31938404 	addi	r6,r6,19984
 4000994:	39d38404 	addi	r7,r7,19984
 4000998:	31c01026 	beq	r6,r7,40009dc <alt_load+0x104>
  {
    while( to != end )
 400099c:	00810034 	movhi	r2,1024
 40009a0:	10944e04 	addi	r2,r2,20792
 40009a4:	30800d26 	beq	r6,r2,40009dc <alt_load+0x104>
 40009a8:	30c00104 	addi	r3,r6,4
 40009ac:	10c7c83a 	sub	r3,r2,r3
 40009b0:	1806d0ba 	srli	r3,r3,2
 40009b4:	0005883a 	mov	r2,zero
 40009b8:	18c00044 	addi	r3,r3,1
 40009bc:	18c7883a 	add	r3,r3,r3
 40009c0:	18c7883a 	add	r3,r3,r3
    {
      *to++ = *from++;
 40009c4:	11c9883a 	add	r4,r2,r7
 40009c8:	21400017 	ldw	r5,0(r4)
 40009cc:	1189883a 	add	r4,r2,r6
 40009d0:	10800104 	addi	r2,r2,4
 40009d4:	21400015 	stw	r5,0(r4)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 40009d8:	10fffa1e 	bne	r2,r3,40009c4 <__ram_exceptions_end+0xfabfc838>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 40009dc:	4001cac0 	call	4001cac <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 40009e0:	dfc00017 	ldw	ra,0(sp)
 40009e4:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 40009e8:	4001e141 	jmpi	4001e14 <alt_icache_flush_all>

040009ec <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 40009ec:	defffe04 	addi	sp,sp,-8
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 40009f0:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 40009f4:	dfc00115 	stw	ra,4(sp)
 40009f8:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 40009fc:	4000cec0 	call	4000cec <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 4000a00:	4000d0c0 	call	4000d0c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 4000a04:	01810034 	movhi	r6,1024
 4000a08:	31943604 	addi	r6,r6,20696
 4000a0c:	300b883a 	mov	r5,r6
 4000a10:	3009883a 	mov	r4,r6
 4000a14:	4001f880 	call	4001f88 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 4000a18:	d1a30517 	ldw	r6,-29676(gp)
 4000a1c:	d1630617 	ldw	r5,-29672(gp)
 4000a20:	d1230717 	ldw	r4,-29668(gp)
 4000a24:	40001b80 	call	40001b8 <main>
  close(STDOUT_FILENO);
 4000a28:	01000044 	movi	r4,1
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 4000a2c:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
 4000a30:	4001bb00 	call	4001bb0 <close>
  exit (result);
 4000a34:	8009883a 	mov	r4,r16
 4000a38:	40023600 	call	4002360 <exit>

04000a3c <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
 4000a3c:	defff304 	addi	sp,sp,-52
 4000a40:	dc000015 	stw	r16,0(sp)
 4000a44:	2021883a 	mov	r16,r4
 4000a48:	dfc00915 	stw	ra,36(sp)
 4000a4c:	df000815 	stw	fp,32(sp)
 4000a50:	ddc00715 	stw	r23,28(sp)
 4000a54:	dd800615 	stw	r22,24(sp)
 4000a58:	dd400515 	stw	r21,20(sp)
 4000a5c:	dd000415 	stw	r20,16(sp)
 4000a60:	dcc00315 	stw	r19,12(sp)
 4000a64:	dc800215 	stw	r18,8(sp)
 4000a68:	dc400115 	stw	r17,4(sp)
 4000a6c:	d9400a15 	stw	r5,40(sp)
 4000a70:	d9800b15 	stw	r6,44(sp)
 4000a74:	d9c00c15 	stw	r7,48(sp)
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 4000a78:	04400944 	movi	r17,37
 */
void 
alt_printf(const char* fmt, ... )
{
	va_list args;
	va_start(args, fmt);
 4000a7c:	dcc00a04 	addi	r19,sp,40
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
 4000a80:	054018c4 	movi	r21,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
 4000a84:	05801e04 	movi	r22,120
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 4000a88:	048003c4 	movi	r18,15
                        if (digit <= 9)
 4000a8c:	05000244 	movi	r20,9
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 4000a90:	81000007 	ldb	r4,0(r16)
 4000a94:	20000526 	beq	r4,zero,4000aac <alt_printf+0x70>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 4000a98:	24401026 	beq	r4,r17,4000adc <alt_printf+0xa0>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 4000a9c:	84000044 	addi	r16,r16,1
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
        {
            alt_putchar(c);
 4000aa0:	4000bb80 	call	4000bb8 <alt_putchar>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 4000aa4:	81000007 	ldb	r4,0(r16)
 4000aa8:	203ffb1e 	bne	r4,zero,4000a98 <__ram_exceptions_end+0xfabfc90c>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 4000aac:	dfc00917 	ldw	ra,36(sp)
 4000ab0:	df000817 	ldw	fp,32(sp)
 4000ab4:	ddc00717 	ldw	r23,28(sp)
 4000ab8:	dd800617 	ldw	r22,24(sp)
 4000abc:	dd400517 	ldw	r21,20(sp)
 4000ac0:	dd000417 	ldw	r20,16(sp)
 4000ac4:	dcc00317 	ldw	r19,12(sp)
 4000ac8:	dc800217 	ldw	r18,8(sp)
 4000acc:	dc400117 	ldw	r17,4(sp)
 4000ad0:	dc000017 	ldw	r16,0(sp)
 4000ad4:	dec00d04 	addi	sp,sp,52
 4000ad8:	f800283a 	ret
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
 4000adc:	80800047 	ldb	r2,1(r16)
 4000ae0:	84000084 	addi	r16,r16,2
 4000ae4:	103ff126 	beq	r2,zero,4000aac <__ram_exceptions_end+0xfabfc920>
            {
                if (c == '%')
 4000ae8:	14402926 	beq	r2,r17,4000b90 <alt_printf+0x154>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
 4000aec:	15402b26 	beq	r2,r21,4000b9c <alt_printf+0x160>
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
 4000af0:	15800b26 	beq	r2,r22,4000b20 <alt_printf+0xe4>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
 4000af4:	00c01cc4 	movi	r3,115
 4000af8:	10ffe51e 	bne	r2,r3,4000a90 <__ram_exceptions_end+0xfabfc904>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
 4000afc:	9f000017 	ldw	fp,0(r19)
 4000b00:	9cc00104 	addi	r19,r19,4

                    while(*s)
 4000b04:	e1000007 	ldb	r4,0(fp)
 4000b08:	203fe126 	beq	r4,zero,4000a90 <__ram_exceptions_end+0xfabfc904>
                      alt_putchar(*s++);
 4000b0c:	e7000044 	addi	fp,fp,1
 4000b10:	4000bb80 	call	4000bb8 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
 4000b14:	e1000007 	ldb	r4,0(fp)
 4000b18:	203ffc1e 	bne	r4,zero,4000b0c <__ram_exceptions_end+0xfabfc980>
 4000b1c:	003fdc06 	br	4000a90 <__ram_exceptions_end+0xfabfc904>
                    alt_putchar(v);
                }
                else if (c == 'x')
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
 4000b20:	9dc00017 	ldw	r23,0(r19)
 4000b24:	9cc00104 	addi	r19,r19,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
 4000b28:	b8002026 	beq	r23,zero,4000bac <alt_printf+0x170>
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
 4000b2c:	b8bc002c 	andhi	r2,r23,61440
 4000b30:	07000704 	movi	fp,28
 4000b34:	1000101e 	bne	r2,zero,4000b78 <alt_printf+0x13c>
                        digit_shift -= 4;
 4000b38:	e73fff04 	addi	fp,fp,-4
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
 4000b3c:	9704983a 	sll	r2,r18,fp
 4000b40:	15c4703a 	and	r2,r2,r23
 4000b44:	103ffc26 	beq	r2,zero,4000b38 <__ram_exceptions_end+0xfabfc9ac>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 4000b48:	e03fd116 	blt	fp,zero,4000a90 <__ram_exceptions_end+0xfabfc904>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 4000b4c:	9708983a 	sll	r4,r18,fp
 4000b50:	25c8703a 	and	r4,r4,r23
 4000b54:	2708d83a 	srl	r4,r4,fp
                        if (digit <= 9)
 4000b58:	a1000b36 	bltu	r20,r4,4000b88 <alt_printf+0x14c>
                            c = '0' + digit;
 4000b5c:	21000c04 	addi	r4,r4,48
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
 4000b60:	21003fcc 	andi	r4,r4,255
 4000b64:	2100201c 	xori	r4,r4,128
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 4000b68:	e73fff04 	addi	fp,fp,-4
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
                        if (digit <= 9)
                            c = '0' + digit;
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
 4000b6c:	213fe004 	addi	r4,r4,-128
 4000b70:	4000bb80 	call	4000bb8 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 4000b74:	e03fc616 	blt	fp,zero,4000a90 <__ram_exceptions_end+0xfabfc904>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 4000b78:	9708983a 	sll	r4,r18,fp
 4000b7c:	25c8703a 	and	r4,r4,r23
 4000b80:	2708d83a 	srl	r4,r4,fp
                        if (digit <= 9)
 4000b84:	a13ff52e 	bgeu	r20,r4,4000b5c <__ram_exceptions_end+0xfabfc9d0>
                            c = '0' + digit;
                        else
                            c = 'a' + digit - 10;
 4000b88:	210015c4 	addi	r4,r4,87
 4000b8c:	003ff406 	br	4000b60 <__ram_exceptions_end+0xfabfc9d4>
            if ((c = *w++) != 0)
            {
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
 4000b90:	8809883a 	mov	r4,r17
 4000b94:	4000bb80 	call	4000bb8 <alt_putchar>
 4000b98:	003fbd06 	br	4000a90 <__ram_exceptions_end+0xfabfc904>
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
 4000b9c:	99000017 	ldw	r4,0(r19)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
 4000ba0:	9cc00104 	addi	r19,r19,4
                    alt_putchar(v);
 4000ba4:	4000bb80 	call	4000bb8 <alt_putchar>
 4000ba8:	003fb906 	br	4000a90 <__ram_exceptions_end+0xfabfc904>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
 4000bac:	01000c04 	movi	r4,48
 4000bb0:	4000bb80 	call	4000bb8 <alt_putchar>
                        continue;
 4000bb4:	003fb606 	br	4000a90 <__ram_exceptions_end+0xfabfc904>

04000bb8 <alt_putchar>:
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
 4000bb8:	d0a01117 	ldw	r2,-32700(gp)
 4000bbc:	11400217 	ldw	r5,8(r2)
 4000bc0:	40026f41 	jmpi	40026f4 <putc>

04000bc4 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4000bc4:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4000bc8:	00bfff84 	movi	r2,-2
 4000bcc:	1884703a 	and	r2,r3,r2
 4000bd0:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 4000bd4:	21400117 	ldw	r5,4(r4)
 4000bd8:	20800017 	ldw	r2,0(r4)
 4000bdc:	11400115 	stw	r5,4(r2)
  entry->previous->next = entry->next;
 4000be0:	21400117 	ldw	r5,4(r4)
 4000be4:	28800015 	stw	r2,0(r5)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 4000be8:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
 4000bec:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4000bf0:	1801703a 	wrctl	status,r3
 4000bf4:	f800283a 	ret

04000bf8 <alt_tick>:

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 4000bf8:	d0a30817 	ldw	r2,-29664(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 4000bfc:	defffa04 	addi	sp,sp,-24
 4000c00:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 4000c04:	d4200117 	ldw	r16,-32764(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 4000c08:	10800044 	addi	r2,r2,1
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 4000c0c:	dc800215 	stw	r18,8(sp)
 4000c10:	dfc00515 	stw	ra,20(sp)
 4000c14:	dd000415 	stw	r20,16(sp)
 4000c18:	dcc00315 	stw	r19,12(sp)
 4000c1c:	dc400115 	stw	r17,4(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 4000c20:	d4a00104 	addi	r18,gp,-32764

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 4000c24:	d0a30815 	stw	r2,-29664(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4000c28:	84801126 	beq	r16,r18,4000c70 <alt_tick+0x78>
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
        {
          alarm->rollover = 1;
 4000c2c:	04c00044 	movi	r19,1
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4000c30:	053fff84 	movi	r20,-2
 4000c34:	00000606 	br	4000c50 <alt_tick+0x58>
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    {
      alarm->rollover = 0;
 4000c38:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 4000c3c:	d0e30817 	ldw	r3,-29664(gp)
 4000c40:	80800217 	ldw	r2,8(r16)
 4000c44:	1880122e 	bgeu	r3,r2,4000c90 <alt_tick+0x98>
 4000c48:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4000c4c:	8c800826 	beq	r17,r18,4000c70 <alt_tick+0x78>
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 4000c50:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
 4000c54:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 4000c58:	103ff826 	beq	r2,zero,4000c3c <__ram_exceptions_end+0xfabfcab0>
 4000c5c:	d0a30817 	ldw	r2,-29664(gp)
 4000c60:	103ff526 	beq	r2,zero,4000c38 <__ram_exceptions_end+0xfabfcaac>
    {
      alarm->rollover = 0;
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 4000c64:	d0a30817 	ldw	r2,-29664(gp)
 4000c68:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4000c6c:	8cbff81e 	bne	r17,r18,4000c50 <__ram_exceptions_end+0xfabfcac4>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 4000c70:	dfc00517 	ldw	ra,20(sp)
 4000c74:	dd000417 	ldw	r20,16(sp)
 4000c78:	dcc00317 	ldw	r19,12(sp)
 4000c7c:	dc800217 	ldw	r18,8(sp)
 4000c80:	dc400117 	ldw	r17,4(sp)
 4000c84:	dc000017 	ldw	r16,0(sp)
 4000c88:	dec00604 	addi	sp,sp,24
 4000c8c:	f800283a 	ret
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    {
      next_callback = alarm->callback (alarm->context);
 4000c90:	80800317 	ldw	r2,12(r16)
 4000c94:	81000517 	ldw	r4,20(r16)
 4000c98:	103ee83a 	callr	r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 4000c9c:	10000726 	beq	r2,zero,4000cbc <alt_tick+0xc4>
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
 4000ca0:	80c00217 	ldw	r3,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 4000ca4:	d1230817 	ldw	r4,-29664(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
 4000ca8:	10c5883a 	add	r2,r2,r3
 4000cac:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 4000cb0:	113fe52e 	bgeu	r2,r4,4000c48 <__ram_exceptions_end+0xfabfcabc>
        {
          alarm->rollover = 1;
 4000cb4:	84c00405 	stb	r19,16(r16)
 4000cb8:	003fe306 	br	4000c48 <__ram_exceptions_end+0xfabfcabc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4000cbc:	0005303a 	rdctl	r2,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4000cc0:	1506703a 	and	r3,r2,r20
 4000cc4:	1801703a 	wrctl	status,r3
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 4000cc8:	81000117 	ldw	r4,4(r16)
 4000ccc:	80c00017 	ldw	r3,0(r16)
 4000cd0:	19000115 	stw	r4,4(r3)
  entry->previous->next = entry->next;
 4000cd4:	81000117 	ldw	r4,4(r16)
 4000cd8:	20c00015 	stw	r3,0(r4)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 4000cdc:	84000115 	stw	r16,4(r16)
  entry->next     = entry;
 4000ce0:	84000015 	stw	r16,0(r16)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4000ce4:	1001703a 	wrctl	status,r2
 4000ce8:	003fd706 	br	4000c48 <__ram_exceptions_end+0xfabfcabc>

04000cec <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 4000cec:	deffff04 	addi	sp,sp,-4
 4000cf0:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 4000cf4:	40021980 	call	4002198 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 4000cf8:	00800044 	movi	r2,1
 4000cfc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 4000d00:	dfc00017 	ldw	ra,0(sp)
 4000d04:	dec00104 	addi	sp,sp,4
 4000d08:	f800283a 	ret

04000d0c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4000d0c:	deffff04 	addi	sp,sp,-4
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 4000d10:	01c0fa04 	movi	r7,1000
 4000d14:	01800084 	movi	r6,2
 4000d18:	000b883a 	mov	r5,zero
 4000d1c:	01020034 	movhi	r4,2048
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4000d20:	dfc00015 	stw	ra,0(sp)
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 4000d24:	4000e640 	call	4000e64 <alt_avalon_timer_sc_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 4000d28:	01010034 	movhi	r4,1024
 4000d2c:	21149d04 	addi	r4,r4,21108
 4000d30:	d1600804 	addi	r5,gp,-32736
 4000d34:	4001ccc0 	call	4001ccc <alt_dev_llist_insert>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_MODULAR_ADC_INIT ( MODULAR_ADC_0, modular_adc_0);
 4000d38:	01010034 	movhi	r4,1024
 4000d3c:	21148e04 	addi	r4,r4,21048
 4000d40:	01800044 	movi	r6,1
 4000d44:	000b883a 	mov	r5,zero
 4000d48:	4000f480 	call	4000f48 <altera_modular_adc_init>
    ALTERA_ONCHIP_FLASH_INIT ( ONCHIP_FLASH_0, onchip_flash_0);
 4000d4c:	01010034 	movhi	r4,1024
 4000d50:	21144e04 	addi	r4,r4,20792
}
 4000d54:	dfc00017 	ldw	ra,0(sp)
 4000d58:	dec00104 	addi	sp,sp,4
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_MODULAR_ADC_INIT ( MODULAR_ADC_0, modular_adc_0);
    ALTERA_ONCHIP_FLASH_INIT ( ONCHIP_FLASH_0, onchip_flash_0);
 4000d5c:	40017781 	jmpi	4001778 <altera_onchip_flash_init>

04000d60 <altera_avalon_jtag_uart_read_fd>:
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 4000d60:	20800017 	ldw	r2,0(r4)
 4000d64:	21c00217 	ldw	r7,8(r4)
 4000d68:	11000a04 	addi	r4,r2,40
 4000d6c:	4000d801 	jmpi	4000d80 <altera_avalon_jtag_uart_read>

04000d70 <altera_avalon_jtag_uart_write_fd>:
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 4000d70:	20800017 	ldw	r2,0(r4)
 4000d74:	21c00217 	ldw	r7,8(r4)
 4000d78:	11000a04 	addi	r4,r2,40
 4000d7c:	4000df41 	jmpi	4000df4 <altera_avalon_jtag_uart_write>

04000d80 <altera_avalon_jtag_uart_read>:
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;
 4000d80:	298d883a 	add	r6,r5,r6

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
 4000d84:	22400017 	ldw	r9,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
 4000d88:	2980162e 	bgeu	r5,r6,4000de4 <altera_avalon_jtag_uart_read+0x64>
 4000d8c:	2807883a 	mov	r3,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
 4000d90:	3a90000c 	andi	r10,r7,16384
 4000d94:	00000306 	br	4000da4 <altera_avalon_jtag_uart_read+0x24>
  while (ptr < end)
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 4000d98:	19000005 	stb	r4,0(r3)
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
 4000d9c:	1180092e 	bgeu	r2,r6,4000dc4 <altera_avalon_jtag_uart_read+0x44>
 4000da0:	1007883a 	mov	r3,r2
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 4000da4:	49000037 	ldwio	r4,0(r9)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
 4000da8:	2220000c 	andi	r8,r4,32768
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 4000dac:	18800044 	addi	r2,r3,1

  while (ptr < end)
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
 4000db0:	403ff91e 	bne	r8,zero,4000d98 <__ram_exceptions_end+0xfabfcc0c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
 4000db4:	28c0061e 	bne	r5,r3,4000dd0 <altera_avalon_jtag_uart_read+0x50>
      break;
    else if(flags & O_NONBLOCK)
 4000db8:	5000081e 	bne	r10,zero,4000ddc <altera_avalon_jtag_uart_read+0x5c>
 4000dbc:	2805883a 	mov	r2,r5
 4000dc0:	003ff706 	br	4000da0 <__ram_exceptions_end+0xfabfcc14>
      break;   
    
  }

  if (ptr != buffer)
 4000dc4:	28800726 	beq	r5,r2,4000de4 <altera_avalon_jtag_uart_read+0x64>
    return ptr - buffer;
 4000dc8:	1145c83a 	sub	r2,r2,r5
 4000dcc:	f800283a 	ret
 4000dd0:	1805883a 	mov	r2,r3
 4000dd4:	1145c83a 	sub	r2,r2,r5
 4000dd8:	f800283a 	ret
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
 4000ddc:	00bffd44 	movi	r2,-11
 4000de0:	f800283a 	ret
    
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
 4000de4:	39d0000c 	andi	r7,r7,16384
 4000de8:	383ffc1e 	bne	r7,zero,4000ddc <__ram_exceptions_end+0xfabfcc50>
    return -EWOULDBLOCK;
  else
    return -EIO;
 4000dec:	00bffec4 	movi	r2,-5
}
 4000df0:	f800283a 	ret

04000df4 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 4000df4:	21c00017 	ldw	r7,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 4000df8:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
 4000dfc:	298d883a 	add	r6,r5,r6
 4000e00:	39000104 	addi	r4,r7,4

  while (ptr < end)
 4000e04:	2980072e 	bgeu	r5,r6,4000e24 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 4000e08:	20c00037 	ldwio	r3,0(r4)
 4000e0c:	18ffffec 	andhi	r3,r3,65535
 4000e10:	183ffd26 	beq	r3,zero,4000e08 <__ram_exceptions_end+0xfabfcc7c>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 4000e14:	28c00007 	ldb	r3,0(r5)
 4000e18:	38c00035 	stwio	r3,0(r7)
 4000e1c:	29400044 	addi	r5,r5,1
 4000e20:	003ff806 	br	4000e04 <__ram_exceptions_end+0xfabfcc78>

  return count;
}
 4000e24:	f800283a 	ret

04000e28 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 4000e28:	defffe04 	addi	sp,sp,-8
 4000e2c:	dfc00115 	stw	ra,4(sp)
 4000e30:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 4000e34:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 4000e38:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4000e3c:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4000e40:	00bfff84 	movi	r2,-2
 4000e44:	8084703a 	and	r2,r16,r2
 4000e48:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
 4000e4c:	4000bf80 	call	4000bf8 <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4000e50:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
 4000e54:	dfc00117 	ldw	ra,4(sp)
 4000e58:	dc000017 	ldw	r16,0(sp)
 4000e5c:	dec00204 	addi	sp,sp,8
 4000e60:	f800283a 	ret

04000e64 <alt_avalon_timer_sc_init>:
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 4000e64:	d0e30917 	ldw	r3,-29660(gp)
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 4000e68:	defffe04 	addi	sp,sp,-8
 4000e6c:	dfc00115 	stw	ra,4(sp)
 4000e70:	2005883a 	mov	r2,r4
 4000e74:	2809883a 	mov	r4,r5
 4000e78:	300b883a 	mov	r5,r6
 4000e7c:	1800011e 	bne	r3,zero,4000e84 <alt_avalon_timer_sc_init+0x20>
  {
    _alt_tick_rate = nticks;
 4000e80:	d1e30915 	stw	r7,-29660(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 4000e84:	00c001c4 	movi	r3,7
 4000e88:	10c00135 	stwio	r3,4(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 4000e8c:	01810034 	movhi	r6,1024
 4000e90:	31838a04 	addi	r6,r6,3624
 4000e94:	d8000015 	stw	zero,0(sp)
 4000e98:	100f883a 	mov	r7,r2
 4000e9c:	4001e200 	call	4001e20 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 4000ea0:	dfc00117 	ldw	ra,4(sp)
 4000ea4:	dec00204 	addi	sp,sp,8
 4000ea8:	f800283a 	ret

04000eac <alt_adc_irq>:
static void alt_adc_irq(void *context)
{
    alt_modular_adc_dev *dev = (alt_modular_adc_dev *) context;
    alt_irq_context cpu_sr = 0;

	if(NULL != dev)
 4000eac:	20001726 	beq	r4,zero,4000f0c <alt_adc_irq+0x60>
 * alt_adc_irq()
 *
 * Interrupt handler for the altera modular adc.
 */
static void alt_adc_irq(void *context)
{
 4000eb0:	defffd04 	addi	sp,sp,-12
 4000eb4:	dc000015 	stw	r16,0(sp)
 4000eb8:	2021883a 	mov	r16,r4
 4000ebc:	dfc00215 	stw	ra,8(sp)
 4000ec0:	dc400115 	stw	r17,4(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4000ec4:	0023303a 	rdctl	r17,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4000ec8:	00bfff84 	movi	r2,-2
 4000ecc:	8884703a 	and	r2,r17,r2
 4000ed0:	1001703a 	wrctl	status,r2
		* Other interrupts are explicitly disabled if callbacks
		* are registered because there is no guarantee that they are 
		* pre-emption-safe. This allows the driver to support 
		* interrupt pre-emption.
		*/
		if(dev->callback) 
 4000ed4:	20800a17 	ldw	r2,40(r4)
 4000ed8:	10000226 	beq	r2,zero,4000ee4 <alt_adc_irq+0x38>
		{
			dev->callback (dev->callback_context);
 4000edc:	21000b17 	ldw	r4,44(r4)
 4000ee0:	103ee83a 	callr	r2
    ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_DISABLE(sample_store_base);
}

void adc_clear_interrupt_status(int sample_store_base)
{
    CLEAR_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_STATUS(sample_store_base);
 4000ee4:	80800c17 	ldw	r2,48(r16)
 4000ee8:	10804104 	addi	r2,r2,260
 4000eec:	10c00037 	ldwio	r3,0(r2)
 4000ef0:	18c00054 	ori	r3,r3,1
 4000ef4:	10c00035 	stwio	r3,0(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4000ef8:	8801703a 	wrctl	status,r17
	    
		alt_irq_enable_all(cpu_sr);
	}
	
    return;
}
 4000efc:	dfc00217 	ldw	ra,8(sp)
 4000f00:	dc400117 	ldw	r17,4(sp)
 4000f04:	dc000017 	ldw	r16,0(sp)
 4000f08:	dec00304 	addi	sp,sp,12
 4000f0c:	f800283a 	ret

04000f10 <alt_adc_word_read>:
    alt_u32 word_length = len;
    alt_u32* dest_buf = dest_ptr;
    alt_u32 base = sample_store_base;
     
    /* return -EINVAL if invalid arguments passed into function */
    if(NULL == dest_buf)
 4000f10:	28000b26 	beq	r5,zero,4000f40 <alt_adc_word_read+0x30>
    {
    	return -EINVAL;
    }

    for(word = 0; word < word_length; word++)
 4000f14:	30000826 	beq	r6,zero,4000f38 <alt_adc_word_read+0x28>
 4000f18:	0005883a 	mov	r2,zero
 4000f1c:	2149c83a 	sub	r4,r4,r5
    {
       *dest_buf = IORD_32DIRECT((base + (word * 4)),0);
 4000f20:	2907883a 	add	r3,r5,r4
 4000f24:	18c00037 	ldwio	r3,0(r3)
 4000f28:	28c00015 	stw	r3,0(r5)
    if(NULL == dest_buf)
    {
    	return -EINVAL;
    }

    for(word = 0; word < word_length; word++)
 4000f2c:	10800044 	addi	r2,r2,1
    {
       *dest_buf = IORD_32DIRECT((base + (word * 4)),0);

       dest_buf++;
 4000f30:	29400104 	addi	r5,r5,4
    if(NULL == dest_buf)
    {
    	return -EINVAL;
    }

    for(word = 0; word < word_length; word++)
 4000f34:	30bffa1e 	bne	r6,r2,4000f20 <__ram_exceptions_end+0xfabfcd94>
       *dest_buf = IORD_32DIRECT((base + (word * 4)),0);

       dest_buf++;
    }

    return 0;
 4000f38:	0005883a 	mov	r2,zero
 4000f3c:	f800283a 	ret
    alt_u32 base = sample_store_base;
     
    /* return -EINVAL if invalid arguments passed into function */
    if(NULL == dest_buf)
    {
    	return -EINVAL;
 4000f40:	00bffa84 	movi	r2,-22
       dest_buf++;
    }

    return 0;

}
 4000f44:	f800283a 	ret

04000f48 <altera_modular_adc_init>:


void altera_modular_adc_init(alt_modular_adc_dev* dev, alt_32 ic_id, alt_32 irq)
{
 4000f48:	defffb04 	addi	sp,sp,-20
 4000f4c:	dc000115 	stw	r16,4(sp)
 4000f50:	2821883a 	mov	r16,r5
    extern alt_llist altera_modular_adc_list;
    alt_dev_llist_insert((alt_dev_llist*) dev, &altera_modular_adc_list);
 4000f54:	d1600304 	addi	r5,gp,-32756

}


void altera_modular_adc_init(alt_modular_adc_dev* dev, alt_32 ic_id, alt_32 irq)
{
 4000f58:	dc800315 	stw	r18,12(sp)
 4000f5c:	dc400215 	stw	r17,8(sp)
 4000f60:	dfc00415 	stw	ra,16(sp)
 4000f64:	2025883a 	mov	r18,r4
 4000f68:	3023883a 	mov	r17,r6
    extern alt_llist altera_modular_adc_list;
    alt_dev_llist_insert((alt_dev_llist*) dev, &altera_modular_adc_list);
 4000f6c:	4001ccc0 	call	4001ccc <alt_dev_llist_insert>
	
	if ((0 <= ic_id) && (0 <= irq))
 4000f70:	80000816 	blt	r16,zero,4000f94 <altera_modular_adc_init+0x4c>
 4000f74:	88000716 	blt	r17,zero,4000f94 <altera_modular_adc_init+0x4c>
	{
          /* Install IRQ handler */
	  #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
              alt_ic_isr_register(ic_id, irq, alt_adc_irq, 
 4000f78:	01810034 	movhi	r6,1024
 4000f7c:	3183ab04 	addi	r6,r6,3756
 4000f80:	d8000015 	stw	zero,0(sp)
 4000f84:	900f883a 	mov	r7,r18
 4000f88:	880b883a 	mov	r5,r17
 4000f8c:	8009883a 	mov	r4,r16
 4000f90:	4001e200 	call	4001e20 <alt_ic_isr_register>
                      dev, NULL);
          #else
             alt_irq_register(irq, dev, alt_adc_irq);
          #endif 
	}
}
 4000f94:	dfc00417 	ldw	ra,16(sp)
 4000f98:	dc800317 	ldw	r18,12(sp)
 4000f9c:	dc400217 	ldw	r17,8(sp)
 4000fa0:	dc000117 	ldw	r16,4(sp)
 4000fa4:	dec00504 	addi	sp,sp,20
 4000fa8:	f800283a 	ret

04000fac <alt_adc_register_callback>:
	alt_modular_adc_dev *dev,
	alt_adc_callback callback,
	void *context,
	alt_u32 sample_store_base)
{
    dev->callback         = callback;
 4000fac:	21400a15 	stw	r5,40(r4)
    dev->callback_context = context;
 4000fb0:	21800b15 	stw	r6,44(r4)
    dev->sample_store_base = sample_store_base;
 4000fb4:	21c00c15 	stw	r7,48(r4)
	
	if(NULL != callback)
 4000fb8:	28000926 	beq	r5,zero,4000fe0 <alt_adc_register_callback+0x34>
    ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_DISABLE(sample_store_base);
}

void adc_clear_interrupt_status(int sample_store_base)
{
    CLEAR_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_STATUS(sample_store_base);
 4000fbc:	38c04104 	addi	r3,r7,260
 4000fc0:	18800037 	ldwio	r2,0(r3)
 4000fc4:	10800054 	ori	r2,r2,1
 4000fc8:	18800035 	stwio	r2,0(r3)
    IOWR_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base, backup_cmd_reg);
}

void adc_interrupt_enable(int sample_store_base)
{
    ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_ENABLE(sample_store_base);
 4000fcc:	39c04004 	addi	r7,r7,256
 4000fd0:	38800037 	ldwio	r2,0(r7)
 4000fd4:	10800054 	ori	r2,r2,1
 4000fd8:	38800035 	stwio	r2,0(r7)
 4000fdc:	f800283a 	ret
}

void adc_interrupt_disable(int sample_store_base)
{
    ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_DISABLE(sample_store_base);
 4000fe0:	38c04004 	addi	r3,r7,256
 4000fe4:	19000037 	ldwio	r4,0(r3)
 4000fe8:	00bfff84 	movi	r2,-2
 4000fec:	2084703a 	and	r2,r4,r2
 4000ff0:	18800035 	stwio	r2,0(r3)
}

void adc_clear_interrupt_status(int sample_store_base)
{
    CLEAR_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_STATUS(sample_store_base);
 4000ff4:	39c04104 	addi	r7,r7,260
 4000ff8:	38800037 	ldwio	r2,0(r7)
 4000ffc:	10800054 	ori	r2,r2,1
 4001000:	38800035 	stwio	r2,0(r7)
 4001004:	f800283a 	ret

04001008 <altera_modular_adc_open>:
alt_modular_adc_dev* altera_modular_adc_open (const char *name)
{
    alt_modular_adc_dev *dev = NULL;

    /* Find requested device */
    dev = (alt_modular_adc_dev*) alt_find_dev (name, &altera_modular_adc_list);
 4001008:	d1600304 	addi	r5,gp,-32756
 400100c:	4001d381 	jmpi	4001d38 <alt_find_dev>

04001010 <adc_stop>:
    return dev;
}

void adc_stop(int sequencer_base)
{
    ALTERA_MODULAR_ADC_SEQUENCER_STOP(sequencer_base);
 4001010:	20c00037 	ldwio	r3,0(r4)
 4001014:	00bfff84 	movi	r2,-2
 4001018:	1884703a 	and	r2,r3,r2
 400101c:	20800035 	stwio	r2,0(r4)
 4001020:	20800037 	ldwio	r2,0(r4)
 4001024:	1080004c 	andi	r2,r2,1
 4001028:	103ffd1e 	bne	r2,zero,4001020 <__ram_exceptions_end+0xfabfce94>
}
 400102c:	f800283a 	ret

04001030 <adc_start>:

void adc_start(int sequencer_base)
{
    ALTERA_MODULAR_ADC_SEQUENCER_START(sequencer_base);
 4001030:	20800037 	ldwio	r2,0(r4)
 4001034:	10800054 	ori	r2,r2,1
 4001038:	20800035 	stwio	r2,0(r4)
 400103c:	f800283a 	ret

04001040 <adc_set_mode_run_once>:

void adc_set_mode_run_once(int sequencer_base)
{
    /* Note: Stop the ADC before calling this function,
       changing ADC mode while RUN bit is set has no effect. */
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_ONCE(sequencer_base);
 4001040:	20c00037 	ldwio	r3,0(r4)
 4001044:	00bffc44 	movi	r2,-15
 4001048:	1884703a 	and	r2,r3,r2
 400104c:	10800094 	ori	r2,r2,2
 4001050:	20800035 	stwio	r2,0(r4)
 4001054:	f800283a 	ret

04001058 <adc_set_mode_run_continuously>:

void adc_set_mode_run_continuously(int sequencer_base)
{
    /* Note: Stop the ADC before calling this function,
       changing ADC mode while RUN bit is set has no effect. */
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_CONTINUOUSLY(sequencer_base);
 4001058:	20c00037 	ldwio	r3,0(r4)
 400105c:	00bffc44 	movi	r2,-15
 4001060:	1884703a 	and	r2,r3,r2
 4001064:	20800035 	stwio	r2,0(r4)
 4001068:	f800283a 	ret

0400106c <adc_recalibrate>:
         2. Start the ADC Sequencer Core.
         5. Poll for RUN bit to be clear
         6. Restore CMD register
     */
    alt_u32 backup_cmd_reg;
    backup_cmd_reg = IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base);
 400106c:	20c00037 	ldwio	r3,0(r4)
    return dev;
}

void adc_stop(int sequencer_base)
{
    ALTERA_MODULAR_ADC_SEQUENCER_STOP(sequencer_base);
 4001070:	21400037 	ldwio	r5,0(r4)
 4001074:	00bfff84 	movi	r2,-2
 4001078:	2884703a 	and	r2,r5,r2
 400107c:	20800035 	stwio	r2,0(r4)
 4001080:	20800037 	ldwio	r2,0(r4)
 4001084:	1080004c 	andi	r2,r2,1
 4001088:	103ffd1e 	bne	r2,zero,4001080 <__ram_exceptions_end+0xfabfcef4>
         6. Restore CMD register
     */
    alt_u32 backup_cmd_reg;
    backup_cmd_reg = IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base);
    adc_stop(sequencer_base);
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_RECALIBRATION(sequencer_base);
 400108c:	20800037 	ldwio	r2,0(r4)
 4001090:	10800394 	ori	r2,r2,14
 4001094:	20800035 	stwio	r2,0(r4)
    ALTERA_MODULAR_ADC_SEQUENCER_STOP(sequencer_base);
}

void adc_start(int sequencer_base)
{
    ALTERA_MODULAR_ADC_SEQUENCER_START(sequencer_base);
 4001098:	20800037 	ldwio	r2,0(r4)
 400109c:	10800054 	ori	r2,r2,1
 40010a0:	20800035 	stwio	r2,0(r4)
    alt_u32 backup_cmd_reg;
    backup_cmd_reg = IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base);
    adc_stop(sequencer_base);
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_RECALIBRATION(sequencer_base);
    adc_start(sequencer_base);
    while(IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base)
 40010a4:	20800037 	ldwio	r2,0(r4)
 40010a8:	1080004c 	andi	r2,r2,1
 40010ac:	103ffd1e 	bne	r2,zero,40010a4 <__ram_exceptions_end+0xfabfcf18>
             & ALTERA_MODULAR_ADC_SEQUENCER_CMD_RUN_MSK);
    IOWR_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base, backup_cmd_reg);
 40010b0:	20c00035 	stwio	r3,0(r4)
 40010b4:	f800283a 	ret

040010b8 <adc_interrupt_enable>:
}

void adc_interrupt_enable(int sample_store_base)
{
    ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_ENABLE(sample_store_base);
 40010b8:	21004004 	addi	r4,r4,256
 40010bc:	20800037 	ldwio	r2,0(r4)
 40010c0:	10800054 	ori	r2,r2,1
 40010c4:	20800035 	stwio	r2,0(r4)
 40010c8:	f800283a 	ret

040010cc <adc_interrupt_disable>:
}

void adc_interrupt_disable(int sample_store_base)
{
    ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_DISABLE(sample_store_base);
 40010cc:	21004004 	addi	r4,r4,256
 40010d0:	20c00037 	ldwio	r3,0(r4)
 40010d4:	00bfff84 	movi	r2,-2
 40010d8:	1884703a 	and	r2,r3,r2
 40010dc:	20800035 	stwio	r2,0(r4)
 40010e0:	f800283a 	ret

040010e4 <adc_clear_interrupt_status>:
}

void adc_clear_interrupt_status(int sample_store_base)
{
    CLEAR_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_STATUS(sample_store_base);
 40010e4:	21004104 	addi	r4,r4,260
 40010e8:	20800037 	ldwio	r2,0(r4)
 40010ec:	10800054 	ori	r2,r2,1
 40010f0:	20800035 	stwio	r2,0(r4)
 40010f4:	f800283a 	ret

040010f8 <adc_interrupt_asserted>:
}

int adc_interrupt_asserted(int sample_store_base)
{
    return((READ_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_STATUS(sample_store_base)==1) ? -1 : 0);
 40010f8:	20804137 	ldwio	r2,260(r4)
 40010fc:	1080004c 	andi	r2,r2,1
}
 4001100:	0085c83a 	sub	r2,zero,r2
 4001104:	f800283a 	ret

04001108 <adc_wait_for_interrupt>:

void adc_wait_for_interrupt(int sample_store_base)
{
 4001108:	21004104 	addi	r4,r4,260
    WAIT_FOR_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ(sample_store_base);
 400110c:	20800037 	ldwio	r2,0(r4)
 4001110:	1080004c 	andi	r2,r2,1
 4001114:	103ffd26 	beq	r2,zero,400110c <__ram_exceptions_end+0xfabfcf80>
}
 4001118:	f800283a 	ret

0400111c <alt_onchip_flash_read>:
{
    int ret_code = 0;
    alt_onchip_flash_dev* flash = (alt_onchip_flash_dev*)flash_info;

    /* Make sure the input parameters is not outside of this device's range. */
    if ((offset >= flash->dev.length) || ((offset+length) > flash->dev.length)) {
 400111c:	20c00b17 	ldw	r3,44(r4)
 4001120:	28c0160e 	bge	r5,r3,400117c <alt_onchip_flash_read+0x60>
 4001124:	2005883a 	mov	r2,r4
 4001128:	29c9883a 	add	r4,r5,r7
 400112c:	19001316 	blt	r3,r4,400117c <alt_onchip_flash_read+0x60>
    alt_flash_dev *flash_info,
    int           offset,
    void          *dest_addr,
    int           length
)
{
 4001130:	defffe04 	addi	sp,sp,-8
 4001134:	dc000015 	stw	r16,0(sp)
 4001138:	1021883a 	mov	r16,r2
    /* Make sure the input parameters is not outside of this device's range. */
    if ((offset >= flash->dev.length) || ((offset+length) > flash->dev.length)) {
        return -EFAULT;
    }
    
    memcpy(dest_addr, (alt_u8*)flash->dev.base_addr+offset, length);
 400113c:	10800a17 	ldw	r2,40(r2)
 4001140:	3009883a 	mov	r4,r6
 4001144:	380d883a 	mov	r6,r7
 4001148:	114b883a 	add	r5,r2,r5
    alt_flash_dev *flash_info,
    int           offset,
    void          *dest_addr,
    int           length
)
{
 400114c:	dfc00115 	stw	ra,4(sp)
    /* Make sure the input parameters is not outside of this device's range. */
    if ((offset >= flash->dev.length) || ((offset+length) > flash->dev.length)) {
        return -EFAULT;
    }
    
    memcpy(dest_addr, (alt_u8*)flash->dev.base_addr+offset, length);
 4001150:	400250c0 	call	400250c <memcpy>

    if (NULL != flash->csr_base) {
 4001154:	80802f17 	ldw	r2,188(r16)
 4001158:	10000326 	beq	r2,zero,4001168 <alt_onchip_flash_read+0x4c>
        int read_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_READ_MSK;
 400115c:	10800037 	ldwio	r2,0(r2)
        if (read_status != ALTERA_ONCHIP_FLASH_STATUS_READ_PASSED) {
 4001160:	1080010c 	andi	r2,r2,4
 4001164:	10000726 	beq	r2,zero,4001184 <alt_onchip_flash_read+0x68>
    int           offset,
    void          *dest_addr,
    int           length
)
{
    int ret_code = 0;
 4001168:	0005883a 	mov	r2,zero
            /* Read failed.  Return error.*/
            ret_code = -EIO;
        }
    }
    return ret_code;
}
 400116c:	dfc00117 	ldw	ra,4(sp)
 4001170:	dc000017 	ldw	r16,0(sp)
 4001174:	dec00204 	addi	sp,sp,8
 4001178:	f800283a 	ret
    int ret_code = 0;
    alt_onchip_flash_dev* flash = (alt_onchip_flash_dev*)flash_info;

    /* Make sure the input parameters is not outside of this device's range. */
    if ((offset >= flash->dev.length) || ((offset+length) > flash->dev.length)) {
        return -EFAULT;
 400117c:	00bffc84 	movi	r2,-14
 4001180:	f800283a 	ret

    if (NULL != flash->csr_base) {
        int read_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_READ_MSK;
        if (read_status != ALTERA_ONCHIP_FLASH_STATUS_READ_PASSED) {
            /* Read failed.  Return error.*/
            ret_code = -EIO;
 4001184:	00bffec4 	movi	r2,-5
 4001188:	003ff806 	br	400116c <__ram_exceptions_end+0xfabfcfe0>

0400118c <alt_onchip_flash_get_info>:
{
    int ret_code = 0;

    alt_flash_dev* flash = (alt_flash_dev*)fd;

    if (NULL != number_of_regions)
 400118c:	30000226 	beq	r6,zero,4001198 <alt_onchip_flash_get_info+0xc>
    {
        /* Pass the number of region to user */
        *number_of_regions = flash->number_of_regions;
 4001190:	20800c17 	ldw	r2,48(r4)
 4001194:	30800015 	stw	r2,0(r6)
    }

    if (!flash->number_of_regions)
 4001198:	20800c17 	ldw	r2,48(r4)
 400119c:	10000926 	beq	r2,zero,40011c4 <alt_onchip_flash_get_info+0x38>
    {
        ret_code = -ENOMEM;
    }
    else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
 40011a0:	00c00204 	movi	r3,8
 40011a4:	18800916 	blt	r3,r2,40011cc <alt_onchip_flash_get_info+0x40>
    {
        ret_code = -EFAULT;
    }
    else
    {
        if (NULL != info)
 40011a8:	28000426 	beq	r5,zero,40011bc <alt_onchip_flash_get_info+0x30>
        {
            /* Pass the table of erase blocks to user */
            *info = &flash->region_info[0];
 40011ac:	21000d04 	addi	r4,r4,52
 40011b0:	29000015 	stw	r4,0(r5)
    alt_flash_fd *fd,
    flash_region **info,
    int          *number_of_regions
)
{
    int ret_code = 0;
 40011b4:	0005883a 	mov	r2,zero
 40011b8:	f800283a 	ret
 40011bc:	0005883a 	mov	r2,zero
            *info = &flash->region_info[0];
        }
    }

    return ret_code;
}
 40011c0:	f800283a 	ret
        *number_of_regions = flash->number_of_regions;
    }

    if (!flash->number_of_regions)
    {
        ret_code = -ENOMEM;
 40011c4:	00bffd04 	movi	r2,-12
 40011c8:	f800283a 	ret
    }
    else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
    {
        ret_code = -EFAULT;
 40011cc:	00bffc84 	movi	r2,-14
 40011d0:	f800283a 	ret

040011d4 <alt_onchip_flash_erase_block>:
    int ret_code = 0;
    alt_onchip_flash_dev *flash = (alt_onchip_flash_dev*)flash_info;
    int page_address;

    /* Make sure the input parameters is not outside of this device's range. */
    if (block_offset >= flash->dev.length) {
 40011d4:	20800b17 	ldw	r2,44(r4)
 40011d8:	2880580e 	bge	r5,r2,400133c <alt_onchip_flash_erase_block+0x168>
        return -EFAULT;
    }

    /* Make sure IP support write and erase operation */
    if ((flash->csr_base == NULL) || (flash->is_read_only)) {
 40011dc:	20c02f17 	ldw	r3,188(r4)
 40011e0:	18005426 	beq	r3,zero,4001334 <alt_onchip_flash_erase_block+0x160>
 40011e4:	20802e17 	ldw	r2,184(r4)
 40011e8:	1000521e 	bne	r2,zero,4001334 <alt_onchip_flash_erase_block+0x160>
        return -ENODEV;
    }

    /* The block_offset must be page size aligned */
    if ((block_offset & (flash->page_size - 1)) != 0)
 40011ec:	20803f17 	ldw	r2,252(r4)
 40011f0:	10bfffc4 	addi	r2,r2,-1
 40011f4:	1144703a 	and	r2,r2,r5
 40011f8:	1000521e 	bne	r2,zero,4001344 <alt_onchip_flash_erase_block+0x170>
int alt_onchip_flash_erase_block
(
    alt_flash_dev *flash_info,
    int           block_offset
)
{
 40011fc:	defffc04 	addi	sp,sp,-16
 4001200:	dc000015 	stw	r16,0(sp)
 4001204:	040002f4 	movhi	r16,11
 4001208:	dc800215 	stw	r18,8(sp)
 400120c:	dc400115 	stw	r17,4(sp)
 4001210:	dfc00315 	stw	ra,12(sp)
 4001214:	2825883a 	mov	r18,r5
 4001218:	2023883a 	mov	r17,r4
 400121c:	842b9804 	addi	r16,r16,-20896
 4001220:	00000306 	br	4001230 <alt_onchip_flash_erase_block+0x5c>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
              ALTERA_ONCHIP_FLASH_STATUS_BUSY_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_BUSY_IDLE
    ) {
	 
	alt_busy_sleep(1); /* delay 1us */
 4001224:	4001b380 	call	4001b38 <alt_busy_sleep>

        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
            count_down--;
            if (count_down == 0) {
 4001228:	80003a26 	beq	r16,zero,4001314 <alt_onchip_flash_erase_block+0x140>
 400122c:	88c02f17 	ldw	r3,188(r17)
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
 4001230:	18800037 	ldwio	r2,0(r3)
              ALTERA_ONCHIP_FLASH_STATUS_BUSY_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_BUSY_IDLE
    ) {
	 
	alt_busy_sleep(1); /* delay 1us */
 4001234:	01000044 	movi	r4,1
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
 4001238:	108000cc 	andi	r2,r2,3
 400123c:	843fffc4 	addi	r16,r16,-1
 4001240:	103ff81e 	bne	r2,zero,4001224 <__ram_exceptions_end+0xfabfd098>
    {
        return ret_code;
    }

    /* Enable write and erase operation */
    ALTERA_ONCHIP_FLASH_ENABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
 4001244:	18c00104 	addi	r3,r3,4
 4001248:	18800037 	ldwio	r2,0(r3)
 400124c:	113c002c 	andhi	r4,r2,61440
 4001250:	00802034 	movhi	r2,128
 4001254:	10bfffc4 	addi	r2,r2,-1
 4001258:	2084b03a 	or	r2,r4,r2
 400125c:	18800035 	stwio	r2,0(r3)

    /* Calculate Page erase address, it is 32bit word addressing*/
    page_address = block_offset / 4;

    /* Perform Page erase operation */
    ALTERA_ONCHIP_FLASH_PAGE_ERASE(flash->csr_base, page_address);
 4001260:	88c02f17 	ldw	r3,188(r17)
 4001264:	18c00104 	addi	r3,r3,4
 4001268:	18800037 	ldwio	r2,0(r3)
 400126c:	900b883a 	mov	r5,r18
 4001270:	90002a16 	blt	r18,zero,400131c <alt_onchip_flash_erase_block+0x148>
 4001274:	280bd0ba 	srai	r5,r5,2
 4001278:	10bc002c 	andhi	r2,r2,61440
 400127c:	29401c34 	orhi	r5,r5,112
 4001280:	288ab03a 	or	r5,r5,r2
 4001284:	19400035 	stwio	r5,0(r3)
 4001288:	040002f4 	movhi	r16,11
 400128c:	842b9804 	addi	r16,r16,-20896
 4001290:	00000206 	br	400129c <alt_onchip_flash_erase_block+0xc8>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
              ALTERA_ONCHIP_FLASH_STATUS_BUSY_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_BUSY_IDLE
    ) {
	 
	alt_busy_sleep(1); /* delay 1us */
 4001294:	4001b380 	call	4001b38 <alt_busy_sleep>

        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
            count_down--;
            if (count_down == 0) {
 4001298:	80002226 	beq	r16,zero,4001324 <alt_onchip_flash_erase_block+0x150>
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
 400129c:	88c02f17 	ldw	r3,188(r17)
 40012a0:	18800037 	ldwio	r2,0(r3)
              ALTERA_ONCHIP_FLASH_STATUS_BUSY_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_BUSY_IDLE
    ) {
	 
	alt_busy_sleep(1); /* delay 1us */
 40012a4:	01000044 	movi	r4,1
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
 40012a8:	108000cc 	andi	r2,r2,3
 40012ac:	843fffc4 	addi	r16,r16,-1
 40012b0:	103ff81e 	bne	r2,zero,4001294 <__ram_exceptions_end+0xfabfd108>

    /* Calculate Page erase address, it is 32bit word addressing*/
    page_address = block_offset / 4;

    /* Perform Page erase operation */
    ALTERA_ONCHIP_FLASH_PAGE_ERASE(flash->csr_base, page_address);
 40012b4:	040002f4 	movhi	r16,11
 40012b8:	842b9804 	addi	r16,r16,-20896
 40012bc:	00000306 	br	40012cc <alt_onchip_flash_erase_block+0xf8>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
              ALTERA_ONCHIP_FLASH_STATUS_ERASE_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_ERASE_PASSED
    ) {

	alt_busy_sleep(1); /* delay 1us */
 40012c0:	4001b380 	call	4001b38 <alt_busy_sleep>
 40012c4:	88c02f17 	ldw	r3,188(r17)

        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
            count_down--;
            if (count_down == 0) {
 40012c8:	80001826 	beq	r16,zero,400132c <alt_onchip_flash_erase_block+0x158>
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
 40012cc:	18800037 	ldwio	r2,0(r3)
              ALTERA_ONCHIP_FLASH_STATUS_ERASE_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_ERASE_PASSED
    ) {

	alt_busy_sleep(1); /* delay 1us */
 40012d0:	01000044 	movi	r4,1
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
 40012d4:	1080040c 	andi	r2,r2,16
 40012d8:	843fffc4 	addi	r16,r16,-1
 40012dc:	103ff826 	beq	r2,zero,40012c0 <__ram_exceptions_end+0xfabfd134>
int alt_onchip_flash_poll_for_status_erase_passed
(
    alt_onchip_flash_dev *flash
)
{
    int ret_code = 0;
 40012e0:	0005883a 	mov	r2,zero

    /* Wait until flash controller indicate erase passed */
    ret_code = alt_onchip_flash_poll_for_status_erase_passed(flash);

    /* Disable write and erase operation */
    ALTERA_ONCHIP_FLASH_DISABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
 40012e4:	18c00104 	addi	r3,r3,4
 40012e8:	19400037 	ldwio	r5,0(r3)
 40012ec:	01040034 	movhi	r4,4096
 40012f0:	213fffc4 	addi	r4,r4,-1
 40012f4:	2908b03a 	or	r4,r5,r4
 40012f8:	19000035 	stwio	r4,0(r3)

    return ret_code;
}
 40012fc:	dfc00317 	ldw	ra,12(sp)
 4001300:	dc800217 	ldw	r18,8(sp)
 4001304:	dc400117 	ldw	r17,4(sp)
 4001308:	dc000017 	ldw	r16,0(sp)
 400130c:	dec00404 	addi	sp,sp,16
 4001310:	f800283a 	ret
        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
            count_down--;
            if (count_down == 0) {
                /* Timeout */
                ret_code = -ETIMEDOUT;
 4001314:	00bfe304 	movi	r2,-116
 4001318:	003ff806 	br	40012fc <__ram_exceptions_end+0xfabfd170>

    /* Calculate Page erase address, it is 32bit word addressing*/
    page_address = block_offset / 4;

    /* Perform Page erase operation */
    ALTERA_ONCHIP_FLASH_PAGE_ERASE(flash->csr_base, page_address);
 400131c:	914000c4 	addi	r5,r18,3
 4001320:	003fd406 	br	4001274 <__ram_exceptions_end+0xfabfd0e8>
 4001324:	88c02f17 	ldw	r3,188(r17)
 4001328:	003fe206 	br	40012b4 <__ram_exceptions_end+0xfabfd128>
        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
            count_down--;
            if (count_down == 0) {
                /* Timeout */
                ret_code = -ETIMEDOUT;
 400132c:	00bfe304 	movi	r2,-116
 4001330:	003fec06 	br	40012e4 <__ram_exceptions_end+0xfabfd158>
        return -EFAULT;
    }

    /* Make sure IP support write and erase operation */
    if ((flash->csr_base == NULL) || (flash->is_read_only)) {
        return -ENODEV;
 4001334:	00bffb44 	movi	r2,-19
 4001338:	f800283a 	ret
    alt_onchip_flash_dev *flash = (alt_onchip_flash_dev*)flash_info;
    int page_address;

    /* Make sure the input parameters is not outside of this device's range. */
    if (block_offset >= flash->dev.length) {
        return -EFAULT;
 400133c:	00bffc84 	movi	r2,-14
 4001340:	f800283a 	ret

    /* The block_offset must be page size aligned */
    if ((block_offset & (flash->page_size - 1)) != 0)
    {
        /* The address is not aligned */
        return -EINVAL;
 4001344:	00bffa84 	movi	r2,-22

    /* Disable write and erase operation */
    ALTERA_ONCHIP_FLASH_DISABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);

    return ret_code;
}
 4001348:	f800283a 	ret

0400134c <alt_onchip_flash_write_block>:
    int next_data_offset;
    alt_u32 chunk_of_data;

    /* Make sure the input parameters is not outside of this device's range. */
    if (
        (block_offset >= flash->dev.length) ||
 400134c:	20800b17 	ldw	r2,44(r4)
    int           block_offset,
    int           data_offset,
    const void    *data,
    int           length
)
{
 4001350:	defff404 	addi	sp,sp,-48
 4001354:	dc800415 	stw	r18,16(sp)
 4001358:	dfc00b15 	stw	ra,44(sp)
 400135c:	df000a15 	stw	fp,40(sp)
 4001360:	ddc00915 	stw	r23,36(sp)
 4001364:	dd800815 	stw	r22,32(sp)
 4001368:	dd400715 	stw	r21,28(sp)
 400136c:	dd000615 	stw	r20,24(sp)
 4001370:	dcc00515 	stw	r19,20(sp)
 4001374:	dc400315 	stw	r17,12(sp)
 4001378:	dc000215 	stw	r16,8(sp)
 400137c:	dc800c17 	ldw	r18,48(sp)
    int current_data_offset = data_offset;
    int next_data_offset;
    alt_u32 chunk_of_data;

    /* Make sure the input parameters is not outside of this device's range. */
    if (
 4001380:	2880740e 	bge	r5,r2,4001554 <alt_onchip_flash_write_block+0x208>
 4001384:	3023883a 	mov	r17,r6
        (block_offset >= flash->dev.length) ||
 4001388:	3080720e 	bge	r6,r2,4001554 <alt_onchip_flash_write_block+0x208>
        (data_offset >= flash->dev.length) ||
 400138c:	1185c83a 	sub	r2,r2,r6
 4001390:	14807016 	blt	r2,r18,4001554 <alt_onchip_flash_write_block+0x208>
    ) {
        return -EFAULT;
    }

    /* Make sure IP support support write and erase operation */
    if ((flash->csr_base == NULL) || (flash->is_read_only != 0)) {
 4001394:	20c02f17 	ldw	r3,188(r4)
 4001398:	2021883a 	mov	r16,r4
 400139c:	18006f26 	beq	r3,zero,400155c <alt_onchip_flash_write_block+0x210>
 40013a0:	20802e17 	ldw	r2,184(r4)
 40013a4:	10006d1e 	bne	r2,zero,400155c <alt_onchip_flash_write_block+0x210>
 40013a8:	04c002f4 	movhi	r19,11
 40013ac:	3829883a 	mov	r20,r7
 40013b0:	9ceb9804 	addi	r19,r19,-20896
 40013b4:	00000306 	br	40013c4 <alt_onchip_flash_write_block+0x78>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
              ALTERA_ONCHIP_FLASH_STATUS_BUSY_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_BUSY_IDLE
    ) {
	 
	alt_busy_sleep(1); /* delay 1us */
 40013b8:	4001b380 	call	4001b38 <alt_busy_sleep>

        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
            count_down--;
            if (count_down == 0) {
 40013bc:	98006326 	beq	r19,zero,400154c <alt_onchip_flash_write_block+0x200>
 40013c0:	80c02f17 	ldw	r3,188(r16)
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
 40013c4:	18800037 	ldwio	r2,0(r3)
              ALTERA_ONCHIP_FLASH_STATUS_BUSY_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_BUSY_IDLE
    ) {
	 
	alt_busy_sleep(1); /* delay 1us */
 40013c8:	01000044 	movi	r4,1
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
 40013cc:	108000cc 	andi	r2,r2,3
 40013d0:	9cffffc4 	addi	r19,r19,-1
 40013d4:	103ff81e 	bne	r2,zero,40013b8 <__ram_exceptions_end+0xfabfd22c>
    {
        return ret_code;
    }

    /* Enable write and erase operation */
    ALTERA_ONCHIP_FLASH_ENABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
 40013d8:	18c00104 	addi	r3,r3,4
 40013dc:	18800037 	ldwio	r2,0(r3)
 40013e0:	113c002c 	andhi	r4,r2,61440
 40013e4:	00802034 	movhi	r2,128
 40013e8:	10bfffc4 	addi	r2,r2,-1
 40013ec:	2084b03a 	or	r2,r4,r2
 40013f0:	18800035 	stwio	r2,0(r3)

    /* Check data length */
    while (length)
 40013f4:	0027883a 	mov	r19,zero
 40013f8:	90005a26 	beq	r18,zero,4001564 <alt_onchip_flash_write_block+0x218>
    {
        /* Minimum write size to onchip flash is 32 bits of data */
        chunk_of_data = 0xFFFFFFFF;
 40013fc:	05bfffc4 	movi	r22,-1

        /* The start of data_offset must be 4 bytes (32 bits) aligned */
        if ((current_data_offset & (ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1)) == 0)
        {
            /* The address is 4-byte aligned here */
            next_data_offset = (current_data_offset + ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE) & ~(ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);
 4001400:	057fff04 	movi	r21,-4

    /* Check data length */
    while (length)
    {
        /* Minimum write size to onchip flash is 32 bits of data */
        chunk_of_data = 0xFFFFFFFF;
 4001404:	dd800015 	stw	r22,0(sp)

        /* The start of data_offset must be 4 bytes (32 bits) aligned */
        if ((current_data_offset & (ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1)) == 0)
 4001408:	890000cc 	andi	r4,r17,3
 400140c:	20002c1e 	bne	r4,zero,40014c0 <alt_onchip_flash_write_block+0x174>
        {
            /* The address is 4-byte aligned here */
            next_data_offset = (current_data_offset + ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE) & ~(ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);
 4001410:	88c00104 	addi	r3,r17,4
 4001414:	1d46703a 	and	r3,r3,r21
            length_of_current_write = MIN(length, next_data_offset - current_data_offset);
 4001418:	1c79c83a 	sub	fp,r3,r17
 400141c:	9700010e 	bge	r18,fp,4001424 <alt_onchip_flash_write_block+0xd8>
 4001420:	9039883a 	mov	fp,r18
            /* Prepare the 4 bytes chunk of data to be written */
            memcpy(&chunk_of_data, &((alt_u8*)data)[buffer_offset], length_of_current_write);
 4001424:	a4cb883a 	add	r5,r20,r19
 4001428:	e00d883a 	mov	r6,fp
 400142c:	d809883a 	mov	r4,sp
 4001430:	d8c00115 	stw	r3,4(sp)
 4001434:	400250c0 	call	400250c <memcpy>

        /* The start of data_offset must be 4 bytes (32 bits) aligned */
        if ((current_data_offset & (ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1)) == 0)
        {
            /* The address is 4-byte aligned here */
            next_data_offset = (current_data_offset + ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE) & ~(ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);
 4001438:	d8c00117 	ldw	r3,4(sp)
 400143c:	882f883a 	mov	r23,r17
            length_of_current_write = MIN(length, next_data_offset - current_data_offset);
            /* Prepare the 4 bytes chunk of data to be written */
            memcpy(&chunk_of_data, &((alt_u8*)data)[buffer_offset], length_of_current_write);
            buffer_offset += length_of_current_write;
 4001440:	9f27883a 	add	r19,r19,fp
            length -= length_of_current_write;
 4001444:	9725c83a 	sub	r18,r18,fp

        /* The start of data_offset must be 4 bytes (32 bits) aligned */
        if ((current_data_offset & (ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1)) == 0)
        {
            /* The address is 4-byte aligned here */
            next_data_offset = (current_data_offset + ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE) & ~(ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);
 4001448:	1823883a 	mov	r17,r3
            buffer_offset += length_of_current_write - padding;
            length -= length_of_current_write - padding;
        }

        /* Writing to flash via IO 32 bits at a time */
        IOWR_32DIRECT(flash->dev.base_addr, current_data_offset, chunk_of_data);
 400144c:	80800a17 	ldw	r2,40(r16)
 4001450:	15ef883a 	add	r23,r2,r23
 4001454:	d8800017 	ldw	r2,0(sp)
 4001458:	b8800035 	stwio	r2,0(r23)
 400145c:	05c002f4 	movhi	r23,11
 4001460:	bdeb9804 	addi	r23,r23,-20896
 4001464:	00000206 	br	4001470 <alt_onchip_flash_write_block+0x124>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
              ALTERA_ONCHIP_FLASH_STATUS_BUSY_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_BUSY_IDLE
    ) {
	 
	alt_busy_sleep(1); /* delay 1us */
 4001468:	4001b380 	call	4001b38 <alt_busy_sleep>

        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
            count_down--;
            if (count_down == 0) {
 400146c:	b8002326 	beq	r23,zero,40014fc <alt_onchip_flash_write_block+0x1b0>
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
 4001470:	80c02f17 	ldw	r3,188(r16)
 4001474:	18800037 	ldwio	r2,0(r3)
              ALTERA_ONCHIP_FLASH_STATUS_BUSY_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_BUSY_IDLE
    ) {
	 
	alt_busy_sleep(1); /* delay 1us */
 4001478:	01000044 	movi	r4,1
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
 400147c:	108000cc 	andi	r2,r2,3
 4001480:	bdffffc4 	addi	r23,r23,-1
 4001484:	103ff81e 	bne	r2,zero,4001468 <__ram_exceptions_end+0xfabfd2dc>
 4001488:	05c002f4 	movhi	r23,11
 400148c:	bdeb9804 	addi	r23,r23,-20896
 4001490:	00000306 	br	40014a0 <alt_onchip_flash_write_block+0x154>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
              ALTERA_ONCHIP_FLASH_STATUS_WRITE_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_WRITE_PASSED
    ) {

	alt_busy_sleep(1); /* delay 1us */
 4001494:	4001b380 	call	4001b38 <alt_busy_sleep>

        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
            count_down--;
            if (count_down == 0) {
 4001498:	b8001826 	beq	r23,zero,40014fc <alt_onchip_flash_write_block+0x1b0>
 400149c:	80c02f17 	ldw	r3,188(r16)
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
 40014a0:	18800037 	ldwio	r2,0(r3)
              ALTERA_ONCHIP_FLASH_STATUS_WRITE_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_WRITE_PASSED
    ) {

	alt_busy_sleep(1); /* delay 1us */
 40014a4:	01000044 	movi	r4,1
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
 40014a8:	1080020c 	andi	r2,r2,8
 40014ac:	bdffffc4 	addi	r23,r23,-1
 40014b0:	103ff826 	beq	r2,zero,4001494 <__ram_exceptions_end+0xfabfd308>

    /* Enable write and erase operation */
    ALTERA_ONCHIP_FLASH_ENABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);

    /* Check data length */
    while (length)
 40014b4:	903fd31e 	bne	r18,zero,4001404 <__ram_exceptions_end+0xfabfd278>
        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
            count_down--;
            if (count_down == 0) {
                /* Timeout */
                ret_code = -ETIMEDOUT;
 40014b8:	0005883a 	mov	r2,zero
 40014bc:	00001106 	br	4001504 <alt_onchip_flash_write_block+0x1b8>
        } else {
            /* Calculate how many padding bytes need to be added before the start of a data offset */
            int padding = current_data_offset & (ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);

            /* Calculate new 4-byte aligned data offset */
            current_data_offset = current_data_offset - padding;
 40014c0:	892fc83a 	sub	r23,r17,r4
            next_data_offset = (current_data_offset + ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE) & ~(ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);
 40014c4:	bc400104 	addi	r17,r23,4
 40014c8:	8d62703a 	and	r17,r17,r21
            length_of_current_write = MIN(length + padding, next_data_offset - current_data_offset);
            /* Prepare the 4 bytes chunk of data to be written */
            memcpy((void *)(((int)&chunk_of_data) + (int)padding), &((alt_u8*)data)[buffer_offset], length_of_current_write - padding);
 40014cc:	2485883a 	add	r2,r4,r18
 40014d0:	8df9c83a 	sub	fp,r17,r23
 40014d4:	1700010e 	bge	r2,fp,40014dc <alt_onchip_flash_write_block+0x190>
 40014d8:	1039883a 	mov	fp,r2
 40014dc:	e139c83a 	sub	fp,fp,r4
 40014e0:	a4cb883a 	add	r5,r20,r19
 40014e4:	e00d883a 	mov	r6,fp
 40014e8:	d909883a 	add	r4,sp,r4
 40014ec:	400250c0 	call	400250c <memcpy>
            buffer_offset += length_of_current_write - padding;
 40014f0:	9f27883a 	add	r19,r19,fp
            length -= length_of_current_write - padding;
 40014f4:	9725c83a 	sub	r18,r18,fp
 40014f8:	003fd406 	br	400144c <__ram_exceptions_end+0xfabfd2c0>
 40014fc:	80c02f17 	ldw	r3,188(r16)
        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
            count_down--;
            if (count_down == 0) {
                /* Timeout */
                ret_code = -ETIMEDOUT;
 4001500:	00bfe304 	movi	r2,-116
        /* Prepare to write next 4 bytes */
        current_data_offset = next_data_offset;
    }

    /* Disable write and erase operation */
    ALTERA_ONCHIP_FLASH_DISABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
 4001504:	18c00104 	addi	r3,r3,4
 4001508:	19400037 	ldwio	r5,0(r3)
 400150c:	01040034 	movhi	r4,4096
 4001510:	213fffc4 	addi	r4,r4,-1
 4001514:	2908b03a 	or	r4,r5,r4
 4001518:	19000035 	stwio	r4,0(r3)

    return ret_code;
}
 400151c:	dfc00b17 	ldw	ra,44(sp)
 4001520:	df000a17 	ldw	fp,40(sp)
 4001524:	ddc00917 	ldw	r23,36(sp)
 4001528:	dd800817 	ldw	r22,32(sp)
 400152c:	dd400717 	ldw	r21,28(sp)
 4001530:	dd000617 	ldw	r20,24(sp)
 4001534:	dcc00517 	ldw	r19,20(sp)
 4001538:	dc800417 	ldw	r18,16(sp)
 400153c:	dc400317 	ldw	r17,12(sp)
 4001540:	dc000217 	ldw	r16,8(sp)
 4001544:	dec00c04 	addi	sp,sp,48
 4001548:	f800283a 	ret
        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
            count_down--;
            if (count_down == 0) {
                /* Timeout */
                ret_code = -ETIMEDOUT;
 400154c:	00bfe304 	movi	r2,-116
 4001550:	003ff206 	br	400151c <__ram_exceptions_end+0xfabfd390>
    if (
        (block_offset >= flash->dev.length) ||
        (data_offset >= flash->dev.length) ||
        (length > (flash->dev.length - data_offset))
    ) {
        return -EFAULT;
 4001554:	00bffc84 	movi	r2,-14
 4001558:	003ff006 	br	400151c <__ram_exceptions_end+0xfabfd390>
    }

    /* Make sure IP support support write and erase operation */
    if ((flash->csr_base == NULL) || (flash->is_read_only != 0)) {
        return -ENODEV;
 400155c:	00bffb44 	movi	r2,-19
 4001560:	003fee06 	br	400151c <__ram_exceptions_end+0xfabfd390>
 4001564:	80c02f17 	ldw	r3,188(r16)
 4001568:	003fd306 	br	40014b8 <__ram_exceptions_end+0xfabfd32c>

0400156c <alt_onchip_flash_write>:
    int         full_length = length;
    int         start_offset = offset;
    alt_onchip_flash_dev* flash = (alt_onchip_flash_dev*)flash_info;

    /* Make sure the input parameters is not outside of this device's range. */
    if ((offset >= flash->dev.length) || (length > (flash->dev.length - offset)))
 400156c:	20800b17 	ldw	r2,44(r4)
    alt_flash_dev *flash_info,
    int           offset,
    const void    *src_addr,
    int           length
)
{
 4001570:	deffee04 	addi	sp,sp,-72
 4001574:	dfc01115 	stw	ra,68(sp)
 4001578:	df001015 	stw	fp,64(sp)
 400157c:	ddc00f15 	stw	r23,60(sp)
 4001580:	dd800e15 	stw	r22,56(sp)
 4001584:	dd400d15 	stw	r21,52(sp)
 4001588:	dd000c15 	stw	r20,48(sp)
 400158c:	dcc00b15 	stw	r19,44(sp)
 4001590:	dc800a15 	stw	r18,40(sp)
 4001594:	dc400915 	stw	r17,36(sp)
 4001598:	dc000815 	stw	r16,32(sp)
 400159c:	d9000215 	stw	r4,8(sp)
 40015a0:	d9400415 	stw	r5,16(sp)
 40015a4:	d9c00515 	stw	r7,20(sp)
    int         full_length = length;
    int         start_offset = offset;
    alt_onchip_flash_dev* flash = (alt_onchip_flash_dev*)flash_info;

    /* Make sure the input parameters is not outside of this device's range. */
    if ((offset >= flash->dev.length) || (length > (flash->dev.length - offset)))
 40015a8:	28806b0e 	bge	r5,r2,4001758 <alt_onchip_flash_write+0x1ec>
 40015ac:	1145c83a 	sub	r2,r2,r5
 40015b0:	11c06916 	blt	r2,r7,4001758 <alt_onchip_flash_write+0x1ec>
    }

    /*
    * First and foremost which sectors are affected?
    */
    for(i=0;i<flash->dev.number_of_regions;i++)
 40015b4:	20c00c17 	ldw	r3,48(r4)
 40015b8:	00c0690e 	bge	zero,r3,4001760 <alt_onchip_flash_write+0x1f4>
 40015bc:	302d883a 	mov	r22,r6
 40015c0:	d9800217 	ldw	r6,8(sp)
 40015c4:	d8800217 	ldw	r2,8(sp)
 40015c8:	df000517 	ldw	fp,20(sp)
 40015cc:	31800a17 	ldw	r6,40(r6)
 40015d0:	dc800417 	ldw	r18,16(sp)
 40015d4:	15c00f04 	addi	r23,r2,60
 40015d8:	d9800315 	stw	r6,12(sp)
 40015dc:	11801004 	addi	r6,r2,64
 40015e0:	d9800115 	stw	r6,4(sp)
 40015e4:	0027883a 	mov	r19,zero
    {
        /* Is it in this erase block region?*/
        if((offset >= flash->dev.region_info[i].offset) &&
 40015e8:	bc3ffe17 	ldw	r16,-8(r23)
 40015ec:	94000e16 	blt	r18,r16,4001628 <alt_onchip_flash_write+0xbc>
 40015f0:	b8bfff17 	ldw	r2,-4(r23)
 40015f4:	8085883a 	add	r2,r16,r2
 40015f8:	90800b0e 	bge	r18,r2,4001628 <alt_onchip_flash_write+0xbc>
            (offset < (flash->dev.region_info[i].offset +
            flash->dev.region_info[i].region_size)))
        {
            current_offset = flash->dev.region_info[i].offset;

            for(j=0;j<flash->dev.region_info[i].number_of_blocks;j++)
 40015fc:	ba400017 	ldw	r9,0(r23)
 4001600:	0240090e 	bge	zero,r9,4001628 <alt_onchip_flash_write+0xbc>
 4001604:	d8c00117 	ldw	r3,4(sp)
 4001608:	0023883a 	mov	r17,zero
 400160c:	1d000017 	ldw	r20,0(r3)
            {
                if ((offset >= current_offset ) &&
 4001610:	94000d0e 	bge	r18,r16,4001648 <alt_onchip_flash_write+0xdc>
 4001614:	8521883a 	add	r16,r16,r20
            (offset < (flash->dev.region_info[i].offset +
            flash->dev.region_info[i].region_size)))
        {
            current_offset = flash->dev.region_info[i].offset;

            for(j=0;j<flash->dev.region_info[i].number_of_blocks;j++)
 4001618:	8c400044 	addi	r17,r17,1
 400161c:	8a7ffc16 	blt	r17,r9,4001610 <__ram_exceptions_end+0xfabfd484>
 4001620:	d9800217 	ldw	r6,8(sp)
 4001624:	30c00c17 	ldw	r3,48(r6)
 4001628:	d8800117 	ldw	r2,4(sp)
    }

    /*
    * First and foremost which sectors are affected?
    */
    for(i=0;i<flash->dev.number_of_regions;i++)
 400162c:	9cc00044 	addi	r19,r19,1
 4001630:	bdc00404 	addi	r23,r23,16
 4001634:	10800404 	addi	r2,r2,16
 4001638:	d8800115 	stw	r2,4(sp)
 400163c:	98ffea16 	blt	r19,r3,40015e8 <__ram_exceptions_end+0xfabfd45c>
                                                                data_to_write);
                        }
                    }

                    /* Was this the last block? */
                    if ((length == data_to_write) || ret_code)
 4001640:	0005883a 	mov	r2,zero
 4001644:	00002006 	br	40016c8 <alt_onchip_flash_write+0x15c>
            current_offset = flash->dev.region_info[i].offset;

            for(j=0;j<flash->dev.region_info[i].number_of_blocks;j++)
            {
                if ((offset >= current_offset ) &&
                    (offset < (current_offset +
 4001648:	8507883a 	add	r3,r16,r20
        {
            current_offset = flash->dev.region_info[i].offset;

            for(j=0;j<flash->dev.region_info[i].number_of_blocks;j++)
            {
                if ((offset >= current_offset ) &&
 400164c:	90c0130e 	bge	r18,r3,400169c <alt_onchip_flash_write+0x130>
                {
                    /*
                    * Check if the contents of the block are different
                    * from the data we wish to put there
                    */
                    data_to_write = (current_offset + flash->dev.region_info[i].block_size - offset);
 4001650:	1cabc83a 	sub	r21,r3,r18
                    data_to_write = MIN(data_to_write, length);
 4001654:	e540010e 	bge	fp,r21,400165c <alt_onchip_flash_write+0xf0>
 4001658:	e02b883a 	mov	r21,fp
                    if(memcmp(src_addr, (alt_u8*)flash->dev.base_addr+offset, data_to_write))
 400165c:	d8800317 	ldw	r2,12(sp)
 4001660:	a80d883a 	mov	r6,r21
 4001664:	b009883a 	mov	r4,r22
 4001668:	148b883a 	add	r5,r2,r18
 400166c:	d8c00615 	stw	r3,24(sp)
 4001670:	da400715 	stw	r9,28(sp)
 4001674:	40024900 	call	4002490 <memcmp>
 4001678:	d8c00617 	ldw	r3,24(sp)
 400167c:	da400717 	ldw	r9,28(sp)
 4001680:	1000081e 	bne	r2,zero,40016a4 <alt_onchip_flash_write+0x138>
                                                                data_to_write);
                        }
                    }

                    /* Was this the last block? */
                    if ((length == data_to_write) || ret_code)
 4001684:	af3fee26 	beq	r21,fp,4001640 <__ram_exceptions_end+0xfabfd4b4>
 4001688:	1825883a 	mov	r18,r3
                    {
                        goto finished;
                    }

                    length -= data_to_write;
 400168c:	e579c83a 	sub	fp,fp,r21
                    offset = current_offset + flash->dev.region_info[i].block_size;
                    src_addr = (alt_u8*)src_addr + data_to_write;
 4001690:	b56d883a 	add	r22,r22,r21
 4001694:	9021883a 	mov	r16,r18
 4001698:	003fdf06 	br	4001618 <__ram_exceptions_end+0xfabfd48c>
 400169c:	1821883a 	mov	r16,r3
 40016a0:	003fdd06 	br	4001618 <__ram_exceptions_end+0xfabfd48c>
                    */
                    data_to_write = (current_offset + flash->dev.region_info[i].block_size - offset);
                    data_to_write = MIN(data_to_write, length);
                    if(memcmp(src_addr, (alt_u8*)flash->dev.base_addr+offset, data_to_write))
                    {
                        ret_code = (*flash->dev.erase_block)(&flash->dev, current_offset);
 40016a4:	d8c00217 	ldw	r3,8(sp)
 40016a8:	800b883a 	mov	r5,r16
 40016ac:	18800817 	ldw	r2,32(r3)
 40016b0:	1809883a 	mov	r4,r3
 40016b4:	103ee83a 	callr	r2

                        if (!ret_code)
                        {
                            ret_code = (*flash->dev.write_block)(
 40016b8:	d8c00217 	ldw	r3,8(sp)
                    data_to_write = MIN(data_to_write, length);
                    if(memcmp(src_addr, (alt_u8*)flash->dev.base_addr+offset, data_to_write))
                    {
                        ret_code = (*flash->dev.erase_block)(&flash->dev, current_offset);

                        if (!ret_code)
 40016bc:	10001526 	beq	r2,zero,4001714 <alt_onchip_flash_write+0x1a8>
 40016c0:	18c00a17 	ldw	r3,40(r3)
 40016c4:	d8c00315 	stw	r3,12(sp)
            }
        }
    }

finished:
    alt_dcache_flush((alt_u8*)flash->dev.base_addr+start_offset, full_length);
 40016c8:	d8c00317 	ldw	r3,12(sp)
 40016cc:	d9800417 	ldw	r6,16(sp)
 40016d0:	d9400517 	ldw	r5,20(sp)
 40016d4:	d8800615 	stw	r2,24(sp)
 40016d8:	1989883a 	add	r4,r3,r6
 40016dc:	4001c6c0 	call	4001c6c <alt_dcache_flush>
    return ret_code;
 40016e0:	d8800617 	ldw	r2,24(sp)
}
 40016e4:	dfc01117 	ldw	ra,68(sp)
 40016e8:	df001017 	ldw	fp,64(sp)
 40016ec:	ddc00f17 	ldw	r23,60(sp)
 40016f0:	dd800e17 	ldw	r22,56(sp)
 40016f4:	dd400d17 	ldw	r21,52(sp)
 40016f8:	dd000c17 	ldw	r20,48(sp)
 40016fc:	dcc00b17 	ldw	r19,44(sp)
 4001700:	dc800a17 	ldw	r18,40(sp)
 4001704:	dc400917 	ldw	r17,36(sp)
 4001708:	dc000817 	ldw	r16,32(sp)
 400170c:	dec01204 	addi	sp,sp,72
 4001710:	f800283a 	ret
                    {
                        ret_code = (*flash->dev.erase_block)(&flash->dev, current_offset);

                        if (!ret_code)
                        {
                            ret_code = (*flash->dev.write_block)(
 4001714:	18800917 	ldw	r2,36(r3)
 4001718:	b00f883a 	mov	r7,r22
 400171c:	dd400015 	stw	r21,0(sp)
 4001720:	900d883a 	mov	r6,r18
 4001724:	800b883a 	mov	r5,r16
 4001728:	1809883a 	mov	r4,r3
 400172c:	103ee83a 	callr	r2
                                                                data_to_write);
                        }
                    }

                    /* Was this the last block? */
                    if ((length == data_to_write) || ret_code)
 4001730:	af000f26 	beq	r21,fp,4001770 <alt_onchip_flash_write+0x204>
 4001734:	10000e1e 	bne	r2,zero,4001770 <alt_onchip_flash_write+0x204>
 4001738:	d8c00117 	ldw	r3,4(sp)
 400173c:	ba400017 	ldw	r9,0(r23)
 4001740:	1d000017 	ldw	r20,0(r3)
 4001744:	d8c00217 	ldw	r3,8(sp)
 4001748:	8525883a 	add	r18,r16,r20
 400174c:	18c00a17 	ldw	r3,40(r3)
 4001750:	d8c00315 	stw	r3,12(sp)
 4001754:	003fcd06 	br	400168c <__ram_exceptions_end+0xfabfd500>
    alt_onchip_flash_dev* flash = (alt_onchip_flash_dev*)flash_info;

    /* Make sure the input parameters is not outside of this device's range. */
    if ((offset >= flash->dev.length) || (length > (flash->dev.length - offset)))
    {
        return -EFAULT;
 4001758:	00bffc84 	movi	r2,-14
 400175c:	003fe106 	br	40016e4 <__ram_exceptions_end+0xfabfd558>
 4001760:	20c00a17 	ldw	r3,40(r4)
    }

    /*
    * First and foremost which sectors are affected?
    */
    for(i=0;i<flash->dev.number_of_regions;i++)
 4001764:	0005883a 	mov	r2,zero
 4001768:	d8c00315 	stw	r3,12(sp)
 400176c:	003fd606 	br	40016c8 <__ram_exceptions_end+0xfabfd53c>
 4001770:	d8c00217 	ldw	r3,8(sp)
 4001774:	003fd206 	br	40016c0 <__ram_exceptions_end+0xfabfd534>

04001778 <altera_onchip_flash_init>:

    /* Set up flash_region data structures. */
    number_of_regions = 0;
    region_info = &flash->dev.region_info[0];

    if (flash->csr_base != NULL) {
 4001778:	20802f17 	ldw	r2,188(r4)
**/
void altera_onchip_flash_init
(
    alt_onchip_flash_dev *flash
)
{
 400177c:	defff704 	addi	sp,sp,-36
 4001780:	dc800215 	stw	r18,8(sp)
 4001784:	dc000015 	stw	r16,0(sp)
 4001788:	dfc00815 	stw	ra,32(sp)
 400178c:	ddc00715 	stw	r23,28(sp)
 4001790:	dd800615 	stw	r22,24(sp)
 4001794:	dd400515 	stw	r21,20(sp)
 4001798:	dd000415 	stw	r20,16(sp)
 400179c:	dcc00315 	stw	r19,12(sp)
 40017a0:	dc400115 	stw	r17,4(sp)
 40017a4:	2021883a 	mov	r16,r4
    int sector4_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_AVAILABLE;
    int sector5_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_AVAILABLE;

    /* Set up flash_region data structures. */
    number_of_regions = 0;
    region_info = &flash->dev.region_info[0];
 40017a8:	24800d04 	addi	r18,r4,52

    if (flash->csr_base != NULL) {
 40017ac:	10003926 	beq	r2,zero,4001894 <altera_onchip_flash_init+0x11c>
        sector1_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_MSK;
 40017b0:	11000037 	ldwio	r4,0(r2)
        sector2_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_MSK;
 40017b4:	10c00037 	ldwio	r3,0(r2)
 40017b8:	1d40100c 	andi	r21,r3,64
        sector3_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_MSK;
 40017bc:	10c00037 	ldwio	r3,0(r2)
 40017c0:	1d80200c 	andi	r22,r3,128
        sector4_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_MSK;
 40017c4:	15000037 	ldwio	r20,0(r2)
 40017c8:	a500400c 	andi	r20,r20,256
        sector5_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_MSK;
 40017cc:	14c00037 	ldwio	r19,0(r2)
    }

    if ((flash->sector1_enabled == 1) && (sector1_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_UNAVAILABLE)) {
 40017d0:	00800044 	movi	r2,1
 40017d4:	80c03017 	ldw	r3,192(r16)
    if (flash->csr_base != NULL) {
        sector1_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_MSK;
        sector2_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_MSK;
        sector3_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_MSK;
        sector4_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_MSK;
        sector5_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_MSK;
 40017d8:	9cc0800c 	andi	r19,r19,512
    }

    if ((flash->sector1_enabled == 1) && (sector1_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_UNAVAILABLE)) {
 40017dc:	18807726 	beq	r3,r2,40019bc <altera_onchip_flash_init+0x244>
    int sector3_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_AVAILABLE;
    int sector4_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_AVAILABLE;
    int sector5_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_AVAILABLE;

    /* Set up flash_region data structures. */
    number_of_regions = 0;
 40017e0:	0023883a 	mov	r17,zero
        region_info[number_of_regions].block_size = flash->page_size;

        number_of_regions++;
    }

    if ((flash->sector2_enabled == 1) && (sector2_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_UNAVAILABLE)) {
 40017e4:	80c03317 	ldw	r3,204(r16)
 40017e8:	00800044 	movi	r2,1
 40017ec:	18805926 	beq	r3,r2,4001954 <altera_onchip_flash_init+0x1dc>
        region_info[number_of_regions].block_size = flash->page_size;

        number_of_regions++;
	}

    if ((flash->sector3_enabled == 1) && (sector3_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_UNAVAILABLE)) {
 40017f0:	80c03617 	ldw	r3,216(r16)
 40017f4:	00800044 	movi	r2,1
 40017f8:	18804426 	beq	r3,r2,400190c <altera_onchip_flash_init+0x194>
        region_info[number_of_regions].block_size = flash->page_size;

        number_of_regions++;
	}

	if ((flash->sector4_enabled == 1) && (sector4_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_UNAVAILABLE)) {
 40017fc:	80c03917 	ldw	r3,228(r16)
 4001800:	00800044 	movi	r2,1
 4001804:	18803f26 	beq	r3,r2,4001904 <altera_onchip_flash_init+0x18c>
        region_info[number_of_regions].block_size = flash->page_size;

        number_of_regions++;
	}

    if ((flash->sector5_enabled == 1) && (sector5_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_UNAVAILABLE)) {
 4001808:	80c03c17 	ldw	r3,240(r16)
 400180c:	00800044 	movi	r2,1
 4001810:	18800e26 	beq	r3,r2,400184c <altera_onchip_flash_init+0xd4>

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
 4001814:	d1600d04 	addi	r5,gp,-32716
 4001818:	8009883a 	mov	r4,r16

        number_of_regions++;
    }

    /* Update number of regions. */
    flash->dev.number_of_regions = number_of_regions;
 400181c:	84400c15 	stw	r17,48(r16)

    /*
    *  Register this device as a valid flash device type
    */
    alt_flash_device_register(&(flash->dev));
}
 4001820:	dfc00817 	ldw	ra,32(sp)
 4001824:	ddc00717 	ldw	r23,28(sp)
 4001828:	dd800617 	ldw	r22,24(sp)
 400182c:	dd400517 	ldw	r21,20(sp)
 4001830:	dd000417 	ldw	r20,16(sp)
 4001834:	dcc00317 	ldw	r19,12(sp)
 4001838:	dc800217 	ldw	r18,8(sp)
 400183c:	dc400117 	ldw	r17,4(sp)
 4001840:	dc000017 	ldw	r16,0(sp)
 4001844:	dec00904 	addi	sp,sp,36
 4001848:	4001ccc1 	jmpi	4001ccc <alt_dev_llist_insert>
        region_info[number_of_regions].block_size = flash->page_size;

        number_of_regions++;
	}

    if ((flash->sector5_enabled == 1) && (sector5_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_UNAVAILABLE)) {
 400184c:	983ff11e 	bne	r19,zero,4001814 <__ram_exceptions_end+0xfabfd688>

        region_info[number_of_regions].offset = flash->sector5_start_addr;
 4001850:	81403d17 	ldw	r5,244(r16)
        region_info[number_of_regions].region_size = flash->sector5_end_addr - flash->sector5_start_addr + 1;
 4001854:	80803e17 	ldw	r2,248(r16)
        number_of_regions++;
	}

    if ((flash->sector5_enabled == 1) && (sector5_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector5_start_addr;
 4001858:	8806913a 	slli	r3,r17,4
        region_info[number_of_regions].region_size = flash->sector5_end_addr - flash->sector5_start_addr + 1;
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
 400185c:	84c03f17 	ldw	r19,252(r16)
	}

    if ((flash->sector5_enabled == 1) && (sector5_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector5_start_addr;
        region_info[number_of_regions].region_size = flash->sector5_end_addr - flash->sector5_start_addr + 1;
 4001860:	1145c83a 	sub	r2,r2,r5
        number_of_regions++;
	}

    if ((flash->sector5_enabled == 1) && (sector5_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector5_start_addr;
 4001864:	90e5883a 	add	r18,r18,r3
        region_info[number_of_regions].region_size = flash->sector5_end_addr - flash->sector5_start_addr + 1;
 4001868:	10800044 	addi	r2,r2,1
 400186c:	90800115 	stw	r2,4(r18)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
 4001870:	80c7883a 	add	r3,r16,r3
 4001874:	19000e17 	ldw	r4,56(r3)
        number_of_regions++;
	}

    if ((flash->sector5_enabled == 1) && (sector5_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector5_start_addr;
 4001878:	91400015 	stw	r5,0(r18)
        region_info[number_of_regions].region_size = flash->sector5_end_addr - flash->sector5_start_addr + 1;
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
 400187c:	980b883a 	mov	r5,r19
 4001880:	40006980 	call	4000698 <__divsi3>
 4001884:	90800215 	stw	r2,8(r18)
        region_info[number_of_regions].block_size = flash->page_size;
 4001888:	94c00315 	stw	r19,12(r18)

        number_of_regions++;
 400188c:	8c400044 	addi	r17,r17,1
 4001890:	003fe006 	br	4001814 <__ram_exceptions_end+0xfabfd688>
        sector3_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_MSK;
        sector4_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_MSK;
        sector5_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_MSK;
    }

    if ((flash->sector1_enabled == 1) && (sector1_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_UNAVAILABLE)) {
 4001894:	20c03017 	ldw	r3,192(r4)
 4001898:	00800044 	movi	r2,1
 400189c:	18805626 	beq	r3,r2,40019f8 <altera_onchip_flash_init+0x280>
        region_info[number_of_regions].block_size = flash->page_size;

        number_of_regions++;
    }

    if ((flash->sector2_enabled == 1) && (sector2_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_UNAVAILABLE)) {
 40018a0:	24403317 	ldw	r17,204(r4)
 40018a4:	88803f26 	beq	r17,r2,40019a4 <altera_onchip_flash_init+0x22c>
        region_info[number_of_regions].block_size = flash->page_size;

        number_of_regions++;
	}

    if ((flash->sector3_enabled == 1) && (sector3_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_UNAVAILABLE)) {
 40018a8:	20c03617 	ldw	r3,216(r4)
 40018ac:	18805726 	beq	r3,r2,4001a0c <altera_onchip_flash_init+0x294>
        region_info[number_of_regions].block_size = flash->page_size;

        number_of_regions++;
	}

	if ((flash->sector4_enabled == 1) && (sector4_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_UNAVAILABLE)) {
 40018b0:	20c03917 	ldw	r3,228(r4)
    flash_region* region_info;
    int sector1_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_AVAILABLE;
    int sector2_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_AVAILABLE;
    int sector3_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_AVAILABLE;
    int sector4_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_AVAILABLE;
    int sector5_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_AVAILABLE;
 40018b4:	0027883a 	mov	r19,zero

    /* Set up flash_region data structures. */
    number_of_regions = 0;
 40018b8:	0023883a 	mov	r17,zero
        region_info[number_of_regions].block_size = flash->page_size;

        number_of_regions++;
	}

	if ((flash->sector4_enabled == 1) && (sector4_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_UNAVAILABLE)) {
 40018bc:	18bfd21e 	bne	r3,r2,4001808 <__ram_exceptions_end+0xfabfd67c>

        region_info[number_of_regions].offset = flash->sector4_start_addr;
 40018c0:	81403a17 	ldw	r5,232(r16)
        region_info[number_of_regions].region_size = flash->sector4_end_addr - flash->sector4_start_addr + 1;
 40018c4:	80803b17 	ldw	r2,236(r16)
        number_of_regions++;
	}

	if ((flash->sector4_enabled == 1) && (sector4_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector4_start_addr;
 40018c8:	8806913a 	slli	r3,r17,4
        region_info[number_of_regions].region_size = flash->sector4_end_addr - flash->sector4_start_addr + 1;
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
 40018cc:	85403f17 	ldw	r21,252(r16)
	}

	if ((flash->sector4_enabled == 1) && (sector4_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector4_start_addr;
        region_info[number_of_regions].region_size = flash->sector4_end_addr - flash->sector4_start_addr + 1;
 40018d0:	1145c83a 	sub	r2,r2,r5
        number_of_regions++;
	}

	if ((flash->sector4_enabled == 1) && (sector4_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector4_start_addr;
 40018d4:	90e9883a 	add	r20,r18,r3
        region_info[number_of_regions].region_size = flash->sector4_end_addr - flash->sector4_start_addr + 1;
 40018d8:	10800044 	addi	r2,r2,1
 40018dc:	a0800115 	stw	r2,4(r20)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
 40018e0:	80c7883a 	add	r3,r16,r3
 40018e4:	19000e17 	ldw	r4,56(r3)
        number_of_regions++;
	}

	if ((flash->sector4_enabled == 1) && (sector4_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector4_start_addr;
 40018e8:	a1400015 	stw	r5,0(r20)
        region_info[number_of_regions].region_size = flash->sector4_end_addr - flash->sector4_start_addr + 1;
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
 40018ec:	a80b883a 	mov	r5,r21
 40018f0:	40006980 	call	4000698 <__divsi3>
 40018f4:	a0800215 	stw	r2,8(r20)
        region_info[number_of_regions].block_size = flash->page_size;
 40018f8:	a5400315 	stw	r21,12(r20)

        number_of_regions++;
 40018fc:	8c400044 	addi	r17,r17,1
 4001900:	003fc106 	br	4001808 <__ram_exceptions_end+0xfabfd67c>
        region_info[number_of_regions].block_size = flash->page_size;

        number_of_regions++;
	}

	if ((flash->sector4_enabled == 1) && (sector4_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_UNAVAILABLE)) {
 4001904:	a03fee26 	beq	r20,zero,40018c0 <__ram_exceptions_end+0xfabfd734>
 4001908:	003fbf06 	br	4001808 <__ram_exceptions_end+0xfabfd67c>
        region_info[number_of_regions].block_size = flash->page_size;

        number_of_regions++;
	}

    if ((flash->sector3_enabled == 1) && (sector3_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_UNAVAILABLE)) {
 400190c:	b03fbb1e 	bne	r22,zero,40017fc <__ram_exceptions_end+0xfabfd670>

        region_info[number_of_regions].offset = flash->sector3_start_addr;
 4001910:	81403717 	ldw	r5,220(r16)
        region_info[number_of_regions].region_size = flash->sector3_end_addr - flash->sector3_start_addr + 1;
 4001914:	80803817 	ldw	r2,224(r16)
        number_of_regions++;
	}

    if ((flash->sector3_enabled == 1) && (sector3_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector3_start_addr;
 4001918:	8806913a 	slli	r3,r17,4
        region_info[number_of_regions].region_size = flash->sector3_end_addr - flash->sector3_start_addr + 1;
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
 400191c:	85803f17 	ldw	r22,252(r16)
	}

    if ((flash->sector3_enabled == 1) && (sector3_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector3_start_addr;
        region_info[number_of_regions].region_size = flash->sector3_end_addr - flash->sector3_start_addr + 1;
 4001920:	1145c83a 	sub	r2,r2,r5
        number_of_regions++;
	}

    if ((flash->sector3_enabled == 1) && (sector3_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector3_start_addr;
 4001924:	90eb883a 	add	r21,r18,r3
        region_info[number_of_regions].region_size = flash->sector3_end_addr - flash->sector3_start_addr + 1;
 4001928:	10800044 	addi	r2,r2,1
 400192c:	a8800115 	stw	r2,4(r21)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
 4001930:	80c7883a 	add	r3,r16,r3
 4001934:	19000e17 	ldw	r4,56(r3)
        number_of_regions++;
	}

    if ((flash->sector3_enabled == 1) && (sector3_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector3_start_addr;
 4001938:	a9400015 	stw	r5,0(r21)
        region_info[number_of_regions].region_size = flash->sector3_end_addr - flash->sector3_start_addr + 1;
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
 400193c:	b00b883a 	mov	r5,r22
 4001940:	40006980 	call	4000698 <__divsi3>
 4001944:	a8800215 	stw	r2,8(r21)
        region_info[number_of_regions].block_size = flash->page_size;
 4001948:	ad800315 	stw	r22,12(r21)

        number_of_regions++;
 400194c:	8c400044 	addi	r17,r17,1
 4001950:	003faa06 	br	40017fc <__ram_exceptions_end+0xfabfd670>
        region_info[number_of_regions].block_size = flash->page_size;

        number_of_regions++;
    }

    if ((flash->sector2_enabled == 1) && (sector2_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_UNAVAILABLE)) {
 4001954:	a83fa61e 	bne	r21,zero,40017f0 <__ram_exceptions_end+0xfabfd664>
 4001958:	882a913a 	slli	r21,r17,4
 400195c:	8807883a 	mov	r3,r17
 4001960:	88a3883a 	add	r17,r17,r2

        region_info[number_of_regions].offset = flash->sector2_start_addr;
 4001964:	81403417 	ldw	r5,208(r16)
        region_info[number_of_regions].region_size = flash->sector2_end_addr - flash->sector2_start_addr + 1;
 4001968:	80803517 	ldw	r2,212(r16)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
 400196c:	1806913a 	slli	r3,r3,4
        number_of_regions++;
    }

    if ((flash->sector2_enabled == 1) && (sector2_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector2_start_addr;
 4001970:	956b883a 	add	r21,r18,r21
        region_info[number_of_regions].region_size = flash->sector2_end_addr - flash->sector2_start_addr + 1;
 4001974:	1145c83a 	sub	r2,r2,r5
 4001978:	10800044 	addi	r2,r2,1
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
 400197c:	85c03f17 	ldw	r23,252(r16)
    }

    if ((flash->sector2_enabled == 1) && (sector2_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector2_start_addr;
        region_info[number_of_regions].region_size = flash->sector2_end_addr - flash->sector2_start_addr + 1;
 4001980:	a8800115 	stw	r2,4(r21)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
 4001984:	80c5883a 	add	r2,r16,r3
 4001988:	11000e17 	ldw	r4,56(r2)
        number_of_regions++;
    }

    if ((flash->sector2_enabled == 1) && (sector2_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector2_start_addr;
 400198c:	a9400015 	stw	r5,0(r21)
        region_info[number_of_regions].region_size = flash->sector2_end_addr - flash->sector2_start_addr + 1;
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
 4001990:	b80b883a 	mov	r5,r23
 4001994:	40006980 	call	4000698 <__divsi3>
 4001998:	a8800215 	stw	r2,8(r21)
        region_info[number_of_regions].block_size = flash->page_size;
 400199c:	adc00315 	stw	r23,12(r21)
 40019a0:	003f9306 	br	40017f0 <__ram_exceptions_end+0xfabfd664>
        region_info[number_of_regions].block_size = flash->page_size;

        number_of_regions++;
    }

    if ((flash->sector2_enabled == 1) && (sector2_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_UNAVAILABLE)) {
 40019a4:	002b883a 	mov	r21,zero
    flash_region* region_info;
    int sector1_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_AVAILABLE;
    int sector2_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_AVAILABLE;
    int sector3_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_AVAILABLE;
    int sector4_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_AVAILABLE;
    int sector5_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_AVAILABLE;
 40019a8:	0027883a 	mov	r19,zero
    int number_of_regions;
    flash_region* region_info;
    int sector1_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_AVAILABLE;
    int sector2_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_AVAILABLE;
    int sector3_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_AVAILABLE;
    int sector4_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_AVAILABLE;
 40019ac:	0029883a 	mov	r20,zero
    /* A region is a sector of the onchip flash */
    int number_of_regions;
    flash_region* region_info;
    int sector1_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_AVAILABLE;
    int sector2_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_AVAILABLE;
    int sector3_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_AVAILABLE;
 40019b0:	002d883a 	mov	r22,zero
    int sector4_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_AVAILABLE;
    int sector5_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_AVAILABLE;

    /* Set up flash_region data structures. */
    number_of_regions = 0;
 40019b4:	0007883a 	mov	r3,zero
 40019b8:	003fea06 	br	4001964 <__ram_exceptions_end+0xfabfd7d8>
        sector3_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_MSK;
        sector4_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_MSK;
        sector5_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_MSK;
    }

    if ((flash->sector1_enabled == 1) && (sector1_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_UNAVAILABLE)) {
 40019bc:	2100080c 	andi	r4,r4,32
 40019c0:	203f871e 	bne	r4,zero,40017e0 <__ram_exceptions_end+0xfabfd654>

        region_info[number_of_regions].offset = flash->sector1_start_addr;
 40019c4:	81003117 	ldw	r4,196(r16)
        region_info[number_of_regions].region_size = flash->sector1_end_addr - flash->sector1_start_addr + 1;
 40019c8:	80803217 	ldw	r2,200(r16)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
 40019cc:	84403f17 	ldw	r17,252(r16)
        sector5_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_MSK;
    }

    if ((flash->sector1_enabled == 1) && (sector1_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector1_start_addr;
 40019d0:	81000d15 	stw	r4,52(r16)
        region_info[number_of_regions].region_size = flash->sector1_end_addr - flash->sector1_start_addr + 1;
 40019d4:	1109c83a 	sub	r4,r2,r4
 40019d8:	21000044 	addi	r4,r4,1
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
 40019dc:	880b883a 	mov	r5,r17
    }

    if ((flash->sector1_enabled == 1) && (sector1_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector1_start_addr;
        region_info[number_of_regions].region_size = flash->sector1_end_addr - flash->sector1_start_addr + 1;
 40019e0:	81000e15 	stw	r4,56(r16)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
 40019e4:	40006980 	call	4000698 <__divsi3>
 40019e8:	80800f15 	stw	r2,60(r16)
        region_info[number_of_regions].block_size = flash->page_size;
 40019ec:	84401015 	stw	r17,64(r16)

        number_of_regions++;
 40019f0:	04400044 	movi	r17,1
 40019f4:	003f7b06 	br	40017e4 <__ram_exceptions_end+0xfabfd658>
    flash_region* region_info;
    int sector1_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_AVAILABLE;
    int sector2_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_AVAILABLE;
    int sector3_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_AVAILABLE;
    int sector4_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_AVAILABLE;
    int sector5_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_AVAILABLE;
 40019f8:	0027883a 	mov	r19,zero
    int number_of_regions;
    flash_region* region_info;
    int sector1_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_AVAILABLE;
    int sector2_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_AVAILABLE;
    int sector3_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_AVAILABLE;
    int sector4_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_AVAILABLE;
 40019fc:	0029883a 	mov	r20,zero
    /* A region is a sector of the onchip flash */
    int number_of_regions;
    flash_region* region_info;
    int sector1_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_AVAILABLE;
    int sector2_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_AVAILABLE;
    int sector3_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_AVAILABLE;
 4001a00:	002d883a 	mov	r22,zero
{
    /* A region is a sector of the onchip flash */
    int number_of_regions;
    flash_region* region_info;
    int sector1_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_AVAILABLE;
    int sector2_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_AVAILABLE;
 4001a04:	002b883a 	mov	r21,zero
 4001a08:	003fee06 	br	40019c4 <__ram_exceptions_end+0xfabfd838>
    int sector3_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_AVAILABLE;
    int sector4_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_AVAILABLE;
    int sector5_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_AVAILABLE;
 4001a0c:	0027883a 	mov	r19,zero
    int number_of_regions;
    flash_region* region_info;
    int sector1_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_AVAILABLE;
    int sector2_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_AVAILABLE;
    int sector3_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_AVAILABLE;
    int sector4_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_AVAILABLE;
 4001a10:	0029883a 	mov	r20,zero
    int sector5_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_AVAILABLE;

    /* Set up flash_region data structures. */
    number_of_regions = 0;
 4001a14:	0023883a 	mov	r17,zero
 4001a18:	003fbd06 	br	4001910 <__ram_exceptions_end+0xfabfd784>

04001a1c <alt_onchip_flash_poll_for_status_to_go_idle>:
**/
int alt_onchip_flash_poll_for_status_to_go_idle
(
    alt_onchip_flash_dev *flash
)
{
 4001a1c:	defffd04 	addi	sp,sp,-12
 4001a20:	dc000015 	stw	r16,0(sp)
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
 4001a24:	040002f4 	movhi	r16,11
**/
int alt_onchip_flash_poll_for_status_to_go_idle
(
    alt_onchip_flash_dev *flash
)
{
 4001a28:	dc400115 	stw	r17,4(sp)
 4001a2c:	dfc00215 	stw	ra,8(sp)
 4001a30:	2023883a 	mov	r17,r4
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
 4001a34:	842b9804 	addi	r16,r16,-20896
 4001a38:	00000206 	br	4001a44 <alt_onchip_flash_poll_for_status_to_go_idle+0x28>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
              ALTERA_ONCHIP_FLASH_STATUS_BUSY_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_BUSY_IDLE
    ) {
	 
	alt_busy_sleep(1); /* delay 1us */
 4001a3c:	4001b380 	call	4001b38 <alt_busy_sleep>

        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
            count_down--;
            if (count_down == 0) {
 4001a40:	80000b26 	beq	r16,zero,4001a70 <alt_onchip_flash_poll_for_status_to_go_idle+0x54>
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
 4001a44:	88802f17 	ldw	r2,188(r17)
 4001a48:	10800037 	ldwio	r2,0(r2)
              ALTERA_ONCHIP_FLASH_STATUS_BUSY_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_BUSY_IDLE
    ) {
	 
	alt_busy_sleep(1); /* delay 1us */
 4001a4c:	01000044 	movi	r4,1
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
 4001a50:	108000cc 	andi	r2,r2,3
 4001a54:	843fffc4 	addi	r16,r16,-1
 4001a58:	103ff81e 	bne	r2,zero,4001a3c <__ram_exceptions_end+0xfabfd8b0>
            }
        }
    }

    return ret_code;
}
 4001a5c:	dfc00217 	ldw	ra,8(sp)
 4001a60:	dc400117 	ldw	r17,4(sp)
 4001a64:	dc000017 	ldw	r16,0(sp)
 4001a68:	dec00304 	addi	sp,sp,12
 4001a6c:	f800283a 	ret
        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
            count_down--;
            if (count_down == 0) {
                /* Timeout */
                ret_code = -ETIMEDOUT;
 4001a70:	00bfe304 	movi	r2,-116
 4001a74:	003ff906 	br	4001a5c <__ram_exceptions_end+0xfabfd8d0>

04001a78 <alt_onchip_flash_poll_for_status_erase_passed>:
**/
int alt_onchip_flash_poll_for_status_erase_passed
(
    alt_onchip_flash_dev *flash
)
{
 4001a78:	defffd04 	addi	sp,sp,-12
 4001a7c:	dc000015 	stw	r16,0(sp)
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
 4001a80:	040002f4 	movhi	r16,11
**/
int alt_onchip_flash_poll_for_status_erase_passed
(
    alt_onchip_flash_dev *flash
)
{
 4001a84:	dc400115 	stw	r17,4(sp)
 4001a88:	dfc00215 	stw	ra,8(sp)
 4001a8c:	2023883a 	mov	r17,r4
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
 4001a90:	842b9804 	addi	r16,r16,-20896
 4001a94:	00000206 	br	4001aa0 <alt_onchip_flash_poll_for_status_erase_passed+0x28>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
              ALTERA_ONCHIP_FLASH_STATUS_ERASE_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_ERASE_PASSED
    ) {

	alt_busy_sleep(1); /* delay 1us */
 4001a98:	4001b380 	call	4001b38 <alt_busy_sleep>

        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
            count_down--;
            if (count_down == 0) {
 4001a9c:	80000c26 	beq	r16,zero,4001ad0 <alt_onchip_flash_poll_for_status_erase_passed+0x58>
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
 4001aa0:	88802f17 	ldw	r2,188(r17)
 4001aa4:	10800037 	ldwio	r2,0(r2)
              ALTERA_ONCHIP_FLASH_STATUS_ERASE_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_ERASE_PASSED
    ) {

	alt_busy_sleep(1); /* delay 1us */
 4001aa8:	01000044 	movi	r4,1
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
 4001aac:	1080040c 	andi	r2,r2,16
 4001ab0:	843fffc4 	addi	r16,r16,-1
 4001ab4:	103ff826 	beq	r2,zero,4001a98 <__ram_exceptions_end+0xfabfd90c>
int alt_onchip_flash_poll_for_status_erase_passed
(
    alt_onchip_flash_dev *flash
)
{
    int ret_code = 0;
 4001ab8:	0005883a 	mov	r2,zero
            }
        }
    }

    return ret_code;
}
 4001abc:	dfc00217 	ldw	ra,8(sp)
 4001ac0:	dc400117 	ldw	r17,4(sp)
 4001ac4:	dc000017 	ldw	r16,0(sp)
 4001ac8:	dec00304 	addi	sp,sp,12
 4001acc:	f800283a 	ret
        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
            count_down--;
            if (count_down == 0) {
                /* Timeout */
                ret_code = -ETIMEDOUT;
 4001ad0:	00bfe304 	movi	r2,-116
 4001ad4:	003ff906 	br	4001abc <__ram_exceptions_end+0xfabfd930>

04001ad8 <alt_onchip_flash_poll_for_status_write_passed>:
**/
int alt_onchip_flash_poll_for_status_write_passed
(
    alt_onchip_flash_dev *flash
)
{
 4001ad8:	defffd04 	addi	sp,sp,-12
 4001adc:	dc000015 	stw	r16,0(sp)
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
 4001ae0:	040002f4 	movhi	r16,11
**/
int alt_onchip_flash_poll_for_status_write_passed
(
    alt_onchip_flash_dev *flash
)
{
 4001ae4:	dc400115 	stw	r17,4(sp)
 4001ae8:	dfc00215 	stw	ra,8(sp)
 4001aec:	2023883a 	mov	r17,r4
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
 4001af0:	842b9804 	addi	r16,r16,-20896
 4001af4:	00000206 	br	4001b00 <alt_onchip_flash_poll_for_status_write_passed+0x28>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
              ALTERA_ONCHIP_FLASH_STATUS_WRITE_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_WRITE_PASSED
    ) {

	alt_busy_sleep(1); /* delay 1us */
 4001af8:	4001b380 	call	4001b38 <alt_busy_sleep>

        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
            count_down--;
            if (count_down == 0) {
 4001afc:	80000c26 	beq	r16,zero,4001b30 <alt_onchip_flash_poll_for_status_write_passed+0x58>
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
 4001b00:	88802f17 	ldw	r2,188(r17)
 4001b04:	10800037 	ldwio	r2,0(r2)
              ALTERA_ONCHIP_FLASH_STATUS_WRITE_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_WRITE_PASSED
    ) {

	alt_busy_sleep(1); /* delay 1us */
 4001b08:	01000044 	movi	r4,1
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
 4001b0c:	1080020c 	andi	r2,r2,8
 4001b10:	843fffc4 	addi	r16,r16,-1
 4001b14:	103ff826 	beq	r2,zero,4001af8 <__ram_exceptions_end+0xfabfd96c>
int alt_onchip_flash_poll_for_status_write_passed
(
    alt_onchip_flash_dev *flash
)
{
    int ret_code = 0;
 4001b18:	0005883a 	mov	r2,zero
            }
        }
    }

    return ret_code;
}
 4001b1c:	dfc00217 	ldw	ra,8(sp)
 4001b20:	dc400117 	ldw	r17,4(sp)
 4001b24:	dc000017 	ldw	r16,0(sp)
 4001b28:	dec00304 	addi	sp,sp,12
 4001b2c:	f800283a 	ret
        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
            count_down--;
            if (count_down == 0) {
                /* Timeout */
                ret_code = -ETIMEDOUT;
 4001b30:	00bfe304 	movi	r2,-116
 4001b34:	003ff906 	br	4001b1c <__ram_exceptions_end+0xfabfd990>

04001b38 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 4001b38:	01413b34 	movhi	r5,1260
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 4001b3c:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 4001b40:	2953b104 	addi	r5,r5,20164
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 4001b44:	dc000015 	stw	r16,0(sp)
 4001b48:	dfc00115 	stw	ra,4(sp)
 4001b4c:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 4001b50:	40007900 	call	4000790 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 4001b54:	10001226 	beq	r2,zero,4001ba0 <alt_busy_sleep+0x68>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 4001b58:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 4001b5c:	013ec534 	movhi	r4,64276
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 4001b60:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 4001b64:	212c4f04 	addi	r4,r4,-20164
 4001b68:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 4001b6c:	297fffc4 	addi	r5,r5,-1
 4001b70:	283ffe1e 	bne	r5,zero,4001b6c <__ram_exceptions_end+0xfabfd9e0>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 4001b74:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 4001b78:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 4001b7c:	18bffb16 	blt	r3,r2,4001b6c <__ram_exceptions_end+0xfabfd9e0>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 4001b80:	840006a4 	muli	r16,r16,26
 4001b84:	843fffc4 	addi	r16,r16,-1
 4001b88:	803ffe1e 	bne	r16,zero,4001b84 <__ram_exceptions_end+0xfabfd9f8>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
 4001b8c:	0005883a 	mov	r2,zero
 4001b90:	dfc00117 	ldw	ra,4(sp)
 4001b94:	dc000017 	ldw	r16,0(sp)
 4001b98:	dec00204 	addi	sp,sp,8
 4001b9c:	f800283a 	ret
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 4001ba0:	840006a4 	muli	r16,r16,26
 4001ba4:	843fffc4 	addi	r16,r16,-1
 4001ba8:	043ffe16 	blt	zero,r16,4001ba4 <__ram_exceptions_end+0xfabfda18>
 4001bac:	003ff706 	br	4001b8c <__ram_exceptions_end+0xfabfda00>

04001bb0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 4001bb0:	defffd04 	addi	sp,sp,-12
 4001bb4:	dfc00215 	stw	ra,8(sp)
 4001bb8:	dc400115 	stw	r17,4(sp)
 4001bbc:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 4001bc0:	20001f16 	blt	r4,zero,4001c40 <close+0x90>
 4001bc4:	20c00324 	muli	r3,r4,12
 4001bc8:	00810034 	movhi	r2,1024
 4001bcc:	1094a804 	addi	r2,r2,21152
 4001bd0:	1885883a 	add	r2,r3,r2
 4001bd4:	2021883a 	mov	r16,r4

  if (fd)
 4001bd8:	10001926 	beq	r2,zero,4001c40 <close+0x90>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 4001bdc:	10c00017 	ldw	r3,0(r2)
 4001be0:	18c00417 	ldw	r3,16(r3)
 4001be4:	18000c26 	beq	r3,zero,4001c18 <close+0x68>
 4001be8:	1009883a 	mov	r4,r2
 4001bec:	183ee83a 	callr	r3

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 4001bf0:	8009883a 	mov	r4,r16
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 4001bf4:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 4001bf8:	40021740 	call	4002174 <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
 4001bfc:	0005883a 	mov	r2,zero
    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
 4001c00:	88000816 	blt	r17,zero,4001c24 <close+0x74>
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
 4001c04:	dfc00217 	ldw	ra,8(sp)
 4001c08:	dc400117 	ldw	r17,4(sp)
 4001c0c:	dc000017 	ldw	r16,0(sp)
 4001c10:	dec00304 	addi	sp,sp,12
 4001c14:	f800283a 	ret

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 4001c18:	40021740 	call	4002174 <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
 4001c1c:	0005883a 	mov	r2,zero
 4001c20:	003ff806 	br	4001c04 <__ram_exceptions_end+0xfabfda78>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
 4001c24:	d0a00c17 	ldw	r2,-32720(gp)
 4001c28:	10000c26 	beq	r2,zero,4001c5c <close+0xac>
 4001c2c:	103ee83a 	callr	r2
    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
 4001c30:	0463c83a 	sub	r17,zero,r17
 4001c34:	14400015 	stw	r17,0(r2)
      return -1;
 4001c38:	00bfffc4 	movi	r2,-1
 4001c3c:	003ff106 	br	4001c04 <__ram_exceptions_end+0xfabfda78>
 4001c40:	d0a00c17 	ldw	r2,-32720(gp)
 4001c44:	10000726 	beq	r2,zero,4001c64 <close+0xb4>
 4001c48:	103ee83a 	callr	r2
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4001c4c:	00c01444 	movi	r3,81
 4001c50:	10c00015 	stw	r3,0(r2)
    return -1;
 4001c54:	00bfffc4 	movi	r2,-1
 4001c58:	003fea06 	br	4001c04 <__ram_exceptions_end+0xfabfda78>
 4001c5c:	d0a30c04 	addi	r2,gp,-29648
 4001c60:	003ff306 	br	4001c30 <__ram_exceptions_end+0xfabfdaa4>
 4001c64:	d0a30c04 	addi	r2,gp,-29648
 4001c68:	003ff806 	br	4001c4c <__ram_exceptions_end+0xfabfdac0>

04001c6c <alt_dcache_flush>:
void alt_dcache_flush (void* start, alt_u32 len)
{
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 
 4001c6c:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
 4001c70:	2005883a 	mov	r2,r4
 4001c74:	2140092e 	bgeu	r4,r5,4001c9c <alt_dcache_flush+0x30>
  { 
    ALT_FLUSH_DATA(i); 
 4001c78:	1000001b 	flushda	0(r2)
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
 4001c7c:	10800804 	addi	r2,r2,32
 4001c80:	117ffd36 	bltu	r2,r5,4001c78 <__ram_exceptions_end+0xfabfdaec>
 4001c84:	0104303a 	nor	r2,zero,r4
 4001c88:	1145883a 	add	r2,r2,r5
 4001c8c:	1004d17a 	srli	r2,r2,5
 4001c90:	10800044 	addi	r2,r2,1
 4001c94:	1004917a 	slli	r2,r2,5
 4001c98:	2085883a 	add	r2,r4,r2
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_DCACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_DCACHE_LINE_SIZE - 1))
 4001c9c:	210007cc 	andi	r4,r4,31
 4001ca0:	20000126 	beq	r4,zero,4001ca8 <alt_dcache_flush+0x3c>
  {
    ALT_FLUSH_DATA(i);
 4001ca4:	1000001b 	flushda	0(r2)
 4001ca8:	f800283a 	ret

04001cac <alt_dcache_flush_all>:
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4001cac:	0005883a 	mov	r2,zero
 4001cb0:	00c20004 	movi	r3,2048
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 4001cb4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4001cb8:	10800804 	addi	r2,r2,32
 4001cbc:	10fffd1e 	bne	r2,r3,4001cb4 <__ram_exceptions_end+0xfabfdb28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 4001cc0:	f800283a 	ret

04001cc4 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
 4001cc4:	3005883a 	mov	r2,r6
 4001cc8:	f800283a 	ret

04001ccc <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 4001ccc:	20000a26 	beq	r4,zero,4001cf8 <alt_dev_llist_insert+0x2c>
 4001cd0:	20800217 	ldw	r2,8(r4)
 4001cd4:	10000826 	beq	r2,zero,4001cf8 <alt_dev_llist_insert+0x2c>

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
 4001cd8:	28c00017 	ldw	r3,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4001cdc:	21400115 	stw	r5,4(r4)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
 4001ce0:	0005883a 	mov	r2,zero
  entry->next     = list->next;
 4001ce4:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
 4001ce8:	28c00017 	ldw	r3,0(r5)
 4001cec:	19000115 	stw	r4,4(r3)
  list->next           = entry;
 4001cf0:	29000015 	stw	r4,0(r5)
 4001cf4:	f800283a 	ret
 4001cf8:	d0a00c17 	ldw	r2,-32720(gp)
 4001cfc:	10000926 	beq	r2,zero,4001d24 <alt_dev_llist_insert+0x58>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 4001d00:	deffff04 	addi	sp,sp,-4
 4001d04:	dfc00015 	stw	ra,0(sp)
 4001d08:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
 4001d0c:	00c00584 	movi	r3,22
 4001d10:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
 4001d14:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
 4001d18:	dfc00017 	ldw	ra,0(sp)
 4001d1c:	dec00104 	addi	sp,sp,4
 4001d20:	f800283a 	ret
 4001d24:	d0a30c04 	addi	r2,gp,-29648
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
 4001d28:	00c00584 	movi	r3,22
 4001d2c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
 4001d30:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
 4001d34:	f800283a 	ret

04001d38 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 4001d38:	defffb04 	addi	sp,sp,-20
 4001d3c:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) llist->next;
 4001d40:	2c000017 	ldw	r16,0(r5)
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 4001d44:	dc400115 	stw	r17,4(sp)
 4001d48:	2823883a 	mov	r17,r5
 4001d4c:	dcc00315 	stw	r19,12(sp)
 4001d50:	dfc00415 	stw	ra,16(sp)
 4001d54:	dc800215 	stw	r18,8(sp)
 4001d58:	2027883a 	mov	r19,r4
  alt_dev* next = (alt_dev*) llist->next;
  alt_32 len;

  len  = strlen(name) + 1;
 4001d5c:	40028440 	call	4002844 <strlen>
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4001d60:	8c000b26 	beq	r17,r16,4001d90 <alt_find_dev+0x58>
 4001d64:	14800044 	addi	r18,r2,1
 4001d68:	00000206 	br	4001d74 <alt_find_dev+0x3c>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
 4001d6c:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4001d70:	8c000726 	beq	r17,r16,4001d90 <alt_find_dev+0x58>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 4001d74:	81000217 	ldw	r4,8(r16)
 4001d78:	900d883a 	mov	r6,r18
 4001d7c:	980b883a 	mov	r5,r19
 4001d80:	40024900 	call	4002490 <memcmp>
 4001d84:	103ff91e 	bne	r2,zero,4001d6c <__ram_exceptions_end+0xfabfdbe0>
 4001d88:	8005883a 	mov	r2,r16
 4001d8c:	00000106 	br	4001d94 <alt_find_dev+0x5c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 4001d90:	0005883a 	mov	r2,zero
}
 4001d94:	dfc00417 	ldw	ra,16(sp)
 4001d98:	dcc00317 	ldw	r19,12(sp)
 4001d9c:	dc800217 	ldw	r18,8(sp)
 4001da0:	dc400117 	ldw	r17,4(sp)
 4001da4:	dc000017 	ldw	r16,0(sp)
 4001da8:	dec00504 	addi	sp,sp,20
 4001dac:	f800283a 	ret

04001db0 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
 4001db0:	defffe04 	addi	sp,sp,-8
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
 4001db4:	d1600d04 	addi	r5,gp,-32716
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
 4001db8:	dc000015 	stw	r16,0(sp)
 4001dbc:	dfc00115 	stw	ra,4(sp)
 4001dc0:	2021883a 	mov	r16,r4
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
 4001dc4:	4001d380 	call	4001d38 <alt_find_dev>

  if ((dev) && dev->open)
 4001dc8:	10000826 	beq	r2,zero,4001dec <alt_flash_open_dev+0x3c>
 4001dcc:	10c00317 	ldw	r3,12(r2)
 4001dd0:	18000726 	beq	r3,zero,4001df0 <alt_flash_open_dev+0x40>
  {
    return dev->open(dev, name);
 4001dd4:	800b883a 	mov	r5,r16
 4001dd8:	1009883a 	mov	r4,r2
  }

  return dev;
}
 4001ddc:	dfc00117 	ldw	ra,4(sp)
 4001de0:	dc000017 	ldw	r16,0(sp)
 4001de4:	dec00204 	addi	sp,sp,8
{
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);

  if ((dev) && dev->open)
  {
    return dev->open(dev, name);
 4001de8:	1800683a 	jmp	r3
 4001dec:	0005883a 	mov	r2,zero
  }

  return dev;
}
 4001df0:	dfc00117 	ldw	ra,4(sp)
 4001df4:	dc000017 	ldw	r16,0(sp)
 4001df8:	dec00204 	addi	sp,sp,8
 4001dfc:	f800283a 	ret

04001e00 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
  if (fd && fd->close)
 4001e00:	20000326 	beq	r4,zero,4001e10 <alt_flash_close_dev+0x10>
 4001e04:	20800417 	ldw	r2,16(r4)
 4001e08:	10000126 	beq	r2,zero,4001e10 <alt_flash_close_dev+0x10>
  {
    fd->close(fd);
 4001e0c:	1000683a 	jmp	r2
 4001e10:	f800283a 	ret

04001e14 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 4001e14:	01420004 	movi	r5,2048
 4001e18:	0009883a 	mov	r4,zero
 4001e1c:	400229c1 	jmpi	400229c <alt_icache_flush>

04001e20 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 4001e20:	4001eac1 	jmpi	4001eac <alt_iic_isr_register>

04001e24 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4001e24:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4001e28:	00bfff84 	movi	r2,-2
 4001e2c:	2084703a 	and	r2,r4,r2
 4001e30:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
 4001e34:	00c00044 	movi	r3,1
 4001e38:	d0a30a17 	ldw	r2,-29656(gp)
 4001e3c:	194a983a 	sll	r5,r3,r5
 4001e40:	288ab03a 	or	r5,r5,r2
 4001e44:	d1630a15 	stw	r5,-29656(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4001e48:	d0a30a17 	ldw	r2,-29656(gp)
 4001e4c:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4001e50:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
 4001e54:	0005883a 	mov	r2,zero
 4001e58:	f800283a 	ret

04001e5c <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4001e5c:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4001e60:	00bfff84 	movi	r2,-2
 4001e64:	2084703a 	and	r2,r4,r2
 4001e68:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
 4001e6c:	00ffff84 	movi	r3,-2
 4001e70:	d0a30a17 	ldw	r2,-29656(gp)
 4001e74:	194a183a 	rol	r5,r3,r5
 4001e78:	288a703a 	and	r5,r5,r2
 4001e7c:	d1630a15 	stw	r5,-29656(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4001e80:	d0a30a17 	ldw	r2,-29656(gp)
 4001e84:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4001e88:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
 4001e8c:	0005883a 	mov	r2,zero
 4001e90:	f800283a 	ret

04001e94 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 4001e94:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
 4001e98:	00800044 	movi	r2,1
 4001e9c:	1144983a 	sll	r2,r2,r5
 4001ea0:	10c4703a 	and	r2,r2,r3
}
 4001ea4:	1004c03a 	cmpne	r2,r2,zero
 4001ea8:	f800283a 	ret

04001eac <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
 4001eac:	00c007c4 	movi	r3,31
 4001eb0:	19401616 	blt	r3,r5,4001f0c <alt_iic_isr_register+0x60>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4001eb4:	defffe04 	addi	sp,sp,-8
 4001eb8:	dfc00115 	stw	ra,4(sp)
 4001ebc:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4001ec0:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4001ec4:	00ffff84 	movi	r3,-2
 4001ec8:	80c6703a 	and	r3,r16,r3
 4001ecc:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
 4001ed0:	280490fa 	slli	r2,r5,3
 4001ed4:	00c10034 	movhi	r3,1024
 4001ed8:	18da4f04 	addi	r3,r3,26940
 4001edc:	1885883a 	add	r2,r3,r2
 4001ee0:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
 4001ee4:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 4001ee8:	30000626 	beq	r6,zero,4001f04 <alt_iic_isr_register+0x58>
 4001eec:	4001e240 	call	4001e24 <alt_ic_irq_enable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4001ef0:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
 4001ef4:	dfc00117 	ldw	ra,4(sp)
 4001ef8:	dc000017 	ldw	r16,0(sp)
 4001efc:	dec00204 	addi	sp,sp,8
 4001f00:	f800283a 	ret
    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    alt_irq[id].context = isr_context;

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 4001f04:	4001e5c0 	call	4001e5c <alt_ic_irq_disable>
 4001f08:	003ff906 	br	4001ef0 <__ram_exceptions_end+0xfabfdd64>
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
 4001f0c:	00bffa84 	movi	r2,-22
 4001f10:	f800283a 	ret

04001f14 <alt_open_fd.constprop.0>:
 *
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
 4001f14:	defffe04 	addi	sp,sp,-8
 4001f18:	2805883a 	mov	r2,r5
 4001f1c:	dc000015 	stw	r16,0(sp)
 4001f20:	300b883a 	mov	r5,r6
 4001f24:	2021883a 	mov	r16,r4
{
  int old;

  old = open (name, flags, mode);
 4001f28:	01807fc4 	movi	r6,511
 4001f2c:	1009883a 	mov	r4,r2
 *
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
 4001f30:	dfc00115 	stw	ra,4(sp)
{
  int old;

  old = open (name, flags, mode);
 4001f34:	4001ffc0 	call	4001ffc <open>

  if (old >= 0)
 4001f38:	10000f16 	blt	r2,zero,4001f78 <alt_open_fd.constprop.0+0x64>
  {
    fd->dev      = alt_fd_list[old].dev;
 4001f3c:	10c00324 	muli	r3,r2,12
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
 4001f40:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
 4001f44:	00810034 	movhi	r2,1024
 4001f48:	1094a804 	addi	r2,r2,21152
 4001f4c:	10c5883a 	add	r2,r2,r3
 4001f50:	11400017 	ldw	r5,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
 4001f54:	10c00217 	ldw	r3,8(r2)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
 4001f58:	81400015 	stw	r5,0(r16)
    fd->priv     = alt_fd_list[old].priv;
 4001f5c:	10800117 	ldw	r2,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 4001f60:	80c00215 	stw	r3,8(r16)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
 4001f64:	80800115 	stw	r2,4(r16)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  }
} 
 4001f68:	dfc00117 	ldw	ra,4(sp)
 4001f6c:	dc000017 	ldw	r16,0(sp)
 4001f70:	dec00204 	addi	sp,sp,8
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
 4001f74:	40021741 	jmpi	4002174 <alt_release_fd>
  }
} 
 4001f78:	dfc00117 	ldw	ra,4(sp)
 4001f7c:	dc000017 	ldw	r16,0(sp)
 4001f80:	dec00204 	addi	sp,sp,8
 4001f84:	f800283a 	ret

04001f88 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 4001f88:	defffb04 	addi	sp,sp,-20
 4001f8c:	dc000015 	stw	r16,0(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 4001f90:	04010034 	movhi	r16,1024
 4001f94:	8414ab04 	addi	r16,r16,21164
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 4001f98:	dc400115 	stw	r17,4(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 4001f9c:	04400044 	movi	r17,1
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 4001fa0:	dcc00315 	stw	r19,12(sp)
 4001fa4:	dc800215 	stw	r18,8(sp)
 4001fa8:	2827883a 	mov	r19,r5
 4001fac:	3025883a 	mov	r18,r6
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 4001fb0:	200b883a 	mov	r5,r4
 4001fb4:	880d883a 	mov	r6,r17
 4001fb8:	8009883a 	mov	r4,r16
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 4001fbc:	dfc00415 	stw	ra,16(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 4001fc0:	4001f140 	call	4001f14 <alt_open_fd.constprop.0>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 4001fc4:	813ffd04 	addi	r4,r16,-12
 4001fc8:	980b883a 	mov	r5,r19
 4001fcc:	000d883a 	mov	r6,zero
 4001fd0:	4001f140 	call	4001f14 <alt_open_fd.constprop.0>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 4001fd4:	880d883a 	mov	r6,r17
 4001fd8:	900b883a 	mov	r5,r18
 4001fdc:	81000304 	addi	r4,r16,12
}  
 4001fe0:	dfc00417 	ldw	ra,16(sp)
 4001fe4:	dcc00317 	ldw	r19,12(sp)
 4001fe8:	dc800217 	ldw	r18,8(sp)
 4001fec:	dc400117 	ldw	r17,4(sp)
 4001ff0:	dc000017 	ldw	r16,0(sp)
 4001ff4:	dec00504 	addi	sp,sp,20
{
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 4001ff8:	4001f141 	jmpi	4001f14 <alt_open_fd.constprop.0>

04001ffc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 4001ffc:	defffa04 	addi	sp,sp,-24
 4002000:	dc000015 	stw	r16,0(sp)
 4002004:	2821883a 	mov	r16,r5
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 4002008:	d1600804 	addi	r5,gp,-32736
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 400200c:	dc800215 	stw	r18,8(sp)
 4002010:	dc400115 	stw	r17,4(sp)
 4002014:	dfc00515 	stw	ra,20(sp)
 4002018:	dd000415 	stw	r20,16(sp)
 400201c:	dcc00315 	stw	r19,12(sp)
 4002020:	2023883a 	mov	r17,r4
 4002024:	3025883a 	mov	r18,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 4002028:	4001d380 	call	4001d38 <alt_find_dev>
 400202c:	10004626 	beq	r2,zero,4002148 <open+0x14c>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
 4002030:	1009883a 	mov	r4,r2
 4002034:	1029883a 	mov	r20,r2
 4002038:	400224c0 	call	400224c <alt_get_fd>
 400203c:	1027883a 	mov	r19,r2
 4002040:	1000090e 	bge	r2,zero,4002068 <open+0x6c>
 4002044:	04e1c83a 	sub	r16,zero,r19

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
 4002048:	9809883a 	mov	r4,r19
 400204c:	40021740 	call	4002174 <alt_release_fd>
 4002050:	d0a00c17 	ldw	r2,-32720(gp)
 4002054:	10004326 	beq	r2,zero,4002164 <open+0x168>
 4002058:	103ee83a 	callr	r2
    ALT_ERRNO = -status;
 400205c:	14000015 	stw	r16,0(r2)
    return -1;
 4002060:	00bfffc4 	movi	r2,-1
 4002064:	00002e06 	br	4002120 <open+0x124>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
 4002068:	99000324 	muli	r4,r19,12

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 400206c:	00d00034 	movhi	r3,16384
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
 4002070:	00810034 	movhi	r2,1024

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 4002074:	18ffffc4 	addi	r3,r3,-1
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
 4002078:	1094a804 	addi	r2,r2,21152

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 400207c:	80c6703a 	and	r3,r16,r3
 4002080:	18d00034 	orhi	r3,r3,16384
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
 4002084:	2089883a 	add	r4,r4,r2

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 4002088:	20c00215 	stw	r3,8(r4)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 400208c:	d2200717 	ldw	r8,-32740(gp)
 4002090:	21c00017 	ldw	r7,0(r4)
 4002094:	11400204 	addi	r5,r2,8
 4002098:	0007883a 	mov	r3,zero
 400209c:	00000306 	br	40020ac <open+0xb0>
 40020a0:	10800304 	addi	r2,r2,12
 40020a4:	29400304 	addi	r5,r5,12
 40020a8:	40c01436 	bltu	r8,r3,40020fc <open+0x100>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 40020ac:	11800017 	ldw	r6,0(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 40020b0:	18c00044 	addi	r3,r3,1
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 40020b4:	31fffa1e 	bne	r6,r7,40020a0 <__ram_exceptions_end+0xfabfdf14>
 40020b8:	29800017 	ldw	r6,0(r5)
 40020bc:	303ff80e 	bge	r6,zero,40020a0 <__ram_exceptions_end+0xfabfdf14>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 40020c0:	20bff726 	beq	r4,r2,40020a0 <__ram_exceptions_end+0xfabfdf14>
 40020c4:	04000344 	movi	r16,13
 40020c8:	003fdf06 	br	4002048 <__ram_exceptions_end+0xfabfdebc>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
 40020cc:	1009883a 	mov	r4,r2
 40020d0:	400224c0 	call	400224c <alt_get_fd>
 40020d4:	1027883a 	mov	r19,r2
 40020d8:	103fda16 	blt	r2,zero,4002044 <__ram_exceptions_end+0xfabfdeb8>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
 40020dc:	99000324 	muli	r4,r19,12
 40020e0:	00810034 	movhi	r2,1024
 40020e4:	1094a804 	addi	r2,r2,21152
 40020e8:	2089883a 	add	r4,r4,r2
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 40020ec:	00900034 	movhi	r2,16384
 40020f0:	10bfffc4 	addi	r2,r2,-1
 40020f4:	8084703a 	and	r2,r16,r2
 40020f8:	20800215 	stw	r2,8(r4)
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 40020fc:	a0800317 	ldw	r2,12(r20)
 4002100:	10000f26 	beq	r2,zero,4002140 <open+0x144>
 4002104:	900f883a 	mov	r7,r18
 4002108:	800d883a 	mov	r6,r16
 400210c:	880b883a 	mov	r5,r17
 4002110:	103ee83a 	callr	r2
 4002114:	1007883a 	mov	r3,r2
 4002118:	9805883a 	mov	r2,r19
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 400211c:	18001316 	blt	r3,zero,400216c <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
}
 4002120:	dfc00517 	ldw	ra,20(sp)
 4002124:	dd000417 	ldw	r20,16(sp)
 4002128:	dcc00317 	ldw	r19,12(sp)
 400212c:	dc800217 	ldw	r18,8(sp)
 4002130:	dc400117 	ldw	r17,4(sp)
 4002134:	dc000017 	ldw	r16,0(sp)
 4002138:	dec00604 	addi	sp,sp,24
 400213c:	f800283a 	ret
 4002140:	9805883a 	mov	r2,r19
 4002144:	003ff606 	br	4002120 <__ram_exceptions_end+0xfabfdf94>
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 4002148:	8809883a 	mov	r4,r17
 400214c:	40021a00 	call	40021a0 <alt_find_file>
 4002150:	1029883a 	mov	r20,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 4002154:	103fdd1e 	bne	r2,zero,40020cc <__ram_exceptions_end+0xfabfdf40>
 4002158:	040004c4 	movi	r16,19
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 400215c:	04ffffc4 	movi	r19,-1
 4002160:	003fb906 	br	4002048 <__ram_exceptions_end+0xfabfdebc>
 4002164:	d0a30c04 	addi	r2,gp,-29648
 4002168:	003fbc06 	br	400205c <__ram_exceptions_end+0xfabfded0>
 400216c:	00e1c83a 	sub	r16,zero,r3
 4002170:	003fb506 	br	4002048 <__ram_exceptions_end+0xfabfdebc>

04002174 <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
 4002174:	00800084 	movi	r2,2
 4002178:	1100060e 	bge	r2,r4,4002194 <alt_release_fd+0x20>
  {
    alt_fd_list[fd].fd_flags = 0;
 400217c:	21000324 	muli	r4,r4,12
 4002180:	00810034 	movhi	r2,1024
 4002184:	1094a804 	addi	r2,r2,21152
 4002188:	1109883a 	add	r4,r2,r4
 400218c:	20000215 	stw	zero,8(r4)
    alt_fd_list[fd].dev      = 0;
 4002190:	20000015 	stw	zero,0(r4)
 4002194:	f800283a 	ret

04002198 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 4002198:	000170fa 	wrctl	ienable,zero
 400219c:	f800283a 	ret

040021a0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 40021a0:	defffa04 	addi	sp,sp,-24
 40021a4:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 40021a8:	d4200a17 	ldw	r16,-32728(gp)
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 40021ac:	dd000415 	stw	r20,16(sp)
 40021b0:	dfc00515 	stw	ra,20(sp)
 40021b4:	dcc00315 	stw	r19,12(sp)
 40021b8:	dc800215 	stw	r18,8(sp)
 40021bc:	dc400115 	stw	r17,4(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 40021c0:	d5200a04 	addi	r20,gp,-32728
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 40021c4:	85001626 	beq	r16,r20,4002220 <alt_find_file+0x80>
 40021c8:	2025883a 	mov	r18,r4
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
 40021cc:	04c00bc4 	movi	r19,47
 40021d0:	00000806 	br	40021f4 <alt_find_file+0x54>
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 40021d4:	9185883a 	add	r2,r18,r6
 40021d8:	10800007 	ldb	r2,0(r2)
 40021dc:	14c00126 	beq	r2,r19,40021e4 <alt_find_file+0x44>
 40021e0:	1000021e 	bne	r2,zero,40021ec <alt_find_file+0x4c>
        !memcmp (next->name, name, len))
 40021e4:	40024900 	call	4002490 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 40021e8:	10001626 	beq	r2,zero,4002244 <alt_find_file+0xa4>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
 40021ec:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 40021f0:	85000b26 	beq	r16,r20,4002220 <alt_find_file+0x80>
  {
    len = strlen(next->name);
 40021f4:	84400217 	ldw	r17,8(r16)
 40021f8:	8809883a 	mov	r4,r17
 40021fc:	40028440 	call	4002844 <strlen>
 4002200:	100d883a 	mov	r6,r2
    
    if (next->name[len-1] == '/')
 4002204:	8885883a 	add	r2,r17,r2
 4002208:	10bfffc7 	ldb	r2,-1(r2)
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
        !memcmp (next->name, name, len))
 400220c:	900b883a 	mov	r5,r18
 4002210:	8809883a 	mov	r4,r17
 
  while (next != (alt_dev*) &alt_fs_list)
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
 4002214:	14ffef1e 	bne	r2,r19,40021d4 <__ram_exceptions_end+0xfabfe048>
    {
      len -= 1;
 4002218:	31bfffc4 	addi	r6,r6,-1
 400221c:	003fed06 	br	40021d4 <__ram_exceptions_end+0xfabfe048>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 4002220:	0005883a 	mov	r2,zero
}
 4002224:	dfc00517 	ldw	ra,20(sp)
 4002228:	dd000417 	ldw	r20,16(sp)
 400222c:	dcc00317 	ldw	r19,12(sp)
 4002230:	dc800217 	ldw	r18,8(sp)
 4002234:	dc400117 	ldw	r17,4(sp)
 4002238:	dc000017 	ldw	r16,0(sp)
 400223c:	dec00604 	addi	sp,sp,24
 4002240:	f800283a 	ret
 4002244:	8005883a 	mov	r2,r16
 4002248:	003ff606 	br	4002224 <__ram_exceptions_end+0xfabfe098>

0400224c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 400224c:	01c10034 	movhi	r7,1024
 4002250:	39d4a804 	addi	r7,r7,21152
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4002254:	0005883a 	mov	r2,zero
 4002258:	3807883a 	mov	r3,r7
 400225c:	01800804 	movi	r6,32
 4002260:	00000206 	br	400226c <alt_get_fd+0x20>
 4002264:	10800044 	addi	r2,r2,1
 4002268:	11800a26 	beq	r2,r6,4002294 <alt_get_fd+0x48>
  {
    if (!alt_fd_list[i].dev)
 400226c:	19400017 	ldw	r5,0(r3)
 4002270:	18c00304 	addi	r3,r3,12
 4002274:	283ffb1e 	bne	r5,zero,4002264 <__ram_exceptions_end+0xfabfe0d8>
    {
      alt_fd_list[i].dev = dev;
 4002278:	10c00324 	muli	r3,r2,12
 400227c:	38cf883a 	add	r7,r7,r3
      if (i > alt_max_fd)
 4002280:	d0e00717 	ldw	r3,-32740(gp)

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    {
      alt_fd_list[i].dev = dev;
 4002284:	39000015 	stw	r4,0(r7)
      if (i > alt_max_fd)
 4002288:	1880030e 	bge	r3,r2,4002298 <alt_get_fd+0x4c>
      {
        alt_max_fd = i;
 400228c:	d0a00715 	stw	r2,-32740(gp)
 4002290:	f800283a 	ret
 */

int alt_get_fd (alt_dev* dev)
{
  alt_32 i;
  int rc = -EMFILE;
 4002294:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
 4002298:	f800283a 	ret

0400229c <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
 400229c:	00820004 	movi	r2,2048
 40022a0:	1140012e 	bgeu	r2,r5,40022a8 <alt_icache_flush+0xc>
 40022a4:	100b883a 	mov	r5,r2
 40022a8:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 40022ac:	2005883a 	mov	r2,r4
 40022b0:	2140092e 	bgeu	r4,r5,40022d8 <alt_icache_flush+0x3c>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 40022b4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 40022b8:	10800804 	addi	r2,r2,32
 40022bc:	117ffd36 	bltu	r2,r5,40022b4 <__ram_exceptions_end+0xfabfe128>
 40022c0:	0104303a 	nor	r2,zero,r4
 40022c4:	2885883a 	add	r2,r5,r2
 40022c8:	1004d17a 	srli	r2,r2,5
 40022cc:	10800044 	addi	r2,r2,1
 40022d0:	1004917a 	slli	r2,r2,5
 40022d4:	2085883a 	add	r2,r4,r2
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 40022d8:	210007cc 	andi	r4,r4,31
 40022dc:	20000126 	beq	r4,zero,40022e4 <alt_icache_flush+0x48>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 40022e0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 40022e4:	0000203a 	flushp
 40022e8:	f800283a 	ret

040022ec <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
 40022ec:	213ffe84 	addi	r4,r4,-6
 40022f0:	008003c4 	movi	r2,15
 40022f4:	11001636 	bltu	r2,r4,4002350 <alt_exception_cause_generated_bad_addr+0x64>
 40022f8:	200890ba 	slli	r4,r4,2
 40022fc:	00810034 	movhi	r2,1024
 4002300:	1088c404 	addi	r2,r2,8976
 4002304:	2089883a 	add	r4,r4,r2
 4002308:	20800017 	ldw	r2,0(r4)
 400230c:	1000683a 	jmp	r2
 4002310:	04002358 	cmpnei	r16,zero,141
 4002314:	04002358 	cmpnei	r16,zero,141
 4002318:	04002350 	cmplti	r16,zero,141
 400231c:	04002350 	cmplti	r16,zero,141
 4002320:	04002350 	cmplti	r16,zero,141
 4002324:	04002358 	cmpnei	r16,zero,141
 4002328:	04002350 	cmplti	r16,zero,141
 400232c:	04002350 	cmplti	r16,zero,141
 4002330:	04002358 	cmpnei	r16,zero,141
 4002334:	04002358 	cmpnei	r16,zero,141
 4002338:	04002350 	cmplti	r16,zero,141
 400233c:	04002358 	cmpnei	r16,zero,141
 4002340:	04002350 	cmplti	r16,zero,141
 4002344:	04002350 	cmplti	r16,zero,141
 4002348:	04002350 	cmplti	r16,zero,141
 400234c:	04002358 	cmpnei	r16,zero,141
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 4002350:	0005883a 	mov	r2,zero
 4002354:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 4002358:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
 400235c:	f800283a 	ret

04002360 <exit>:
 4002360:	defffe04 	addi	sp,sp,-8
 4002364:	000b883a 	mov	r5,zero
 4002368:	dc000015 	stw	r16,0(sp)
 400236c:	dfc00115 	stw	ra,4(sp)
 4002370:	2021883a 	mov	r16,r4
 4002374:	4002b880 	call	4002b88 <__call_exitprocs>
 4002378:	00810034 	movhi	r2,1024
 400237c:	10972d04 	addi	r2,r2,23732
 4002380:	11000017 	ldw	r4,0(r2)
 4002384:	20800f17 	ldw	r2,60(r4)
 4002388:	10000126 	beq	r2,zero,4002390 <exit+0x30>
 400238c:	103ee83a 	callr	r2
 4002390:	8009883a 	mov	r4,r16
 4002394:	4004aa40 	call	4004aa4 <_exit>

04002398 <_getc_r>:
 4002398:	defffd04 	addi	sp,sp,-12
 400239c:	dc000115 	stw	r16,4(sp)
 40023a0:	dfc00215 	stw	ra,8(sp)
 40023a4:	2021883a 	mov	r16,r4
 40023a8:	20000226 	beq	r4,zero,40023b4 <_getc_r+0x1c>
 40023ac:	20800e17 	ldw	r2,56(r4)
 40023b0:	10000c26 	beq	r2,zero,40023e4 <_getc_r+0x4c>
 40023b4:	28800117 	ldw	r2,4(r5)
 40023b8:	10bfffc4 	addi	r2,r2,-1
 40023bc:	28800115 	stw	r2,4(r5)
 40023c0:	10000c16 	blt	r2,zero,40023f4 <_getc_r+0x5c>
 40023c4:	28800017 	ldw	r2,0(r5)
 40023c8:	10c00044 	addi	r3,r2,1
 40023cc:	28c00015 	stw	r3,0(r5)
 40023d0:	10800003 	ldbu	r2,0(r2)
 40023d4:	dfc00217 	ldw	ra,8(sp)
 40023d8:	dc000117 	ldw	r16,4(sp)
 40023dc:	dec00304 	addi	sp,sp,12
 40023e0:	f800283a 	ret
 40023e4:	d9400015 	stw	r5,0(sp)
 40023e8:	40033000 	call	4003300 <__sinit>
 40023ec:	d9400017 	ldw	r5,0(sp)
 40023f0:	003ff006 	br	40023b4 <__ram_exceptions_end+0xfabfe228>
 40023f4:	8009883a 	mov	r4,r16
 40023f8:	dfc00217 	ldw	ra,8(sp)
 40023fc:	dc000117 	ldw	r16,4(sp)
 4002400:	dec00304 	addi	sp,sp,12
 4002404:	40027bc1 	jmpi	40027bc <__srget_r>

04002408 <getc>:
 4002408:	00810034 	movhi	r2,1024
 400240c:	defffd04 	addi	sp,sp,-12
 4002410:	10972e04 	addi	r2,r2,23736
 4002414:	dc400115 	stw	r17,4(sp)
 4002418:	14400017 	ldw	r17,0(r2)
 400241c:	dc000015 	stw	r16,0(sp)
 4002420:	dfc00215 	stw	ra,8(sp)
 4002424:	2021883a 	mov	r16,r4
 4002428:	88000226 	beq	r17,zero,4002434 <getc+0x2c>
 400242c:	88800e17 	ldw	r2,56(r17)
 4002430:	10000d26 	beq	r2,zero,4002468 <getc+0x60>
 4002434:	80800117 	ldw	r2,4(r16)
 4002438:	10bfffc4 	addi	r2,r2,-1
 400243c:	80800115 	stw	r2,4(r16)
 4002440:	10000c16 	blt	r2,zero,4002474 <getc+0x6c>
 4002444:	80800017 	ldw	r2,0(r16)
 4002448:	10c00044 	addi	r3,r2,1
 400244c:	80c00015 	stw	r3,0(r16)
 4002450:	10800003 	ldbu	r2,0(r2)
 4002454:	dfc00217 	ldw	ra,8(sp)
 4002458:	dc400117 	ldw	r17,4(sp)
 400245c:	dc000017 	ldw	r16,0(sp)
 4002460:	dec00304 	addi	sp,sp,12
 4002464:	f800283a 	ret
 4002468:	8809883a 	mov	r4,r17
 400246c:	40033000 	call	4003300 <__sinit>
 4002470:	003ff006 	br	4002434 <__ram_exceptions_end+0xfabfe2a8>
 4002474:	800b883a 	mov	r5,r16
 4002478:	8809883a 	mov	r4,r17
 400247c:	dfc00217 	ldw	ra,8(sp)
 4002480:	dc400117 	ldw	r17,4(sp)
 4002484:	dc000017 	ldw	r16,0(sp)
 4002488:	dec00304 	addi	sp,sp,12
 400248c:	40027bc1 	jmpi	40027bc <__srget_r>

04002490 <memcmp>:
 4002490:	01c000c4 	movi	r7,3
 4002494:	3980192e 	bgeu	r7,r6,40024fc <memcmp+0x6c>
 4002498:	2144b03a 	or	r2,r4,r5
 400249c:	11c4703a 	and	r2,r2,r7
 40024a0:	10000f26 	beq	r2,zero,40024e0 <memcmp+0x50>
 40024a4:	20800003 	ldbu	r2,0(r4)
 40024a8:	28c00003 	ldbu	r3,0(r5)
 40024ac:	10c0151e 	bne	r2,r3,4002504 <memcmp+0x74>
 40024b0:	31bfff84 	addi	r6,r6,-2
 40024b4:	01ffffc4 	movi	r7,-1
 40024b8:	00000406 	br	40024cc <memcmp+0x3c>
 40024bc:	20800003 	ldbu	r2,0(r4)
 40024c0:	28c00003 	ldbu	r3,0(r5)
 40024c4:	31bfffc4 	addi	r6,r6,-1
 40024c8:	10c00e1e 	bne	r2,r3,4002504 <memcmp+0x74>
 40024cc:	21000044 	addi	r4,r4,1
 40024d0:	29400044 	addi	r5,r5,1
 40024d4:	31fff91e 	bne	r6,r7,40024bc <__ram_exceptions_end+0xfabfe330>
 40024d8:	0005883a 	mov	r2,zero
 40024dc:	f800283a 	ret
 40024e0:	20c00017 	ldw	r3,0(r4)
 40024e4:	28800017 	ldw	r2,0(r5)
 40024e8:	18bfee1e 	bne	r3,r2,40024a4 <__ram_exceptions_end+0xfabfe318>
 40024ec:	31bfff04 	addi	r6,r6,-4
 40024f0:	21000104 	addi	r4,r4,4
 40024f4:	29400104 	addi	r5,r5,4
 40024f8:	39bff936 	bltu	r7,r6,40024e0 <__ram_exceptions_end+0xfabfe354>
 40024fc:	303fe91e 	bne	r6,zero,40024a4 <__ram_exceptions_end+0xfabfe318>
 4002500:	003ff506 	br	40024d8 <__ram_exceptions_end+0xfabfe34c>
 4002504:	10c5c83a 	sub	r2,r2,r3
 4002508:	f800283a 	ret

0400250c <memcpy>:
 400250c:	defffd04 	addi	sp,sp,-12
 4002510:	dfc00215 	stw	ra,8(sp)
 4002514:	dc400115 	stw	r17,4(sp)
 4002518:	dc000015 	stw	r16,0(sp)
 400251c:	00c003c4 	movi	r3,15
 4002520:	2005883a 	mov	r2,r4
 4002524:	1980452e 	bgeu	r3,r6,400263c <memcpy+0x130>
 4002528:	2906b03a 	or	r3,r5,r4
 400252c:	18c000cc 	andi	r3,r3,3
 4002530:	1800441e 	bne	r3,zero,4002644 <memcpy+0x138>
 4002534:	347ffc04 	addi	r17,r6,-16
 4002538:	8822d13a 	srli	r17,r17,4
 400253c:	28c00104 	addi	r3,r5,4
 4002540:	23400104 	addi	r13,r4,4
 4002544:	8820913a 	slli	r16,r17,4
 4002548:	2b000204 	addi	r12,r5,8
 400254c:	22c00204 	addi	r11,r4,8
 4002550:	84000504 	addi	r16,r16,20
 4002554:	2a800304 	addi	r10,r5,12
 4002558:	22400304 	addi	r9,r4,12
 400255c:	2c21883a 	add	r16,r5,r16
 4002560:	2811883a 	mov	r8,r5
 4002564:	200f883a 	mov	r7,r4
 4002568:	41000017 	ldw	r4,0(r8)
 400256c:	1fc00017 	ldw	ra,0(r3)
 4002570:	63c00017 	ldw	r15,0(r12)
 4002574:	39000015 	stw	r4,0(r7)
 4002578:	53800017 	ldw	r14,0(r10)
 400257c:	6fc00015 	stw	ra,0(r13)
 4002580:	5bc00015 	stw	r15,0(r11)
 4002584:	4b800015 	stw	r14,0(r9)
 4002588:	18c00404 	addi	r3,r3,16
 400258c:	39c00404 	addi	r7,r7,16
 4002590:	42000404 	addi	r8,r8,16
 4002594:	6b400404 	addi	r13,r13,16
 4002598:	63000404 	addi	r12,r12,16
 400259c:	5ac00404 	addi	r11,r11,16
 40025a0:	52800404 	addi	r10,r10,16
 40025a4:	4a400404 	addi	r9,r9,16
 40025a8:	1c3fef1e 	bne	r3,r16,4002568 <__ram_exceptions_end+0xfabfe3dc>
 40025ac:	89c00044 	addi	r7,r17,1
 40025b0:	380e913a 	slli	r7,r7,4
 40025b4:	310003cc 	andi	r4,r6,15
 40025b8:	02c000c4 	movi	r11,3
 40025bc:	11c7883a 	add	r3,r2,r7
 40025c0:	29cb883a 	add	r5,r5,r7
 40025c4:	5900212e 	bgeu	r11,r4,400264c <memcpy+0x140>
 40025c8:	1813883a 	mov	r9,r3
 40025cc:	2811883a 	mov	r8,r5
 40025d0:	200f883a 	mov	r7,r4
 40025d4:	42800017 	ldw	r10,0(r8)
 40025d8:	4a400104 	addi	r9,r9,4
 40025dc:	39ffff04 	addi	r7,r7,-4
 40025e0:	4abfff15 	stw	r10,-4(r9)
 40025e4:	42000104 	addi	r8,r8,4
 40025e8:	59fffa36 	bltu	r11,r7,40025d4 <__ram_exceptions_end+0xfabfe448>
 40025ec:	213fff04 	addi	r4,r4,-4
 40025f0:	2008d0ba 	srli	r4,r4,2
 40025f4:	318000cc 	andi	r6,r6,3
 40025f8:	21000044 	addi	r4,r4,1
 40025fc:	2109883a 	add	r4,r4,r4
 4002600:	2109883a 	add	r4,r4,r4
 4002604:	1907883a 	add	r3,r3,r4
 4002608:	290b883a 	add	r5,r5,r4
 400260c:	30000626 	beq	r6,zero,4002628 <memcpy+0x11c>
 4002610:	198d883a 	add	r6,r3,r6
 4002614:	29c00003 	ldbu	r7,0(r5)
 4002618:	18c00044 	addi	r3,r3,1
 400261c:	29400044 	addi	r5,r5,1
 4002620:	19ffffc5 	stb	r7,-1(r3)
 4002624:	19bffb1e 	bne	r3,r6,4002614 <__ram_exceptions_end+0xfabfe488>
 4002628:	dfc00217 	ldw	ra,8(sp)
 400262c:	dc400117 	ldw	r17,4(sp)
 4002630:	dc000017 	ldw	r16,0(sp)
 4002634:	dec00304 	addi	sp,sp,12
 4002638:	f800283a 	ret
 400263c:	2007883a 	mov	r3,r4
 4002640:	003ff206 	br	400260c <__ram_exceptions_end+0xfabfe480>
 4002644:	2007883a 	mov	r3,r4
 4002648:	003ff106 	br	4002610 <__ram_exceptions_end+0xfabfe484>
 400264c:	200d883a 	mov	r6,r4
 4002650:	003fee06 	br	400260c <__ram_exceptions_end+0xfabfe480>

04002654 <_putc_r>:
 4002654:	defffc04 	addi	sp,sp,-16
 4002658:	dc000215 	stw	r16,8(sp)
 400265c:	dfc00315 	stw	ra,12(sp)
 4002660:	2021883a 	mov	r16,r4
 4002664:	20000226 	beq	r4,zero,4002670 <_putc_r+0x1c>
 4002668:	20800e17 	ldw	r2,56(r4)
 400266c:	10001b26 	beq	r2,zero,40026dc <_putc_r+0x88>
 4002670:	30800217 	ldw	r2,8(r6)
 4002674:	10bfffc4 	addi	r2,r2,-1
 4002678:	30800215 	stw	r2,8(r6)
 400267c:	10000a16 	blt	r2,zero,40026a8 <_putc_r+0x54>
 4002680:	30800017 	ldw	r2,0(r6)
 4002684:	11400005 	stb	r5,0(r2)
 4002688:	30800017 	ldw	r2,0(r6)
 400268c:	10c00044 	addi	r3,r2,1
 4002690:	30c00015 	stw	r3,0(r6)
 4002694:	10800003 	ldbu	r2,0(r2)
 4002698:	dfc00317 	ldw	ra,12(sp)
 400269c:	dc000217 	ldw	r16,8(sp)
 40026a0:	dec00404 	addi	sp,sp,16
 40026a4:	f800283a 	ret
 40026a8:	30c00617 	ldw	r3,24(r6)
 40026ac:	10c00616 	blt	r2,r3,40026c8 <_putc_r+0x74>
 40026b0:	30800017 	ldw	r2,0(r6)
 40026b4:	00c00284 	movi	r3,10
 40026b8:	11400005 	stb	r5,0(r2)
 40026bc:	30800017 	ldw	r2,0(r6)
 40026c0:	11400003 	ldbu	r5,0(r2)
 40026c4:	28fff11e 	bne	r5,r3,400268c <__ram_exceptions_end+0xfabfe500>
 40026c8:	8009883a 	mov	r4,r16
 40026cc:	dfc00317 	ldw	ra,12(sp)
 40026d0:	dc000217 	ldw	r16,8(sp)
 40026d4:	dec00404 	addi	sp,sp,16
 40026d8:	40028dc1 	jmpi	40028dc <__swbuf_r>
 40026dc:	d9400015 	stw	r5,0(sp)
 40026e0:	d9800115 	stw	r6,4(sp)
 40026e4:	40033000 	call	4003300 <__sinit>
 40026e8:	d9800117 	ldw	r6,4(sp)
 40026ec:	d9400017 	ldw	r5,0(sp)
 40026f0:	003fdf06 	br	4002670 <__ram_exceptions_end+0xfabfe4e4>

040026f4 <putc>:
 40026f4:	00810034 	movhi	r2,1024
 40026f8:	defffc04 	addi	sp,sp,-16
 40026fc:	10972e04 	addi	r2,r2,23736
 4002700:	dc000115 	stw	r16,4(sp)
 4002704:	14000017 	ldw	r16,0(r2)
 4002708:	dc400215 	stw	r17,8(sp)
 400270c:	dfc00315 	stw	ra,12(sp)
 4002710:	2023883a 	mov	r17,r4
 4002714:	80000226 	beq	r16,zero,4002720 <putc+0x2c>
 4002718:	80800e17 	ldw	r2,56(r16)
 400271c:	10001a26 	beq	r2,zero,4002788 <putc+0x94>
 4002720:	28800217 	ldw	r2,8(r5)
 4002724:	10bfffc4 	addi	r2,r2,-1
 4002728:	28800215 	stw	r2,8(r5)
 400272c:	10000b16 	blt	r2,zero,400275c <putc+0x68>
 4002730:	28800017 	ldw	r2,0(r5)
 4002734:	14400005 	stb	r17,0(r2)
 4002738:	28800017 	ldw	r2,0(r5)
 400273c:	10c00044 	addi	r3,r2,1
 4002740:	28c00015 	stw	r3,0(r5)
 4002744:	10800003 	ldbu	r2,0(r2)
 4002748:	dfc00317 	ldw	ra,12(sp)
 400274c:	dc400217 	ldw	r17,8(sp)
 4002750:	dc000117 	ldw	r16,4(sp)
 4002754:	dec00404 	addi	sp,sp,16
 4002758:	f800283a 	ret
 400275c:	28c00617 	ldw	r3,24(r5)
 4002760:	10c00e16 	blt	r2,r3,400279c <putc+0xa8>
 4002764:	28800017 	ldw	r2,0(r5)
 4002768:	01000284 	movi	r4,10
 400276c:	14400005 	stb	r17,0(r2)
 4002770:	28800017 	ldw	r2,0(r5)
 4002774:	10c00003 	ldbu	r3,0(r2)
 4002778:	193ff01e 	bne	r3,r4,400273c <__ram_exceptions_end+0xfabfe5b0>
 400277c:	280d883a 	mov	r6,r5
 4002780:	180b883a 	mov	r5,r3
 4002784:	00000706 	br	40027a4 <putc+0xb0>
 4002788:	8009883a 	mov	r4,r16
 400278c:	d9400015 	stw	r5,0(sp)
 4002790:	40033000 	call	4003300 <__sinit>
 4002794:	d9400017 	ldw	r5,0(sp)
 4002798:	003fe106 	br	4002720 <__ram_exceptions_end+0xfabfe594>
 400279c:	280d883a 	mov	r6,r5
 40027a0:	880b883a 	mov	r5,r17
 40027a4:	8009883a 	mov	r4,r16
 40027a8:	dfc00317 	ldw	ra,12(sp)
 40027ac:	dc400217 	ldw	r17,8(sp)
 40027b0:	dc000117 	ldw	r16,4(sp)
 40027b4:	dec00404 	addi	sp,sp,16
 40027b8:	40028dc1 	jmpi	40028dc <__swbuf_r>

040027bc <__srget_r>:
 40027bc:	defffd04 	addi	sp,sp,-12
 40027c0:	dc400115 	stw	r17,4(sp)
 40027c4:	dc000015 	stw	r16,0(sp)
 40027c8:	dfc00215 	stw	ra,8(sp)
 40027cc:	2023883a 	mov	r17,r4
 40027d0:	2821883a 	mov	r16,r5
 40027d4:	20000226 	beq	r4,zero,40027e0 <__srget_r+0x24>
 40027d8:	20800e17 	ldw	r2,56(r4)
 40027dc:	10001026 	beq	r2,zero,4002820 <__srget_r+0x64>
 40027e0:	800b883a 	mov	r5,r16
 40027e4:	8809883a 	mov	r4,r17
 40027e8:	40044180 	call	4004418 <__srefill_r>
 40027ec:	10000e1e 	bne	r2,zero,4002828 <__srget_r+0x6c>
 40027f0:	80c00017 	ldw	r3,0(r16)
 40027f4:	80800117 	ldw	r2,4(r16)
 40027f8:	19000044 	addi	r4,r3,1
 40027fc:	10bfffc4 	addi	r2,r2,-1
 4002800:	80800115 	stw	r2,4(r16)
 4002804:	81000015 	stw	r4,0(r16)
 4002808:	18800003 	ldbu	r2,0(r3)
 400280c:	dfc00217 	ldw	ra,8(sp)
 4002810:	dc400117 	ldw	r17,4(sp)
 4002814:	dc000017 	ldw	r16,0(sp)
 4002818:	dec00304 	addi	sp,sp,12
 400281c:	f800283a 	ret
 4002820:	40033000 	call	4003300 <__sinit>
 4002824:	003fee06 	br	40027e0 <__ram_exceptions_end+0xfabfe654>
 4002828:	00bfffc4 	movi	r2,-1
 400282c:	003ff706 	br	400280c <__ram_exceptions_end+0xfabfe680>

04002830 <__srget>:
 4002830:	00810034 	movhi	r2,1024
 4002834:	10972e04 	addi	r2,r2,23736
 4002838:	200b883a 	mov	r5,r4
 400283c:	11000017 	ldw	r4,0(r2)
 4002840:	40027bc1 	jmpi	40027bc <__srget_r>

04002844 <strlen>:
 4002844:	208000cc 	andi	r2,r4,3
 4002848:	10002026 	beq	r2,zero,40028cc <strlen+0x88>
 400284c:	20800007 	ldb	r2,0(r4)
 4002850:	10002026 	beq	r2,zero,40028d4 <strlen+0x90>
 4002854:	2005883a 	mov	r2,r4
 4002858:	00000206 	br	4002864 <strlen+0x20>
 400285c:	10c00007 	ldb	r3,0(r2)
 4002860:	18001826 	beq	r3,zero,40028c4 <strlen+0x80>
 4002864:	10800044 	addi	r2,r2,1
 4002868:	10c000cc 	andi	r3,r2,3
 400286c:	183ffb1e 	bne	r3,zero,400285c <__ram_exceptions_end+0xfabfe6d0>
 4002870:	10c00017 	ldw	r3,0(r2)
 4002874:	01ffbff4 	movhi	r7,65279
 4002878:	39ffbfc4 	addi	r7,r7,-257
 400287c:	00ca303a 	nor	r5,zero,r3
 4002880:	01a02074 	movhi	r6,32897
 4002884:	19c7883a 	add	r3,r3,r7
 4002888:	31a02004 	addi	r6,r6,-32640
 400288c:	1946703a 	and	r3,r3,r5
 4002890:	1986703a 	and	r3,r3,r6
 4002894:	1800091e 	bne	r3,zero,40028bc <strlen+0x78>
 4002898:	10800104 	addi	r2,r2,4
 400289c:	10c00017 	ldw	r3,0(r2)
 40028a0:	19cb883a 	add	r5,r3,r7
 40028a4:	00c6303a 	nor	r3,zero,r3
 40028a8:	28c6703a 	and	r3,r5,r3
 40028ac:	1986703a 	and	r3,r3,r6
 40028b0:	183ff926 	beq	r3,zero,4002898 <__ram_exceptions_end+0xfabfe70c>
 40028b4:	00000106 	br	40028bc <strlen+0x78>
 40028b8:	10800044 	addi	r2,r2,1
 40028bc:	10c00007 	ldb	r3,0(r2)
 40028c0:	183ffd1e 	bne	r3,zero,40028b8 <__ram_exceptions_end+0xfabfe72c>
 40028c4:	1105c83a 	sub	r2,r2,r4
 40028c8:	f800283a 	ret
 40028cc:	2005883a 	mov	r2,r4
 40028d0:	003fe706 	br	4002870 <__ram_exceptions_end+0xfabfe6e4>
 40028d4:	0005883a 	mov	r2,zero
 40028d8:	f800283a 	ret

040028dc <__swbuf_r>:
 40028dc:	defffb04 	addi	sp,sp,-20
 40028e0:	dcc00315 	stw	r19,12(sp)
 40028e4:	dc800215 	stw	r18,8(sp)
 40028e8:	dc000015 	stw	r16,0(sp)
 40028ec:	dfc00415 	stw	ra,16(sp)
 40028f0:	dc400115 	stw	r17,4(sp)
 40028f4:	2025883a 	mov	r18,r4
 40028f8:	2827883a 	mov	r19,r5
 40028fc:	3021883a 	mov	r16,r6
 4002900:	20000226 	beq	r4,zero,400290c <__swbuf_r+0x30>
 4002904:	20800e17 	ldw	r2,56(r4)
 4002908:	10004226 	beq	r2,zero,4002a14 <__swbuf_r+0x138>
 400290c:	80800617 	ldw	r2,24(r16)
 4002910:	8100030b 	ldhu	r4,12(r16)
 4002914:	80800215 	stw	r2,8(r16)
 4002918:	2080020c 	andi	r2,r4,8
 400291c:	10003626 	beq	r2,zero,40029f8 <__swbuf_r+0x11c>
 4002920:	80c00417 	ldw	r3,16(r16)
 4002924:	18003426 	beq	r3,zero,40029f8 <__swbuf_r+0x11c>
 4002928:	2088000c 	andi	r2,r4,8192
 400292c:	9c403fcc 	andi	r17,r19,255
 4002930:	10001a26 	beq	r2,zero,400299c <__swbuf_r+0xc0>
 4002934:	80800017 	ldw	r2,0(r16)
 4002938:	81000517 	ldw	r4,20(r16)
 400293c:	10c7c83a 	sub	r3,r2,r3
 4002940:	1900200e 	bge	r3,r4,40029c4 <__swbuf_r+0xe8>
 4002944:	18c00044 	addi	r3,r3,1
 4002948:	81000217 	ldw	r4,8(r16)
 400294c:	11400044 	addi	r5,r2,1
 4002950:	81400015 	stw	r5,0(r16)
 4002954:	213fffc4 	addi	r4,r4,-1
 4002958:	81000215 	stw	r4,8(r16)
 400295c:	14c00005 	stb	r19,0(r2)
 4002960:	80800517 	ldw	r2,20(r16)
 4002964:	10c01e26 	beq	r2,r3,40029e0 <__swbuf_r+0x104>
 4002968:	8080030b 	ldhu	r2,12(r16)
 400296c:	1080004c 	andi	r2,r2,1
 4002970:	10000226 	beq	r2,zero,400297c <__swbuf_r+0xa0>
 4002974:	00800284 	movi	r2,10
 4002978:	88801926 	beq	r17,r2,40029e0 <__swbuf_r+0x104>
 400297c:	8805883a 	mov	r2,r17
 4002980:	dfc00417 	ldw	ra,16(sp)
 4002984:	dcc00317 	ldw	r19,12(sp)
 4002988:	dc800217 	ldw	r18,8(sp)
 400298c:	dc400117 	ldw	r17,4(sp)
 4002990:	dc000017 	ldw	r16,0(sp)
 4002994:	dec00504 	addi	sp,sp,20
 4002998:	f800283a 	ret
 400299c:	81401917 	ldw	r5,100(r16)
 40029a0:	00b7ffc4 	movi	r2,-8193
 40029a4:	21080014 	ori	r4,r4,8192
 40029a8:	2884703a 	and	r2,r5,r2
 40029ac:	80801915 	stw	r2,100(r16)
 40029b0:	80800017 	ldw	r2,0(r16)
 40029b4:	8100030d 	sth	r4,12(r16)
 40029b8:	81000517 	ldw	r4,20(r16)
 40029bc:	10c7c83a 	sub	r3,r2,r3
 40029c0:	193fe016 	blt	r3,r4,4002944 <__ram_exceptions_end+0xfabfe7b8>
 40029c4:	800b883a 	mov	r5,r16
 40029c8:	9009883a 	mov	r4,r18
 40029cc:	4002f240 	call	4002f24 <_fflush_r>
 40029d0:	1000071e 	bne	r2,zero,40029f0 <__swbuf_r+0x114>
 40029d4:	80800017 	ldw	r2,0(r16)
 40029d8:	00c00044 	movi	r3,1
 40029dc:	003fda06 	br	4002948 <__ram_exceptions_end+0xfabfe7bc>
 40029e0:	800b883a 	mov	r5,r16
 40029e4:	9009883a 	mov	r4,r18
 40029e8:	4002f240 	call	4002f24 <_fflush_r>
 40029ec:	103fe326 	beq	r2,zero,400297c <__ram_exceptions_end+0xfabfe7f0>
 40029f0:	00bfffc4 	movi	r2,-1
 40029f4:	003fe206 	br	4002980 <__ram_exceptions_end+0xfabfe7f4>
 40029f8:	800b883a 	mov	r5,r16
 40029fc:	9009883a 	mov	r4,r18
 4002a00:	4002a340 	call	4002a34 <__swsetup_r>
 4002a04:	103ffa1e 	bne	r2,zero,40029f0 <__ram_exceptions_end+0xfabfe864>
 4002a08:	8100030b 	ldhu	r4,12(r16)
 4002a0c:	80c00417 	ldw	r3,16(r16)
 4002a10:	003fc506 	br	4002928 <__ram_exceptions_end+0xfabfe79c>
 4002a14:	40033000 	call	4003300 <__sinit>
 4002a18:	003fbc06 	br	400290c <__ram_exceptions_end+0xfabfe780>

04002a1c <__swbuf>:
 4002a1c:	00810034 	movhi	r2,1024
 4002a20:	10972e04 	addi	r2,r2,23736
 4002a24:	280d883a 	mov	r6,r5
 4002a28:	200b883a 	mov	r5,r4
 4002a2c:	11000017 	ldw	r4,0(r2)
 4002a30:	40028dc1 	jmpi	40028dc <__swbuf_r>

04002a34 <__swsetup_r>:
 4002a34:	00810034 	movhi	r2,1024
 4002a38:	defffd04 	addi	sp,sp,-12
 4002a3c:	10972e04 	addi	r2,r2,23736
 4002a40:	dc400115 	stw	r17,4(sp)
 4002a44:	2023883a 	mov	r17,r4
 4002a48:	11000017 	ldw	r4,0(r2)
 4002a4c:	dc000015 	stw	r16,0(sp)
 4002a50:	dfc00215 	stw	ra,8(sp)
 4002a54:	2821883a 	mov	r16,r5
 4002a58:	20000226 	beq	r4,zero,4002a64 <__swsetup_r+0x30>
 4002a5c:	20800e17 	ldw	r2,56(r4)
 4002a60:	10003126 	beq	r2,zero,4002b28 <__swsetup_r+0xf4>
 4002a64:	8080030b 	ldhu	r2,12(r16)
 4002a68:	10c0020c 	andi	r3,r2,8
 4002a6c:	1009883a 	mov	r4,r2
 4002a70:	18000f26 	beq	r3,zero,4002ab0 <__swsetup_r+0x7c>
 4002a74:	80c00417 	ldw	r3,16(r16)
 4002a78:	18001526 	beq	r3,zero,4002ad0 <__swsetup_r+0x9c>
 4002a7c:	1100004c 	andi	r4,r2,1
 4002a80:	20001c1e 	bne	r4,zero,4002af4 <__swsetup_r+0xc0>
 4002a84:	1080008c 	andi	r2,r2,2
 4002a88:	1000291e 	bne	r2,zero,4002b30 <__swsetup_r+0xfc>
 4002a8c:	80800517 	ldw	r2,20(r16)
 4002a90:	80800215 	stw	r2,8(r16)
 4002a94:	18001c26 	beq	r3,zero,4002b08 <__swsetup_r+0xd4>
 4002a98:	0005883a 	mov	r2,zero
 4002a9c:	dfc00217 	ldw	ra,8(sp)
 4002aa0:	dc400117 	ldw	r17,4(sp)
 4002aa4:	dc000017 	ldw	r16,0(sp)
 4002aa8:	dec00304 	addi	sp,sp,12
 4002aac:	f800283a 	ret
 4002ab0:	2080040c 	andi	r2,r4,16
 4002ab4:	10002e26 	beq	r2,zero,4002b70 <__swsetup_r+0x13c>
 4002ab8:	2080010c 	andi	r2,r4,4
 4002abc:	10001e1e 	bne	r2,zero,4002b38 <__swsetup_r+0x104>
 4002ac0:	80c00417 	ldw	r3,16(r16)
 4002ac4:	20800214 	ori	r2,r4,8
 4002ac8:	8080030d 	sth	r2,12(r16)
 4002acc:	183feb1e 	bne	r3,zero,4002a7c <__ram_exceptions_end+0xfabfe8f0>
 4002ad0:	1100a00c 	andi	r4,r2,640
 4002ad4:	01408004 	movi	r5,512
 4002ad8:	217fe826 	beq	r4,r5,4002a7c <__ram_exceptions_end+0xfabfe8f0>
 4002adc:	800b883a 	mov	r5,r16
 4002ae0:	8809883a 	mov	r4,r17
 4002ae4:	400390c0 	call	400390c <__smakebuf_r>
 4002ae8:	8080030b 	ldhu	r2,12(r16)
 4002aec:	80c00417 	ldw	r3,16(r16)
 4002af0:	003fe206 	br	4002a7c <__ram_exceptions_end+0xfabfe8f0>
 4002af4:	80800517 	ldw	r2,20(r16)
 4002af8:	80000215 	stw	zero,8(r16)
 4002afc:	0085c83a 	sub	r2,zero,r2
 4002b00:	80800615 	stw	r2,24(r16)
 4002b04:	183fe41e 	bne	r3,zero,4002a98 <__ram_exceptions_end+0xfabfe90c>
 4002b08:	80c0030b 	ldhu	r3,12(r16)
 4002b0c:	0005883a 	mov	r2,zero
 4002b10:	1900200c 	andi	r4,r3,128
 4002b14:	203fe126 	beq	r4,zero,4002a9c <__ram_exceptions_end+0xfabfe910>
 4002b18:	18c01014 	ori	r3,r3,64
 4002b1c:	80c0030d 	sth	r3,12(r16)
 4002b20:	00bfffc4 	movi	r2,-1
 4002b24:	003fdd06 	br	4002a9c <__ram_exceptions_end+0xfabfe910>
 4002b28:	40033000 	call	4003300 <__sinit>
 4002b2c:	003fcd06 	br	4002a64 <__ram_exceptions_end+0xfabfe8d8>
 4002b30:	0005883a 	mov	r2,zero
 4002b34:	003fd606 	br	4002a90 <__ram_exceptions_end+0xfabfe904>
 4002b38:	81400c17 	ldw	r5,48(r16)
 4002b3c:	28000626 	beq	r5,zero,4002b58 <__swsetup_r+0x124>
 4002b40:	80801004 	addi	r2,r16,64
 4002b44:	28800326 	beq	r5,r2,4002b54 <__swsetup_r+0x120>
 4002b48:	8809883a 	mov	r4,r17
 4002b4c:	40034740 	call	4003474 <_free_r>
 4002b50:	8100030b 	ldhu	r4,12(r16)
 4002b54:	80000c15 	stw	zero,48(r16)
 4002b58:	80c00417 	ldw	r3,16(r16)
 4002b5c:	00bff6c4 	movi	r2,-37
 4002b60:	1108703a 	and	r4,r2,r4
 4002b64:	80000115 	stw	zero,4(r16)
 4002b68:	80c00015 	stw	r3,0(r16)
 4002b6c:	003fd506 	br	4002ac4 <__ram_exceptions_end+0xfabfe938>
 4002b70:	00800244 	movi	r2,9
 4002b74:	88800015 	stw	r2,0(r17)
 4002b78:	20801014 	ori	r2,r4,64
 4002b7c:	8080030d 	sth	r2,12(r16)
 4002b80:	00bfffc4 	movi	r2,-1
 4002b84:	003fc506 	br	4002a9c <__ram_exceptions_end+0xfabfe910>

04002b88 <__call_exitprocs>:
 4002b88:	defff504 	addi	sp,sp,-44
 4002b8c:	df000915 	stw	fp,36(sp)
 4002b90:	dd400615 	stw	r21,24(sp)
 4002b94:	dc800315 	stw	r18,12(sp)
 4002b98:	dfc00a15 	stw	ra,40(sp)
 4002b9c:	ddc00815 	stw	r23,32(sp)
 4002ba0:	dd800715 	stw	r22,28(sp)
 4002ba4:	dd000515 	stw	r20,20(sp)
 4002ba8:	dcc00415 	stw	r19,16(sp)
 4002bac:	dc400215 	stw	r17,8(sp)
 4002bb0:	dc000115 	stw	r16,4(sp)
 4002bb4:	d9000015 	stw	r4,0(sp)
 4002bb8:	2839883a 	mov	fp,r5
 4002bbc:	04800044 	movi	r18,1
 4002bc0:	057fffc4 	movi	r21,-1
 4002bc4:	00810034 	movhi	r2,1024
 4002bc8:	10972d04 	addi	r2,r2,23732
 4002bcc:	12000017 	ldw	r8,0(r2)
 4002bd0:	45005217 	ldw	r20,328(r8)
 4002bd4:	44c05204 	addi	r19,r8,328
 4002bd8:	a0001c26 	beq	r20,zero,4002c4c <__call_exitprocs+0xc4>
 4002bdc:	a0800117 	ldw	r2,4(r20)
 4002be0:	15ffffc4 	addi	r23,r2,-1
 4002be4:	b8000d16 	blt	r23,zero,4002c1c <__call_exitprocs+0x94>
 4002be8:	14000044 	addi	r16,r2,1
 4002bec:	8421883a 	add	r16,r16,r16
 4002bf0:	8421883a 	add	r16,r16,r16
 4002bf4:	84402004 	addi	r17,r16,128
 4002bf8:	a463883a 	add	r17,r20,r17
 4002bfc:	a421883a 	add	r16,r20,r16
 4002c00:	e0001e26 	beq	fp,zero,4002c7c <__call_exitprocs+0xf4>
 4002c04:	80804017 	ldw	r2,256(r16)
 4002c08:	e0801c26 	beq	fp,r2,4002c7c <__call_exitprocs+0xf4>
 4002c0c:	bdffffc4 	addi	r23,r23,-1
 4002c10:	843fff04 	addi	r16,r16,-4
 4002c14:	8c7fff04 	addi	r17,r17,-4
 4002c18:	bd7ff91e 	bne	r23,r21,4002c00 <__ram_exceptions_end+0xfabfea74>
 4002c1c:	00800034 	movhi	r2,0
 4002c20:	10800004 	addi	r2,r2,0
 4002c24:	10000926 	beq	r2,zero,4002c4c <__call_exitprocs+0xc4>
 4002c28:	a0800117 	ldw	r2,4(r20)
 4002c2c:	1000301e 	bne	r2,zero,4002cf0 <__call_exitprocs+0x168>
 4002c30:	a0800017 	ldw	r2,0(r20)
 4002c34:	10003226 	beq	r2,zero,4002d00 <__call_exitprocs+0x178>
 4002c38:	a009883a 	mov	r4,r20
 4002c3c:	98800015 	stw	r2,0(r19)
 4002c40:	00000000 	call	0 <__alt_mem_sdram-0x4000000>
 4002c44:	9d000017 	ldw	r20,0(r19)
 4002c48:	a03fe41e 	bne	r20,zero,4002bdc <__ram_exceptions_end+0xfabfea50>
 4002c4c:	dfc00a17 	ldw	ra,40(sp)
 4002c50:	df000917 	ldw	fp,36(sp)
 4002c54:	ddc00817 	ldw	r23,32(sp)
 4002c58:	dd800717 	ldw	r22,28(sp)
 4002c5c:	dd400617 	ldw	r21,24(sp)
 4002c60:	dd000517 	ldw	r20,20(sp)
 4002c64:	dcc00417 	ldw	r19,16(sp)
 4002c68:	dc800317 	ldw	r18,12(sp)
 4002c6c:	dc400217 	ldw	r17,8(sp)
 4002c70:	dc000117 	ldw	r16,4(sp)
 4002c74:	dec00b04 	addi	sp,sp,44
 4002c78:	f800283a 	ret
 4002c7c:	a0800117 	ldw	r2,4(r20)
 4002c80:	80c00017 	ldw	r3,0(r16)
 4002c84:	10bfffc4 	addi	r2,r2,-1
 4002c88:	15c01426 	beq	r2,r23,4002cdc <__call_exitprocs+0x154>
 4002c8c:	80000015 	stw	zero,0(r16)
 4002c90:	183fde26 	beq	r3,zero,4002c0c <__ram_exceptions_end+0xfabfea80>
 4002c94:	95c8983a 	sll	r4,r18,r23
 4002c98:	a0806217 	ldw	r2,392(r20)
 4002c9c:	a5800117 	ldw	r22,4(r20)
 4002ca0:	2084703a 	and	r2,r4,r2
 4002ca4:	10000b26 	beq	r2,zero,4002cd4 <__call_exitprocs+0x14c>
 4002ca8:	a0806317 	ldw	r2,396(r20)
 4002cac:	2088703a 	and	r4,r4,r2
 4002cb0:	20000c1e 	bne	r4,zero,4002ce4 <__call_exitprocs+0x15c>
 4002cb4:	89400017 	ldw	r5,0(r17)
 4002cb8:	d9000017 	ldw	r4,0(sp)
 4002cbc:	183ee83a 	callr	r3
 4002cc0:	a0800117 	ldw	r2,4(r20)
 4002cc4:	15bfbf1e 	bne	r2,r22,4002bc4 <__ram_exceptions_end+0xfabfea38>
 4002cc8:	98800017 	ldw	r2,0(r19)
 4002ccc:	153fcf26 	beq	r2,r20,4002c0c <__ram_exceptions_end+0xfabfea80>
 4002cd0:	003fbc06 	br	4002bc4 <__ram_exceptions_end+0xfabfea38>
 4002cd4:	183ee83a 	callr	r3
 4002cd8:	003ff906 	br	4002cc0 <__ram_exceptions_end+0xfabfeb34>
 4002cdc:	a5c00115 	stw	r23,4(r20)
 4002ce0:	003feb06 	br	4002c90 <__ram_exceptions_end+0xfabfeb04>
 4002ce4:	89000017 	ldw	r4,0(r17)
 4002ce8:	183ee83a 	callr	r3
 4002cec:	003ff406 	br	4002cc0 <__ram_exceptions_end+0xfabfeb34>
 4002cf0:	a0800017 	ldw	r2,0(r20)
 4002cf4:	a027883a 	mov	r19,r20
 4002cf8:	1029883a 	mov	r20,r2
 4002cfc:	003fb606 	br	4002bd8 <__ram_exceptions_end+0xfabfea4c>
 4002d00:	0005883a 	mov	r2,zero
 4002d04:	003ffb06 	br	4002cf4 <__ram_exceptions_end+0xfabfeb68>

04002d08 <__sflush_r>:
 4002d08:	2880030b 	ldhu	r2,12(r5)
 4002d0c:	defffb04 	addi	sp,sp,-20
 4002d10:	dcc00315 	stw	r19,12(sp)
 4002d14:	dc400115 	stw	r17,4(sp)
 4002d18:	dfc00415 	stw	ra,16(sp)
 4002d1c:	dc800215 	stw	r18,8(sp)
 4002d20:	dc000015 	stw	r16,0(sp)
 4002d24:	10c0020c 	andi	r3,r2,8
 4002d28:	2823883a 	mov	r17,r5
 4002d2c:	2027883a 	mov	r19,r4
 4002d30:	1800311e 	bne	r3,zero,4002df8 <__sflush_r+0xf0>
 4002d34:	28c00117 	ldw	r3,4(r5)
 4002d38:	10820014 	ori	r2,r2,2048
 4002d3c:	2880030d 	sth	r2,12(r5)
 4002d40:	00c04b0e 	bge	zero,r3,4002e70 <__sflush_r+0x168>
 4002d44:	8a000a17 	ldw	r8,40(r17)
 4002d48:	40002326 	beq	r8,zero,4002dd8 <__sflush_r+0xd0>
 4002d4c:	9c000017 	ldw	r16,0(r19)
 4002d50:	10c4000c 	andi	r3,r2,4096
 4002d54:	98000015 	stw	zero,0(r19)
 4002d58:	18004826 	beq	r3,zero,4002e7c <__sflush_r+0x174>
 4002d5c:	89801417 	ldw	r6,80(r17)
 4002d60:	10c0010c 	andi	r3,r2,4
 4002d64:	18000626 	beq	r3,zero,4002d80 <__sflush_r+0x78>
 4002d68:	88c00117 	ldw	r3,4(r17)
 4002d6c:	88800c17 	ldw	r2,48(r17)
 4002d70:	30cdc83a 	sub	r6,r6,r3
 4002d74:	10000226 	beq	r2,zero,4002d80 <__sflush_r+0x78>
 4002d78:	88800f17 	ldw	r2,60(r17)
 4002d7c:	308dc83a 	sub	r6,r6,r2
 4002d80:	89400717 	ldw	r5,28(r17)
 4002d84:	000f883a 	mov	r7,zero
 4002d88:	9809883a 	mov	r4,r19
 4002d8c:	403ee83a 	callr	r8
 4002d90:	00ffffc4 	movi	r3,-1
 4002d94:	10c04426 	beq	r2,r3,4002ea8 <__sflush_r+0x1a0>
 4002d98:	88c0030b 	ldhu	r3,12(r17)
 4002d9c:	89000417 	ldw	r4,16(r17)
 4002da0:	88000115 	stw	zero,4(r17)
 4002da4:	197dffcc 	andi	r5,r3,63487
 4002da8:	8940030d 	sth	r5,12(r17)
 4002dac:	89000015 	stw	r4,0(r17)
 4002db0:	18c4000c 	andi	r3,r3,4096
 4002db4:	18002c1e 	bne	r3,zero,4002e68 <__sflush_r+0x160>
 4002db8:	89400c17 	ldw	r5,48(r17)
 4002dbc:	9c000015 	stw	r16,0(r19)
 4002dc0:	28000526 	beq	r5,zero,4002dd8 <__sflush_r+0xd0>
 4002dc4:	88801004 	addi	r2,r17,64
 4002dc8:	28800226 	beq	r5,r2,4002dd4 <__sflush_r+0xcc>
 4002dcc:	9809883a 	mov	r4,r19
 4002dd0:	40034740 	call	4003474 <_free_r>
 4002dd4:	88000c15 	stw	zero,48(r17)
 4002dd8:	0005883a 	mov	r2,zero
 4002ddc:	dfc00417 	ldw	ra,16(sp)
 4002de0:	dcc00317 	ldw	r19,12(sp)
 4002de4:	dc800217 	ldw	r18,8(sp)
 4002de8:	dc400117 	ldw	r17,4(sp)
 4002dec:	dc000017 	ldw	r16,0(sp)
 4002df0:	dec00504 	addi	sp,sp,20
 4002df4:	f800283a 	ret
 4002df8:	2c800417 	ldw	r18,16(r5)
 4002dfc:	903ff626 	beq	r18,zero,4002dd8 <__ram_exceptions_end+0xfabfec4c>
 4002e00:	2c000017 	ldw	r16,0(r5)
 4002e04:	108000cc 	andi	r2,r2,3
 4002e08:	2c800015 	stw	r18,0(r5)
 4002e0c:	84a1c83a 	sub	r16,r16,r18
 4002e10:	1000131e 	bne	r2,zero,4002e60 <__sflush_r+0x158>
 4002e14:	28800517 	ldw	r2,20(r5)
 4002e18:	88800215 	stw	r2,8(r17)
 4002e1c:	04000316 	blt	zero,r16,4002e2c <__sflush_r+0x124>
 4002e20:	003fed06 	br	4002dd8 <__ram_exceptions_end+0xfabfec4c>
 4002e24:	90a5883a 	add	r18,r18,r2
 4002e28:	043feb0e 	bge	zero,r16,4002dd8 <__ram_exceptions_end+0xfabfec4c>
 4002e2c:	88800917 	ldw	r2,36(r17)
 4002e30:	89400717 	ldw	r5,28(r17)
 4002e34:	800f883a 	mov	r7,r16
 4002e38:	900d883a 	mov	r6,r18
 4002e3c:	9809883a 	mov	r4,r19
 4002e40:	103ee83a 	callr	r2
 4002e44:	80a1c83a 	sub	r16,r16,r2
 4002e48:	00bff616 	blt	zero,r2,4002e24 <__ram_exceptions_end+0xfabfec98>
 4002e4c:	88c0030b 	ldhu	r3,12(r17)
 4002e50:	00bfffc4 	movi	r2,-1
 4002e54:	18c01014 	ori	r3,r3,64
 4002e58:	88c0030d 	sth	r3,12(r17)
 4002e5c:	003fdf06 	br	4002ddc <__ram_exceptions_end+0xfabfec50>
 4002e60:	0005883a 	mov	r2,zero
 4002e64:	003fec06 	br	4002e18 <__ram_exceptions_end+0xfabfec8c>
 4002e68:	88801415 	stw	r2,80(r17)
 4002e6c:	003fd206 	br	4002db8 <__ram_exceptions_end+0xfabfec2c>
 4002e70:	28c00f17 	ldw	r3,60(r5)
 4002e74:	00ffb316 	blt	zero,r3,4002d44 <__ram_exceptions_end+0xfabfebb8>
 4002e78:	003fd706 	br	4002dd8 <__ram_exceptions_end+0xfabfec4c>
 4002e7c:	89400717 	ldw	r5,28(r17)
 4002e80:	000d883a 	mov	r6,zero
 4002e84:	01c00044 	movi	r7,1
 4002e88:	9809883a 	mov	r4,r19
 4002e8c:	403ee83a 	callr	r8
 4002e90:	100d883a 	mov	r6,r2
 4002e94:	00bfffc4 	movi	r2,-1
 4002e98:	30801426 	beq	r6,r2,4002eec <__sflush_r+0x1e4>
 4002e9c:	8880030b 	ldhu	r2,12(r17)
 4002ea0:	8a000a17 	ldw	r8,40(r17)
 4002ea4:	003fae06 	br	4002d60 <__ram_exceptions_end+0xfabfebd4>
 4002ea8:	98c00017 	ldw	r3,0(r19)
 4002eac:	183fba26 	beq	r3,zero,4002d98 <__ram_exceptions_end+0xfabfec0c>
 4002eb0:	01000744 	movi	r4,29
 4002eb4:	19000626 	beq	r3,r4,4002ed0 <__sflush_r+0x1c8>
 4002eb8:	01000584 	movi	r4,22
 4002ebc:	19000426 	beq	r3,r4,4002ed0 <__sflush_r+0x1c8>
 4002ec0:	88c0030b 	ldhu	r3,12(r17)
 4002ec4:	18c01014 	ori	r3,r3,64
 4002ec8:	88c0030d 	sth	r3,12(r17)
 4002ecc:	003fc306 	br	4002ddc <__ram_exceptions_end+0xfabfec50>
 4002ed0:	8880030b 	ldhu	r2,12(r17)
 4002ed4:	88c00417 	ldw	r3,16(r17)
 4002ed8:	88000115 	stw	zero,4(r17)
 4002edc:	10bdffcc 	andi	r2,r2,63487
 4002ee0:	8880030d 	sth	r2,12(r17)
 4002ee4:	88c00015 	stw	r3,0(r17)
 4002ee8:	003fb306 	br	4002db8 <__ram_exceptions_end+0xfabfec2c>
 4002eec:	98800017 	ldw	r2,0(r19)
 4002ef0:	103fea26 	beq	r2,zero,4002e9c <__ram_exceptions_end+0xfabfed10>
 4002ef4:	00c00744 	movi	r3,29
 4002ef8:	10c00226 	beq	r2,r3,4002f04 <__sflush_r+0x1fc>
 4002efc:	00c00584 	movi	r3,22
 4002f00:	10c0031e 	bne	r2,r3,4002f10 <__sflush_r+0x208>
 4002f04:	9c000015 	stw	r16,0(r19)
 4002f08:	0005883a 	mov	r2,zero
 4002f0c:	003fb306 	br	4002ddc <__ram_exceptions_end+0xfabfec50>
 4002f10:	88c0030b 	ldhu	r3,12(r17)
 4002f14:	3005883a 	mov	r2,r6
 4002f18:	18c01014 	ori	r3,r3,64
 4002f1c:	88c0030d 	sth	r3,12(r17)
 4002f20:	003fae06 	br	4002ddc <__ram_exceptions_end+0xfabfec50>

04002f24 <_fflush_r>:
 4002f24:	defffd04 	addi	sp,sp,-12
 4002f28:	dc000115 	stw	r16,4(sp)
 4002f2c:	dfc00215 	stw	ra,8(sp)
 4002f30:	2021883a 	mov	r16,r4
 4002f34:	20000226 	beq	r4,zero,4002f40 <_fflush_r+0x1c>
 4002f38:	20800e17 	ldw	r2,56(r4)
 4002f3c:	10000c26 	beq	r2,zero,4002f70 <_fflush_r+0x4c>
 4002f40:	2880030f 	ldh	r2,12(r5)
 4002f44:	1000051e 	bne	r2,zero,4002f5c <_fflush_r+0x38>
 4002f48:	0005883a 	mov	r2,zero
 4002f4c:	dfc00217 	ldw	ra,8(sp)
 4002f50:	dc000117 	ldw	r16,4(sp)
 4002f54:	dec00304 	addi	sp,sp,12
 4002f58:	f800283a 	ret
 4002f5c:	8009883a 	mov	r4,r16
 4002f60:	dfc00217 	ldw	ra,8(sp)
 4002f64:	dc000117 	ldw	r16,4(sp)
 4002f68:	dec00304 	addi	sp,sp,12
 4002f6c:	4002d081 	jmpi	4002d08 <__sflush_r>
 4002f70:	d9400015 	stw	r5,0(sp)
 4002f74:	40033000 	call	4003300 <__sinit>
 4002f78:	d9400017 	ldw	r5,0(sp)
 4002f7c:	003ff006 	br	4002f40 <__ram_exceptions_end+0xfabfedb4>

04002f80 <fflush>:
 4002f80:	20000526 	beq	r4,zero,4002f98 <fflush+0x18>
 4002f84:	00810034 	movhi	r2,1024
 4002f88:	10972e04 	addi	r2,r2,23736
 4002f8c:	200b883a 	mov	r5,r4
 4002f90:	11000017 	ldw	r4,0(r2)
 4002f94:	4002f241 	jmpi	4002f24 <_fflush_r>
 4002f98:	00810034 	movhi	r2,1024
 4002f9c:	10972d04 	addi	r2,r2,23732
 4002fa0:	11000017 	ldw	r4,0(r2)
 4002fa4:	01410034 	movhi	r5,1024
 4002fa8:	294bc904 	addi	r5,r5,12068
 4002fac:	40038481 	jmpi	4003848 <_fwalk_reent>

04002fb0 <__fp_unlock>:
 4002fb0:	0005883a 	mov	r2,zero
 4002fb4:	f800283a 	ret

04002fb8 <_cleanup_r>:
 4002fb8:	01410034 	movhi	r5,1024
 4002fbc:	29520c04 	addi	r5,r5,18480
 4002fc0:	40038481 	jmpi	4003848 <_fwalk_reent>

04002fc4 <__sinit.part.1>:
 4002fc4:	defff704 	addi	sp,sp,-36
 4002fc8:	00c10034 	movhi	r3,1024
 4002fcc:	dfc00815 	stw	ra,32(sp)
 4002fd0:	ddc00715 	stw	r23,28(sp)
 4002fd4:	dd800615 	stw	r22,24(sp)
 4002fd8:	dd400515 	stw	r21,20(sp)
 4002fdc:	dd000415 	stw	r20,16(sp)
 4002fe0:	dcc00315 	stw	r19,12(sp)
 4002fe4:	dc800215 	stw	r18,8(sp)
 4002fe8:	dc400115 	stw	r17,4(sp)
 4002fec:	dc000015 	stw	r16,0(sp)
 4002ff0:	18cbee04 	addi	r3,r3,12216
 4002ff4:	24000117 	ldw	r16,4(r4)
 4002ff8:	20c00f15 	stw	r3,60(r4)
 4002ffc:	2080bb04 	addi	r2,r4,748
 4003000:	00c000c4 	movi	r3,3
 4003004:	20c0b915 	stw	r3,740(r4)
 4003008:	2080ba15 	stw	r2,744(r4)
 400300c:	2000b815 	stw	zero,736(r4)
 4003010:	05c00204 	movi	r23,8
 4003014:	00800104 	movi	r2,4
 4003018:	2025883a 	mov	r18,r4
 400301c:	b80d883a 	mov	r6,r23
 4003020:	81001704 	addi	r4,r16,92
 4003024:	000b883a 	mov	r5,zero
 4003028:	80000015 	stw	zero,0(r16)
 400302c:	80000115 	stw	zero,4(r16)
 4003030:	80000215 	stw	zero,8(r16)
 4003034:	8080030d 	sth	r2,12(r16)
 4003038:	80001915 	stw	zero,100(r16)
 400303c:	8000038d 	sth	zero,14(r16)
 4003040:	80000415 	stw	zero,16(r16)
 4003044:	80000515 	stw	zero,20(r16)
 4003048:	80000615 	stw	zero,24(r16)
 400304c:	40042d40 	call	40042d4 <memset>
 4003050:	05810034 	movhi	r22,1024
 4003054:	94400217 	ldw	r17,8(r18)
 4003058:	05410034 	movhi	r21,1024
 400305c:	05010034 	movhi	r20,1024
 4003060:	04c10034 	movhi	r19,1024
 4003064:	b5919004 	addi	r22,r22,17984
 4003068:	ad51a704 	addi	r21,r21,18076
 400306c:	a511c604 	addi	r20,r20,18200
 4003070:	9cd1dd04 	addi	r19,r19,18292
 4003074:	85800815 	stw	r22,32(r16)
 4003078:	85400915 	stw	r21,36(r16)
 400307c:	85000a15 	stw	r20,40(r16)
 4003080:	84c00b15 	stw	r19,44(r16)
 4003084:	84000715 	stw	r16,28(r16)
 4003088:	00800284 	movi	r2,10
 400308c:	8880030d 	sth	r2,12(r17)
 4003090:	00800044 	movi	r2,1
 4003094:	b80d883a 	mov	r6,r23
 4003098:	89001704 	addi	r4,r17,92
 400309c:	000b883a 	mov	r5,zero
 40030a0:	88000015 	stw	zero,0(r17)
 40030a4:	88000115 	stw	zero,4(r17)
 40030a8:	88000215 	stw	zero,8(r17)
 40030ac:	88001915 	stw	zero,100(r17)
 40030b0:	8880038d 	sth	r2,14(r17)
 40030b4:	88000415 	stw	zero,16(r17)
 40030b8:	88000515 	stw	zero,20(r17)
 40030bc:	88000615 	stw	zero,24(r17)
 40030c0:	40042d40 	call	40042d4 <memset>
 40030c4:	94000317 	ldw	r16,12(r18)
 40030c8:	00800484 	movi	r2,18
 40030cc:	8c400715 	stw	r17,28(r17)
 40030d0:	8d800815 	stw	r22,32(r17)
 40030d4:	8d400915 	stw	r21,36(r17)
 40030d8:	8d000a15 	stw	r20,40(r17)
 40030dc:	8cc00b15 	stw	r19,44(r17)
 40030e0:	8080030d 	sth	r2,12(r16)
 40030e4:	00800084 	movi	r2,2
 40030e8:	80000015 	stw	zero,0(r16)
 40030ec:	80000115 	stw	zero,4(r16)
 40030f0:	80000215 	stw	zero,8(r16)
 40030f4:	80001915 	stw	zero,100(r16)
 40030f8:	8080038d 	sth	r2,14(r16)
 40030fc:	80000415 	stw	zero,16(r16)
 4003100:	80000515 	stw	zero,20(r16)
 4003104:	80000615 	stw	zero,24(r16)
 4003108:	b80d883a 	mov	r6,r23
 400310c:	000b883a 	mov	r5,zero
 4003110:	81001704 	addi	r4,r16,92
 4003114:	40042d40 	call	40042d4 <memset>
 4003118:	00800044 	movi	r2,1
 400311c:	84000715 	stw	r16,28(r16)
 4003120:	85800815 	stw	r22,32(r16)
 4003124:	85400915 	stw	r21,36(r16)
 4003128:	85000a15 	stw	r20,40(r16)
 400312c:	84c00b15 	stw	r19,44(r16)
 4003130:	90800e15 	stw	r2,56(r18)
 4003134:	dfc00817 	ldw	ra,32(sp)
 4003138:	ddc00717 	ldw	r23,28(sp)
 400313c:	dd800617 	ldw	r22,24(sp)
 4003140:	dd400517 	ldw	r21,20(sp)
 4003144:	dd000417 	ldw	r20,16(sp)
 4003148:	dcc00317 	ldw	r19,12(sp)
 400314c:	dc800217 	ldw	r18,8(sp)
 4003150:	dc400117 	ldw	r17,4(sp)
 4003154:	dc000017 	ldw	r16,0(sp)
 4003158:	dec00904 	addi	sp,sp,36
 400315c:	f800283a 	ret

04003160 <__fp_lock>:
 4003160:	0005883a 	mov	r2,zero
 4003164:	f800283a 	ret

04003168 <__sfmoreglue>:
 4003168:	defffc04 	addi	sp,sp,-16
 400316c:	dc400115 	stw	r17,4(sp)
 4003170:	2c7fffc4 	addi	r17,r5,-1
 4003174:	8c401a24 	muli	r17,r17,104
 4003178:	dc800215 	stw	r18,8(sp)
 400317c:	2825883a 	mov	r18,r5
 4003180:	89401d04 	addi	r5,r17,116
 4003184:	dc000015 	stw	r16,0(sp)
 4003188:	dfc00315 	stw	ra,12(sp)
 400318c:	4003ac80 	call	4003ac8 <_malloc_r>
 4003190:	1021883a 	mov	r16,r2
 4003194:	10000726 	beq	r2,zero,40031b4 <__sfmoreglue+0x4c>
 4003198:	11000304 	addi	r4,r2,12
 400319c:	10000015 	stw	zero,0(r2)
 40031a0:	14800115 	stw	r18,4(r2)
 40031a4:	11000215 	stw	r4,8(r2)
 40031a8:	89801a04 	addi	r6,r17,104
 40031ac:	000b883a 	mov	r5,zero
 40031b0:	40042d40 	call	40042d4 <memset>
 40031b4:	8005883a 	mov	r2,r16
 40031b8:	dfc00317 	ldw	ra,12(sp)
 40031bc:	dc800217 	ldw	r18,8(sp)
 40031c0:	dc400117 	ldw	r17,4(sp)
 40031c4:	dc000017 	ldw	r16,0(sp)
 40031c8:	dec00404 	addi	sp,sp,16
 40031cc:	f800283a 	ret

040031d0 <__sfp>:
 40031d0:	defffb04 	addi	sp,sp,-20
 40031d4:	dc000015 	stw	r16,0(sp)
 40031d8:	04010034 	movhi	r16,1024
 40031dc:	84172d04 	addi	r16,r16,23732
 40031e0:	dcc00315 	stw	r19,12(sp)
 40031e4:	2027883a 	mov	r19,r4
 40031e8:	81000017 	ldw	r4,0(r16)
 40031ec:	dfc00415 	stw	ra,16(sp)
 40031f0:	dc800215 	stw	r18,8(sp)
 40031f4:	20800e17 	ldw	r2,56(r4)
 40031f8:	dc400115 	stw	r17,4(sp)
 40031fc:	1000021e 	bne	r2,zero,4003208 <__sfp+0x38>
 4003200:	4002fc40 	call	4002fc4 <__sinit.part.1>
 4003204:	81000017 	ldw	r4,0(r16)
 4003208:	2480b804 	addi	r18,r4,736
 400320c:	047fffc4 	movi	r17,-1
 4003210:	91000117 	ldw	r4,4(r18)
 4003214:	94000217 	ldw	r16,8(r18)
 4003218:	213fffc4 	addi	r4,r4,-1
 400321c:	20000a16 	blt	r4,zero,4003248 <__sfp+0x78>
 4003220:	8080030f 	ldh	r2,12(r16)
 4003224:	10000c26 	beq	r2,zero,4003258 <__sfp+0x88>
 4003228:	80c01d04 	addi	r3,r16,116
 400322c:	00000206 	br	4003238 <__sfp+0x68>
 4003230:	18bfe60f 	ldh	r2,-104(r3)
 4003234:	10000826 	beq	r2,zero,4003258 <__sfp+0x88>
 4003238:	213fffc4 	addi	r4,r4,-1
 400323c:	1c3ffd04 	addi	r16,r3,-12
 4003240:	18c01a04 	addi	r3,r3,104
 4003244:	247ffa1e 	bne	r4,r17,4003230 <__ram_exceptions_end+0xfabff0a4>
 4003248:	90800017 	ldw	r2,0(r18)
 400324c:	10001d26 	beq	r2,zero,40032c4 <__sfp+0xf4>
 4003250:	1025883a 	mov	r18,r2
 4003254:	003fee06 	br	4003210 <__ram_exceptions_end+0xfabff084>
 4003258:	00bfffc4 	movi	r2,-1
 400325c:	8080038d 	sth	r2,14(r16)
 4003260:	00800044 	movi	r2,1
 4003264:	8080030d 	sth	r2,12(r16)
 4003268:	80001915 	stw	zero,100(r16)
 400326c:	80000015 	stw	zero,0(r16)
 4003270:	80000215 	stw	zero,8(r16)
 4003274:	80000115 	stw	zero,4(r16)
 4003278:	80000415 	stw	zero,16(r16)
 400327c:	80000515 	stw	zero,20(r16)
 4003280:	80000615 	stw	zero,24(r16)
 4003284:	01800204 	movi	r6,8
 4003288:	000b883a 	mov	r5,zero
 400328c:	81001704 	addi	r4,r16,92
 4003290:	40042d40 	call	40042d4 <memset>
 4003294:	8005883a 	mov	r2,r16
 4003298:	80000c15 	stw	zero,48(r16)
 400329c:	80000d15 	stw	zero,52(r16)
 40032a0:	80001115 	stw	zero,68(r16)
 40032a4:	80001215 	stw	zero,72(r16)
 40032a8:	dfc00417 	ldw	ra,16(sp)
 40032ac:	dcc00317 	ldw	r19,12(sp)
 40032b0:	dc800217 	ldw	r18,8(sp)
 40032b4:	dc400117 	ldw	r17,4(sp)
 40032b8:	dc000017 	ldw	r16,0(sp)
 40032bc:	dec00504 	addi	sp,sp,20
 40032c0:	f800283a 	ret
 40032c4:	01400104 	movi	r5,4
 40032c8:	9809883a 	mov	r4,r19
 40032cc:	40031680 	call	4003168 <__sfmoreglue>
 40032d0:	90800015 	stw	r2,0(r18)
 40032d4:	103fde1e 	bne	r2,zero,4003250 <__ram_exceptions_end+0xfabff0c4>
 40032d8:	00800304 	movi	r2,12
 40032dc:	98800015 	stw	r2,0(r19)
 40032e0:	0005883a 	mov	r2,zero
 40032e4:	003ff006 	br	40032a8 <__ram_exceptions_end+0xfabff11c>

040032e8 <_cleanup>:
 40032e8:	00810034 	movhi	r2,1024
 40032ec:	10972d04 	addi	r2,r2,23732
 40032f0:	11000017 	ldw	r4,0(r2)
 40032f4:	01410034 	movhi	r5,1024
 40032f8:	29520c04 	addi	r5,r5,18480
 40032fc:	40038481 	jmpi	4003848 <_fwalk_reent>

04003300 <__sinit>:
 4003300:	20800e17 	ldw	r2,56(r4)
 4003304:	10000126 	beq	r2,zero,400330c <__sinit+0xc>
 4003308:	f800283a 	ret
 400330c:	4002fc41 	jmpi	4002fc4 <__sinit.part.1>

04003310 <__sfp_lock_acquire>:
 4003310:	f800283a 	ret

04003314 <__sfp_lock_release>:
 4003314:	f800283a 	ret

04003318 <__sinit_lock_acquire>:
 4003318:	f800283a 	ret

0400331c <__sinit_lock_release>:
 400331c:	f800283a 	ret

04003320 <__fp_lock_all>:
 4003320:	00810034 	movhi	r2,1024
 4003324:	10972e04 	addi	r2,r2,23736
 4003328:	11000017 	ldw	r4,0(r2)
 400332c:	01410034 	movhi	r5,1024
 4003330:	294c5804 	addi	r5,r5,12640
 4003334:	40037841 	jmpi	4003784 <_fwalk>

04003338 <__fp_unlock_all>:
 4003338:	00810034 	movhi	r2,1024
 400333c:	10972e04 	addi	r2,r2,23736
 4003340:	11000017 	ldw	r4,0(r2)
 4003344:	01410034 	movhi	r5,1024
 4003348:	294bec04 	addi	r5,r5,12208
 400334c:	40037841 	jmpi	4003784 <_fwalk>

04003350 <_malloc_trim_r>:
 4003350:	defffb04 	addi	sp,sp,-20
 4003354:	dcc00315 	stw	r19,12(sp)
 4003358:	04c10034 	movhi	r19,1024
 400335c:	dc800215 	stw	r18,8(sp)
 4003360:	dc400115 	stw	r17,4(sp)
 4003364:	dc000015 	stw	r16,0(sp)
 4003368:	dfc00415 	stw	ra,16(sp)
 400336c:	2821883a 	mov	r16,r5
 4003370:	9cd61b04 	addi	r19,r19,22636
 4003374:	2025883a 	mov	r18,r4
 4003378:	4004c300 	call	4004c30 <__malloc_lock>
 400337c:	98800217 	ldw	r2,8(r19)
 4003380:	14400117 	ldw	r17,4(r2)
 4003384:	00bfff04 	movi	r2,-4
 4003388:	88a2703a 	and	r17,r17,r2
 400338c:	8c21c83a 	sub	r16,r17,r16
 4003390:	8403fbc4 	addi	r16,r16,4079
 4003394:	8020d33a 	srli	r16,r16,12
 4003398:	0083ffc4 	movi	r2,4095
 400339c:	843fffc4 	addi	r16,r16,-1
 40033a0:	8020933a 	slli	r16,r16,12
 40033a4:	1400060e 	bge	r2,r16,40033c0 <_malloc_trim_r+0x70>
 40033a8:	000b883a 	mov	r5,zero
 40033ac:	9009883a 	mov	r4,r18
 40033b0:	40045ec0 	call	40045ec <_sbrk_r>
 40033b4:	98c00217 	ldw	r3,8(r19)
 40033b8:	1c47883a 	add	r3,r3,r17
 40033bc:	10c00a26 	beq	r2,r3,40033e8 <_malloc_trim_r+0x98>
 40033c0:	9009883a 	mov	r4,r18
 40033c4:	4004c340 	call	4004c34 <__malloc_unlock>
 40033c8:	0005883a 	mov	r2,zero
 40033cc:	dfc00417 	ldw	ra,16(sp)
 40033d0:	dcc00317 	ldw	r19,12(sp)
 40033d4:	dc800217 	ldw	r18,8(sp)
 40033d8:	dc400117 	ldw	r17,4(sp)
 40033dc:	dc000017 	ldw	r16,0(sp)
 40033e0:	dec00504 	addi	sp,sp,20
 40033e4:	f800283a 	ret
 40033e8:	040bc83a 	sub	r5,zero,r16
 40033ec:	9009883a 	mov	r4,r18
 40033f0:	40045ec0 	call	40045ec <_sbrk_r>
 40033f4:	00ffffc4 	movi	r3,-1
 40033f8:	10c00d26 	beq	r2,r3,4003430 <_malloc_trim_r+0xe0>
 40033fc:	00c10034 	movhi	r3,1024
 4003400:	18da2d04 	addi	r3,r3,26804
 4003404:	18800017 	ldw	r2,0(r3)
 4003408:	99000217 	ldw	r4,8(r19)
 400340c:	8c23c83a 	sub	r17,r17,r16
 4003410:	8c400054 	ori	r17,r17,1
 4003414:	1421c83a 	sub	r16,r2,r16
 4003418:	24400115 	stw	r17,4(r4)
 400341c:	9009883a 	mov	r4,r18
 4003420:	1c000015 	stw	r16,0(r3)
 4003424:	4004c340 	call	4004c34 <__malloc_unlock>
 4003428:	00800044 	movi	r2,1
 400342c:	003fe706 	br	40033cc <__ram_exceptions_end+0xfabff240>
 4003430:	000b883a 	mov	r5,zero
 4003434:	9009883a 	mov	r4,r18
 4003438:	40045ec0 	call	40045ec <_sbrk_r>
 400343c:	99000217 	ldw	r4,8(r19)
 4003440:	014003c4 	movi	r5,15
 4003444:	1107c83a 	sub	r3,r2,r4
 4003448:	28ffdd0e 	bge	r5,r3,40033c0 <__ram_exceptions_end+0xfabff234>
 400344c:	01410034 	movhi	r5,1024
 4003450:	29572f04 	addi	r5,r5,23740
 4003454:	29400017 	ldw	r5,0(r5)
 4003458:	18c00054 	ori	r3,r3,1
 400345c:	20c00115 	stw	r3,4(r4)
 4003460:	00c10034 	movhi	r3,1024
 4003464:	1145c83a 	sub	r2,r2,r5
 4003468:	18da2d04 	addi	r3,r3,26804
 400346c:	18800015 	stw	r2,0(r3)
 4003470:	003fd306 	br	40033c0 <__ram_exceptions_end+0xfabff234>

04003474 <_free_r>:
 4003474:	28004126 	beq	r5,zero,400357c <_free_r+0x108>
 4003478:	defffd04 	addi	sp,sp,-12
 400347c:	dc400115 	stw	r17,4(sp)
 4003480:	dc000015 	stw	r16,0(sp)
 4003484:	2023883a 	mov	r17,r4
 4003488:	2821883a 	mov	r16,r5
 400348c:	dfc00215 	stw	ra,8(sp)
 4003490:	4004c300 	call	4004c30 <__malloc_lock>
 4003494:	81ffff17 	ldw	r7,-4(r16)
 4003498:	00bfff84 	movi	r2,-2
 400349c:	01010034 	movhi	r4,1024
 40034a0:	81bffe04 	addi	r6,r16,-8
 40034a4:	3884703a 	and	r2,r7,r2
 40034a8:	21161b04 	addi	r4,r4,22636
 40034ac:	308b883a 	add	r5,r6,r2
 40034b0:	2a400117 	ldw	r9,4(r5)
 40034b4:	22000217 	ldw	r8,8(r4)
 40034b8:	00ffff04 	movi	r3,-4
 40034bc:	48c6703a 	and	r3,r9,r3
 40034c0:	2a005726 	beq	r5,r8,4003620 <_free_r+0x1ac>
 40034c4:	28c00115 	stw	r3,4(r5)
 40034c8:	39c0004c 	andi	r7,r7,1
 40034cc:	3800091e 	bne	r7,zero,40034f4 <_free_r+0x80>
 40034d0:	823ffe17 	ldw	r8,-8(r16)
 40034d4:	22400204 	addi	r9,r4,8
 40034d8:	320dc83a 	sub	r6,r6,r8
 40034dc:	31c00217 	ldw	r7,8(r6)
 40034e0:	1205883a 	add	r2,r2,r8
 40034e4:	3a406526 	beq	r7,r9,400367c <_free_r+0x208>
 40034e8:	32000317 	ldw	r8,12(r6)
 40034ec:	3a000315 	stw	r8,12(r7)
 40034f0:	41c00215 	stw	r7,8(r8)
 40034f4:	28cf883a 	add	r7,r5,r3
 40034f8:	39c00117 	ldw	r7,4(r7)
 40034fc:	39c0004c 	andi	r7,r7,1
 4003500:	38003a26 	beq	r7,zero,40035ec <_free_r+0x178>
 4003504:	10c00054 	ori	r3,r2,1
 4003508:	30c00115 	stw	r3,4(r6)
 400350c:	3087883a 	add	r3,r6,r2
 4003510:	18800015 	stw	r2,0(r3)
 4003514:	00c07fc4 	movi	r3,511
 4003518:	18801936 	bltu	r3,r2,4003580 <_free_r+0x10c>
 400351c:	1004d0fa 	srli	r2,r2,3
 4003520:	01c00044 	movi	r7,1
 4003524:	21400117 	ldw	r5,4(r4)
 4003528:	10c00044 	addi	r3,r2,1
 400352c:	18c7883a 	add	r3,r3,r3
 4003530:	1005d0ba 	srai	r2,r2,2
 4003534:	18c7883a 	add	r3,r3,r3
 4003538:	18c7883a 	add	r3,r3,r3
 400353c:	1907883a 	add	r3,r3,r4
 4003540:	3884983a 	sll	r2,r7,r2
 4003544:	19c00017 	ldw	r7,0(r3)
 4003548:	1a3ffe04 	addi	r8,r3,-8
 400354c:	1144b03a 	or	r2,r2,r5
 4003550:	32000315 	stw	r8,12(r6)
 4003554:	31c00215 	stw	r7,8(r6)
 4003558:	20800115 	stw	r2,4(r4)
 400355c:	19800015 	stw	r6,0(r3)
 4003560:	39800315 	stw	r6,12(r7)
 4003564:	8809883a 	mov	r4,r17
 4003568:	dfc00217 	ldw	ra,8(sp)
 400356c:	dc400117 	ldw	r17,4(sp)
 4003570:	dc000017 	ldw	r16,0(sp)
 4003574:	dec00304 	addi	sp,sp,12
 4003578:	4004c341 	jmpi	4004c34 <__malloc_unlock>
 400357c:	f800283a 	ret
 4003580:	100ad27a 	srli	r5,r2,9
 4003584:	00c00104 	movi	r3,4
 4003588:	19404a36 	bltu	r3,r5,40036b4 <_free_r+0x240>
 400358c:	100ad1ba 	srli	r5,r2,6
 4003590:	28c00e44 	addi	r3,r5,57
 4003594:	18c7883a 	add	r3,r3,r3
 4003598:	29400e04 	addi	r5,r5,56
 400359c:	18c7883a 	add	r3,r3,r3
 40035a0:	18c7883a 	add	r3,r3,r3
 40035a4:	1909883a 	add	r4,r3,r4
 40035a8:	20c00017 	ldw	r3,0(r4)
 40035ac:	01c10034 	movhi	r7,1024
 40035b0:	213ffe04 	addi	r4,r4,-8
 40035b4:	39d61b04 	addi	r7,r7,22636
 40035b8:	20c04426 	beq	r4,r3,40036cc <_free_r+0x258>
 40035bc:	01ffff04 	movi	r7,-4
 40035c0:	19400117 	ldw	r5,4(r3)
 40035c4:	29ca703a 	and	r5,r5,r7
 40035c8:	1140022e 	bgeu	r2,r5,40035d4 <_free_r+0x160>
 40035cc:	18c00217 	ldw	r3,8(r3)
 40035d0:	20fffb1e 	bne	r4,r3,40035c0 <__ram_exceptions_end+0xfabff434>
 40035d4:	19000317 	ldw	r4,12(r3)
 40035d8:	31000315 	stw	r4,12(r6)
 40035dc:	30c00215 	stw	r3,8(r6)
 40035e0:	21800215 	stw	r6,8(r4)
 40035e4:	19800315 	stw	r6,12(r3)
 40035e8:	003fde06 	br	4003564 <__ram_exceptions_end+0xfabff3d8>
 40035ec:	29c00217 	ldw	r7,8(r5)
 40035f0:	10c5883a 	add	r2,r2,r3
 40035f4:	00c10034 	movhi	r3,1024
 40035f8:	18d61d04 	addi	r3,r3,22644
 40035fc:	38c03b26 	beq	r7,r3,40036ec <_free_r+0x278>
 4003600:	2a000317 	ldw	r8,12(r5)
 4003604:	11400054 	ori	r5,r2,1
 4003608:	3087883a 	add	r3,r6,r2
 400360c:	3a000315 	stw	r8,12(r7)
 4003610:	41c00215 	stw	r7,8(r8)
 4003614:	31400115 	stw	r5,4(r6)
 4003618:	18800015 	stw	r2,0(r3)
 400361c:	003fbd06 	br	4003514 <__ram_exceptions_end+0xfabff388>
 4003620:	39c0004c 	andi	r7,r7,1
 4003624:	10c5883a 	add	r2,r2,r3
 4003628:	3800071e 	bne	r7,zero,4003648 <_free_r+0x1d4>
 400362c:	81fffe17 	ldw	r7,-8(r16)
 4003630:	31cdc83a 	sub	r6,r6,r7
 4003634:	30c00317 	ldw	r3,12(r6)
 4003638:	31400217 	ldw	r5,8(r6)
 400363c:	11c5883a 	add	r2,r2,r7
 4003640:	28c00315 	stw	r3,12(r5)
 4003644:	19400215 	stw	r5,8(r3)
 4003648:	10c00054 	ori	r3,r2,1
 400364c:	30c00115 	stw	r3,4(r6)
 4003650:	00c10034 	movhi	r3,1024
 4003654:	18d73004 	addi	r3,r3,23744
 4003658:	18c00017 	ldw	r3,0(r3)
 400365c:	21800215 	stw	r6,8(r4)
 4003660:	10ffc036 	bltu	r2,r3,4003564 <__ram_exceptions_end+0xfabff3d8>
 4003664:	00810034 	movhi	r2,1024
 4003668:	109a2c04 	addi	r2,r2,26800
 400366c:	11400017 	ldw	r5,0(r2)
 4003670:	8809883a 	mov	r4,r17
 4003674:	40033500 	call	4003350 <_malloc_trim_r>
 4003678:	003fba06 	br	4003564 <__ram_exceptions_end+0xfabff3d8>
 400367c:	28c9883a 	add	r4,r5,r3
 4003680:	21000117 	ldw	r4,4(r4)
 4003684:	2100004c 	andi	r4,r4,1
 4003688:	2000391e 	bne	r4,zero,4003770 <_free_r+0x2fc>
 400368c:	29c00217 	ldw	r7,8(r5)
 4003690:	29000317 	ldw	r4,12(r5)
 4003694:	1885883a 	add	r2,r3,r2
 4003698:	10c00054 	ori	r3,r2,1
 400369c:	39000315 	stw	r4,12(r7)
 40036a0:	21c00215 	stw	r7,8(r4)
 40036a4:	30c00115 	stw	r3,4(r6)
 40036a8:	308d883a 	add	r6,r6,r2
 40036ac:	30800015 	stw	r2,0(r6)
 40036b0:	003fac06 	br	4003564 <__ram_exceptions_end+0xfabff3d8>
 40036b4:	00c00504 	movi	r3,20
 40036b8:	19401536 	bltu	r3,r5,4003710 <_free_r+0x29c>
 40036bc:	28c01704 	addi	r3,r5,92
 40036c0:	18c7883a 	add	r3,r3,r3
 40036c4:	294016c4 	addi	r5,r5,91
 40036c8:	003fb406 	br	400359c <__ram_exceptions_end+0xfabff410>
 40036cc:	280bd0ba 	srai	r5,r5,2
 40036d0:	00c00044 	movi	r3,1
 40036d4:	38800117 	ldw	r2,4(r7)
 40036d8:	194a983a 	sll	r5,r3,r5
 40036dc:	2007883a 	mov	r3,r4
 40036e0:	2884b03a 	or	r2,r5,r2
 40036e4:	38800115 	stw	r2,4(r7)
 40036e8:	003fbb06 	br	40035d8 <__ram_exceptions_end+0xfabff44c>
 40036ec:	21800515 	stw	r6,20(r4)
 40036f0:	21800415 	stw	r6,16(r4)
 40036f4:	10c00054 	ori	r3,r2,1
 40036f8:	31c00315 	stw	r7,12(r6)
 40036fc:	31c00215 	stw	r7,8(r6)
 4003700:	30c00115 	stw	r3,4(r6)
 4003704:	308d883a 	add	r6,r6,r2
 4003708:	30800015 	stw	r2,0(r6)
 400370c:	003f9506 	br	4003564 <__ram_exceptions_end+0xfabff3d8>
 4003710:	00c01504 	movi	r3,84
 4003714:	19400536 	bltu	r3,r5,400372c <_free_r+0x2b8>
 4003718:	100ad33a 	srli	r5,r2,12
 400371c:	28c01bc4 	addi	r3,r5,111
 4003720:	18c7883a 	add	r3,r3,r3
 4003724:	29401b84 	addi	r5,r5,110
 4003728:	003f9c06 	br	400359c <__ram_exceptions_end+0xfabff410>
 400372c:	00c05504 	movi	r3,340
 4003730:	19400536 	bltu	r3,r5,4003748 <_free_r+0x2d4>
 4003734:	100ad3fa 	srli	r5,r2,15
 4003738:	28c01e04 	addi	r3,r5,120
 400373c:	18c7883a 	add	r3,r3,r3
 4003740:	29401dc4 	addi	r5,r5,119
 4003744:	003f9506 	br	400359c <__ram_exceptions_end+0xfabff410>
 4003748:	00c15504 	movi	r3,1364
 400374c:	19400536 	bltu	r3,r5,4003764 <_free_r+0x2f0>
 4003750:	100ad4ba 	srli	r5,r2,18
 4003754:	28c01f44 	addi	r3,r5,125
 4003758:	18c7883a 	add	r3,r3,r3
 400375c:	29401f04 	addi	r5,r5,124
 4003760:	003f8e06 	br	400359c <__ram_exceptions_end+0xfabff410>
 4003764:	00c03f84 	movi	r3,254
 4003768:	01401f84 	movi	r5,126
 400376c:	003f8b06 	br	400359c <__ram_exceptions_end+0xfabff410>
 4003770:	10c00054 	ori	r3,r2,1
 4003774:	30c00115 	stw	r3,4(r6)
 4003778:	308d883a 	add	r6,r6,r2
 400377c:	30800015 	stw	r2,0(r6)
 4003780:	003f7806 	br	4003564 <__ram_exceptions_end+0xfabff3d8>

04003784 <_fwalk>:
 4003784:	defff704 	addi	sp,sp,-36
 4003788:	dd000415 	stw	r20,16(sp)
 400378c:	dfc00815 	stw	ra,32(sp)
 4003790:	ddc00715 	stw	r23,28(sp)
 4003794:	dd800615 	stw	r22,24(sp)
 4003798:	dd400515 	stw	r21,20(sp)
 400379c:	dcc00315 	stw	r19,12(sp)
 40037a0:	dc800215 	stw	r18,8(sp)
 40037a4:	dc400115 	stw	r17,4(sp)
 40037a8:	dc000015 	stw	r16,0(sp)
 40037ac:	2500b804 	addi	r20,r4,736
 40037b0:	a0002326 	beq	r20,zero,4003840 <_fwalk+0xbc>
 40037b4:	282b883a 	mov	r21,r5
 40037b8:	002f883a 	mov	r23,zero
 40037bc:	05800044 	movi	r22,1
 40037c0:	04ffffc4 	movi	r19,-1
 40037c4:	a4400117 	ldw	r17,4(r20)
 40037c8:	a4800217 	ldw	r18,8(r20)
 40037cc:	8c7fffc4 	addi	r17,r17,-1
 40037d0:	88000d16 	blt	r17,zero,4003808 <_fwalk+0x84>
 40037d4:	94000304 	addi	r16,r18,12
 40037d8:	94800384 	addi	r18,r18,14
 40037dc:	8080000b 	ldhu	r2,0(r16)
 40037e0:	8c7fffc4 	addi	r17,r17,-1
 40037e4:	813ffd04 	addi	r4,r16,-12
 40037e8:	b080042e 	bgeu	r22,r2,40037fc <_fwalk+0x78>
 40037ec:	9080000f 	ldh	r2,0(r18)
 40037f0:	14c00226 	beq	r2,r19,40037fc <_fwalk+0x78>
 40037f4:	a83ee83a 	callr	r21
 40037f8:	b8aeb03a 	or	r23,r23,r2
 40037fc:	84001a04 	addi	r16,r16,104
 4003800:	94801a04 	addi	r18,r18,104
 4003804:	8cfff51e 	bne	r17,r19,40037dc <__ram_exceptions_end+0xfabff650>
 4003808:	a5000017 	ldw	r20,0(r20)
 400380c:	a03fed1e 	bne	r20,zero,40037c4 <__ram_exceptions_end+0xfabff638>
 4003810:	b805883a 	mov	r2,r23
 4003814:	dfc00817 	ldw	ra,32(sp)
 4003818:	ddc00717 	ldw	r23,28(sp)
 400381c:	dd800617 	ldw	r22,24(sp)
 4003820:	dd400517 	ldw	r21,20(sp)
 4003824:	dd000417 	ldw	r20,16(sp)
 4003828:	dcc00317 	ldw	r19,12(sp)
 400382c:	dc800217 	ldw	r18,8(sp)
 4003830:	dc400117 	ldw	r17,4(sp)
 4003834:	dc000017 	ldw	r16,0(sp)
 4003838:	dec00904 	addi	sp,sp,36
 400383c:	f800283a 	ret
 4003840:	002f883a 	mov	r23,zero
 4003844:	003ff206 	br	4003810 <__ram_exceptions_end+0xfabff684>

04003848 <_fwalk_reent>:
 4003848:	defff704 	addi	sp,sp,-36
 400384c:	dd000415 	stw	r20,16(sp)
 4003850:	dfc00815 	stw	ra,32(sp)
 4003854:	ddc00715 	stw	r23,28(sp)
 4003858:	dd800615 	stw	r22,24(sp)
 400385c:	dd400515 	stw	r21,20(sp)
 4003860:	dcc00315 	stw	r19,12(sp)
 4003864:	dc800215 	stw	r18,8(sp)
 4003868:	dc400115 	stw	r17,4(sp)
 400386c:	dc000015 	stw	r16,0(sp)
 4003870:	2500b804 	addi	r20,r4,736
 4003874:	a0002326 	beq	r20,zero,4003904 <_fwalk_reent+0xbc>
 4003878:	282b883a 	mov	r21,r5
 400387c:	2027883a 	mov	r19,r4
 4003880:	002f883a 	mov	r23,zero
 4003884:	05800044 	movi	r22,1
 4003888:	04bfffc4 	movi	r18,-1
 400388c:	a4400117 	ldw	r17,4(r20)
 4003890:	a4000217 	ldw	r16,8(r20)
 4003894:	8c7fffc4 	addi	r17,r17,-1
 4003898:	88000c16 	blt	r17,zero,40038cc <_fwalk_reent+0x84>
 400389c:	84000304 	addi	r16,r16,12
 40038a0:	8080000b 	ldhu	r2,0(r16)
 40038a4:	8c7fffc4 	addi	r17,r17,-1
 40038a8:	817ffd04 	addi	r5,r16,-12
 40038ac:	b080052e 	bgeu	r22,r2,40038c4 <_fwalk_reent+0x7c>
 40038b0:	8080008f 	ldh	r2,2(r16)
 40038b4:	9809883a 	mov	r4,r19
 40038b8:	14800226 	beq	r2,r18,40038c4 <_fwalk_reent+0x7c>
 40038bc:	a83ee83a 	callr	r21
 40038c0:	b8aeb03a 	or	r23,r23,r2
 40038c4:	84001a04 	addi	r16,r16,104
 40038c8:	8cbff51e 	bne	r17,r18,40038a0 <__ram_exceptions_end+0xfabff714>
 40038cc:	a5000017 	ldw	r20,0(r20)
 40038d0:	a03fee1e 	bne	r20,zero,400388c <__ram_exceptions_end+0xfabff700>
 40038d4:	b805883a 	mov	r2,r23
 40038d8:	dfc00817 	ldw	ra,32(sp)
 40038dc:	ddc00717 	ldw	r23,28(sp)
 40038e0:	dd800617 	ldw	r22,24(sp)
 40038e4:	dd400517 	ldw	r21,20(sp)
 40038e8:	dd000417 	ldw	r20,16(sp)
 40038ec:	dcc00317 	ldw	r19,12(sp)
 40038f0:	dc800217 	ldw	r18,8(sp)
 40038f4:	dc400117 	ldw	r17,4(sp)
 40038f8:	dc000017 	ldw	r16,0(sp)
 40038fc:	dec00904 	addi	sp,sp,36
 4003900:	f800283a 	ret
 4003904:	002f883a 	mov	r23,zero
 4003908:	003ff206 	br	40038d4 <__ram_exceptions_end+0xfabff748>

0400390c <__smakebuf_r>:
 400390c:	2880030b 	ldhu	r2,12(r5)
 4003910:	10c0008c 	andi	r3,r2,2
 4003914:	1800411e 	bne	r3,zero,4003a1c <__smakebuf_r+0x110>
 4003918:	deffec04 	addi	sp,sp,-80
 400391c:	dc000f15 	stw	r16,60(sp)
 4003920:	2821883a 	mov	r16,r5
 4003924:	2940038f 	ldh	r5,14(r5)
 4003928:	dc401015 	stw	r17,64(sp)
 400392c:	dfc01315 	stw	ra,76(sp)
 4003930:	dcc01215 	stw	r19,72(sp)
 4003934:	dc801115 	stw	r18,68(sp)
 4003938:	2023883a 	mov	r17,r4
 400393c:	28001c16 	blt	r5,zero,40039b0 <__smakebuf_r+0xa4>
 4003940:	d80d883a 	mov	r6,sp
 4003944:	40049340 	call	4004934 <_fstat_r>
 4003948:	10001816 	blt	r2,zero,40039ac <__smakebuf_r+0xa0>
 400394c:	d8800117 	ldw	r2,4(sp)
 4003950:	00e00014 	movui	r3,32768
 4003954:	10bc000c 	andi	r2,r2,61440
 4003958:	14c80020 	cmpeqi	r19,r2,8192
 400395c:	10c03726 	beq	r2,r3,4003a3c <__smakebuf_r+0x130>
 4003960:	80c0030b 	ldhu	r3,12(r16)
 4003964:	18c20014 	ori	r3,r3,2048
 4003968:	80c0030d 	sth	r3,12(r16)
 400396c:	00c80004 	movi	r3,8192
 4003970:	10c0521e 	bne	r2,r3,4003abc <__smakebuf_r+0x1b0>
 4003974:	8140038f 	ldh	r5,14(r16)
 4003978:	8809883a 	mov	r4,r17
 400397c:	40049900 	call	4004990 <_isatty_r>
 4003980:	10004c26 	beq	r2,zero,4003ab4 <__smakebuf_r+0x1a8>
 4003984:	8080030b 	ldhu	r2,12(r16)
 4003988:	80c010c4 	addi	r3,r16,67
 400398c:	80c00015 	stw	r3,0(r16)
 4003990:	10800054 	ori	r2,r2,1
 4003994:	8080030d 	sth	r2,12(r16)
 4003998:	00800044 	movi	r2,1
 400399c:	80c00415 	stw	r3,16(r16)
 40039a0:	80800515 	stw	r2,20(r16)
 40039a4:	04810004 	movi	r18,1024
 40039a8:	00000706 	br	40039c8 <__smakebuf_r+0xbc>
 40039ac:	8080030b 	ldhu	r2,12(r16)
 40039b0:	10c0200c 	andi	r3,r2,128
 40039b4:	18001f1e 	bne	r3,zero,4003a34 <__smakebuf_r+0x128>
 40039b8:	04810004 	movi	r18,1024
 40039bc:	10820014 	ori	r2,r2,2048
 40039c0:	8080030d 	sth	r2,12(r16)
 40039c4:	0027883a 	mov	r19,zero
 40039c8:	900b883a 	mov	r5,r18
 40039cc:	8809883a 	mov	r4,r17
 40039d0:	4003ac80 	call	4003ac8 <_malloc_r>
 40039d4:	10002c26 	beq	r2,zero,4003a88 <__smakebuf_r+0x17c>
 40039d8:	80c0030b 	ldhu	r3,12(r16)
 40039dc:	01010034 	movhi	r4,1024
 40039e0:	210bee04 	addi	r4,r4,12216
 40039e4:	89000f15 	stw	r4,60(r17)
 40039e8:	18c02014 	ori	r3,r3,128
 40039ec:	80c0030d 	sth	r3,12(r16)
 40039f0:	80800015 	stw	r2,0(r16)
 40039f4:	80800415 	stw	r2,16(r16)
 40039f8:	84800515 	stw	r18,20(r16)
 40039fc:	98001a1e 	bne	r19,zero,4003a68 <__smakebuf_r+0x15c>
 4003a00:	dfc01317 	ldw	ra,76(sp)
 4003a04:	dcc01217 	ldw	r19,72(sp)
 4003a08:	dc801117 	ldw	r18,68(sp)
 4003a0c:	dc401017 	ldw	r17,64(sp)
 4003a10:	dc000f17 	ldw	r16,60(sp)
 4003a14:	dec01404 	addi	sp,sp,80
 4003a18:	f800283a 	ret
 4003a1c:	288010c4 	addi	r2,r5,67
 4003a20:	28800015 	stw	r2,0(r5)
 4003a24:	28800415 	stw	r2,16(r5)
 4003a28:	00800044 	movi	r2,1
 4003a2c:	28800515 	stw	r2,20(r5)
 4003a30:	f800283a 	ret
 4003a34:	04801004 	movi	r18,64
 4003a38:	003fe006 	br	40039bc <__ram_exceptions_end+0xfabff830>
 4003a3c:	81000a17 	ldw	r4,40(r16)
 4003a40:	00c10034 	movhi	r3,1024
 4003a44:	18d1c604 	addi	r3,r3,18200
 4003a48:	20ffc51e 	bne	r4,r3,4003960 <__ram_exceptions_end+0xfabff7d4>
 4003a4c:	8080030b 	ldhu	r2,12(r16)
 4003a50:	04810004 	movi	r18,1024
 4003a54:	84801315 	stw	r18,76(r16)
 4003a58:	1484b03a 	or	r2,r2,r18
 4003a5c:	8080030d 	sth	r2,12(r16)
 4003a60:	0027883a 	mov	r19,zero
 4003a64:	003fd806 	br	40039c8 <__ram_exceptions_end+0xfabff83c>
 4003a68:	8140038f 	ldh	r5,14(r16)
 4003a6c:	8809883a 	mov	r4,r17
 4003a70:	40049900 	call	4004990 <_isatty_r>
 4003a74:	103fe226 	beq	r2,zero,4003a00 <__ram_exceptions_end+0xfabff874>
 4003a78:	8080030b 	ldhu	r2,12(r16)
 4003a7c:	10800054 	ori	r2,r2,1
 4003a80:	8080030d 	sth	r2,12(r16)
 4003a84:	003fde06 	br	4003a00 <__ram_exceptions_end+0xfabff874>
 4003a88:	8080030b 	ldhu	r2,12(r16)
 4003a8c:	10c0800c 	andi	r3,r2,512
 4003a90:	183fdb1e 	bne	r3,zero,4003a00 <__ram_exceptions_end+0xfabff874>
 4003a94:	10800094 	ori	r2,r2,2
 4003a98:	80c010c4 	addi	r3,r16,67
 4003a9c:	8080030d 	sth	r2,12(r16)
 4003aa0:	00800044 	movi	r2,1
 4003aa4:	80c00015 	stw	r3,0(r16)
 4003aa8:	80c00415 	stw	r3,16(r16)
 4003aac:	80800515 	stw	r2,20(r16)
 4003ab0:	003fd306 	br	4003a00 <__ram_exceptions_end+0xfabff874>
 4003ab4:	04810004 	movi	r18,1024
 4003ab8:	003fc306 	br	40039c8 <__ram_exceptions_end+0xfabff83c>
 4003abc:	0027883a 	mov	r19,zero
 4003ac0:	04810004 	movi	r18,1024
 4003ac4:	003fc006 	br	40039c8 <__ram_exceptions_end+0xfabff83c>

04003ac8 <_malloc_r>:
 4003ac8:	defff504 	addi	sp,sp,-44
 4003acc:	dc800315 	stw	r18,12(sp)
 4003ad0:	dfc00a15 	stw	ra,40(sp)
 4003ad4:	df000915 	stw	fp,36(sp)
 4003ad8:	ddc00815 	stw	r23,32(sp)
 4003adc:	dd800715 	stw	r22,28(sp)
 4003ae0:	dd400615 	stw	r21,24(sp)
 4003ae4:	dd000515 	stw	r20,20(sp)
 4003ae8:	dcc00415 	stw	r19,16(sp)
 4003aec:	dc400215 	stw	r17,8(sp)
 4003af0:	dc000115 	stw	r16,4(sp)
 4003af4:	288002c4 	addi	r2,r5,11
 4003af8:	00c00584 	movi	r3,22
 4003afc:	2025883a 	mov	r18,r4
 4003b00:	18807f2e 	bgeu	r3,r2,4003d00 <_malloc_r+0x238>
 4003b04:	047ffe04 	movi	r17,-8
 4003b08:	1462703a 	and	r17,r2,r17
 4003b0c:	8800a316 	blt	r17,zero,4003d9c <_malloc_r+0x2d4>
 4003b10:	8940a236 	bltu	r17,r5,4003d9c <_malloc_r+0x2d4>
 4003b14:	4004c300 	call	4004c30 <__malloc_lock>
 4003b18:	00807dc4 	movi	r2,503
 4003b1c:	1441e92e 	bgeu	r2,r17,40042c4 <_malloc_r+0x7fc>
 4003b20:	8804d27a 	srli	r2,r17,9
 4003b24:	1000a126 	beq	r2,zero,4003dac <_malloc_r+0x2e4>
 4003b28:	00c00104 	movi	r3,4
 4003b2c:	18811e36 	bltu	r3,r2,4003fa8 <_malloc_r+0x4e0>
 4003b30:	8804d1ba 	srli	r2,r17,6
 4003b34:	12000e44 	addi	r8,r2,57
 4003b38:	11c00e04 	addi	r7,r2,56
 4003b3c:	4209883a 	add	r4,r8,r8
 4003b40:	04c10034 	movhi	r19,1024
 4003b44:	2109883a 	add	r4,r4,r4
 4003b48:	9cd61b04 	addi	r19,r19,22636
 4003b4c:	2109883a 	add	r4,r4,r4
 4003b50:	9909883a 	add	r4,r19,r4
 4003b54:	24000117 	ldw	r16,4(r4)
 4003b58:	213ffe04 	addi	r4,r4,-8
 4003b5c:	24009726 	beq	r4,r16,4003dbc <_malloc_r+0x2f4>
 4003b60:	80800117 	ldw	r2,4(r16)
 4003b64:	01bfff04 	movi	r6,-4
 4003b68:	014003c4 	movi	r5,15
 4003b6c:	1184703a 	and	r2,r2,r6
 4003b70:	1447c83a 	sub	r3,r2,r17
 4003b74:	28c00716 	blt	r5,r3,4003b94 <_malloc_r+0xcc>
 4003b78:	1800920e 	bge	r3,zero,4003dc4 <_malloc_r+0x2fc>
 4003b7c:	84000317 	ldw	r16,12(r16)
 4003b80:	24008e26 	beq	r4,r16,4003dbc <_malloc_r+0x2f4>
 4003b84:	80800117 	ldw	r2,4(r16)
 4003b88:	1184703a 	and	r2,r2,r6
 4003b8c:	1447c83a 	sub	r3,r2,r17
 4003b90:	28fff90e 	bge	r5,r3,4003b78 <__ram_exceptions_end+0xfabff9ec>
 4003b94:	3809883a 	mov	r4,r7
 4003b98:	01810034 	movhi	r6,1024
 4003b9c:	9c000417 	ldw	r16,16(r19)
 4003ba0:	31961b04 	addi	r6,r6,22636
 4003ba4:	32000204 	addi	r8,r6,8
 4003ba8:	82013426 	beq	r16,r8,400407c <_malloc_r+0x5b4>
 4003bac:	80c00117 	ldw	r3,4(r16)
 4003bb0:	00bfff04 	movi	r2,-4
 4003bb4:	188e703a 	and	r7,r3,r2
 4003bb8:	3c45c83a 	sub	r2,r7,r17
 4003bbc:	00c003c4 	movi	r3,15
 4003bc0:	18811f16 	blt	r3,r2,4004040 <_malloc_r+0x578>
 4003bc4:	32000515 	stw	r8,20(r6)
 4003bc8:	32000415 	stw	r8,16(r6)
 4003bcc:	10007f0e 	bge	r2,zero,4003dcc <_malloc_r+0x304>
 4003bd0:	00807fc4 	movi	r2,511
 4003bd4:	11c0fd36 	bltu	r2,r7,4003fcc <_malloc_r+0x504>
 4003bd8:	3806d0fa 	srli	r3,r7,3
 4003bdc:	01c00044 	movi	r7,1
 4003be0:	30800117 	ldw	r2,4(r6)
 4003be4:	19400044 	addi	r5,r3,1
 4003be8:	294b883a 	add	r5,r5,r5
 4003bec:	1807d0ba 	srai	r3,r3,2
 4003bf0:	294b883a 	add	r5,r5,r5
 4003bf4:	294b883a 	add	r5,r5,r5
 4003bf8:	298b883a 	add	r5,r5,r6
 4003bfc:	38c6983a 	sll	r3,r7,r3
 4003c00:	29c00017 	ldw	r7,0(r5)
 4003c04:	2a7ffe04 	addi	r9,r5,-8
 4003c08:	1886b03a 	or	r3,r3,r2
 4003c0c:	82400315 	stw	r9,12(r16)
 4003c10:	81c00215 	stw	r7,8(r16)
 4003c14:	30c00115 	stw	r3,4(r6)
 4003c18:	2c000015 	stw	r16,0(r5)
 4003c1c:	3c000315 	stw	r16,12(r7)
 4003c20:	2005d0ba 	srai	r2,r4,2
 4003c24:	01400044 	movi	r5,1
 4003c28:	288a983a 	sll	r5,r5,r2
 4003c2c:	19406f36 	bltu	r3,r5,4003dec <_malloc_r+0x324>
 4003c30:	28c4703a 	and	r2,r5,r3
 4003c34:	10000a1e 	bne	r2,zero,4003c60 <_malloc_r+0x198>
 4003c38:	00bfff04 	movi	r2,-4
 4003c3c:	294b883a 	add	r5,r5,r5
 4003c40:	2088703a 	and	r4,r4,r2
 4003c44:	28c4703a 	and	r2,r5,r3
 4003c48:	21000104 	addi	r4,r4,4
 4003c4c:	1000041e 	bne	r2,zero,4003c60 <_malloc_r+0x198>
 4003c50:	294b883a 	add	r5,r5,r5
 4003c54:	28c4703a 	and	r2,r5,r3
 4003c58:	21000104 	addi	r4,r4,4
 4003c5c:	103ffc26 	beq	r2,zero,4003c50 <__ram_exceptions_end+0xfabffac4>
 4003c60:	02bfff04 	movi	r10,-4
 4003c64:	024003c4 	movi	r9,15
 4003c68:	21800044 	addi	r6,r4,1
 4003c6c:	318d883a 	add	r6,r6,r6
 4003c70:	318d883a 	add	r6,r6,r6
 4003c74:	318d883a 	add	r6,r6,r6
 4003c78:	998d883a 	add	r6,r19,r6
 4003c7c:	333ffe04 	addi	r12,r6,-8
 4003c80:	2017883a 	mov	r11,r4
 4003c84:	31800104 	addi	r6,r6,4
 4003c88:	34000017 	ldw	r16,0(r6)
 4003c8c:	31fffd04 	addi	r7,r6,-12
 4003c90:	81c0041e 	bne	r16,r7,4003ca4 <_malloc_r+0x1dc>
 4003c94:	0000fb06 	br	4004084 <_malloc_r+0x5bc>
 4003c98:	1801030e 	bge	r3,zero,40040a8 <_malloc_r+0x5e0>
 4003c9c:	84000317 	ldw	r16,12(r16)
 4003ca0:	81c0f826 	beq	r16,r7,4004084 <_malloc_r+0x5bc>
 4003ca4:	80800117 	ldw	r2,4(r16)
 4003ca8:	1284703a 	and	r2,r2,r10
 4003cac:	1447c83a 	sub	r3,r2,r17
 4003cb0:	48fff90e 	bge	r9,r3,4003c98 <__ram_exceptions_end+0xfabffb0c>
 4003cb4:	80800317 	ldw	r2,12(r16)
 4003cb8:	81000217 	ldw	r4,8(r16)
 4003cbc:	89400054 	ori	r5,r17,1
 4003cc0:	81400115 	stw	r5,4(r16)
 4003cc4:	20800315 	stw	r2,12(r4)
 4003cc8:	11000215 	stw	r4,8(r2)
 4003ccc:	8463883a 	add	r17,r16,r17
 4003cd0:	9c400515 	stw	r17,20(r19)
 4003cd4:	9c400415 	stw	r17,16(r19)
 4003cd8:	18800054 	ori	r2,r3,1
 4003cdc:	88800115 	stw	r2,4(r17)
 4003ce0:	8a000315 	stw	r8,12(r17)
 4003ce4:	8a000215 	stw	r8,8(r17)
 4003ce8:	88e3883a 	add	r17,r17,r3
 4003cec:	88c00015 	stw	r3,0(r17)
 4003cf0:	9009883a 	mov	r4,r18
 4003cf4:	4004c340 	call	4004c34 <__malloc_unlock>
 4003cf8:	80800204 	addi	r2,r16,8
 4003cfc:	00001b06 	br	4003d6c <_malloc_r+0x2a4>
 4003d00:	04400404 	movi	r17,16
 4003d04:	89402536 	bltu	r17,r5,4003d9c <_malloc_r+0x2d4>
 4003d08:	4004c300 	call	4004c30 <__malloc_lock>
 4003d0c:	00800184 	movi	r2,6
 4003d10:	01000084 	movi	r4,2
 4003d14:	04c10034 	movhi	r19,1024
 4003d18:	1085883a 	add	r2,r2,r2
 4003d1c:	9cd61b04 	addi	r19,r19,22636
 4003d20:	1085883a 	add	r2,r2,r2
 4003d24:	9885883a 	add	r2,r19,r2
 4003d28:	14000117 	ldw	r16,4(r2)
 4003d2c:	10fffe04 	addi	r3,r2,-8
 4003d30:	80c0d926 	beq	r16,r3,4004098 <_malloc_r+0x5d0>
 4003d34:	80c00117 	ldw	r3,4(r16)
 4003d38:	81000317 	ldw	r4,12(r16)
 4003d3c:	00bfff04 	movi	r2,-4
 4003d40:	1884703a 	and	r2,r3,r2
 4003d44:	81400217 	ldw	r5,8(r16)
 4003d48:	8085883a 	add	r2,r16,r2
 4003d4c:	10c00117 	ldw	r3,4(r2)
 4003d50:	29000315 	stw	r4,12(r5)
 4003d54:	21400215 	stw	r5,8(r4)
 4003d58:	18c00054 	ori	r3,r3,1
 4003d5c:	10c00115 	stw	r3,4(r2)
 4003d60:	9009883a 	mov	r4,r18
 4003d64:	4004c340 	call	4004c34 <__malloc_unlock>
 4003d68:	80800204 	addi	r2,r16,8
 4003d6c:	dfc00a17 	ldw	ra,40(sp)
 4003d70:	df000917 	ldw	fp,36(sp)
 4003d74:	ddc00817 	ldw	r23,32(sp)
 4003d78:	dd800717 	ldw	r22,28(sp)
 4003d7c:	dd400617 	ldw	r21,24(sp)
 4003d80:	dd000517 	ldw	r20,20(sp)
 4003d84:	dcc00417 	ldw	r19,16(sp)
 4003d88:	dc800317 	ldw	r18,12(sp)
 4003d8c:	dc400217 	ldw	r17,8(sp)
 4003d90:	dc000117 	ldw	r16,4(sp)
 4003d94:	dec00b04 	addi	sp,sp,44
 4003d98:	f800283a 	ret
 4003d9c:	00800304 	movi	r2,12
 4003da0:	90800015 	stw	r2,0(r18)
 4003da4:	0005883a 	mov	r2,zero
 4003da8:	003ff006 	br	4003d6c <__ram_exceptions_end+0xfabffbe0>
 4003dac:	01002004 	movi	r4,128
 4003db0:	02001004 	movi	r8,64
 4003db4:	01c00fc4 	movi	r7,63
 4003db8:	003f6106 	br	4003b40 <__ram_exceptions_end+0xfabff9b4>
 4003dbc:	4009883a 	mov	r4,r8
 4003dc0:	003f7506 	br	4003b98 <__ram_exceptions_end+0xfabffa0c>
 4003dc4:	81000317 	ldw	r4,12(r16)
 4003dc8:	003fde06 	br	4003d44 <__ram_exceptions_end+0xfabffbb8>
 4003dcc:	81c5883a 	add	r2,r16,r7
 4003dd0:	11400117 	ldw	r5,4(r2)
 4003dd4:	9009883a 	mov	r4,r18
 4003dd8:	29400054 	ori	r5,r5,1
 4003ddc:	11400115 	stw	r5,4(r2)
 4003de0:	4004c340 	call	4004c34 <__malloc_unlock>
 4003de4:	80800204 	addi	r2,r16,8
 4003de8:	003fe006 	br	4003d6c <__ram_exceptions_end+0xfabffbe0>
 4003dec:	9c000217 	ldw	r16,8(r19)
 4003df0:	00bfff04 	movi	r2,-4
 4003df4:	85800117 	ldw	r22,4(r16)
 4003df8:	b0ac703a 	and	r22,r22,r2
 4003dfc:	b4400336 	bltu	r22,r17,4003e0c <_malloc_r+0x344>
 4003e00:	b445c83a 	sub	r2,r22,r17
 4003e04:	00c003c4 	movi	r3,15
 4003e08:	18805d16 	blt	r3,r2,4003f80 <_malloc_r+0x4b8>
 4003e0c:	05c10034 	movhi	r23,1024
 4003e10:	00810034 	movhi	r2,1024
 4003e14:	109a2c04 	addi	r2,r2,26800
 4003e18:	bdd72f04 	addi	r23,r23,23740
 4003e1c:	15400017 	ldw	r21,0(r2)
 4003e20:	b8c00017 	ldw	r3,0(r23)
 4003e24:	00bfffc4 	movi	r2,-1
 4003e28:	858d883a 	add	r6,r16,r22
 4003e2c:	8d6b883a 	add	r21,r17,r21
 4003e30:	1880ea26 	beq	r3,r2,40041dc <_malloc_r+0x714>
 4003e34:	ad4403c4 	addi	r21,r21,4111
 4003e38:	00bc0004 	movi	r2,-4096
 4003e3c:	a8aa703a 	and	r21,r21,r2
 4003e40:	a80b883a 	mov	r5,r21
 4003e44:	9009883a 	mov	r4,r18
 4003e48:	d9800015 	stw	r6,0(sp)
 4003e4c:	40045ec0 	call	40045ec <_sbrk_r>
 4003e50:	1029883a 	mov	r20,r2
 4003e54:	00bfffc4 	movi	r2,-1
 4003e58:	d9800017 	ldw	r6,0(sp)
 4003e5c:	a080e826 	beq	r20,r2,4004200 <_malloc_r+0x738>
 4003e60:	a180a636 	bltu	r20,r6,40040fc <_malloc_r+0x634>
 4003e64:	07010034 	movhi	fp,1024
 4003e68:	e71a2d04 	addi	fp,fp,26804
 4003e6c:	e0800017 	ldw	r2,0(fp)
 4003e70:	a887883a 	add	r3,r21,r2
 4003e74:	e0c00015 	stw	r3,0(fp)
 4003e78:	3500e626 	beq	r6,r20,4004214 <_malloc_r+0x74c>
 4003e7c:	b9000017 	ldw	r4,0(r23)
 4003e80:	00bfffc4 	movi	r2,-1
 4003e84:	2080ee26 	beq	r4,r2,4004240 <_malloc_r+0x778>
 4003e88:	a185c83a 	sub	r2,r20,r6
 4003e8c:	10c5883a 	add	r2,r2,r3
 4003e90:	e0800015 	stw	r2,0(fp)
 4003e94:	a0c001cc 	andi	r3,r20,7
 4003e98:	1800bc26 	beq	r3,zero,400418c <_malloc_r+0x6c4>
 4003e9c:	a0e9c83a 	sub	r20,r20,r3
 4003ea0:	00840204 	movi	r2,4104
 4003ea4:	a5000204 	addi	r20,r20,8
 4003ea8:	10c7c83a 	sub	r3,r2,r3
 4003eac:	a545883a 	add	r2,r20,r21
 4003eb0:	1083ffcc 	andi	r2,r2,4095
 4003eb4:	18abc83a 	sub	r21,r3,r2
 4003eb8:	a80b883a 	mov	r5,r21
 4003ebc:	9009883a 	mov	r4,r18
 4003ec0:	40045ec0 	call	40045ec <_sbrk_r>
 4003ec4:	00ffffc4 	movi	r3,-1
 4003ec8:	10c0e126 	beq	r2,r3,4004250 <_malloc_r+0x788>
 4003ecc:	1505c83a 	sub	r2,r2,r20
 4003ed0:	1545883a 	add	r2,r2,r21
 4003ed4:	10800054 	ori	r2,r2,1
 4003ed8:	e0c00017 	ldw	r3,0(fp)
 4003edc:	9d000215 	stw	r20,8(r19)
 4003ee0:	a0800115 	stw	r2,4(r20)
 4003ee4:	a8c7883a 	add	r3,r21,r3
 4003ee8:	e0c00015 	stw	r3,0(fp)
 4003eec:	84c00e26 	beq	r16,r19,4003f28 <_malloc_r+0x460>
 4003ef0:	018003c4 	movi	r6,15
 4003ef4:	3580a72e 	bgeu	r6,r22,4004194 <_malloc_r+0x6cc>
 4003ef8:	81400117 	ldw	r5,4(r16)
 4003efc:	013ffe04 	movi	r4,-8
 4003f00:	b0bffd04 	addi	r2,r22,-12
 4003f04:	1104703a 	and	r2,r2,r4
 4003f08:	2900004c 	andi	r4,r5,1
 4003f0c:	2088b03a 	or	r4,r4,r2
 4003f10:	81000115 	stw	r4,4(r16)
 4003f14:	01400144 	movi	r5,5
 4003f18:	8089883a 	add	r4,r16,r2
 4003f1c:	21400115 	stw	r5,4(r4)
 4003f20:	21400215 	stw	r5,8(r4)
 4003f24:	3080cd36 	bltu	r6,r2,400425c <_malloc_r+0x794>
 4003f28:	00810034 	movhi	r2,1024
 4003f2c:	109a2b04 	addi	r2,r2,26796
 4003f30:	11000017 	ldw	r4,0(r2)
 4003f34:	20c0012e 	bgeu	r4,r3,4003f3c <_malloc_r+0x474>
 4003f38:	10c00015 	stw	r3,0(r2)
 4003f3c:	00810034 	movhi	r2,1024
 4003f40:	109a2a04 	addi	r2,r2,26792
 4003f44:	11000017 	ldw	r4,0(r2)
 4003f48:	9c000217 	ldw	r16,8(r19)
 4003f4c:	20c0012e 	bgeu	r4,r3,4003f54 <_malloc_r+0x48c>
 4003f50:	10c00015 	stw	r3,0(r2)
 4003f54:	80c00117 	ldw	r3,4(r16)
 4003f58:	00bfff04 	movi	r2,-4
 4003f5c:	1886703a 	and	r3,r3,r2
 4003f60:	1c45c83a 	sub	r2,r3,r17
 4003f64:	1c400236 	bltu	r3,r17,4003f70 <_malloc_r+0x4a8>
 4003f68:	00c003c4 	movi	r3,15
 4003f6c:	18800416 	blt	r3,r2,4003f80 <_malloc_r+0x4b8>
 4003f70:	9009883a 	mov	r4,r18
 4003f74:	4004c340 	call	4004c34 <__malloc_unlock>
 4003f78:	0005883a 	mov	r2,zero
 4003f7c:	003f7b06 	br	4003d6c <__ram_exceptions_end+0xfabffbe0>
 4003f80:	88c00054 	ori	r3,r17,1
 4003f84:	80c00115 	stw	r3,4(r16)
 4003f88:	8463883a 	add	r17,r16,r17
 4003f8c:	10800054 	ori	r2,r2,1
 4003f90:	9c400215 	stw	r17,8(r19)
 4003f94:	88800115 	stw	r2,4(r17)
 4003f98:	9009883a 	mov	r4,r18
 4003f9c:	4004c340 	call	4004c34 <__malloc_unlock>
 4003fa0:	80800204 	addi	r2,r16,8
 4003fa4:	003f7106 	br	4003d6c <__ram_exceptions_end+0xfabffbe0>
 4003fa8:	00c00504 	movi	r3,20
 4003fac:	18804a2e 	bgeu	r3,r2,40040d8 <_malloc_r+0x610>
 4003fb0:	00c01504 	movi	r3,84
 4003fb4:	18806e36 	bltu	r3,r2,4004170 <_malloc_r+0x6a8>
 4003fb8:	8804d33a 	srli	r2,r17,12
 4003fbc:	12001bc4 	addi	r8,r2,111
 4003fc0:	11c01b84 	addi	r7,r2,110
 4003fc4:	4209883a 	add	r4,r8,r8
 4003fc8:	003edd06 	br	4003b40 <__ram_exceptions_end+0xfabff9b4>
 4003fcc:	3804d27a 	srli	r2,r7,9
 4003fd0:	00c00104 	movi	r3,4
 4003fd4:	1880442e 	bgeu	r3,r2,40040e8 <_malloc_r+0x620>
 4003fd8:	00c00504 	movi	r3,20
 4003fdc:	18808136 	bltu	r3,r2,40041e4 <_malloc_r+0x71c>
 4003fe0:	11401704 	addi	r5,r2,92
 4003fe4:	10c016c4 	addi	r3,r2,91
 4003fe8:	294b883a 	add	r5,r5,r5
 4003fec:	294b883a 	add	r5,r5,r5
 4003ff0:	294b883a 	add	r5,r5,r5
 4003ff4:	994b883a 	add	r5,r19,r5
 4003ff8:	28800017 	ldw	r2,0(r5)
 4003ffc:	01810034 	movhi	r6,1024
 4004000:	297ffe04 	addi	r5,r5,-8
 4004004:	31961b04 	addi	r6,r6,22636
 4004008:	28806526 	beq	r5,r2,40041a0 <_malloc_r+0x6d8>
 400400c:	01bfff04 	movi	r6,-4
 4004010:	10c00117 	ldw	r3,4(r2)
 4004014:	1986703a 	and	r3,r3,r6
 4004018:	38c0022e 	bgeu	r7,r3,4004024 <_malloc_r+0x55c>
 400401c:	10800217 	ldw	r2,8(r2)
 4004020:	28bffb1e 	bne	r5,r2,4004010 <__ram_exceptions_end+0xfabffe84>
 4004024:	11400317 	ldw	r5,12(r2)
 4004028:	98c00117 	ldw	r3,4(r19)
 400402c:	81400315 	stw	r5,12(r16)
 4004030:	80800215 	stw	r2,8(r16)
 4004034:	2c000215 	stw	r16,8(r5)
 4004038:	14000315 	stw	r16,12(r2)
 400403c:	003ef806 	br	4003c20 <__ram_exceptions_end+0xfabffa94>
 4004040:	88c00054 	ori	r3,r17,1
 4004044:	80c00115 	stw	r3,4(r16)
 4004048:	8463883a 	add	r17,r16,r17
 400404c:	34400515 	stw	r17,20(r6)
 4004050:	34400415 	stw	r17,16(r6)
 4004054:	10c00054 	ori	r3,r2,1
 4004058:	8a000315 	stw	r8,12(r17)
 400405c:	8a000215 	stw	r8,8(r17)
 4004060:	88c00115 	stw	r3,4(r17)
 4004064:	88a3883a 	add	r17,r17,r2
 4004068:	88800015 	stw	r2,0(r17)
 400406c:	9009883a 	mov	r4,r18
 4004070:	4004c340 	call	4004c34 <__malloc_unlock>
 4004074:	80800204 	addi	r2,r16,8
 4004078:	003f3c06 	br	4003d6c <__ram_exceptions_end+0xfabffbe0>
 400407c:	30c00117 	ldw	r3,4(r6)
 4004080:	003ee706 	br	4003c20 <__ram_exceptions_end+0xfabffa94>
 4004084:	5ac00044 	addi	r11,r11,1
 4004088:	588000cc 	andi	r2,r11,3
 400408c:	31800204 	addi	r6,r6,8
 4004090:	103efd1e 	bne	r2,zero,4003c88 <__ram_exceptions_end+0xfabffafc>
 4004094:	00002406 	br	4004128 <_malloc_r+0x660>
 4004098:	14000317 	ldw	r16,12(r2)
 400409c:	143f251e 	bne	r2,r16,4003d34 <__ram_exceptions_end+0xfabffba8>
 40040a0:	21000084 	addi	r4,r4,2
 40040a4:	003ebc06 	br	4003b98 <__ram_exceptions_end+0xfabffa0c>
 40040a8:	8085883a 	add	r2,r16,r2
 40040ac:	10c00117 	ldw	r3,4(r2)
 40040b0:	81000317 	ldw	r4,12(r16)
 40040b4:	81400217 	ldw	r5,8(r16)
 40040b8:	18c00054 	ori	r3,r3,1
 40040bc:	10c00115 	stw	r3,4(r2)
 40040c0:	29000315 	stw	r4,12(r5)
 40040c4:	21400215 	stw	r5,8(r4)
 40040c8:	9009883a 	mov	r4,r18
 40040cc:	4004c340 	call	4004c34 <__malloc_unlock>
 40040d0:	80800204 	addi	r2,r16,8
 40040d4:	003f2506 	br	4003d6c <__ram_exceptions_end+0xfabffbe0>
 40040d8:	12001704 	addi	r8,r2,92
 40040dc:	11c016c4 	addi	r7,r2,91
 40040e0:	4209883a 	add	r4,r8,r8
 40040e4:	003e9606 	br	4003b40 <__ram_exceptions_end+0xfabff9b4>
 40040e8:	3804d1ba 	srli	r2,r7,6
 40040ec:	11400e44 	addi	r5,r2,57
 40040f0:	10c00e04 	addi	r3,r2,56
 40040f4:	294b883a 	add	r5,r5,r5
 40040f8:	003fbc06 	br	4003fec <__ram_exceptions_end+0xfabffe60>
 40040fc:	84ff5926 	beq	r16,r19,4003e64 <__ram_exceptions_end+0xfabffcd8>
 4004100:	00810034 	movhi	r2,1024
 4004104:	10961b04 	addi	r2,r2,22636
 4004108:	14000217 	ldw	r16,8(r2)
 400410c:	00bfff04 	movi	r2,-4
 4004110:	80c00117 	ldw	r3,4(r16)
 4004114:	1886703a 	and	r3,r3,r2
 4004118:	003f9106 	br	4003f60 <__ram_exceptions_end+0xfabffdd4>
 400411c:	60800217 	ldw	r2,8(r12)
 4004120:	213fffc4 	addi	r4,r4,-1
 4004124:	1300651e 	bne	r2,r12,40042bc <_malloc_r+0x7f4>
 4004128:	208000cc 	andi	r2,r4,3
 400412c:	633ffe04 	addi	r12,r12,-8
 4004130:	103ffa1e 	bne	r2,zero,400411c <__ram_exceptions_end+0xfabfff90>
 4004134:	98800117 	ldw	r2,4(r19)
 4004138:	0146303a 	nor	r3,zero,r5
 400413c:	1884703a 	and	r2,r3,r2
 4004140:	98800115 	stw	r2,4(r19)
 4004144:	294b883a 	add	r5,r5,r5
 4004148:	117f2836 	bltu	r2,r5,4003dec <__ram_exceptions_end+0xfabffc60>
 400414c:	283f2726 	beq	r5,zero,4003dec <__ram_exceptions_end+0xfabffc60>
 4004150:	2886703a 	and	r3,r5,r2
 4004154:	5809883a 	mov	r4,r11
 4004158:	183ec31e 	bne	r3,zero,4003c68 <__ram_exceptions_end+0xfabffadc>
 400415c:	294b883a 	add	r5,r5,r5
 4004160:	2886703a 	and	r3,r5,r2
 4004164:	21000104 	addi	r4,r4,4
 4004168:	183ffc26 	beq	r3,zero,400415c <__ram_exceptions_end+0xfabfffd0>
 400416c:	003ebe06 	br	4003c68 <__ram_exceptions_end+0xfabffadc>
 4004170:	00c05504 	movi	r3,340
 4004174:	18801236 	bltu	r3,r2,40041c0 <_malloc_r+0x6f8>
 4004178:	8804d3fa 	srli	r2,r17,15
 400417c:	12001e04 	addi	r8,r2,120
 4004180:	11c01dc4 	addi	r7,r2,119
 4004184:	4209883a 	add	r4,r8,r8
 4004188:	003e6d06 	br	4003b40 <__ram_exceptions_end+0xfabff9b4>
 400418c:	00c40004 	movi	r3,4096
 4004190:	003f4606 	br	4003eac <__ram_exceptions_end+0xfabffd20>
 4004194:	00800044 	movi	r2,1
 4004198:	a0800115 	stw	r2,4(r20)
 400419c:	003f7406 	br	4003f70 <__ram_exceptions_end+0xfabffde4>
 40041a0:	1805d0ba 	srai	r2,r3,2
 40041a4:	01c00044 	movi	r7,1
 40041a8:	30c00117 	ldw	r3,4(r6)
 40041ac:	388e983a 	sll	r7,r7,r2
 40041b0:	2805883a 	mov	r2,r5
 40041b4:	38c6b03a 	or	r3,r7,r3
 40041b8:	30c00115 	stw	r3,4(r6)
 40041bc:	003f9b06 	br	400402c <__ram_exceptions_end+0xfabffea0>
 40041c0:	00c15504 	movi	r3,1364
 40041c4:	18801a36 	bltu	r3,r2,4004230 <_malloc_r+0x768>
 40041c8:	8804d4ba 	srli	r2,r17,18
 40041cc:	12001f44 	addi	r8,r2,125
 40041d0:	11c01f04 	addi	r7,r2,124
 40041d4:	4209883a 	add	r4,r8,r8
 40041d8:	003e5906 	br	4003b40 <__ram_exceptions_end+0xfabff9b4>
 40041dc:	ad400404 	addi	r21,r21,16
 40041e0:	003f1706 	br	4003e40 <__ram_exceptions_end+0xfabffcb4>
 40041e4:	00c01504 	movi	r3,84
 40041e8:	18802336 	bltu	r3,r2,4004278 <_malloc_r+0x7b0>
 40041ec:	3804d33a 	srli	r2,r7,12
 40041f0:	11401bc4 	addi	r5,r2,111
 40041f4:	10c01b84 	addi	r3,r2,110
 40041f8:	294b883a 	add	r5,r5,r5
 40041fc:	003f7b06 	br	4003fec <__ram_exceptions_end+0xfabffe60>
 4004200:	9c000217 	ldw	r16,8(r19)
 4004204:	00bfff04 	movi	r2,-4
 4004208:	80c00117 	ldw	r3,4(r16)
 400420c:	1886703a 	and	r3,r3,r2
 4004210:	003f5306 	br	4003f60 <__ram_exceptions_end+0xfabffdd4>
 4004214:	3083ffcc 	andi	r2,r6,4095
 4004218:	103f181e 	bne	r2,zero,4003e7c <__ram_exceptions_end+0xfabffcf0>
 400421c:	99000217 	ldw	r4,8(r19)
 4004220:	b545883a 	add	r2,r22,r21
 4004224:	10800054 	ori	r2,r2,1
 4004228:	20800115 	stw	r2,4(r4)
 400422c:	003f3e06 	br	4003f28 <__ram_exceptions_end+0xfabffd9c>
 4004230:	01003f84 	movi	r4,254
 4004234:	02001fc4 	movi	r8,127
 4004238:	01c01f84 	movi	r7,126
 400423c:	003e4006 	br	4003b40 <__ram_exceptions_end+0xfabff9b4>
 4004240:	00810034 	movhi	r2,1024
 4004244:	10972f04 	addi	r2,r2,23740
 4004248:	15000015 	stw	r20,0(r2)
 400424c:	003f1106 	br	4003e94 <__ram_exceptions_end+0xfabffd08>
 4004250:	00800044 	movi	r2,1
 4004254:	002b883a 	mov	r21,zero
 4004258:	003f1f06 	br	4003ed8 <__ram_exceptions_end+0xfabffd4c>
 400425c:	81400204 	addi	r5,r16,8
 4004260:	9009883a 	mov	r4,r18
 4004264:	40034740 	call	4003474 <_free_r>
 4004268:	00810034 	movhi	r2,1024
 400426c:	109a2d04 	addi	r2,r2,26804
 4004270:	10c00017 	ldw	r3,0(r2)
 4004274:	003f2c06 	br	4003f28 <__ram_exceptions_end+0xfabffd9c>
 4004278:	00c05504 	movi	r3,340
 400427c:	18800536 	bltu	r3,r2,4004294 <_malloc_r+0x7cc>
 4004280:	3804d3fa 	srli	r2,r7,15
 4004284:	11401e04 	addi	r5,r2,120
 4004288:	10c01dc4 	addi	r3,r2,119
 400428c:	294b883a 	add	r5,r5,r5
 4004290:	003f5606 	br	4003fec <__ram_exceptions_end+0xfabffe60>
 4004294:	00c15504 	movi	r3,1364
 4004298:	18800536 	bltu	r3,r2,40042b0 <_malloc_r+0x7e8>
 400429c:	3804d4ba 	srli	r2,r7,18
 40042a0:	11401f44 	addi	r5,r2,125
 40042a4:	10c01f04 	addi	r3,r2,124
 40042a8:	294b883a 	add	r5,r5,r5
 40042ac:	003f4f06 	br	4003fec <__ram_exceptions_end+0xfabffe60>
 40042b0:	01403f84 	movi	r5,254
 40042b4:	00c01f84 	movi	r3,126
 40042b8:	003f4c06 	br	4003fec <__ram_exceptions_end+0xfabffe60>
 40042bc:	98800117 	ldw	r2,4(r19)
 40042c0:	003fa006 	br	4004144 <__ram_exceptions_end+0xfabfffb8>
 40042c4:	8808d0fa 	srli	r4,r17,3
 40042c8:	20800044 	addi	r2,r4,1
 40042cc:	1085883a 	add	r2,r2,r2
 40042d0:	003e9006 	br	4003d14 <__ram_exceptions_end+0xfabffb88>

040042d4 <memset>:
 40042d4:	20c000cc 	andi	r3,r4,3
 40042d8:	2005883a 	mov	r2,r4
 40042dc:	18004426 	beq	r3,zero,40043f0 <memset+0x11c>
 40042e0:	31ffffc4 	addi	r7,r6,-1
 40042e4:	30004026 	beq	r6,zero,40043e8 <memset+0x114>
 40042e8:	2813883a 	mov	r9,r5
 40042ec:	200d883a 	mov	r6,r4
 40042f0:	2007883a 	mov	r3,r4
 40042f4:	00000406 	br	4004308 <memset+0x34>
 40042f8:	3a3fffc4 	addi	r8,r7,-1
 40042fc:	31800044 	addi	r6,r6,1
 4004300:	38003926 	beq	r7,zero,40043e8 <memset+0x114>
 4004304:	400f883a 	mov	r7,r8
 4004308:	18c00044 	addi	r3,r3,1
 400430c:	32400005 	stb	r9,0(r6)
 4004310:	1a0000cc 	andi	r8,r3,3
 4004314:	403ff81e 	bne	r8,zero,40042f8 <__ram_exceptions_end+0xfac0016c>
 4004318:	010000c4 	movi	r4,3
 400431c:	21c02d2e 	bgeu	r4,r7,40043d4 <memset+0x100>
 4004320:	29003fcc 	andi	r4,r5,255
 4004324:	200c923a 	slli	r6,r4,8
 4004328:	3108b03a 	or	r4,r6,r4
 400432c:	200c943a 	slli	r6,r4,16
 4004330:	218cb03a 	or	r6,r4,r6
 4004334:	010003c4 	movi	r4,15
 4004338:	21c0182e 	bgeu	r4,r7,400439c <memset+0xc8>
 400433c:	3b3ffc04 	addi	r12,r7,-16
 4004340:	6018d13a 	srli	r12,r12,4
 4004344:	1a000104 	addi	r8,r3,4
 4004348:	1ac00204 	addi	r11,r3,8
 400434c:	6008913a 	slli	r4,r12,4
 4004350:	1a800304 	addi	r10,r3,12
 4004354:	1813883a 	mov	r9,r3
 4004358:	21000504 	addi	r4,r4,20
 400435c:	1909883a 	add	r4,r3,r4
 4004360:	49800015 	stw	r6,0(r9)
 4004364:	41800015 	stw	r6,0(r8)
 4004368:	59800015 	stw	r6,0(r11)
 400436c:	51800015 	stw	r6,0(r10)
 4004370:	42000404 	addi	r8,r8,16
 4004374:	4a400404 	addi	r9,r9,16
 4004378:	5ac00404 	addi	r11,r11,16
 400437c:	52800404 	addi	r10,r10,16
 4004380:	413ff71e 	bne	r8,r4,4004360 <__ram_exceptions_end+0xfac001d4>
 4004384:	63000044 	addi	r12,r12,1
 4004388:	6018913a 	slli	r12,r12,4
 400438c:	39c003cc 	andi	r7,r7,15
 4004390:	010000c4 	movi	r4,3
 4004394:	1b07883a 	add	r3,r3,r12
 4004398:	21c00e2e 	bgeu	r4,r7,40043d4 <memset+0x100>
 400439c:	1813883a 	mov	r9,r3
 40043a0:	3811883a 	mov	r8,r7
 40043a4:	010000c4 	movi	r4,3
 40043a8:	49800015 	stw	r6,0(r9)
 40043ac:	423fff04 	addi	r8,r8,-4
 40043b0:	4a400104 	addi	r9,r9,4
 40043b4:	223ffc36 	bltu	r4,r8,40043a8 <__ram_exceptions_end+0xfac0021c>
 40043b8:	393fff04 	addi	r4,r7,-4
 40043bc:	2008d0ba 	srli	r4,r4,2
 40043c0:	39c000cc 	andi	r7,r7,3
 40043c4:	21000044 	addi	r4,r4,1
 40043c8:	2109883a 	add	r4,r4,r4
 40043cc:	2109883a 	add	r4,r4,r4
 40043d0:	1907883a 	add	r3,r3,r4
 40043d4:	38000526 	beq	r7,zero,40043ec <memset+0x118>
 40043d8:	19cf883a 	add	r7,r3,r7
 40043dc:	19400005 	stb	r5,0(r3)
 40043e0:	18c00044 	addi	r3,r3,1
 40043e4:	38fffd1e 	bne	r7,r3,40043dc <__ram_exceptions_end+0xfac00250>
 40043e8:	f800283a 	ret
 40043ec:	f800283a 	ret
 40043f0:	2007883a 	mov	r3,r4
 40043f4:	300f883a 	mov	r7,r6
 40043f8:	003fc706 	br	4004318 <__ram_exceptions_end+0xfac0018c>

040043fc <lflush>:
 40043fc:	2080030b 	ldhu	r2,12(r4)
 4004400:	00c00244 	movi	r3,9
 4004404:	1080024c 	andi	r2,r2,9
 4004408:	10c00226 	beq	r2,r3,4004414 <lflush+0x18>
 400440c:	0005883a 	mov	r2,zero
 4004410:	f800283a 	ret
 4004414:	4002f801 	jmpi	4002f80 <fflush>

04004418 <__srefill_r>:
 4004418:	defffc04 	addi	sp,sp,-16
 400441c:	dc400115 	stw	r17,4(sp)
 4004420:	dc000015 	stw	r16,0(sp)
 4004424:	dfc00315 	stw	ra,12(sp)
 4004428:	dc800215 	stw	r18,8(sp)
 400442c:	2023883a 	mov	r17,r4
 4004430:	2821883a 	mov	r16,r5
 4004434:	20000226 	beq	r4,zero,4004440 <__srefill_r+0x28>
 4004438:	20800e17 	ldw	r2,56(r4)
 400443c:	10003c26 	beq	r2,zero,4004530 <__srefill_r+0x118>
 4004440:	80c0030b 	ldhu	r3,12(r16)
 4004444:	1908000c 	andi	r4,r3,8192
 4004448:	1805883a 	mov	r2,r3
 400444c:	2000071e 	bne	r4,zero,400446c <__srefill_r+0x54>
 4004450:	81001917 	ldw	r4,100(r16)
 4004454:	18880014 	ori	r2,r3,8192
 4004458:	00f7ffc4 	movi	r3,-8193
 400445c:	20c8703a 	and	r4,r4,r3
 4004460:	8080030d 	sth	r2,12(r16)
 4004464:	1007883a 	mov	r3,r2
 4004468:	81001915 	stw	r4,100(r16)
 400446c:	80000115 	stw	zero,4(r16)
 4004470:	1100080c 	andi	r4,r2,32
 4004474:	2000571e 	bne	r4,zero,40045d4 <__srefill_r+0x1bc>
 4004478:	1100010c 	andi	r4,r2,4
 400447c:	20001f26 	beq	r4,zero,40044fc <__srefill_r+0xe4>
 4004480:	81400c17 	ldw	r5,48(r16)
 4004484:	28000826 	beq	r5,zero,40044a8 <__srefill_r+0x90>
 4004488:	80801004 	addi	r2,r16,64
 400448c:	28800226 	beq	r5,r2,4004498 <__srefill_r+0x80>
 4004490:	8809883a 	mov	r4,r17
 4004494:	40034740 	call	4003474 <_free_r>
 4004498:	80800f17 	ldw	r2,60(r16)
 400449c:	80000c15 	stw	zero,48(r16)
 40044a0:	80800115 	stw	r2,4(r16)
 40044a4:	1000391e 	bne	r2,zero,400458c <__srefill_r+0x174>
 40044a8:	80800417 	ldw	r2,16(r16)
 40044ac:	10004b26 	beq	r2,zero,40045dc <__srefill_r+0x1c4>
 40044b0:	8480030b 	ldhu	r18,12(r16)
 40044b4:	908000cc 	andi	r2,r18,3
 40044b8:	10001f1e 	bne	r2,zero,4004538 <__srefill_r+0x120>
 40044bc:	81800417 	ldw	r6,16(r16)
 40044c0:	80800817 	ldw	r2,32(r16)
 40044c4:	81c00517 	ldw	r7,20(r16)
 40044c8:	81400717 	ldw	r5,28(r16)
 40044cc:	81800015 	stw	r6,0(r16)
 40044d0:	8809883a 	mov	r4,r17
 40044d4:	103ee83a 	callr	r2
 40044d8:	80800115 	stw	r2,4(r16)
 40044dc:	00800e0e 	bge	zero,r2,4004518 <__srefill_r+0x100>
 40044e0:	0005883a 	mov	r2,zero
 40044e4:	dfc00317 	ldw	ra,12(sp)
 40044e8:	dc800217 	ldw	r18,8(sp)
 40044ec:	dc400117 	ldw	r17,4(sp)
 40044f0:	dc000017 	ldw	r16,0(sp)
 40044f4:	dec00404 	addi	sp,sp,16
 40044f8:	f800283a 	ret
 40044fc:	1100040c 	andi	r4,r2,16
 4004500:	20003026 	beq	r4,zero,40045c4 <__srefill_r+0x1ac>
 4004504:	1080020c 	andi	r2,r2,8
 4004508:	1000241e 	bne	r2,zero,400459c <__srefill_r+0x184>
 400450c:	18c00114 	ori	r3,r3,4
 4004510:	80c0030d 	sth	r3,12(r16)
 4004514:	003fe406 	br	40044a8 <__ram_exceptions_end+0xfac0031c>
 4004518:	80c0030b 	ldhu	r3,12(r16)
 400451c:	1000161e 	bne	r2,zero,4004578 <__srefill_r+0x160>
 4004520:	18c00814 	ori	r3,r3,32
 4004524:	00bfffc4 	movi	r2,-1
 4004528:	80c0030d 	sth	r3,12(r16)
 400452c:	003fed06 	br	40044e4 <__ram_exceptions_end+0xfac00358>
 4004530:	40033000 	call	4003300 <__sinit>
 4004534:	003fc206 	br	4004440 <__ram_exceptions_end+0xfac002b4>
 4004538:	00810034 	movhi	r2,1024
 400453c:	10972d04 	addi	r2,r2,23732
 4004540:	11000017 	ldw	r4,0(r2)
 4004544:	01410034 	movhi	r5,1024
 4004548:	00800044 	movi	r2,1
 400454c:	2950ff04 	addi	r5,r5,17404
 4004550:	8080030d 	sth	r2,12(r16)
 4004554:	40037840 	call	4003784 <_fwalk>
 4004558:	00800244 	movi	r2,9
 400455c:	8480030d 	sth	r18,12(r16)
 4004560:	9480024c 	andi	r18,r18,9
 4004564:	90bfd51e 	bne	r18,r2,40044bc <__ram_exceptions_end+0xfac00330>
 4004568:	800b883a 	mov	r5,r16
 400456c:	8809883a 	mov	r4,r17
 4004570:	4002d080 	call	4002d08 <__sflush_r>
 4004574:	003fd106 	br	40044bc <__ram_exceptions_end+0xfac00330>
 4004578:	18c01014 	ori	r3,r3,64
 400457c:	80000115 	stw	zero,4(r16)
 4004580:	00bfffc4 	movi	r2,-1
 4004584:	80c0030d 	sth	r3,12(r16)
 4004588:	003fd606 	br	40044e4 <__ram_exceptions_end+0xfac00358>
 400458c:	80c00e17 	ldw	r3,56(r16)
 4004590:	0005883a 	mov	r2,zero
 4004594:	80c00015 	stw	r3,0(r16)
 4004598:	003fd206 	br	40044e4 <__ram_exceptions_end+0xfac00358>
 400459c:	800b883a 	mov	r5,r16
 40045a0:	8809883a 	mov	r4,r17
 40045a4:	4002f240 	call	4002f24 <_fflush_r>
 40045a8:	10000a1e 	bne	r2,zero,40045d4 <__srefill_r+0x1bc>
 40045ac:	8080030b 	ldhu	r2,12(r16)
 40045b0:	00fffdc4 	movi	r3,-9
 40045b4:	80000215 	stw	zero,8(r16)
 40045b8:	1886703a 	and	r3,r3,r2
 40045bc:	80000615 	stw	zero,24(r16)
 40045c0:	003fd206 	br	400450c <__ram_exceptions_end+0xfac00380>
 40045c4:	00800244 	movi	r2,9
 40045c8:	88800015 	stw	r2,0(r17)
 40045cc:	18c01014 	ori	r3,r3,64
 40045d0:	80c0030d 	sth	r3,12(r16)
 40045d4:	00bfffc4 	movi	r2,-1
 40045d8:	003fc206 	br	40044e4 <__ram_exceptions_end+0xfac00358>
 40045dc:	800b883a 	mov	r5,r16
 40045e0:	8809883a 	mov	r4,r17
 40045e4:	400390c0 	call	400390c <__smakebuf_r>
 40045e8:	003fb106 	br	40044b0 <__ram_exceptions_end+0xfac00324>

040045ec <_sbrk_r>:
 40045ec:	defffd04 	addi	sp,sp,-12
 40045f0:	dc000015 	stw	r16,0(sp)
 40045f4:	04010034 	movhi	r16,1024
 40045f8:	dc400115 	stw	r17,4(sp)
 40045fc:	841a2904 	addi	r16,r16,26788
 4004600:	2023883a 	mov	r17,r4
 4004604:	2809883a 	mov	r4,r5
 4004608:	dfc00215 	stw	ra,8(sp)
 400460c:	80000015 	stw	zero,0(r16)
 4004610:	4004d000 	call	4004d00 <sbrk>
 4004614:	00ffffc4 	movi	r3,-1
 4004618:	10c00526 	beq	r2,r3,4004630 <_sbrk_r+0x44>
 400461c:	dfc00217 	ldw	ra,8(sp)
 4004620:	dc400117 	ldw	r17,4(sp)
 4004624:	dc000017 	ldw	r16,0(sp)
 4004628:	dec00304 	addi	sp,sp,12
 400462c:	f800283a 	ret
 4004630:	80c00017 	ldw	r3,0(r16)
 4004634:	183ff926 	beq	r3,zero,400461c <__ram_exceptions_end+0xfac00490>
 4004638:	88c00015 	stw	r3,0(r17)
 400463c:	003ff706 	br	400461c <__ram_exceptions_end+0xfac00490>

04004640 <__sread>:
 4004640:	defffe04 	addi	sp,sp,-8
 4004644:	dc000015 	stw	r16,0(sp)
 4004648:	2821883a 	mov	r16,r5
 400464c:	2940038f 	ldh	r5,14(r5)
 4004650:	dfc00115 	stw	ra,4(sp)
 4004654:	4004a440 	call	4004a44 <_read_r>
 4004658:	10000716 	blt	r2,zero,4004678 <__sread+0x38>
 400465c:	80c01417 	ldw	r3,80(r16)
 4004660:	1887883a 	add	r3,r3,r2
 4004664:	80c01415 	stw	r3,80(r16)
 4004668:	dfc00117 	ldw	ra,4(sp)
 400466c:	dc000017 	ldw	r16,0(sp)
 4004670:	dec00204 	addi	sp,sp,8
 4004674:	f800283a 	ret
 4004678:	80c0030b 	ldhu	r3,12(r16)
 400467c:	18fbffcc 	andi	r3,r3,61439
 4004680:	80c0030d 	sth	r3,12(r16)
 4004684:	dfc00117 	ldw	ra,4(sp)
 4004688:	dc000017 	ldw	r16,0(sp)
 400468c:	dec00204 	addi	sp,sp,8
 4004690:	f800283a 	ret

04004694 <__seofread>:
 4004694:	0005883a 	mov	r2,zero
 4004698:	f800283a 	ret

0400469c <__swrite>:
 400469c:	2880030b 	ldhu	r2,12(r5)
 40046a0:	defffb04 	addi	sp,sp,-20
 40046a4:	dcc00315 	stw	r19,12(sp)
 40046a8:	dc800215 	stw	r18,8(sp)
 40046ac:	dc400115 	stw	r17,4(sp)
 40046b0:	dc000015 	stw	r16,0(sp)
 40046b4:	dfc00415 	stw	ra,16(sp)
 40046b8:	10c0400c 	andi	r3,r2,256
 40046bc:	2821883a 	mov	r16,r5
 40046c0:	2023883a 	mov	r17,r4
 40046c4:	3025883a 	mov	r18,r6
 40046c8:	3827883a 	mov	r19,r7
 40046cc:	18000526 	beq	r3,zero,40046e4 <__swrite+0x48>
 40046d0:	2940038f 	ldh	r5,14(r5)
 40046d4:	01c00084 	movi	r7,2
 40046d8:	000d883a 	mov	r6,zero
 40046dc:	40049e40 	call	40049e4 <_lseek_r>
 40046e0:	8080030b 	ldhu	r2,12(r16)
 40046e4:	8140038f 	ldh	r5,14(r16)
 40046e8:	10bbffcc 	andi	r2,r2,61439
 40046ec:	980f883a 	mov	r7,r19
 40046f0:	900d883a 	mov	r6,r18
 40046f4:	8809883a 	mov	r4,r17
 40046f8:	8080030d 	sth	r2,12(r16)
 40046fc:	dfc00417 	ldw	ra,16(sp)
 4004700:	dcc00317 	ldw	r19,12(sp)
 4004704:	dc800217 	ldw	r18,8(sp)
 4004708:	dc400117 	ldw	r17,4(sp)
 400470c:	dc000017 	ldw	r16,0(sp)
 4004710:	dec00504 	addi	sp,sp,20
 4004714:	400477c1 	jmpi	400477c <_write_r>

04004718 <__sseek>:
 4004718:	defffe04 	addi	sp,sp,-8
 400471c:	dc000015 	stw	r16,0(sp)
 4004720:	2821883a 	mov	r16,r5
 4004724:	2940038f 	ldh	r5,14(r5)
 4004728:	dfc00115 	stw	ra,4(sp)
 400472c:	40049e40 	call	40049e4 <_lseek_r>
 4004730:	00ffffc4 	movi	r3,-1
 4004734:	10c00826 	beq	r2,r3,4004758 <__sseek+0x40>
 4004738:	80c0030b 	ldhu	r3,12(r16)
 400473c:	80801415 	stw	r2,80(r16)
 4004740:	18c40014 	ori	r3,r3,4096
 4004744:	80c0030d 	sth	r3,12(r16)
 4004748:	dfc00117 	ldw	ra,4(sp)
 400474c:	dc000017 	ldw	r16,0(sp)
 4004750:	dec00204 	addi	sp,sp,8
 4004754:	f800283a 	ret
 4004758:	80c0030b 	ldhu	r3,12(r16)
 400475c:	18fbffcc 	andi	r3,r3,61439
 4004760:	80c0030d 	sth	r3,12(r16)
 4004764:	dfc00117 	ldw	ra,4(sp)
 4004768:	dc000017 	ldw	r16,0(sp)
 400476c:	dec00204 	addi	sp,sp,8
 4004770:	f800283a 	ret

04004774 <__sclose>:
 4004774:	2940038f 	ldh	r5,14(r5)
 4004778:	40047dc1 	jmpi	40047dc <_close_r>

0400477c <_write_r>:
 400477c:	defffd04 	addi	sp,sp,-12
 4004780:	2805883a 	mov	r2,r5
 4004784:	dc000015 	stw	r16,0(sp)
 4004788:	04010034 	movhi	r16,1024
 400478c:	dc400115 	stw	r17,4(sp)
 4004790:	300b883a 	mov	r5,r6
 4004794:	841a2904 	addi	r16,r16,26788
 4004798:	2023883a 	mov	r17,r4
 400479c:	380d883a 	mov	r6,r7
 40047a0:	1009883a 	mov	r4,r2
 40047a4:	dfc00215 	stw	ra,8(sp)
 40047a8:	80000015 	stw	zero,0(r16)
 40047ac:	4004d4c0 	call	4004d4c <write>
 40047b0:	00ffffc4 	movi	r3,-1
 40047b4:	10c00526 	beq	r2,r3,40047cc <_write_r+0x50>
 40047b8:	dfc00217 	ldw	ra,8(sp)
 40047bc:	dc400117 	ldw	r17,4(sp)
 40047c0:	dc000017 	ldw	r16,0(sp)
 40047c4:	dec00304 	addi	sp,sp,12
 40047c8:	f800283a 	ret
 40047cc:	80c00017 	ldw	r3,0(r16)
 40047d0:	183ff926 	beq	r3,zero,40047b8 <__ram_exceptions_end+0xfac0062c>
 40047d4:	88c00015 	stw	r3,0(r17)
 40047d8:	003ff706 	br	40047b8 <__ram_exceptions_end+0xfac0062c>

040047dc <_close_r>:
 40047dc:	defffd04 	addi	sp,sp,-12
 40047e0:	dc000015 	stw	r16,0(sp)
 40047e4:	04010034 	movhi	r16,1024
 40047e8:	dc400115 	stw	r17,4(sp)
 40047ec:	841a2904 	addi	r16,r16,26788
 40047f0:	2023883a 	mov	r17,r4
 40047f4:	2809883a 	mov	r4,r5
 40047f8:	dfc00215 	stw	ra,8(sp)
 40047fc:	80000015 	stw	zero,0(r16)
 4004800:	4001bb00 	call	4001bb0 <close>
 4004804:	00ffffc4 	movi	r3,-1
 4004808:	10c00526 	beq	r2,r3,4004820 <_close_r+0x44>
 400480c:	dfc00217 	ldw	ra,8(sp)
 4004810:	dc400117 	ldw	r17,4(sp)
 4004814:	dc000017 	ldw	r16,0(sp)
 4004818:	dec00304 	addi	sp,sp,12
 400481c:	f800283a 	ret
 4004820:	80c00017 	ldw	r3,0(r16)
 4004824:	183ff926 	beq	r3,zero,400480c <__ram_exceptions_end+0xfac00680>
 4004828:	88c00015 	stw	r3,0(r17)
 400482c:	003ff706 	br	400480c <__ram_exceptions_end+0xfac00680>

04004830 <_fclose_r>:
 4004830:	28003926 	beq	r5,zero,4004918 <_fclose_r+0xe8>
 4004834:	defffc04 	addi	sp,sp,-16
 4004838:	dc400115 	stw	r17,4(sp)
 400483c:	dc000015 	stw	r16,0(sp)
 4004840:	dfc00315 	stw	ra,12(sp)
 4004844:	dc800215 	stw	r18,8(sp)
 4004848:	2023883a 	mov	r17,r4
 400484c:	2821883a 	mov	r16,r5
 4004850:	20000226 	beq	r4,zero,400485c <_fclose_r+0x2c>
 4004854:	20800e17 	ldw	r2,56(r4)
 4004858:	10002726 	beq	r2,zero,40048f8 <_fclose_r+0xc8>
 400485c:	8080030f 	ldh	r2,12(r16)
 4004860:	1000071e 	bne	r2,zero,4004880 <_fclose_r+0x50>
 4004864:	0005883a 	mov	r2,zero
 4004868:	dfc00317 	ldw	ra,12(sp)
 400486c:	dc800217 	ldw	r18,8(sp)
 4004870:	dc400117 	ldw	r17,4(sp)
 4004874:	dc000017 	ldw	r16,0(sp)
 4004878:	dec00404 	addi	sp,sp,16
 400487c:	f800283a 	ret
 4004880:	800b883a 	mov	r5,r16
 4004884:	8809883a 	mov	r4,r17
 4004888:	4002d080 	call	4002d08 <__sflush_r>
 400488c:	1025883a 	mov	r18,r2
 4004890:	80800b17 	ldw	r2,44(r16)
 4004894:	10000426 	beq	r2,zero,40048a8 <_fclose_r+0x78>
 4004898:	81400717 	ldw	r5,28(r16)
 400489c:	8809883a 	mov	r4,r17
 40048a0:	103ee83a 	callr	r2
 40048a4:	10001616 	blt	r2,zero,4004900 <_fclose_r+0xd0>
 40048a8:	8080030b 	ldhu	r2,12(r16)
 40048ac:	1080200c 	andi	r2,r2,128
 40048b0:	1000151e 	bne	r2,zero,4004908 <_fclose_r+0xd8>
 40048b4:	81400c17 	ldw	r5,48(r16)
 40048b8:	28000526 	beq	r5,zero,40048d0 <_fclose_r+0xa0>
 40048bc:	80801004 	addi	r2,r16,64
 40048c0:	28800226 	beq	r5,r2,40048cc <_fclose_r+0x9c>
 40048c4:	8809883a 	mov	r4,r17
 40048c8:	40034740 	call	4003474 <_free_r>
 40048cc:	80000c15 	stw	zero,48(r16)
 40048d0:	81401117 	ldw	r5,68(r16)
 40048d4:	28000326 	beq	r5,zero,40048e4 <_fclose_r+0xb4>
 40048d8:	8809883a 	mov	r4,r17
 40048dc:	40034740 	call	4003474 <_free_r>
 40048e0:	80001115 	stw	zero,68(r16)
 40048e4:	40033100 	call	4003310 <__sfp_lock_acquire>
 40048e8:	8000030d 	sth	zero,12(r16)
 40048ec:	40033140 	call	4003314 <__sfp_lock_release>
 40048f0:	9005883a 	mov	r2,r18
 40048f4:	003fdc06 	br	4004868 <__ram_exceptions_end+0xfac006dc>
 40048f8:	40033000 	call	4003300 <__sinit>
 40048fc:	003fd706 	br	400485c <__ram_exceptions_end+0xfac006d0>
 4004900:	04bfffc4 	movi	r18,-1
 4004904:	003fe806 	br	40048a8 <__ram_exceptions_end+0xfac0071c>
 4004908:	81400417 	ldw	r5,16(r16)
 400490c:	8809883a 	mov	r4,r17
 4004910:	40034740 	call	4003474 <_free_r>
 4004914:	003fe706 	br	40048b4 <__ram_exceptions_end+0xfac00728>
 4004918:	0005883a 	mov	r2,zero
 400491c:	f800283a 	ret

04004920 <fclose>:
 4004920:	00810034 	movhi	r2,1024
 4004924:	10972e04 	addi	r2,r2,23736
 4004928:	200b883a 	mov	r5,r4
 400492c:	11000017 	ldw	r4,0(r2)
 4004930:	40048301 	jmpi	4004830 <_fclose_r>

04004934 <_fstat_r>:
 4004934:	defffd04 	addi	sp,sp,-12
 4004938:	2805883a 	mov	r2,r5
 400493c:	dc000015 	stw	r16,0(sp)
 4004940:	04010034 	movhi	r16,1024
 4004944:	dc400115 	stw	r17,4(sp)
 4004948:	841a2904 	addi	r16,r16,26788
 400494c:	2023883a 	mov	r17,r4
 4004950:	300b883a 	mov	r5,r6
 4004954:	1009883a 	mov	r4,r2
 4004958:	dfc00215 	stw	ra,8(sp)
 400495c:	80000015 	stw	zero,0(r16)
 4004960:	4004ab80 	call	4004ab8 <fstat>
 4004964:	00ffffc4 	movi	r3,-1
 4004968:	10c00526 	beq	r2,r3,4004980 <_fstat_r+0x4c>
 400496c:	dfc00217 	ldw	ra,8(sp)
 4004970:	dc400117 	ldw	r17,4(sp)
 4004974:	dc000017 	ldw	r16,0(sp)
 4004978:	dec00304 	addi	sp,sp,12
 400497c:	f800283a 	ret
 4004980:	80c00017 	ldw	r3,0(r16)
 4004984:	183ff926 	beq	r3,zero,400496c <__ram_exceptions_end+0xfac007e0>
 4004988:	88c00015 	stw	r3,0(r17)
 400498c:	003ff706 	br	400496c <__ram_exceptions_end+0xfac007e0>

04004990 <_isatty_r>:
 4004990:	defffd04 	addi	sp,sp,-12
 4004994:	dc000015 	stw	r16,0(sp)
 4004998:	04010034 	movhi	r16,1024
 400499c:	dc400115 	stw	r17,4(sp)
 40049a0:	841a2904 	addi	r16,r16,26788
 40049a4:	2023883a 	mov	r17,r4
 40049a8:	2809883a 	mov	r4,r5
 40049ac:	dfc00215 	stw	ra,8(sp)
 40049b0:	80000015 	stw	zero,0(r16)
 40049b4:	4004b300 	call	4004b30 <isatty>
 40049b8:	00ffffc4 	movi	r3,-1
 40049bc:	10c00526 	beq	r2,r3,40049d4 <_isatty_r+0x44>
 40049c0:	dfc00217 	ldw	ra,8(sp)
 40049c4:	dc400117 	ldw	r17,4(sp)
 40049c8:	dc000017 	ldw	r16,0(sp)
 40049cc:	dec00304 	addi	sp,sp,12
 40049d0:	f800283a 	ret
 40049d4:	80c00017 	ldw	r3,0(r16)
 40049d8:	183ff926 	beq	r3,zero,40049c0 <__ram_exceptions_end+0xfac00834>
 40049dc:	88c00015 	stw	r3,0(r17)
 40049e0:	003ff706 	br	40049c0 <__ram_exceptions_end+0xfac00834>

040049e4 <_lseek_r>:
 40049e4:	defffd04 	addi	sp,sp,-12
 40049e8:	2805883a 	mov	r2,r5
 40049ec:	dc000015 	stw	r16,0(sp)
 40049f0:	04010034 	movhi	r16,1024
 40049f4:	dc400115 	stw	r17,4(sp)
 40049f8:	300b883a 	mov	r5,r6
 40049fc:	841a2904 	addi	r16,r16,26788
 4004a00:	2023883a 	mov	r17,r4
 4004a04:	380d883a 	mov	r6,r7
 4004a08:	1009883a 	mov	r4,r2
 4004a0c:	dfc00215 	stw	ra,8(sp)
 4004a10:	80000015 	stw	zero,0(r16)
 4004a14:	4004bb40 	call	4004bb4 <lseek>
 4004a18:	00ffffc4 	movi	r3,-1
 4004a1c:	10c00526 	beq	r2,r3,4004a34 <_lseek_r+0x50>
 4004a20:	dfc00217 	ldw	ra,8(sp)
 4004a24:	dc400117 	ldw	r17,4(sp)
 4004a28:	dc000017 	ldw	r16,0(sp)
 4004a2c:	dec00304 	addi	sp,sp,12
 4004a30:	f800283a 	ret
 4004a34:	80c00017 	ldw	r3,0(r16)
 4004a38:	183ff926 	beq	r3,zero,4004a20 <__ram_exceptions_end+0xfac00894>
 4004a3c:	88c00015 	stw	r3,0(r17)
 4004a40:	003ff706 	br	4004a20 <__ram_exceptions_end+0xfac00894>

04004a44 <_read_r>:
 4004a44:	defffd04 	addi	sp,sp,-12
 4004a48:	2805883a 	mov	r2,r5
 4004a4c:	dc000015 	stw	r16,0(sp)
 4004a50:	04010034 	movhi	r16,1024
 4004a54:	dc400115 	stw	r17,4(sp)
 4004a58:	300b883a 	mov	r5,r6
 4004a5c:	841a2904 	addi	r16,r16,26788
 4004a60:	2023883a 	mov	r17,r4
 4004a64:	380d883a 	mov	r6,r7
 4004a68:	1009883a 	mov	r4,r2
 4004a6c:	dfc00215 	stw	ra,8(sp)
 4004a70:	80000015 	stw	zero,0(r16)
 4004a74:	4004c380 	call	4004c38 <read>
 4004a78:	00ffffc4 	movi	r3,-1
 4004a7c:	10c00526 	beq	r2,r3,4004a94 <_read_r+0x50>
 4004a80:	dfc00217 	ldw	ra,8(sp)
 4004a84:	dc400117 	ldw	r17,4(sp)
 4004a88:	dc000017 	ldw	r16,0(sp)
 4004a8c:	dec00304 	addi	sp,sp,12
 4004a90:	f800283a 	ret
 4004a94:	80c00017 	ldw	r3,0(r16)
 4004a98:	183ff926 	beq	r3,zero,4004a80 <__ram_exceptions_end+0xfac008f4>
 4004a9c:	88c00015 	stw	r3,0(r17)
 4004aa0:	003ff706 	br	4004a80 <__ram_exceptions_end+0xfac008f4>

04004aa4 <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 4004aa4:	20000226 	beq	r4,zero,4004ab0 <_exit+0xc>
    ALT_SIM_FAIL();
 4004aa8:	002af070 	cmpltui	zero,zero,43969
 4004aac:	003fff06 	br	4004aac <__ram_exceptions_end+0xfac00920>
  } else {
    ALT_SIM_PASS();
 4004ab0:	002af0b0 	cmpltui	zero,zero,43970
 4004ab4:	003ffd06 	br	4004aac <__ram_exceptions_end+0xfac00920>

04004ab8 <fstat>:
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4004ab8:	20000d16 	blt	r4,zero,4004af0 <fstat+0x38>
 4004abc:	21000324 	muli	r4,r4,12
 4004ac0:	00810034 	movhi	r2,1024
 4004ac4:	1094a804 	addi	r2,r2,21152
 4004ac8:	2089883a 	add	r4,r4,r2
  
  if (fd)
 4004acc:	20000826 	beq	r4,zero,4004af0 <fstat+0x38>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 4004ad0:	20800017 	ldw	r2,0(r4)
 4004ad4:	10800817 	ldw	r2,32(r2)
 4004ad8:	10000126 	beq	r2,zero,4004ae0 <fstat+0x28>
    {
      return fd->dev->fstat(fd, st);
 4004adc:	1000683a 	jmp	r2
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 4004ae0:	00880004 	movi	r2,8192
 4004ae4:	28800115 	stw	r2,4(r5)
      return 0;
 4004ae8:	0005883a 	mov	r2,zero
 4004aec:	f800283a 	ret
 4004af0:	d0a00c17 	ldw	r2,-32720(gp)
 4004af4:	10000926 	beq	r2,zero,4004b1c <fstat+0x64>
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 4004af8:	deffff04 	addi	sp,sp,-4
 4004afc:	dfc00015 	stw	ra,0(sp)
 4004b00:	103ee83a 	callr	r2
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4004b04:	00c01444 	movi	r3,81
 4004b08:	10c00015 	stw	r3,0(r2)
    return -1;
 4004b0c:	00bfffc4 	movi	r2,-1
  }
}
 4004b10:	dfc00017 	ldw	ra,0(sp)
 4004b14:	dec00104 	addi	sp,sp,4
 4004b18:	f800283a 	ret
 4004b1c:	d0a30c04 	addi	r2,gp,-29648
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4004b20:	00c01444 	movi	r3,81
 4004b24:	10c00015 	stw	r3,0(r2)
    return -1;
 4004b28:	00bfffc4 	movi	r2,-1
  }
}
 4004b2c:	f800283a 	ret

04004b30 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 4004b30:	defff004 	addi	sp,sp,-64
 4004b34:	dfc00f15 	stw	ra,60(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4004b38:	20001316 	blt	r4,zero,4004b88 <isatty+0x58>
 4004b3c:	20800324 	muli	r2,r4,12
 4004b40:	00c10034 	movhi	r3,1024
 4004b44:	18d4a804 	addi	r3,r3,21152
 4004b48:	10c5883a 	add	r2,r2,r3
  
  if (fd)
 4004b4c:	10000e26 	beq	r2,zero,4004b88 <isatty+0x58>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 4004b50:	10800017 	ldw	r2,0(r2)
 4004b54:	10800817 	ldw	r2,32(r2)
 4004b58:	10000726 	beq	r2,zero,4004b78 <isatty+0x48>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 4004b5c:	d80b883a 	mov	r5,sp
 4004b60:	4004ab80 	call	4004ab8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 4004b64:	d8800117 	ldw	r2,4(sp)
 4004b68:	10880020 	cmpeqi	r2,r2,8192
  else
  {
    ALT_ERRNO = EBADFD;
    return 0;
  }
}
 4004b6c:	dfc00f17 	ldw	ra,60(sp)
 4004b70:	dec01004 	addi	sp,sp,64
 4004b74:	f800283a 	ret
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    {
      return 1;
 4004b78:	00800044 	movi	r2,1
  else
  {
    ALT_ERRNO = EBADFD;
    return 0;
  }
}
 4004b7c:	dfc00f17 	ldw	ra,60(sp)
 4004b80:	dec01004 	addi	sp,sp,64
 4004b84:	f800283a 	ret
 4004b88:	d0a00c17 	ldw	r2,-32720(gp)
 4004b8c:	10000726 	beq	r2,zero,4004bac <isatty+0x7c>
 4004b90:	103ee83a 	callr	r2
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4004b94:	00c01444 	movi	r3,81
 4004b98:	10c00015 	stw	r3,0(r2)
    return 0;
 4004b9c:	0005883a 	mov	r2,zero
  }
}
 4004ba0:	dfc00f17 	ldw	ra,60(sp)
 4004ba4:	dec01004 	addi	sp,sp,64
 4004ba8:	f800283a 	ret
 4004bac:	d0a30c04 	addi	r2,gp,-29648
 4004bb0:	003ff806 	br	4004b94 <__ram_exceptions_end+0xfac00a08>

04004bb4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 4004bb4:	defffe04 	addi	sp,sp,-8
 4004bb8:	dfc00115 	stw	ra,4(sp)
 4004bbc:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4004bc0:	20000e16 	blt	r4,zero,4004bfc <lseek+0x48>
 4004bc4:	21000324 	muli	r4,r4,12
 4004bc8:	00810034 	movhi	r2,1024
 4004bcc:	1094a804 	addi	r2,r2,21152
 4004bd0:	2089883a 	add	r4,r4,r2
  
  if (fd) 
 4004bd4:	20000926 	beq	r4,zero,4004bfc <lseek+0x48>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 4004bd8:	20800017 	ldw	r2,0(r4)
 4004bdc:	10800717 	ldw	r2,28(r2)
 4004be0:	10000d26 	beq	r2,zero,4004c18 <lseek+0x64>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 4004be4:	103ee83a 	callr	r2
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
 4004be8:	10000f16 	blt	r2,zero,4004c28 <lseek+0x74>
    ALT_ERRNO = -rc;
    rc = -1;
  }

  return rc;
}
 4004bec:	dfc00117 	ldw	ra,4(sp)
 4004bf0:	dc000017 	ldw	r16,0(sp)
 4004bf4:	dec00204 	addi	sp,sp,8
 4004bf8:	f800283a 	ret
 4004bfc:	04001444 	movi	r16,81
 4004c00:	d0a00c17 	ldw	r2,-32720(gp)
 4004c04:	10000626 	beq	r2,zero,4004c20 <lseek+0x6c>
 4004c08:	103ee83a 	callr	r2
    rc = -EBADFD;
  }

  if (rc < 0)
  {
    ALT_ERRNO = -rc;
 4004c0c:	14000015 	stw	r16,0(r2)
    rc = -1;
 4004c10:	00bfffc4 	movi	r2,-1
  }

  return rc;
 4004c14:	003ff506 	br	4004bec <__ram_exceptions_end+0xfac00a60>
 4004c18:	04002184 	movi	r16,134
 4004c1c:	003ff806 	br	4004c00 <__ram_exceptions_end+0xfac00a74>
 4004c20:	d0a30c04 	addi	r2,gp,-29648
 4004c24:	003ff906 	br	4004c0c <__ram_exceptions_end+0xfac00a80>
 4004c28:	00a1c83a 	sub	r16,zero,r2
 4004c2c:	003ff406 	br	4004c00 <__ram_exceptions_end+0xfac00a74>

04004c30 <__malloc_lock>:
 4004c30:	f800283a 	ret

04004c34 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 4004c34:	f800283a 	ret

04004c38 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 4004c38:	defffe04 	addi	sp,sp,-8
 4004c3c:	dfc00115 	stw	ra,4(sp)
 4004c40:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4004c44:	20002116 	blt	r4,zero,4004ccc <read+0x94>
 4004c48:	21000324 	muli	r4,r4,12
 4004c4c:	00810034 	movhi	r2,1024
 4004c50:	1094a804 	addi	r2,r2,21152
 4004c54:	2089883a 	add	r4,r4,r2
  
  if (fd)
 4004c58:	20001c26 	beq	r4,zero,4004ccc <read+0x94>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 4004c5c:	20800217 	ldw	r2,8(r4)
 4004c60:	00c00044 	movi	r3,1
 4004c64:	108000cc 	andi	r2,r2,3
 4004c68:	10c00a26 	beq	r2,r3,4004c94 <read+0x5c>
        (fd->dev->read))
 4004c6c:	20800017 	ldw	r2,0(r4)
 4004c70:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 4004c74:	10000726 	beq	r2,zero,4004c94 <read+0x5c>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 4004c78:	103ee83a 	callr	r2
 4004c7c:	1021883a 	mov	r16,r2
 4004c80:	10000b16 	blt	r2,zero,4004cb0 <read+0x78>
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
 4004c84:	dfc00117 	ldw	ra,4(sp)
 4004c88:	dc000017 	ldw	r16,0(sp)
 4004c8c:	dec00204 	addi	sp,sp,8
 4004c90:	f800283a 	ret
 4004c94:	d0a00c17 	ldw	r2,-32720(gp)
 4004c98:	10001326 	beq	r2,zero,4004ce8 <read+0xb0>
 4004c9c:	103ee83a 	callr	r2
        }
        return rval;
      }
      else
      {
        ALT_ERRNO = EACCES;
 4004ca0:	00c00344 	movi	r3,13
 4004ca4:	10c00015 	stw	r3,0(r2)
    }
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
 4004ca8:	00bfffc4 	movi	r2,-1
 4004cac:	003ff506 	br	4004c84 <__ram_exceptions_end+0xfac00af8>
 4004cb0:	d0a00c17 	ldw	r2,-32720(gp)
 4004cb4:	10000e26 	beq	r2,zero,4004cf0 <read+0xb8>
 4004cb8:	103ee83a 	callr	r2
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
        {
          ALT_ERRNO = -rval;
 4004cbc:	0421c83a 	sub	r16,zero,r16
 4004cc0:	14000015 	stw	r16,0(r2)
          return -1;
 4004cc4:	00bfffc4 	movi	r2,-1
 4004cc8:	003fee06 	br	4004c84 <__ram_exceptions_end+0xfac00af8>
 4004ccc:	d0a00c17 	ldw	r2,-32720(gp)
 4004cd0:	10000926 	beq	r2,zero,4004cf8 <read+0xc0>
 4004cd4:	103ee83a 	callr	r2
        ALT_ERRNO = EACCES;
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 4004cd8:	00c01444 	movi	r3,81
 4004cdc:	10c00015 	stw	r3,0(r2)
  }
  return -1;
 4004ce0:	00bfffc4 	movi	r2,-1
 4004ce4:	003fe706 	br	4004c84 <__ram_exceptions_end+0xfac00af8>
 4004ce8:	d0a30c04 	addi	r2,gp,-29648
 4004cec:	003fec06 	br	4004ca0 <__ram_exceptions_end+0xfac00b14>
 4004cf0:	d0a30c04 	addi	r2,gp,-29648
 4004cf4:	003ff106 	br	4004cbc <__ram_exceptions_end+0xfac00b30>
 4004cf8:	d0a30c04 	addi	r2,gp,-29648
 4004cfc:	003ff606 	br	4004cd8 <__ram_exceptions_end+0xfac00b4c>

04004d00 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4004d00:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4004d04:	00bfff84 	movi	r2,-2
 4004d08:	2884703a 	and	r2,r5,r2
 4004d0c:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 4004d10:	d0a01417 	ldw	r2,-32688(gp)
 4004d14:	00ffff04 	movi	r3,-4
 4004d18:	108000c4 	addi	r2,r2,3
 4004d1c:	10c4703a 	and	r2,r2,r3
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 4004d20:	00c20034 	movhi	r3,2048
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 4004d24:	d0a01415 	stw	r2,-32688(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 4004d28:	1109883a 	add	r4,r2,r4
 4004d2c:	18c00004 	addi	r3,r3,0
 4004d30:	19000336 	bltu	r3,r4,4004d40 <sbrk+0x40>
    return (caddr_t)-1;
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
 4004d34:	d1201415 	stw	r4,-32688(gp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4004d38:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
 4004d3c:	f800283a 	ret
 4004d40:	2801703a 	wrctl	status,r5
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 4004d44:	00bfffc4 	movi	r2,-1
 4004d48:	f800283a 	ret

04004d4c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 4004d4c:	defffe04 	addi	sp,sp,-8
 4004d50:	dfc00115 	stw	ra,4(sp)
 4004d54:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4004d58:	20002216 	blt	r4,zero,4004de4 <write+0x98>
 4004d5c:	21000324 	muli	r4,r4,12
 4004d60:	00810034 	movhi	r2,1024
 4004d64:	1094a804 	addi	r2,r2,21152
 4004d68:	2089883a 	add	r4,r4,r2
  
  if (fd)
 4004d6c:	20001d26 	beq	r4,zero,4004de4 <write+0x98>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 4004d70:	20800217 	ldw	r2,8(r4)
 4004d74:	108000cc 	andi	r2,r2,3
 4004d78:	10000a26 	beq	r2,zero,4004da4 <write+0x58>
 4004d7c:	20800017 	ldw	r2,0(r4)
 4004d80:	10800617 	ldw	r2,24(r2)
 4004d84:	10000726 	beq	r2,zero,4004da4 <write+0x58>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 4004d88:	103ee83a 	callr	r2
 4004d8c:	1021883a 	mov	r16,r2
 4004d90:	10000d16 	blt	r2,zero,4004dc8 <write+0x7c>
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
 4004d94:	dfc00117 	ldw	ra,4(sp)
 4004d98:	dc000017 	ldw	r16,0(sp)
 4004d9c:	dec00204 	addi	sp,sp,8
 4004da0:	f800283a 	ret
 4004da4:	d0a00c17 	ldw	r2,-32720(gp)
 4004da8:	10000526 	beq	r2,zero,4004dc0 <write+0x74>
 4004dac:	103ee83a 	callr	r2
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
 4004db0:	00c00344 	movi	r3,13
 4004db4:	10c00015 	stw	r3,0(r2)
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
 4004db8:	00bfffc4 	movi	r2,-1
 4004dbc:	003ff506 	br	4004d94 <__ram_exceptions_end+0xfac00c08>
 4004dc0:	d0a30c04 	addi	r2,gp,-29648
 4004dc4:	003ffa06 	br	4004db0 <__ram_exceptions_end+0xfac00c24>
 4004dc8:	d0a00c17 	ldw	r2,-32720(gp)
 4004dcc:	10000c26 	beq	r2,zero,4004e00 <write+0xb4>
 4004dd0:	103ee83a 	callr	r2
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
      {
        ALT_ERRNO = -rval;
 4004dd4:	0421c83a 	sub	r16,zero,r16
 4004dd8:	14000015 	stw	r16,0(r2)
        return -1;
 4004ddc:	00bfffc4 	movi	r2,-1
 4004de0:	003fec06 	br	4004d94 <__ram_exceptions_end+0xfac00c08>
 4004de4:	d0a00c17 	ldw	r2,-32720(gp)
 4004de8:	10000726 	beq	r2,zero,4004e08 <write+0xbc>
 4004dec:	103ee83a 	callr	r2
      ALT_ERRNO = EACCES;
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 4004df0:	00c01444 	movi	r3,81
 4004df4:	10c00015 	stw	r3,0(r2)
  }
  return -1;
 4004df8:	00bfffc4 	movi	r2,-1
 4004dfc:	003fe506 	br	4004d94 <__ram_exceptions_end+0xfac00c08>
 4004e00:	d0a30c04 	addi	r2,gp,-29648
 4004e04:	003ff306 	br	4004dd4 <__ram_exceptions_end+0xfac00c48>
 4004e08:	d0a30c04 	addi	r2,gp,-29648
 4004e0c:	003ff806 	br	4004df0 <__ram_exceptions_end+0xfac00c64>
