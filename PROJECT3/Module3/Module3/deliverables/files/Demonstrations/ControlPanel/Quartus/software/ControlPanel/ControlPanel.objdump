
ControlPanel.elf:     file format elf32-littlenios2
ControlPanel.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000801b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x0000e48c memsz 0x0000e48c flags r-x
    LOAD off    0x0000f4ac vaddr 0x0008e4ac paddr 0x0008fff4 align 2**12
         filesz 0x00001b48 memsz 0x00001b48 flags rw-
    LOAD off    0x00011b3c vaddr 0x00091b3c paddr 0x00091b3c align 2**12
         filesz 0x00000000 memsz 0x000002f4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000ded8  000801b8  000801b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000041c  0008e090  0008e090  0000f090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b48  0008e4ac  0008fff4  0000f4ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002f4  00091b3c  00091b3c  00011b3c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00010ff4  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000ef8  00000000  00000000  00011018  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00026d35  00000000  00000000  00011f10  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000a01b  00000000  00000000  00038c45  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000b66f  00000000  00000000  00042c60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001c68  00000000  00000000  0004e2d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000032f1  00000000  00000000  0004ff38  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00010e77  00000000  00000000  00053229  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000060  00000000  00000000  000640a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a58  00000000  00000000  00064100  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00068120  2**0
                  CONTENTS, READONLY
 17 .cpu          00000003  00000000  00000000  00068123  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00068126  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00068127  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  00068128  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0006812c  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  00068130  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  00068134  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  0006813d  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  00068146  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000c  00000000  00000000  0006814f  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000003d  00000000  00000000  0006815b  2**0
                  CONTENTS, READONLY
 28 .jdi          00004a1a  00000000  00000000  00068198  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     0031a3ae  00000000  00000000  0006cbb2  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
000801b8 l    d  .text	00000000 .text
0008e090 l    d  .rodata	00000000 .rodata
0008e4ac l    d  .rwdata	00000000 .rwdata
00091b3c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../ControlPanel_bsp//obj/HAL/src/crt0.o
00080200 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00080094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 I2C.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 mem_verify.c
00000000 l    df *ABS*	00000000 video_control.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00081768 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00081bbc l     F .text	00000034 __sprint_r
0008e1c6 l     O .rodata	00000010 blanks.3515
0008e1d6 l     O .rodata	00000010 zeroes.3516
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00083b80 l     F .text	00000208 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000855bc l     F .text	00000008 __fp_lock
000855c4 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0008e4d8 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
0008e20c l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0008e354 l     O .rodata	0000000c p05.2435
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00089b70 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0008addc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0008af38 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0008af64 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0008b060 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0008b150 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0008b23c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0008b414 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0008ffe4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0008b830 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0008b96c l     F .text	00000038 alt_dev_reg
0008ee94 l     O .rwdata	00001060 jtag_uart
0008fef4 l     O .rwdata	000000c4 uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0008bc9c l     F .text	00000204 altera_avalon_jtag_uart_irq
0008bea0 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0008c4dc l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0008c790 l     F .text	00000098 altera_avalon_uart_irq
0008c828 l     F .text	000000d8 altera_avalon_uart_rxirq
0008c900 l     F .text	0000013c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0008ca90 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0008cce4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0008d170 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0008d610 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0008d748 l     F .text	00000050 alt_get_errno
0008d798 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
00081a00 g     F .text	0000001c putchar
00087e1c g     F .text	00000074 _mprec_log10
000802dc g     F .text	00000100 I2C_Read
00087f0c g     F .text	00000084 __any_on
00088e80 g     F .text	00000064 _isatty_r
0008e23c g     O .rodata	00000028 __mprec_tinytens
0008b35c g     F .text	00000078 alt_main
0008ad98 g     F .text	00000044 __ashldi3
00081a1c g     F .text	00000084 _puts_r
00091ba0 g     O .bss	00000100 alt_irq
00088ee4 g     F .text	0000006c _lseek_r
0008fff4 g       *ABS*	00000000 __flash_rwdata_start
0008a410 g     F .text	0000005c __eqdf2
00091e30 g       *ABS*	00000000 __alt_heap_start
000819bc g     F .text	0000003c printf
000888dc g     F .text	0000005c __sseek
0008564c g     F .text	0000010c __sinit
000889e4 g     F .text	0000013c __swbuf_r
000862e4 g     F .text	0000009c _setlocale_r
000855d8 g     F .text	00000064 __sfmoreglue
0008b3f4 g     F .text	00000020 __malloc_unlock
00091b70 g     O .bss	00000004 altera_avalon_timer_ts_freq
00086de4 g     F .text	00000128 memmove
0008563c g     F .text	00000010 _cleanup
00086fe8 g     F .text	000000a8 _Balloc
0008a4c8 g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
00080628 g     F .text	0000012c i2c_write
00080000 g     F .entry	0000001c __reset
00080020 g       *ABS*	00000000 __flash_exceptions_start
00088e18 g     F .text	00000068 _fstat_r
00091b54 g     O .bss	00000004 errno
00091b5c g     O .bss	00000004 alt_argv
00097fb8 g       *ABS*	00000000 _gp
0008b800 g     F .text	00000030 usleep
000814c4 g     F .text	0000018c VIDEO_Enable
0008ed14 g     O .rwdata	00000180 alt_fd_list
000819f8 g     F .text	00000008 _putchar_r
0008d9d8 g     F .text	00000090 alt_find_dev
00081898 g     F .text	000000f8 memcpy
00080da0 g     F .text	000004ec TMEM_Verify
000855cc g     F .text	0000000c _cleanup_r
0008a5ec g     F .text	000000d4 __floatsidf
0008d6d0 g     F .text	00000078 alt_io_redirect
0008a590 g     F .text	0000005c __ltdf2
0008e090 g       *ABS*	00000000 __DTOR_END__
00081650 g     F .text	00000070 MIX_LayerEnable
00081aa0 g     F .text	00000014 puts
00087d78 g     F .text	000000a4 __ratio
0008c0a0 g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00081990 g     F .text	0000002c _printf_r
00081888 g     F .text	00000008 __udivsi3
0008b0b0 g     F .text	000000a0 isatty
0008e28c g     O .rodata	000000c8 __mprec_tens
00086380 g     F .text	0000000c __locale_charset
0008dc30 g     F .text	0000008c alt_icache_flush
000803dc g     F .text	00000158 I2C_MultipleRead
00091b50 g     O .bss	00000004 __malloc_top_pad
0008ffc0 g     O .rwdata	00000004 __mb_cur_max
0008638c g     F .text	0000000c _localeconv_r
000873e8 g     F .text	0000003c __i2b
00085ca0 g     F .text	000004e4 __sfvwrite_r
0008879c g     F .text	00000064 _sbrk_r
00088f50 g     F .text	0000006c _read_r
0008e8d8 g     O .rwdata	0000000c __lc_ctype
0008ffdc g     O .rwdata	00000004 alt_max_fd
0008ab80 g     F .text	00000104 __unpack_d
00088cc8 g     F .text	0000013c _fclose_r
0008558c g     F .text	00000030 fflush
00091b4c g     O .bss	00000004 __malloc_max_sbrked_mem
000809b4 g     F .text	00000138 I2CL_Read
00089ec4 g     F .text	00000054 __adddf3
00087aec g     F .text	00000148 __b2d
000895e4 g     F .text	0000058c __umoddi3
0008b28c g     F .text	000000d0 lseek
0008ffb8 g     O .rwdata	00000004 _global_impure_ptr
0008813c g     F .text	000005fc _realloc_r
00091e30 g       *ABS*	00000000 __bss_end
0008d520 g     F .text	000000f0 alt_iic_isr_register
0008b6fc g     F .text	00000104 alt_tick
0008901c g     F .text	000005c8 __udivdi3
0008e264 g     O .rodata	00000028 __mprec_bigtens
000871cc g     F .text	00000104 __s2b
0008a794 g     F .text	0000011c __floatunsidf
0008788c g     F .text	00000058 __mcmp
0008c6e8 g     F .text	000000a8 altera_avalon_uart_init
00085864 g     F .text	00000018 __fp_lock_all
0008d4d4 g     F .text	0000004c alt_ic_irq_enabled
00080204 g     F .text	000000d8 I2C_Write
0008b664 g     F .text	00000098 alt_alarm_stop
00091b74 g     O .bss	00000004 alt_irq_active
000800ec g     F .exceptions	000000cc alt_irq_handler
0008ecec g     O .rwdata	00000028 alt_dev_null
00080534 g     F .text	00000084 i2c_start
0008aef4 g     F .text	00000044 alt_dcache_flush_all
000872d0 g     F .text	00000068 __hi0bits
0008a6c0 g     F .text	000000d4 __fixdfsi
0008fff4 g       *ABS*	00000000 __ram_rwdata_end
0008ffd4 g     O .rwdata	00000008 alt_dev_list
0008b880 g     F .text	000000ec write
00087f90 g     F .text	000000bc _putc_r
0008e4ac g       *ABS*	00000000 __ram_rodata_end
0008afb4 g     F .text	000000ac fstat
0008ad54 g     F .text	00000044 __lshrdi3
00087604 g     F .text	0000012c __pow5mult
00091b44 g     O .bss	00000004 __nlocale_changed
00081890 g     F .text	00000008 __umodsi3
000816c0 g     F .text	0000006c MIX_LayerMove
00091e30 g       *ABS*	00000000 end
0008cd34 g     F .text	000001a8 altera_avalon_uart_write
0008bbdc g     F .text	000000c0 altera_avalon_jtag_uart_init
0008e090 g       *ABS*	00000000 __CTOR_LIST__
000a7100 g       *ABS*	00000000 __alt_stack_pointer
0008c550 g     F .text	00000088 alt_avalon_timer_sc_init
0008c638 g     F .text	00000060 altera_avalon_uart_write_fd
0008a8b0 g     F .text	000000ac __clzsi2
0008c698 g     F .text	00000050 altera_avalon_uart_close_fd
0008c2b8 g     F .text	00000224 altera_avalon_jtag_uart_write
00085854 g     F .text	00000004 __sfp_lock_acquire
00086cec g     F .text	000000f8 memchr
00081bf0 g     F .text	00001df8 ___vfprintf_internal_r
000859d0 g     F .text	000002d0 _free_r
0008deb4 g     F .text	000001a0 __call_exitprocs
00091b40 g     O .bss	00000004 __mlocale_changed
0008ffc4 g     O .rwdata	00000004 __malloc_sbrk_base
000801b8 g     F .text	0000004c _start
00091b64 g     O .bss	00000004 _alt_tick_rate
00081acc g     F .text	00000064 rand
0008172c g     F .text	0000003c MIX_Init
00087730 g     F .text	0000015c __lshift
00091b68 g     O .bss	00000004 _alt_nticks
0008b464 g     F .text	000000f0 read
0008b9d8 g     F .text	000000a0 alt_sys_init
0008dd84 g     F .text	00000130 __register_exitproc
00087424 g     F .text	000001e0 __multiply
0008bf44 g     F .text	00000068 altera_avalon_jtag_uart_close
0008e4ac g       *ABS*	00000000 __ram_rwdata_start
0008e090 g       *ABS*	00000000 __ram_rodata_start
00091b78 g     O .bss	00000028 __malloc_current_mallinfo
00087c34 g     F .text	00000144 __d2b
0008ba78 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0008db7c g     F .text	000000b4 alt_get_fd
0008d01c g     F .text	00000154 alt_busy_sleep
0008ac84 g     F .text	000000d0 __fpcmp_parts_d
00088c64 g     F .text	00000064 _close_r
0008dd08 g     F .text	0000007c memcmp
0008bb38 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00091e30 g       *ABS*	00000000 __alt_stack_base
0008bb88 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00083a0c g     F .text	00000174 __swsetup_r
0008a25c g     F .text	000001b4 __divdf3
00085758 g     F .text	000000fc __sfp
00087e90 g     F .text	0000007c __copybits
0008e8e4 g     O .rwdata	00000408 __malloc_av_
00085860 g     F .text	00000004 __sinit_lock_release
000805b8 g     F .text	00000070 i2c_stop
00089f78 g     F .text	000002e4 __muldf3
00088800 g     F .text	00000054 __sread
0008da68 g     F .text	00000114 alt_find_file
0008d1c0 g     F .text	000000a0 alt_dev_llist_insert
0008b3d4 g     F .text	00000020 __malloc_lock
0008b5b4 g     F .text	000000b0 sbrk
000853a4 g     F .text	000001e8 _fflush_r
00088ba8 g     F .text	000000bc _calloc_r
00091b3c g       *ABS*	00000000 __bss_start
00086f0c g     F .text	000000dc memset
00080d40 g     F .text	00000060 main
00091b60 g     O .bss	00000004 alt_envp
00091b48 g     O .bss	00000004 __malloc_max_total_mem
0008bad8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00080754 g     F .text	00000150 i2c_read
00080c74 g     F .text	000000cc I2C_AUDIO_Write
00088b20 g     F .text	0000001c __swbuf
00081ab4 g     F .text	00000018 srand
00088938 g     F .text	00000008 __sclose
000a7100 g       *ABS*	00000000 __alt_heap_limit
00088e04 g     F .text	00000014 fclose
00091ca0 g     O .bss	00000190 _atexit0
00083d88 g     F .text	0000161c _dtoa_r
00086568 g     F .text	00000784 _malloc_r
0008ffe0 g     O .rwdata	00000004 alt_errno
00086184 g     F .text	000000a8 _fwalk
0008804c g     F .text	000000f0 putc
000817dc g     F .text	00000050 __divsi3
0008e360 g     O .rodata	00000014 __thenan_df
00085894 g     F .text	0000013c _malloc_trim_r
0008e090 g       *ABS*	00000000 __CTOR_END__
00088940 g     F .text	000000a4 strcmp
0008e090 g       *ABS*	00000000 __flash_rodata_start
0008e090 g       *ABS*	00000000 __DTOR_LIST__
0008a46c g     F .text	0000005c __nedf2
0008b9a4 g     F .text	00000034 alt_irq_init
0008b554 g     F .text	00000060 alt_release_fd
0008e374 g     O .rodata	00000100 __clz_tab
00091b3c g     O .bss	00000004 _PathLocale
0008dcbc g     F .text	00000014 atexit
00088b3c g     F .text	0000006c _write_r
00086398 g     F .text	0000001c setlocale
0008ffbc g     O .rwdata	00000004 _impure_ptr
00091b58 g     O .bss	00000004 alt_argc
00091b6c g     O .bss	00000004 altera_avalon_timer_ts_base
0008d2bc g     F .text	0000005c _do_dtors
00080aec g     F .text	00000188 I2CL_MultipleRead
0008e4ac g     O .rwdata	0000002a szTvConfig
00080020 g       .exceptions	00000000 alt_irq_entry
00087a8c g     F .text	00000060 __ulp
00088738 g     F .text	00000038 __isinfd
0008587c g     F .text	00000018 __fp_unlock_all
0008ffcc g     O .rwdata	00000008 alt_fs_list
00080020 g       *ABS*	00000000 __ram_exceptions_start
000863b4 g     F .text	0000000c localeconv
00080000 g       *ABS*	00000000 __alt_mem_onchip_memory2
0008d348 g     F .text	00000050 alt_ic_isr_register
0008fff4 g       *ABS*	00000000 _edata
0008c5d8 g     F .text	00000060 altera_avalon_uart_read_fd
00091e30 g       *ABS*	00000000 _end
000801b8 g       *ABS*	00000000 __ram_exceptions_end
0008bfac g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0008d434 g     F .text	000000a0 alt_ic_irq_disable
00088854 g     F .text	00000088 __swrite
0008ffc8 g     O .rwdata	00000004 __malloc_trim_threshold
0008d9b8 g     F .text	00000020 altera_nios2_qsys_irq_init
0008dcd0 g     F .text	00000038 exit
0008622c g     F .text	000000b8 _fwalk_reent
000878e4 g     F .text	000001a8 __mdiff
0008182c g     F .text	0000005c __modsi3
0008128c g     F .text	00000238 TMEM_QuickVerify
000a7100 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
00085858 g     F .text	00000004 __sfp_lock_release
0008ca3c g     F .text	00000054 altera_avalon_uart_close
0008e054 g     F .text	0000003c _exit
00088770 g     F .text	0000002c __isnand
0008cedc g     F .text	00000140 alt_alarm_start
00088fbc g     F .text	00000060 __muldi3
000863c0 g     F .text	000001a8 __smakebuf_r
00081b30 g     F .text	0000008c strlen
0008d864 g     F .text	00000154 open
0008a52c g     F .text	00000064 __gedf2
0008d318 g     F .text	00000030 alt_icache_flush_all
0008fff0 g     O .rwdata	00000004 alt_priority_mask
0008d398 g     F .text	0000009c alt_ic_irq_enable
000839e8 g     F .text	00000024 __vfprintf_internal
0008cae0 g     F .text	00000204 altera_avalon_uart_read
00089f18 g     F .text	00000060 __subdf3
00087338 g     F .text	000000b0 __lo0bits
0008ffe8 g     O .rwdata	00000008 alt_alarm_list
0008d260 g     F .text	0000005c _do_ctors
000808a4 g     F .text	00000110 I2CL_Write
0008ae2c g     F .text	000000c8 close
0008b1bc g     F .text	00000080 alt_load
0008a95c g     F .text	00000224 __pack_d
00000000  w      *UND*	00000000 free
0008585c g     F .text	00000004 __sinit_lock_acquire
000870b8 g     F .text	00000114 __multadd
00087090 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00080000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   80000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   80004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   80008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   8000c:	00bffd16 	blt	zero,r2,80004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80010:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80014:	08406e14 	ori	at,at,440
    jmp r1
   80018:	0800683a 	jmp	at
   8001c:	00000000 	call	0 <__reset-0x80000>

Disassembly of section .exceptions:

00080020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   80044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800ec0 	call	800ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000306 	br	80098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   8008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)

00080094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   80094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   80098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   8009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   800c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   800e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800e8:	ef80083a 	eret

000800ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800ec:	defff904 	addi	sp,sp,-28
   800f0:	dfc00615 	stw	ra,24(sp)
   800f4:	df000515 	stw	fp,20(sp)
   800f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   800fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80100:	0005313a 	rdctl	r2,ipending
   80104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   80108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   8010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   80110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80114:	00800044 	movi	r2,1
   80118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   8011c:	e0fffb17 	ldw	r3,-20(fp)
   80120:	e0bffc17 	ldw	r2,-16(fp)
   80124:	1884703a 	and	r2,r3,r2
   80128:	10001726 	beq	r2,zero,80188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   8012c:	00c00274 	movhi	r3,9
   80130:	18c6e804 	addi	r3,r3,7072
   80134:	e0bffd17 	ldw	r2,-12(fp)
   80138:	100490fa 	slli	r2,r2,3
   8013c:	1885883a 	add	r2,r3,r2
   80140:	10c00017 	ldw	r3,0(r2)
   80144:	01000274 	movhi	r4,9
   80148:	2106e804 	addi	r4,r4,7072
   8014c:	e0bffd17 	ldw	r2,-12(fp)
   80150:	100490fa 	slli	r2,r2,3
   80154:	2085883a 	add	r2,r4,r2
   80158:	10800104 	addi	r2,r2,4
   8015c:	10800017 	ldw	r2,0(r2)
   80160:	1009883a 	mov	r4,r2
   80164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   80168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   8016c:	0005313a 	rdctl	r2,ipending
   80170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   80174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   80178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   8017c:	e0bffb17 	ldw	r2,-20(fp)
   80180:	103fe31e 	bne	r2,zero,80110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   80184:	00000706 	br	801a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   80188:	e0bffc17 	ldw	r2,-16(fp)
   8018c:	1085883a 	add	r2,r2,r2
   80190:	e0bffc15 	stw	r2,-16(fp)
      i++;
   80194:	e0bffd17 	ldw	r2,-12(fp)
   80198:	10800044 	addi	r2,r2,1
   8019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   801a0:	003fde06 	br	8011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   801a4:	e037883a 	mov	sp,fp
   801a8:	dfc00117 	ldw	ra,4(sp)
   801ac:	df000017 	ldw	fp,0(sp)
   801b0:	dec00204 	addi	sp,sp,8
   801b4:	f800283a 	ret

Disassembly of section .text:

000801b8 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   801b8:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   801bc:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   801c0:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   801c4:	00bffd16 	blt	zero,r2,801bc <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   801c8:	06c002b4 	movhi	sp,10
    ori sp, sp, %lo(__alt_stack_pointer)
   801cc:	dedc4014 	ori	sp,sp,28928
    movhi gp, %hi(_gp)
   801d0:	06800274 	movhi	gp,9
    ori gp, gp, %lo(_gp)
   801d4:	d69fee14 	ori	gp,gp,32696
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   801d8:	00800274 	movhi	r2,9
    ori r2, r2, %lo(__bss_start)
   801dc:	1086cf14 	ori	r2,r2,6972

    movhi r3, %hi(__bss_end)
   801e0:	00c00274 	movhi	r3,9
    ori r3, r3, %lo(__bss_end)
   801e4:	18c78c14 	ori	r3,r3,7728

    beq r2, r3, 1f
   801e8:	10c00326 	beq	r2,r3,801f8 <_start+0x40>

0:
    stw zero, (r2)
   801ec:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   801f0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   801f4:	10fffd36 	bltu	r2,r3,801ec <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   801f8:	008b1bc0 	call	8b1bc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   801fc:	008b35c0 	call	8b35c <alt_main>

00080200 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   80200:	003fff06 	br	80200 <alt_after_alt_main>

00080204 <I2C_Write>:
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);



bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
   80204:	defff804 	addi	sp,sp,-32
   80208:	dfc00715 	stw	ra,28(sp)
   8020c:	df000615 	stw	fp,24(sp)
   80210:	df000604 	addi	fp,sp,24
   80214:	e13ffb15 	stw	r4,-20(fp)
   80218:	e17ffc15 	stw	r5,-16(fp)
   8021c:	3007883a 	mov	r3,r6
   80220:	3805883a 	mov	r2,r7
   80224:	e1000217 	ldw	r4,8(fp)
   80228:	e0fffd05 	stb	r3,-12(fp)
   8022c:	e0bffe05 	stb	r2,-8(fp)
   80230:	e13fff05 	stb	r4,-4(fp)
    bool bSuccess = TRUE;
   80234:	00800044 	movi	r2,1
   80238:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
   8023c:	e13ffb17 	ldw	r4,-20(fp)
   80240:	e17ffc17 	ldw	r5,-16(fp)
   80244:	00805340 	call	80534 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   80248:	e0bffd03 	ldbu	r2,-12(fp)
   8024c:	10803fcc 	andi	r2,r2,255
   80250:	e13ffb17 	ldw	r4,-20(fp)
   80254:	e17ffc17 	ldw	r5,-16(fp)
   80258:	100d883a 	mov	r6,r2
   8025c:	00806280 	call	80628 <i2c_write>
   80260:	1000011e 	bne	r2,zero,80268 <I2C_Write+0x64>
        bSuccess = FALSE;
   80264:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
   80268:	e0bffa17 	ldw	r2,-24(fp)
   8026c:	10000726 	beq	r2,zero,8028c <I2C_Write+0x88>
   80270:	e0bffe03 	ldbu	r2,-8(fp)
   80274:	e13ffb17 	ldw	r4,-20(fp)
   80278:	e17ffc17 	ldw	r5,-16(fp)
   8027c:	100d883a 	mov	r6,r2
   80280:	00806280 	call	80628 <i2c_write>
   80284:	1000011e 	bne	r2,zero,8028c <I2C_Write+0x88>
        bSuccess = FALSE;
   80288:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
   8028c:	e0bffa17 	ldw	r2,-24(fp)
   80290:	10000726 	beq	r2,zero,802b0 <I2C_Write+0xac>
   80294:	e0bfff03 	ldbu	r2,-4(fp)
   80298:	e13ffb17 	ldw	r4,-20(fp)
   8029c:	e17ffc17 	ldw	r5,-16(fp)
   802a0:	100d883a 	mov	r6,r2
   802a4:	00806280 	call	80628 <i2c_write>
   802a8:	1000011e 	bne	r2,zero,802b0 <I2C_Write+0xac>
        bSuccess = FALSE;
   802ac:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
   802b0:	e13ffb17 	ldw	r4,-20(fp)
   802b4:	e17ffc17 	ldw	r5,-16(fp)
   802b8:	00805b80 	call	805b8 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
   802bc:	0106d604 	movi	r4,7000
   802c0:	008b8000 	call	8b800 <usleep>
    
    return bSuccess;
   802c4:	e0bffa17 	ldw	r2,-24(fp)

    
}
   802c8:	e037883a 	mov	sp,fp
   802cc:	dfc00117 	ldw	ra,4(sp)
   802d0:	df000017 	ldw	fp,0(sp)
   802d4:	dec00204 	addi	sp,sp,8
   802d8:	f800283a 	ret

000802dc <I2C_Read>:

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
   802dc:	defff904 	addi	sp,sp,-28
   802e0:	dfc00615 	stw	ra,24(sp)
   802e4:	df000515 	stw	fp,20(sp)
   802e8:	df000504 	addi	fp,sp,20
   802ec:	e13ffc15 	stw	r4,-16(fp)
   802f0:	e17ffd15 	stw	r5,-12(fp)
   802f4:	3007883a 	mov	r3,r6
   802f8:	3805883a 	mov	r2,r7
   802fc:	e0fffe05 	stb	r3,-8(fp)
   80300:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
   80304:	00800044 	movi	r2,1
   80308:	e0bffb15 	stw	r2,-20(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
   8030c:	e13ffc17 	ldw	r4,-16(fp)
   80310:	e17ffd17 	ldw	r5,-12(fp)
   80314:	00805340 	call	80534 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   80318:	e0bffe03 	ldbu	r2,-8(fp)
   8031c:	10803fcc 	andi	r2,r2,255
   80320:	e13ffc17 	ldw	r4,-16(fp)
   80324:	e17ffd17 	ldw	r5,-12(fp)
   80328:	100d883a 	mov	r6,r2
   8032c:	00806280 	call	80628 <i2c_write>
   80330:	1000011e 	bne	r2,zero,80338 <I2C_Read+0x5c>
        bSuccess = FALSE;
   80334:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
   80338:	e0bffb17 	ldw	r2,-20(fp)
   8033c:	10000726 	beq	r2,zero,8035c <I2C_Read+0x80>
   80340:	e0bfff03 	ldbu	r2,-4(fp)
   80344:	e13ffc17 	ldw	r4,-16(fp)
   80348:	e17ffd17 	ldw	r5,-12(fp)
   8034c:	100d883a 	mov	r6,r2
   80350:	00806280 	call	80628 <i2c_write>
   80354:	1000011e 	bne	r2,zero,8035c <I2C_Read+0x80>
        bSuccess = FALSE;
   80358:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    i2c_start(clk_base, data_base);  // restart
   8035c:	e13ffc17 	ldw	r4,-16(fp)
   80360:	e17ffd17 	ldw	r5,-12(fp)
   80364:	00805340 	call	80534 <i2c_start>
    DeviceAddr |= 1; // Read
   80368:	e0bffe03 	ldbu	r2,-8(fp)
   8036c:	10800054 	ori	r2,r2,1
   80370:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
   80374:	e0bffb17 	ldw	r2,-20(fp)
   80378:	10000826 	beq	r2,zero,8039c <I2C_Read+0xc0>
   8037c:	e0bffe03 	ldbu	r2,-8(fp)
   80380:	10803fcc 	andi	r2,r2,255
   80384:	e13ffc17 	ldw	r4,-16(fp)
   80388:	e17ffd17 	ldw	r5,-12(fp)
   8038c:	100d883a 	mov	r6,r2
   80390:	00806280 	call	80628 <i2c_write>
   80394:	1000011e 	bne	r2,zero,8039c <I2C_Read+0xc0>
        bSuccess = FALSE;
   80398:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
   8039c:	e0bffb17 	ldw	r2,-20(fp)
   803a0:	10000526 	beq	r2,zero,803b8 <I2C_Read+0xdc>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
   803a4:	e13ffc17 	ldw	r4,-16(fp)
   803a8:	e17ffd17 	ldw	r5,-12(fp)
   803ac:	e1800217 	ldw	r6,8(fp)
   803b0:	000f883a 	mov	r7,zero
   803b4:	00807540 	call	80754 <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
   803b8:	e13ffc17 	ldw	r4,-16(fp)
   803bc:	e17ffd17 	ldw	r5,-12(fp)
   803c0:	00805b80 	call	805b8 <i2c_stop>
    
    return bSuccess;
   803c4:	e0bffb17 	ldw	r2,-20(fp)
}
   803c8:	e037883a 	mov	sp,fp
   803cc:	dfc00117 	ldw	ra,4(sp)
   803d0:	df000017 	ldw	fp,0(sp)
   803d4:	dec00204 	addi	sp,sp,8
   803d8:	f800283a 	ret

000803dc <I2C_MultipleRead>:

bool I2C_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 szData[], alt_u16 len){
   803dc:	defff704 	addi	sp,sp,-36
   803e0:	dfc00815 	stw	ra,32(sp)
   803e4:	df000715 	stw	fp,28(sp)
   803e8:	df000704 	addi	fp,sp,28
   803ec:	e13ffb15 	stw	r4,-20(fp)
   803f0:	e17ffc15 	stw	r5,-16(fp)
   803f4:	3007883a 	mov	r3,r6
   803f8:	3805883a 	mov	r2,r7
   803fc:	e1000317 	ldw	r4,12(fp)
   80400:	e0fffd05 	stb	r3,-12(fp)
   80404:	e0bffe05 	stb	r2,-8(fp)
   80408:	e13fff0d 	sth	r4,-4(fp)
    int i;
    bool bSuccess = TRUE;
   8040c:	00800044 	movi	r2,1
   80410:	e0bffa15 	stw	r2,-24(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
   80414:	e13ffb17 	ldw	r4,-20(fp)
   80418:	e17ffc17 	ldw	r5,-16(fp)
   8041c:	00805340 	call	80534 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   80420:	e0bffd03 	ldbu	r2,-12(fp)
   80424:	10803fcc 	andi	r2,r2,255
   80428:	e13ffb17 	ldw	r4,-20(fp)
   8042c:	e17ffc17 	ldw	r5,-16(fp)
   80430:	100d883a 	mov	r6,r2
   80434:	00806280 	call	80628 <i2c_write>
   80438:	1000011e 	bne	r2,zero,80440 <I2C_MultipleRead+0x64>
        bSuccess = FALSE;
   8043c:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
   80440:	e0bffa17 	ldw	r2,-24(fp)
   80444:	10000726 	beq	r2,zero,80464 <I2C_MultipleRead+0x88>
   80448:	e0bffe03 	ldbu	r2,-8(fp)
   8044c:	e13ffb17 	ldw	r4,-20(fp)
   80450:	e17ffc17 	ldw	r5,-16(fp)
   80454:	100d883a 	mov	r6,r2
   80458:	00806280 	call	80628 <i2c_write>
   8045c:	1000011e 	bne	r2,zero,80464 <I2C_MultipleRead+0x88>
        bSuccess = FALSE;
   80460:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }    
    if (bSuccess)        
   80464:	e0bffa17 	ldw	r2,-24(fp)
   80468:	10000326 	beq	r2,zero,80478 <I2C_MultipleRead+0x9c>
        i2c_start(clk_base, data_base);  // restart
   8046c:	e13ffb17 	ldw	r4,-20(fp)
   80470:	e17ffc17 	ldw	r5,-16(fp)
   80474:	00805340 	call	80534 <i2c_start>
    DeviceAddr |= 1; // Read
   80478:	e0bffd03 	ldbu	r2,-12(fp)
   8047c:	10800054 	ori	r2,r2,1
   80480:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
   80484:	e0bffa17 	ldw	r2,-24(fp)
   80488:	10000826 	beq	r2,zero,804ac <I2C_MultipleRead+0xd0>
   8048c:	e0bffd03 	ldbu	r2,-12(fp)
   80490:	10803fcc 	andi	r2,r2,255
   80494:	e13ffb17 	ldw	r4,-20(fp)
   80498:	e17ffc17 	ldw	r5,-16(fp)
   8049c:	100d883a 	mov	r6,r2
   804a0:	00806280 	call	80628 <i2c_write>
   804a4:	1000011e 	bne	r2,zero,804ac <I2C_MultipleRead+0xd0>
        bSuccess = FALSE;
   804a8:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
   804ac:	e0bffa17 	ldw	r2,-24(fp)
   804b0:	10001726 	beq	r2,zero,80510 <I2C_MultipleRead+0x134>
        for(i=0;i<len && bSuccess;i++){
   804b4:	e03ff915 	stw	zero,-28(fp)
   804b8:	00001006 	br	804fc <I2C_MultipleRead+0x120>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
   804bc:	e0bff917 	ldw	r2,-28(fp)
   804c0:	e0c00217 	ldw	r3,8(fp)
   804c4:	1887883a 	add	r3,r3,r2
   804c8:	e0bfff0b 	ldhu	r2,-4(fp)
   804cc:	113fffc4 	addi	r4,r2,-1
   804d0:	e0bff917 	ldw	r2,-28(fp)
   804d4:	2084c03a 	cmpne	r2,r4,r2
   804d8:	10803fcc 	andi	r2,r2,255
   804dc:	e13ffb17 	ldw	r4,-20(fp)
   804e0:	e17ffc17 	ldw	r5,-16(fp)
   804e4:	180d883a 	mov	r6,r3
   804e8:	100f883a 	mov	r7,r2
   804ec:	00807540 	call	80754 <i2c_read>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
   804f0:	e0bff917 	ldw	r2,-28(fp)
   804f4:	10800044 	addi	r2,r2,1
   804f8:	e0bff915 	stw	r2,-28(fp)
   804fc:	e0bfff0b 	ldhu	r2,-4(fp)
   80500:	e0fff917 	ldw	r3,-28(fp)
   80504:	1880020e 	bge	r3,r2,80510 <I2C_MultipleRead+0x134>
   80508:	e0bffa17 	ldw	r2,-24(fp)
   8050c:	103feb1e 	bne	r2,zero,804bc <I2C_MultipleRead+0xe0>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
        }            
    }        
    i2c_stop(clk_base, data_base);
   80510:	e13ffb17 	ldw	r4,-20(fp)
   80514:	e17ffc17 	ldw	r5,-16(fp)
   80518:	00805b80 	call	805b8 <i2c_stop>
    
    return bSuccess;    
   8051c:	e0bffa17 	ldw	r2,-24(fp)
    
}
   80520:	e037883a 	mov	sp,fp
   80524:	dfc00117 	ldw	ra,4(sp)
   80528:	df000017 	ldw	fp,0(sp)
   8052c:	dec00204 	addi	sp,sp,8
   80530:	f800283a 	ret

00080534 <i2c_start>:
///////////// Interncal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
   80534:	defffc04 	addi	sp,sp,-16
   80538:	dfc00315 	stw	ra,12(sp)
   8053c:	df000215 	stw	fp,8(sp)
   80540:	df000204 	addi	fp,sp,8
   80544:	e13ffe15 	stw	r4,-8(fp)
   80548:	e17fff15 	stw	r5,-4(fp)
    
    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
   8054c:	e0bfff17 	ldw	r2,-4(fp)
   80550:	10800104 	addi	r2,r2,4
   80554:	00c00044 	movi	r3,1
   80558:	10c00035 	stwio	r3,0(r2)
    
    
    
    // start condition
    SDA_HIGH(data_base); // data high
   8055c:	e0bfff17 	ldw	r2,-4(fp)
   80560:	00c00044 	movi	r3,1
   80564:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base);
   80568:	e0bffe17 	ldw	r2,-8(fp)
   8056c:	00c00044 	movi	r3,1
   80570:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
   80574:	01000044 	movi	r4,1
   80578:	008b8000 	call	8b800 <usleep>
     
    SDA_LOW(data_base); // data low
   8057c:	e0bfff17 	ldw	r2,-4(fp)
   80580:	0007883a 	mov	r3,zero
   80584:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; 
   80588:	01000044 	movi	r4,1
   8058c:	008b8000 	call	8b800 <usleep>
    SCL_LOW(clk_base); // clock low
   80590:	e0bffe17 	ldw	r2,-8(fp)
   80594:	0007883a 	mov	r3,zero
   80598:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
   8059c:	01000044 	movi	r4,1
   805a0:	008b8000 	call	8b800 <usleep>
}
   805a4:	e037883a 	mov	sp,fp
   805a8:	dfc00117 	ldw	ra,4(sp)
   805ac:	df000017 	ldw	fp,0(sp)
   805b0:	dec00204 	addi	sp,sp,8
   805b4:	f800283a 	ret

000805b8 <i2c_stop>:

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
   805b8:	defffc04 	addi	sp,sp,-16
   805bc:	dfc00315 	stw	ra,12(sp)
   805c0:	df000215 	stw	fp,8(sp)
   805c4:	df000204 	addi	fp,sp,8
   805c8:	e13ffe15 	stw	r4,-8(fp)
   805cc:	e17fff15 	stw	r5,-4(fp)
    // assume SCL = 0
    
    SDA_DIR_OUT(data_base);  // data output enabled
   805d0:	e0bfff17 	ldw	r2,-4(fp)
   805d4:	10800104 	addi	r2,r2,4
   805d8:	00c00044 	movi	r3,1
   805dc:	10c00035 	stwio	r3,0(r2)
    SDA_LOW(data_base); // Data Low
   805e0:	e0bfff17 	ldw	r2,-4(fp)
   805e4:	0007883a 	mov	r3,zero
   805e8:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY; 
    SCL_HIGH(clk_base);  // clock high
   805ec:	e0bffe17 	ldw	r2,-8(fp)
   805f0:	00c00044 	movi	r3,1
   805f4:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high long delay
   805f8:	01000044 	movi	r4,1
   805fc:	008b8000 	call	8b800 <usleep>
    SDA_HIGH(data_base); // data high
   80600:	e0bfff17 	ldw	r2,-4(fp)
   80604:	00c00044 	movi	r3,1
   80608:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data high delay
   8060c:	01000044 	movi	r4,1
   80610:	008b8000 	call	8b800 <usleep>
    

    
}
   80614:	e037883a 	mov	sp,fp
   80618:	dfc00117 	ldw	ra,4(sp)
   8061c:	df000017 	ldw	fp,0(sp)
   80620:	dec00204 	addi	sp,sp,8
   80624:	f800283a 	ret

00080628 <i2c_write>:

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
   80628:	defff804 	addi	sp,sp,-32
   8062c:	dfc00715 	stw	ra,28(sp)
   80630:	df000615 	stw	fp,24(sp)
   80634:	df000604 	addi	fp,sp,24
   80638:	e13ffd15 	stw	r4,-12(fp)
   8063c:	e17ffe15 	stw	r5,-8(fp)
   80640:	3005883a 	mov	r2,r6
   80644:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 Mask = 0x80;
   80648:	00bfe004 	movi	r2,-128
   8064c:	e0bffa05 	stb	r2,-24(fp)
    bool bAck;
    int i;
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
   80650:	e0bffe17 	ldw	r2,-8(fp)
   80654:	10800104 	addi	r2,r2,4
   80658:	00c00044 	movi	r3,1
   8065c:	10c00035 	stwio	r3,0(r2)
    
    for(i=0;i<8;i++){
   80660:	e03ffb15 	stw	zero,-20(fp)
   80664:	00001f06 	br	806e4 <i2c_write+0xbc>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
   80668:	e0bffd17 	ldw	r2,-12(fp)
   8066c:	0007883a 	mov	r3,zero
   80670:	10c00035 	stwio	r3,0(r2)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
   80674:	e0ffff03 	ldbu	r3,-4(fp)
   80678:	e0bffa03 	ldbu	r2,-24(fp)
   8067c:	1884703a 	and	r2,r3,r2
   80680:	10803fcc 	andi	r2,r2,255
   80684:	10000426 	beq	r2,zero,80698 <i2c_write+0x70>
            SDA_HIGH(data_base);
   80688:	e0bffe17 	ldw	r2,-8(fp)
   8068c:	00c00044 	movi	r3,1
   80690:	10c00035 	stwio	r3,0(r2)
   80694:	00000306 	br	806a4 <i2c_write+0x7c>
        }else{    
            SDA_LOW(data_base);
   80698:	e0bffe17 	ldw	r2,-8(fp)
   8069c:	0007883a 	mov	r3,zero
   806a0:	10c00035 	stwio	r3,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
   806a4:	e0bffa03 	ldbu	r2,-24(fp)
   806a8:	1004d07a 	srli	r2,r2,1
   806ac:	e0bffa05 	stb	r2,-24(fp)
        // clock high
        SCL_HIGH(clk_base);
   806b0:	e0bffd17 	ldw	r2,-12(fp)
   806b4:	00c00044 	movi	r3,1
   806b8:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
   806bc:	01000044 	movi	r4,1
   806c0:	008b8000 	call	8b800 <usleep>
        SCL_LOW(clk_base);
   806c4:	e0bffd17 	ldw	r2,-12(fp)
   806c8:	0007883a 	mov	r3,zero
   806cc:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
   806d0:	01000044 	movi	r4,1
   806d4:	008b8000 	call	8b800 <usleep>
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
    
    for(i=0;i<8;i++){
   806d8:	e0bffb17 	ldw	r2,-20(fp)
   806dc:	10800044 	addi	r2,r2,1
   806e0:	e0bffb15 	stw	r2,-20(fp)
   806e4:	e0bffb17 	ldw	r2,-20(fp)
   806e8:	10800210 	cmplti	r2,r2,8
   806ec:	103fde1e 	bne	r2,zero,80668 <i2c_write+0x40>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }
    
    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
   806f0:	e0bffe17 	ldw	r2,-8(fp)
   806f4:	10800104 	addi	r2,r2,4
   806f8:	0007883a 	mov	r3,zero
   806fc:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
   80700:	e0bffd17 	ldw	r2,-12(fp)
   80704:	00c00044 	movi	r3,1
   80708:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;  // clock high delay
   8070c:	01000044 	movi	r4,1
   80710:	008b8000 	call	8b800 <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
   80714:	e0bffe17 	ldw	r2,-8(fp)
   80718:	10800037 	ldwio	r2,0(r2)
   8071c:	1005003a 	cmpeq	r2,r2,zero
   80720:	10803fcc 	andi	r2,r2,255
   80724:	e0bffc15 	stw	r2,-16(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low         
   80728:	e0bffd17 	ldw	r2,-12(fp)
   8072c:	0007883a 	mov	r3,zero
   80730:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
   80734:	01000044 	movi	r4,1
   80738:	008b8000 	call	8b800 <usleep>
    return bAck;
   8073c:	e0bffc17 	ldw	r2,-16(fp)
}    
   80740:	e037883a 	mov	sp,fp
   80744:	dfc00117 	ldw	ra,4(sp)
   80748:	df000017 	ldw	fp,0(sp)
   8074c:	dec00204 	addi	sp,sp,8
   80750:	f800283a 	ret

00080754 <i2c_read>:

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
   80754:	defff804 	addi	sp,sp,-32
   80758:	dfc00715 	stw	ra,28(sp)
   8075c:	df000615 	stw	fp,24(sp)
   80760:	df000604 	addi	fp,sp,24
   80764:	e13ffc15 	stw	r4,-16(fp)
   80768:	e17ffd15 	stw	r5,-12(fp)
   8076c:	e1bffe15 	stw	r6,-8(fp)
   80770:	e1ffff15 	stw	r7,-4(fp)
    alt_u8 Data=0;
   80774:	e03ffa05 	stb	zero,-24(fp)
    int i;
    
    // assume SCL = low
    
    SDA_DIR_IN(data_base);  // set data read mode
   80778:	e0bffd17 	ldw	r2,-12(fp)
   8077c:	10800104 	addi	r2,r2,4
   80780:	0007883a 	mov	r3,zero
   80784:	10c00035 	stwio	r3,0(r2)
    SCL_LOW(clk_base); // clock low
   80788:	e0bffc17 	ldw	r2,-16(fp)
   8078c:	0007883a 	mov	r3,zero
   80790:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
   80794:	01000044 	movi	r4,1
   80798:	008b8000 	call	8b800 <usleep>

    for(i=0;i<8;i++){
   8079c:	e03ffb15 	stw	zero,-20(fp)
   807a0:	00001606 	br	807fc <i2c_read+0xa8>
        Data <<= 1;
   807a4:	e0bffa03 	ldbu	r2,-24(fp)
   807a8:	1085883a 	add	r2,r2,r2
   807ac:	e0bffa05 	stb	r2,-24(fp)
        SCL_HIGH(clk_base);  // clock high
   807b0:	e0bffc17 	ldw	r2,-16(fp)
   807b4:	00c00044 	movi	r3,1
   807b8:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
   807bc:	01000044 	movi	r4,1
   807c0:	008b8000 	call	8b800 <usleep>
        if (SDA_READ(data_base))  // read data   
   807c4:	e0bffd17 	ldw	r2,-12(fp)
   807c8:	10800037 	ldwio	r2,0(r2)
   807cc:	10000326 	beq	r2,zero,807dc <i2c_read+0x88>
            Data |= 0x01;
   807d0:	e0bffa03 	ldbu	r2,-24(fp)
   807d4:	10800054 	ori	r2,r2,1
   807d8:	e0bffa05 	stb	r2,-24(fp)
        SCL_LOW(clk_base);  // clock log  
   807dc:	e0bffc17 	ldw	r2,-16(fp)
   807e0:	0007883a 	mov	r3,zero
   807e4:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
   807e8:	01000044 	movi	r4,1
   807ec:	008b8000 	call	8b800 <usleep>
    
    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
   807f0:	e0bffb17 	ldw	r2,-20(fp)
   807f4:	10800044 	addi	r2,r2,1
   807f8:	e0bffb15 	stw	r2,-20(fp)
   807fc:	e0bffb17 	ldw	r2,-20(fp)
   80800:	10800210 	cmplti	r2,r2,8
   80804:	103fe71e 	bne	r2,zero,807a4 <i2c_read+0x50>
        SCL_LOW(clk_base);  // clock log  
        SCL_DELAY;
    }
    
    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
   80808:	e0bffc17 	ldw	r2,-16(fp)
   8080c:	0007883a 	mov	r3,zero
   80810:	10c00035 	stwio	r3,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
   80814:	e0bffd17 	ldw	r2,-12(fp)
   80818:	10800104 	addi	r2,r2,4
   8081c:	00c00044 	movi	r3,1
   80820:	10c00035 	stwio	r3,0(r2)
    if (bAck)
   80824:	e0bfff17 	ldw	r2,-4(fp)
   80828:	10000426 	beq	r2,zero,8083c <i2c_read+0xe8>
        SDA_LOW(data_base);
   8082c:	e0bffd17 	ldw	r2,-12(fp)
   80830:	0007883a 	mov	r3,zero
   80834:	10c00035 	stwio	r3,0(r2)
   80838:	00000306 	br	80848 <i2c_read+0xf4>
    else
        SDA_HIGH(data_base);
   8083c:	e0bffd17 	ldw	r2,-12(fp)
   80840:	00c00044 	movi	r3,1
   80844:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base); // clock high
   80848:	e0bffc17 	ldw	r2,-16(fp)
   8084c:	00c00044 	movi	r3,1
   80850:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high  delay
   80854:	01000044 	movi	r4,1
   80858:	008b8000 	call	8b800 <usleep>
    SCL_LOW(clk_base); // clock low
   8085c:	e0bffc17 	ldw	r2,-16(fp)
   80860:	0007883a 	mov	r3,zero
   80864:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
   80868:	01000044 	movi	r4,1
   8086c:	008b8000 	call	8b800 <usleep>
    SDA_LOW(data_base);  // data low
   80870:	e0bffd17 	ldw	r2,-12(fp)
   80874:	0007883a 	mov	r3,zero
   80878:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data low delay
   8087c:	01000044 	movi	r4,1
   80880:	008b8000 	call	8b800 <usleep>
//    SDA_DIR_IN;  // set data read mode
    
    *pData = Data;
   80884:	e0bffe17 	ldw	r2,-8(fp)
   80888:	e0fffa03 	ldbu	r3,-24(fp)
   8088c:	10c00005 	stb	r3,0(r2)
}
   80890:	e037883a 	mov	sp,fp
   80894:	dfc00117 	ldw	ra,4(sp)
   80898:	df000017 	ldw	fp,0(sp)
   8089c:	dec00204 	addi	sp,sp,8
   808a0:	f800283a 	ret

000808a4 <I2CL_Write>:

////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// size > 2Kbits
bool I2CL_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 ControlData){
   808a4:	defff704 	addi	sp,sp,-36
   808a8:	dfc00815 	stw	ra,32(sp)
   808ac:	df000715 	stw	fp,28(sp)
   808b0:	df000704 	addi	fp,sp,28
   808b4:	e13ffb15 	stw	r4,-20(fp)
   808b8:	e17ffc15 	stw	r5,-16(fp)
   808bc:	3007883a 	mov	r3,r6
   808c0:	3805883a 	mov	r2,r7
   808c4:	e1000217 	ldw	r4,8(fp)
   808c8:	e0fffd05 	stb	r3,-12(fp)
   808cc:	e0bffe0d 	sth	r2,-8(fp)
   808d0:	e13fff05 	stb	r4,-4(fp)
    bool bSuccess = TRUE;
   808d4:	00800044 	movi	r2,1
   808d8:	e0bff915 	stw	r2,-28(fp)
    alt_u8 AddrHigh, AddrLow;
    
    AddrHigh = (ControlAddr >> 8) & 0xFF; 
   808dc:	e0bffe0b 	ldhu	r2,-8(fp)
   808e0:	1004d23a 	srli	r2,r2,8
   808e4:	e0bffa05 	stb	r2,-24(fp)
    AddrLow  = ControlAddr & 0xFF; 
   808e8:	e0bffe0b 	ldhu	r2,-8(fp)
   808ec:	e0bffa45 	stb	r2,-23(fp)
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
   808f0:	e13ffb17 	ldw	r4,-20(fp)
   808f4:	e17ffc17 	ldw	r5,-16(fp)
   808f8:	00805340 	call	80534 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   808fc:	e0bffd03 	ldbu	r2,-12(fp)
   80900:	10803fcc 	andi	r2,r2,255
   80904:	e13ffb17 	ldw	r4,-20(fp)
   80908:	e17ffc17 	ldw	r5,-16(fp)
   8090c:	100d883a 	mov	r6,r2
   80910:	00806280 	call	80628 <i2c_write>
   80914:	1000011e 	bne	r2,zero,8091c <I2CL_Write+0x78>
        bSuccess = FALSE;
   80918:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
   8091c:	e0bff917 	ldw	r2,-28(fp)
   80920:	10000726 	beq	r2,zero,80940 <I2CL_Write+0x9c>
   80924:	e0bffa03 	ldbu	r2,-24(fp)
   80928:	e13ffb17 	ldw	r4,-20(fp)
   8092c:	e17ffc17 	ldw	r5,-16(fp)
   80930:	100d883a 	mov	r6,r2
   80934:	00806280 	call	80628 <i2c_write>
   80938:	1000011e 	bne	r2,zero,80940 <I2CL_Write+0x9c>
        bSuccess = FALSE;
   8093c:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
   80940:	e0bff917 	ldw	r2,-28(fp)
   80944:	10000726 	beq	r2,zero,80964 <I2CL_Write+0xc0>
   80948:	e0bffa43 	ldbu	r2,-23(fp)
   8094c:	e13ffb17 	ldw	r4,-20(fp)
   80950:	e17ffc17 	ldw	r5,-16(fp)
   80954:	100d883a 	mov	r6,r2
   80958:	00806280 	call	80628 <i2c_write>
   8095c:	1000011e 	bne	r2,zero,80964 <I2CL_Write+0xc0>
        bSuccess = FALSE;
   80960:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
   80964:	e0bff917 	ldw	r2,-28(fp)
   80968:	10000726 	beq	r2,zero,80988 <I2CL_Write+0xe4>
   8096c:	e0bfff03 	ldbu	r2,-4(fp)
   80970:	e13ffb17 	ldw	r4,-20(fp)
   80974:	e17ffc17 	ldw	r5,-16(fp)
   80978:	100d883a 	mov	r6,r2
   8097c:	00806280 	call	80628 <i2c_write>
   80980:	1000011e 	bne	r2,zero,80988 <I2CL_Write+0xe4>
        bSuccess = FALSE;
   80984:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
   80988:	e13ffb17 	ldw	r4,-20(fp)
   8098c:	e17ffc17 	ldw	r5,-16(fp)
   80990:	00805b80 	call	805b8 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
   80994:	0106d604 	movi	r4,7000
   80998:	008b8000 	call	8b800 <usleep>
    
    return bSuccess;
   8099c:	e0bff917 	ldw	r2,-28(fp)
    
}
   809a0:	e037883a 	mov	sp,fp
   809a4:	dfc00117 	ldw	ra,4(sp)
   809a8:	df000017 	ldw	fp,0(sp)
   809ac:	dec00204 	addi	sp,sp,8
   809b0:	f800283a 	ret

000809b4 <I2CL_Read>:

bool I2CL_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 *pControlData){
   809b4:	defff804 	addi	sp,sp,-32
   809b8:	dfc00715 	stw	ra,28(sp)
   809bc:	df000615 	stw	fp,24(sp)
   809c0:	df000604 	addi	fp,sp,24
   809c4:	e13ffc15 	stw	r4,-16(fp)
   809c8:	e17ffd15 	stw	r5,-12(fp)
   809cc:	3007883a 	mov	r3,r6
   809d0:	3805883a 	mov	r2,r7
   809d4:	e0fffe05 	stb	r3,-8(fp)
   809d8:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess = TRUE;
   809dc:	00800044 	movi	r2,1
   809e0:	e0bffa15 	stw	r2,-24(fp)
    alt_u8 AddrHigh, AddrLow;
    
    AddrHigh = (ControlAddr >> 8) & 0xFF; 
   809e4:	e0bfff0b 	ldhu	r2,-4(fp)
   809e8:	1004d23a 	srli	r2,r2,8
   809ec:	e0bffb05 	stb	r2,-20(fp)
    AddrLow  = ControlAddr & 0xFF; 
   809f0:	e0bfff0b 	ldhu	r2,-4(fp)
   809f4:	e0bffb45 	stb	r2,-19(fp)

    i2c_start(clk_base, data_base);
   809f8:	e13ffc17 	ldw	r4,-16(fp)
   809fc:	e17ffd17 	ldw	r5,-12(fp)
   80a00:	00805340 	call	80534 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   80a04:	e0bffe03 	ldbu	r2,-8(fp)
   80a08:	10803fcc 	andi	r2,r2,255
   80a0c:	e13ffc17 	ldw	r4,-16(fp)
   80a10:	e17ffd17 	ldw	r5,-12(fp)
   80a14:	100d883a 	mov	r6,r2
   80a18:	00806280 	call	80628 <i2c_write>
   80a1c:	1000011e 	bne	r2,zero,80a24 <I2CL_Read+0x70>
        bSuccess = FALSE;
   80a20:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
   80a24:	e0bffa17 	ldw	r2,-24(fp)
   80a28:	10000726 	beq	r2,zero,80a48 <I2CL_Read+0x94>
   80a2c:	e0bffb03 	ldbu	r2,-20(fp)
   80a30:	e13ffc17 	ldw	r4,-16(fp)
   80a34:	e17ffd17 	ldw	r5,-12(fp)
   80a38:	100d883a 	mov	r6,r2
   80a3c:	00806280 	call	80628 <i2c_write>
   80a40:	1000011e 	bne	r2,zero,80a48 <I2CL_Read+0x94>
        bSuccess = FALSE;
   80a44:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
   80a48:	e0bffa17 	ldw	r2,-24(fp)
   80a4c:	10000726 	beq	r2,zero,80a6c <I2CL_Read+0xb8>
   80a50:	e0bffb43 	ldbu	r2,-19(fp)
   80a54:	e13ffc17 	ldw	r4,-16(fp)
   80a58:	e17ffd17 	ldw	r5,-12(fp)
   80a5c:	100d883a 	mov	r6,r2
   80a60:	00806280 	call	80628 <i2c_write>
   80a64:	1000011e 	bne	r2,zero,80a6c <I2CL_Read+0xb8>
        bSuccess = FALSE;
   80a68:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
    }            
    i2c_start(clk_base, data_base);  // restart
   80a6c:	e13ffc17 	ldw	r4,-16(fp)
   80a70:	e17ffd17 	ldw	r5,-12(fp)
   80a74:	00805340 	call	80534 <i2c_start>
    DeviceAddr |= 1; // Read
   80a78:	e0bffe03 	ldbu	r2,-8(fp)
   80a7c:	10800054 	ori	r2,r2,1
   80a80:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
   80a84:	e0bffa17 	ldw	r2,-24(fp)
   80a88:	10000826 	beq	r2,zero,80aac <I2CL_Read+0xf8>
   80a8c:	e0bffe03 	ldbu	r2,-8(fp)
   80a90:	10803fcc 	andi	r2,r2,255
   80a94:	e13ffc17 	ldw	r4,-16(fp)
   80a98:	e17ffd17 	ldw	r5,-12(fp)
   80a9c:	100d883a 	mov	r6,r2
   80aa0:	00806280 	call	80628 <i2c_write>
   80aa4:	1000011e 	bne	r2,zero,80aac <I2CL_Read+0xf8>
        bSuccess = FALSE;
   80aa8:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
   80aac:	e0bffa17 	ldw	r2,-24(fp)
   80ab0:	10000526 	beq	r2,zero,80ac8 <I2CL_Read+0x114>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
   80ab4:	e13ffc17 	ldw	r4,-16(fp)
   80ab8:	e17ffd17 	ldw	r5,-12(fp)
   80abc:	e1800217 	ldw	r6,8(fp)
   80ac0:	000f883a 	mov	r7,zero
   80ac4:	00807540 	call	80754 <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
   80ac8:	e13ffc17 	ldw	r4,-16(fp)
   80acc:	e17ffd17 	ldw	r5,-12(fp)
   80ad0:	00805b80 	call	805b8 <i2c_stop>
    
    return bSuccess;    
   80ad4:	e0bffa17 	ldw	r2,-24(fp)
}
   80ad8:	e037883a 	mov	sp,fp
   80adc:	dfc00117 	ldw	ra,4(sp)
   80ae0:	df000017 	ldw	fp,0(sp)
   80ae4:	dec00204 	addi	sp,sp,8
   80ae8:	f800283a 	ret

00080aec <I2CL_MultipleRead>:

// read from address 0
bool I2CL_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 szData[], alt_u16 len){
   80aec:	defff604 	addi	sp,sp,-40
   80af0:	dfc00915 	stw	ra,36(sp)
   80af4:	df000815 	stw	fp,32(sp)
   80af8:	df000804 	addi	fp,sp,32
   80afc:	e13ffb15 	stw	r4,-20(fp)
   80b00:	e17ffc15 	stw	r5,-16(fp)
   80b04:	3005883a 	mov	r2,r6
   80b08:	e1fffe15 	stw	r7,-8(fp)
   80b0c:	e0c00217 	ldw	r3,8(fp)
   80b10:	e0bffd05 	stb	r2,-12(fp)
   80b14:	e0ffff0d 	sth	r3,-4(fp)
    int i;
    bool bSuccess = TRUE;
   80b18:	00800044 	movi	r2,1
   80b1c:	e0bff915 	stw	r2,-28(fp)
    alt_u8 ControlAddr = 0;
   80b20:	e03ffa05 	stb	zero,-24(fp)
    alt_u8 AddrHigh, AddrLow;
    
    AddrHigh = (ControlAddr >> 8) & 0xFF; 
   80b24:	e03ffa45 	stb	zero,-23(fp)
    AddrLow  = ControlAddr & 0xFF;     
   80b28:	e0bffa03 	ldbu	r2,-24(fp)
   80b2c:	e0bffa85 	stb	r2,-22(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
   80b30:	e13ffb17 	ldw	r4,-20(fp)
   80b34:	e17ffc17 	ldw	r5,-16(fp)
   80b38:	00805340 	call	80534 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   80b3c:	e0bffd03 	ldbu	r2,-12(fp)
   80b40:	10803fcc 	andi	r2,r2,255
   80b44:	e13ffb17 	ldw	r4,-20(fp)
   80b48:	e17ffc17 	ldw	r5,-16(fp)
   80b4c:	100d883a 	mov	r6,r2
   80b50:	00806280 	call	80628 <i2c_write>
   80b54:	1000011e 	bne	r2,zero,80b5c <I2CL_MultipleRead+0x70>
        bSuccess = FALSE;
   80b58:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
   80b5c:	e0bff917 	ldw	r2,-28(fp)
   80b60:	10000726 	beq	r2,zero,80b80 <I2CL_MultipleRead+0x94>
   80b64:	e0bffa43 	ldbu	r2,-23(fp)
   80b68:	e13ffb17 	ldw	r4,-20(fp)
   80b6c:	e17ffc17 	ldw	r5,-16(fp)
   80b70:	100d883a 	mov	r6,r2
   80b74:	00806280 	call	80628 <i2c_write>
   80b78:	1000011e 	bne	r2,zero,80b80 <I2CL_MultipleRead+0x94>
        bSuccess = FALSE;
   80b7c:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
    }    
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
   80b80:	e0bff917 	ldw	r2,-28(fp)
   80b84:	10000726 	beq	r2,zero,80ba4 <I2CL_MultipleRead+0xb8>
   80b88:	e0bffa83 	ldbu	r2,-22(fp)
   80b8c:	e13ffb17 	ldw	r4,-20(fp)
   80b90:	e17ffc17 	ldw	r5,-16(fp)
   80b94:	100d883a 	mov	r6,r2
   80b98:	00806280 	call	80628 <i2c_write>
   80b9c:	1000011e 	bne	r2,zero,80ba4 <I2CL_MultipleRead+0xb8>
        bSuccess = FALSE;
   80ba0:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
    }    
    if (bSuccess)        
   80ba4:	e0bff917 	ldw	r2,-28(fp)
   80ba8:	10000326 	beq	r2,zero,80bb8 <I2CL_MultipleRead+0xcc>
        i2c_start(clk_base, data_base);  // restart
   80bac:	e13ffb17 	ldw	r4,-20(fp)
   80bb0:	e17ffc17 	ldw	r5,-16(fp)
   80bb4:	00805340 	call	80534 <i2c_start>
    DeviceAddr |= 1; // Read
   80bb8:	e0bffd03 	ldbu	r2,-12(fp)
   80bbc:	10800054 	ori	r2,r2,1
   80bc0:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
   80bc4:	e0bff917 	ldw	r2,-28(fp)
   80bc8:	10000826 	beq	r2,zero,80bec <I2CL_MultipleRead+0x100>
   80bcc:	e0bffd03 	ldbu	r2,-12(fp)
   80bd0:	10803fcc 	andi	r2,r2,255
   80bd4:	e13ffb17 	ldw	r4,-20(fp)
   80bd8:	e17ffc17 	ldw	r5,-16(fp)
   80bdc:	100d883a 	mov	r6,r2
   80be0:	00806280 	call	80628 <i2c_write>
   80be4:	1000011e 	bne	r2,zero,80bec <I2CL_MultipleRead+0x100>
        bSuccess = FALSE;
   80be8:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
   80bec:	e0bff917 	ldw	r2,-28(fp)
   80bf0:	10001726 	beq	r2,zero,80c50 <I2CL_MultipleRead+0x164>
        for(i=0;i<len && bSuccess;i++){
   80bf4:	e03ff815 	stw	zero,-32(fp)
   80bf8:	00001006 	br	80c3c <I2CL_MultipleRead+0x150>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
   80bfc:	e0bff817 	ldw	r2,-32(fp)
   80c00:	e0fffe17 	ldw	r3,-8(fp)
   80c04:	1887883a 	add	r3,r3,r2
   80c08:	e0bfff0b 	ldhu	r2,-4(fp)
   80c0c:	113fffc4 	addi	r4,r2,-1
   80c10:	e0bff817 	ldw	r2,-32(fp)
   80c14:	2084c03a 	cmpne	r2,r4,r2
   80c18:	10803fcc 	andi	r2,r2,255
   80c1c:	e13ffb17 	ldw	r4,-20(fp)
   80c20:	e17ffc17 	ldw	r5,-16(fp)
   80c24:	180d883a 	mov	r6,r3
   80c28:	100f883a 	mov	r7,r2
   80c2c:	00807540 	call	80754 <i2c_read>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
   80c30:	e0bff817 	ldw	r2,-32(fp)
   80c34:	10800044 	addi	r2,r2,1
   80c38:	e0bff815 	stw	r2,-32(fp)
   80c3c:	e0bfff0b 	ldhu	r2,-4(fp)
   80c40:	e0fff817 	ldw	r3,-32(fp)
   80c44:	1880020e 	bge	r3,r2,80c50 <I2CL_MultipleRead+0x164>
   80c48:	e0bff917 	ldw	r2,-28(fp)
   80c4c:	103feb1e 	bne	r2,zero,80bfc <I2CL_MultipleRead+0x110>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
        }            
    }        
    i2c_stop(clk_base, data_base);
   80c50:	e13ffb17 	ldw	r4,-20(fp)
   80c54:	e17ffc17 	ldw	r5,-16(fp)
   80c58:	00805b80 	call	805b8 <i2c_stop>
    
    return bSuccess;    
   80c5c:	e0bff917 	ldw	r2,-28(fp)
    
} 
   80c60:	e037883a 	mov	sp,fp
   80c64:	dfc00117 	ldw	ra,4(sp)
   80c68:	df000017 	ldw	fp,0(sp)
   80c6c:	dec00204 	addi	sp,sp,8
   80c70:	f800283a 	ret

00080c74 <I2C_AUDIO_Write>:



// Note. The interface of Audio chip is not fully I2C
// the control addd contain one data bits.
bool I2C_AUDIO_Write(alt_u32 clk_base, alt_u32 data_base, alt_u8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
   80c74:	defff804 	addi	sp,sp,-32
   80c78:	dfc00715 	stw	ra,28(sp)
   80c7c:	df000615 	stw	fp,24(sp)
   80c80:	df000604 	addi	fp,sp,24
   80c84:	e13ffb15 	stw	r4,-20(fp)
   80c88:	e17ffc15 	stw	r5,-16(fp)
   80c8c:	3007883a 	mov	r3,r6
   80c90:	3805883a 	mov	r2,r7
   80c94:	e1000217 	ldw	r4,8(fp)
   80c98:	e0fffd05 	stb	r3,-12(fp)
   80c9c:	e0bffe05 	stb	r2,-8(fp)
   80ca0:	e13fff05 	stb	r4,-4(fp)
    bool bSuccess = TRUE;
   80ca4:	00800044 	movi	r2,1
   80ca8:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = I2C_AUDIO_ADDR;
   // WM8731/L is a write only device
    i2c_start(clk_base, data_base);
   80cac:	e13ffb17 	ldw	r4,-20(fp)
   80cb0:	e17ffc17 	ldw	r5,-16(fp)
   80cb4:	00805340 	call	80534 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   80cb8:	e0bffd03 	ldbu	r2,-12(fp)
   80cbc:	e13ffb17 	ldw	r4,-20(fp)
   80cc0:	e17ffc17 	ldw	r5,-16(fp)
   80cc4:	100d883a 	mov	r6,r2
   80cc8:	00806280 	call	80628 <i2c_write>
   80ccc:	1000011e 	bne	r2,zero,80cd4 <I2C_AUDIO_Write+0x60>
        bSuccess = FALSE;
   80cd0:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C AUDIO Fail: Address NACK!\n"));
    }
    
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
   80cd4:	e0bffa17 	ldw	r2,-24(fp)
   80cd8:	10000726 	beq	r2,zero,80cf8 <I2C_AUDIO_Write+0x84>
   80cdc:	e0bffe03 	ldbu	r2,-8(fp)
   80ce0:	e13ffb17 	ldw	r4,-20(fp)
   80ce4:	e17ffc17 	ldw	r5,-16(fp)
   80ce8:	100d883a 	mov	r6,r2
   80cec:	00806280 	call	80628 <i2c_write>
   80cf0:	1000011e 	bne	r2,zero,80cf8 <I2C_AUDIO_Write+0x84>
        bSuccess = FALSE;
   80cf4:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C AUDIO Fail: SubAddress NACK!\n"));
    }      
          
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
   80cf8:	e0bffa17 	ldw	r2,-24(fp)
   80cfc:	10000726 	beq	r2,zero,80d1c <I2C_AUDIO_Write+0xa8>
   80d00:	e0bfff03 	ldbu	r2,-4(fp)
   80d04:	e13ffb17 	ldw	r4,-20(fp)
   80d08:	e17ffc17 	ldw	r5,-16(fp)
   80d0c:	100d883a 	mov	r6,r2
   80d10:	00806280 	call	80628 <i2c_write>
   80d14:	1000011e 	bne	r2,zero,80d1c <I2C_AUDIO_Write+0xa8>
        bSuccess = FALSE;
   80d18:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C AUDIO Fail: Address+1 NACK!\n"));
    }
    
    i2c_stop(clk_base, data_base);
   80d1c:	e13ffb17 	ldw	r4,-20(fp)
   80d20:	e17ffc17 	ldw	r5,-16(fp)
   80d24:	00805b80 	call	805b8 <i2c_stop>
    return bSuccess;
   80d28:	e0bffa17 	ldw	r2,-24(fp)
}
   80d2c:	e037883a 	mov	sp,fp
   80d30:	dfc00117 	ldw	ra,4(sp)
   80d34:	df000017 	ldw	fp,0(sp)
   80d38:	dec00204 	addi	sp,sp,8
   80d3c:	f800283a 	ret

00080d40 <main>:
#include "terasic_includes.h"
#include "video_control.h"
#include "mem_verify.h"
 
int main()
{
   80d40:	defffe04 	addi	sp,sp,-8
   80d44:	dfc00115 	stw	ra,4(sp)
   80d48:	df000015 	stw	fp,0(sp)
   80d4c:	d839883a 	mov	fp,sp
	printf("sdram test:%s\r\n", bPass?"PASS":"NG");
	return 0;

#else

	if (!VIDEO_Enable(TRUE))
   80d50:	01000044 	movi	r4,1
   80d54:	00814c40 	call	814c4 <VIDEO_Enable>
   80d58:	1000041e 	bne	r2,zero,80d6c <main+0x2c>
		printf("failed to enabled video decoder!\r\n");
   80d5c:	01000274 	movhi	r4,9
   80d60:	21382404 	addi	r4,r4,-8048
   80d64:	0081aa00 	call	81aa0 <puts>
   80d68:	00000306 	br	80d78 <main+0x38>
	else
		printf("video decoder is enabled successfully!\r\n");
   80d6c:	01000274 	movhi	r4,9
   80d70:	21382d04 	addi	r4,r4,-8012
   80d74:	0081aa00 	call	81aa0 <puts>


	printf("init MIX, layer 1 is disableD\r\n");
   80d78:	01000274 	movhi	r4,9
   80d7c:	21383704 	addi	r4,r4,-7972
   80d80:	0081aa00 	call	81aa0 <puts>
	MIX_Init();
   80d84:	008172c0 	call	8172c <MIX_Init>

	//MIX_LayerEnable(1, FALSE);

	return 0;
   80d88:	0005883a 	mov	r2,zero


#endif

}
   80d8c:	e037883a 	mov	sp,fp
   80d90:	dfc00117 	ldw	ra,4(sp)
   80d94:	df000017 	ldw	fp,0(sp)
   80d98:	dec00204 	addi	sp,sp,8
   80d9c:	f800283a 	ret

00080da0 <TMEM_Verify>:
#include "terasic_includes.h"
#include "mem_verify.h"



bool TMEM_Verify(alt_u32 BaseAddr, alt_u32 ByteLen, alt_u32 InitValue, bool bShowMessage){
   80da0:	def7e504 	addi	sp,sp,-8300
   80da4:	dfc81a15 	stw	ra,8296(sp)
   80da8:	df081915 	stw	fp,8292(sp)
   80dac:	df081904 	addi	fp,sp,8292
   80db0:	e13ffc15 	stw	r4,-16(fp)
   80db4:	e17ffd15 	stw	r5,-12(fp)
   80db8:	e1bffe15 	stw	r6,-8(fp)
   80dbc:	e1ffff15 	stw	r7,-4(fp)
    bool bPass = TRUE;
   80dc0:	00800044 	movi	r2,1
   80dc4:	e0b7e715 	stw	r2,-8292(fp)
    alt_u32 szData[1025];
    alt_u32 szRead[1025];
    int i, nRemainedLen, nAccessLen;
    alt_u32 *pDes, *pSrc, nItemNum, nPos;

    int nProgressIndex=0;
   80dc8:	e037ed15 	stw	zero,-8268(fp)
    alt_u32 szProgress[10];
    
    for(i=0;i<10;i++){
   80dcc:	e037e815 	stw	zero,-8288(fp)
   80dd0:	00001206 	br	80e1c <TMEM_Verify+0x7c>
        szProgress[i] = ByteLen/10*(i+1);     
   80dd4:	e0bffd17 	ldw	r2,-12(fp)
   80dd8:	1009883a 	mov	r4,r2
   80ddc:	01400284 	movi	r5,10
   80de0:	00818880 	call	81888 <__udivsi3>
   80de4:	1007883a 	mov	r3,r2
   80de8:	e0b7e817 	ldw	r2,-8288(fp)
   80dec:	10800044 	addi	r2,r2,1
   80df0:	1887383a 	mul	r3,r3,r2
   80df4:	e0b7e817 	ldw	r2,-8288(fp)
   80df8:	1085883a 	add	r2,r2,r2
   80dfc:	1085883a 	add	r2,r2,r2
   80e00:	e137e704 	addi	r4,fp,-8292
   80e04:	2085883a 	add	r2,r4,r2
   80e08:	10880b04 	addi	r2,r2,8236
   80e0c:	10c00015 	stw	r3,0(r2)
    alt_u32 *pDes, *pSrc, nItemNum, nPos;

    int nProgressIndex=0;
    alt_u32 szProgress[10];
    
    for(i=0;i<10;i++){
   80e10:	e0b7e817 	ldw	r2,-8288(fp)
   80e14:	10800044 	addi	r2,r2,1
   80e18:	e0b7e815 	stw	r2,-8288(fp)
   80e1c:	e0b7e817 	ldw	r2,-8288(fp)
   80e20:	10800290 	cmplti	r2,r2,10
   80e24:	103feb1e 	bne	r2,zero,80dd4 <TMEM_Verify+0x34>
        szProgress[i] = ByteLen/10*(i+1);     
    }
    
    
    
    nItemNum = sizeof(szData)/sizeof(szData[0]);
   80e28:	00810044 	movi	r2,1025
   80e2c:	e0b7ee15 	stw	r2,-8264(fp)
    for(i=0;i<nItemNum;i++){
   80e30:	e037e815 	stw	zero,-8288(fp)
   80e34:	00001e06 	br	80eb0 <TMEM_Verify+0x110>
        if (i == 0)
   80e38:	e0b7e817 	ldw	r2,-8288(fp)
   80e3c:	1000091e 	bne	r2,zero,80e64 <TMEM_Verify+0xc4>
            szData[i] = InitValue;
   80e40:	e0b7e817 	ldw	r2,-8288(fp)
   80e44:	1085883a 	add	r2,r2,r2
   80e48:	1085883a 	add	r2,r2,r2
   80e4c:	e0f7e704 	addi	r3,fp,-8292
   80e50:	1885883a 	add	r2,r3,r2
   80e54:	10800904 	addi	r2,r2,36
   80e58:	e0fffe17 	ldw	r3,-8(fp)
   80e5c:	10c00015 	stw	r3,0(r2)
   80e60:	00001006 	br	80ea4 <TMEM_Verify+0x104>
        else     
            szData[i] = szData[i-1] * 13;
   80e64:	e0b7e817 	ldw	r2,-8288(fp)
   80e68:	10bfffc4 	addi	r2,r2,-1
   80e6c:	1085883a 	add	r2,r2,r2
   80e70:	1085883a 	add	r2,r2,r2
   80e74:	e137e704 	addi	r4,fp,-8292
   80e78:	2085883a 	add	r2,r4,r2
   80e7c:	10800904 	addi	r2,r2,36
   80e80:	10800017 	ldw	r2,0(r2)
   80e84:	10c00364 	muli	r3,r2,13
   80e88:	e0b7e817 	ldw	r2,-8288(fp)
   80e8c:	1085883a 	add	r2,r2,r2
   80e90:	1085883a 	add	r2,r2,r2
   80e94:	e137e704 	addi	r4,fp,-8292
   80e98:	2085883a 	add	r2,r4,r2
   80e9c:	10800904 	addi	r2,r2,36
   80ea0:	10c00015 	stw	r3,0(r2)
    }
    
    
    
    nItemNum = sizeof(szData)/sizeof(szData[0]);
    for(i=0;i<nItemNum;i++){
   80ea4:	e0b7e817 	ldw	r2,-8288(fp)
   80ea8:	10800044 	addi	r2,r2,1
   80eac:	e0b7e815 	stw	r2,-8288(fp)
   80eb0:	e0f7e817 	ldw	r3,-8288(fp)
   80eb4:	e0b7ee17 	ldw	r2,-8264(fp)
   80eb8:	18bfdf36 	bltu	r3,r2,80e38 <TMEM_Verify+0x98>
        if (i == 0)
            szData[i] = InitValue;
        else     
            szData[i] = szData[i-1] * 13;
    }
    szData[nItemNum-1] = 0xAAAAAAAA;
   80ebc:	e0b7ee17 	ldw	r2,-8264(fp)
   80ec0:	10bfffc4 	addi	r2,r2,-1
   80ec4:	1085883a 	add	r2,r2,r2
   80ec8:	1085883a 	add	r2,r2,r2
   80ecc:	e0f7e704 	addi	r3,fp,-8292
   80ed0:	1885883a 	add	r2,r3,r2
   80ed4:	10800904 	addi	r2,r2,36
   80ed8:	00eaaaf4 	movhi	r3,43691
   80edc:	18eaaa84 	addi	r3,r3,-21846
   80ee0:	10c00015 	stw	r3,0(r2)
    szData[nItemNum-2] = 0x55555555;
   80ee4:	e0b7ee17 	ldw	r2,-8264(fp)
   80ee8:	10bfff84 	addi	r2,r2,-2
   80eec:	1085883a 	add	r2,r2,r2
   80ef0:	1085883a 	add	r2,r2,r2
   80ef4:	e137e704 	addi	r4,fp,-8292
   80ef8:	2085883a 	add	r2,r4,r2
   80efc:	10800904 	addi	r2,r2,36
   80f00:	00d55574 	movhi	r3,21845
   80f04:	18d55544 	addi	r3,r3,21845
   80f08:	10c00015 	stw	r3,0(r2)
    szData[nItemNum-3] = 0x00000000;
   80f0c:	e0b7ee17 	ldw	r2,-8264(fp)
   80f10:	10bfff44 	addi	r2,r2,-3
   80f14:	1085883a 	add	r2,r2,r2
   80f18:	1085883a 	add	r2,r2,r2
   80f1c:	e0f7e704 	addi	r3,fp,-8292
   80f20:	1885883a 	add	r2,r3,r2
   80f24:	10800904 	addi	r2,r2,36
   80f28:	10000015 	stw	zero,0(r2)
    szData[nItemNum-4] = 0xFFFFFFFF;
   80f2c:	e0b7ee17 	ldw	r2,-8264(fp)
   80f30:	10bfff04 	addi	r2,r2,-4
   80f34:	1085883a 	add	r2,r2,r2
   80f38:	1085883a 	add	r2,r2,r2
   80f3c:	e137e704 	addi	r4,fp,-8292
   80f40:	2085883a 	add	r2,r4,r2
   80f44:	10800904 	addi	r2,r2,36
   80f48:	00ffffc4 	movi	r3,-1
   80f4c:	10c00015 	stw	r3,0(r2)
    
    if (bShowMessage)
   80f50:	e0bfff17 	ldw	r2,-4(fp)
   80f54:	10000326 	beq	r2,zero,80f64 <TMEM_Verify+0x1c4>
        printf("write...\n");
   80f58:	01000274 	movhi	r4,9
   80f5c:	21383f04 	addi	r4,r4,-7940
   80f60:	0081aa00 	call	81aa0 <puts>
    // write
    pDes = (alt_u32 *)BaseAddr;
   80f64:	e0bffc17 	ldw	r2,-16(fp)
   80f68:	e0b7ea15 	stw	r2,-8280(fp)
    nAccessLen = sizeof(szData);
   80f6c:	00840104 	movi	r2,4100
   80f70:	e0b7e915 	stw	r2,-8284(fp)
    nPos = 0;
   80f74:	e037ec15 	stw	zero,-8272(fp)
    while(nPos < ByteLen){
   80f78:	00003506 	br	81050 <TMEM_Verify+0x2b0>
        nRemainedLen = ByteLen - nPos;
   80f7c:	e0fffd17 	ldw	r3,-12(fp)
   80f80:	e0b7ec17 	ldw	r2,-8272(fp)
   80f84:	1885c83a 	sub	r2,r3,r2
   80f88:	e0b7ef15 	stw	r2,-8260(fp)
        if (nAccessLen > nRemainedLen)
   80f8c:	e0b7e917 	ldw	r2,-8284(fp)
   80f90:	e0f7ef17 	ldw	r3,-8260(fp)
   80f94:	1880020e 	bge	r3,r2,80fa0 <TMEM_Verify+0x200>
            nAccessLen = nRemainedLen;
   80f98:	e0b7ef17 	ldw	r2,-8260(fp)
   80f9c:	e0b7e915 	stw	r2,-8284(fp)
        memcpy(pDes, szData, nAccessLen);
   80fa0:	e0b7e917 	ldw	r2,-8284(fp)
   80fa4:	e0f7f004 	addi	r3,fp,-8256
   80fa8:	e137ea17 	ldw	r4,-8280(fp)
   80fac:	180b883a 	mov	r5,r3
   80fb0:	100d883a 	mov	r6,r2
   80fb4:	00818980 	call	81898 <memcpy>
        pDes += nAccessLen/4;
   80fb8:	e0b7e917 	ldw	r2,-8284(fp)
   80fbc:	1000010e 	bge	r2,zero,80fc4 <TMEM_Verify+0x224>
   80fc0:	108000c4 	addi	r2,r2,3
   80fc4:	1005d0ba 	srai	r2,r2,2
   80fc8:	1085883a 	add	r2,r2,r2
   80fcc:	1085883a 	add	r2,r2,r2
   80fd0:	e0f7ea17 	ldw	r3,-8280(fp)
   80fd4:	1885883a 	add	r2,r3,r2
   80fd8:	e0b7ea15 	stw	r2,-8280(fp)
        nPos += nAccessLen;
   80fdc:	e0b7e917 	ldw	r2,-8284(fp)
   80fe0:	e0f7ec17 	ldw	r3,-8272(fp)
   80fe4:	1885883a 	add	r2,r3,r2
   80fe8:	e0b7ec15 	stw	r2,-8272(fp)
        
        if (bShowMessage){
   80fec:	e0bfff17 	ldw	r2,-4(fp)
   80ff0:	10001726 	beq	r2,zero,81050 <TMEM_Verify+0x2b0>
            if (nProgressIndex <= 9 && nPos >= szProgress[nProgressIndex]){
   80ff4:	e0b7ed17 	ldw	r2,-8268(fp)
   80ff8:	10800288 	cmpgei	r2,r2,10
   80ffc:	1000141e 	bne	r2,zero,81050 <TMEM_Verify+0x2b0>
   81000:	e0b7ed17 	ldw	r2,-8268(fp)
   81004:	1085883a 	add	r2,r2,r2
   81008:	1085883a 	add	r2,r2,r2
   8100c:	e0f7e704 	addi	r3,fp,-8292
   81010:	1885883a 	add	r2,r3,r2
   81014:	10880b04 	addi	r2,r2,8236
   81018:	10800017 	ldw	r2,0(r2)
   8101c:	e0f7ec17 	ldw	r3,-8272(fp)
   81020:	18800b36 	bltu	r3,r2,81050 <TMEM_Verify+0x2b0>
                nProgressIndex++;
   81024:	e0b7ed17 	ldw	r2,-8268(fp)
   81028:	10800044 	addi	r2,r2,1
   8102c:	e0b7ed15 	stw	r2,-8268(fp)
                printf("%02d%% ", nProgressIndex*10);
   81030:	e0b7ed17 	ldw	r2,-8268(fp)
   81034:	108002a4 	muli	r2,r2,10
   81038:	01000274 	movhi	r4,9
   8103c:	21384204 	addi	r4,r4,-7928
   81040:	100b883a 	mov	r5,r2
   81044:	00819bc0 	call	819bc <printf>
                usleep(50);
   81048:	01000c84 	movi	r4,50
   8104c:	008b8000 	call	8b800 <usleep>
        printf("write...\n");
    // write
    pDes = (alt_u32 *)BaseAddr;
    nAccessLen = sizeof(szData);
    nPos = 0;
    while(nPos < ByteLen){
   81050:	e0f7ec17 	ldw	r3,-8272(fp)
   81054:	e0bffd17 	ldw	r2,-12(fp)
   81058:	18bfc836 	bltu	r3,r2,80f7c <TMEM_Verify+0x1dc>
                usleep(50);
            }
        }            
    } 
    
    alt_dcache_flush_all();
   8105c:	008aef40 	call	8aef4 <alt_dcache_flush_all>
    
    if (bShowMessage){
   81060:	e0bfff17 	ldw	r2,-4(fp)
   81064:	10000626 	beq	r2,zero,81080 <TMEM_Verify+0x2e0>
        nProgressIndex = 0;
   81068:	e037ed15 	stw	zero,-8268(fp)
        printf("\nread/verify...\n");
   8106c:	01000274 	movhi	r4,9
   81070:	21384404 	addi	r4,r4,-7920
   81074:	0081aa00 	call	81aa0 <puts>
        usleep(50);
   81078:	01000c84 	movi	r4,50
   8107c:	008b8000 	call	8b800 <usleep>
    }        
    
    // read & verify
    pSrc = (alt_u32 *)BaseAddr;
   81080:	e0bffc17 	ldw	r2,-16(fp)
   81084:	e0b7eb15 	stw	r2,-8276(fp)
    nAccessLen = sizeof(szRead);
   81088:	00840104 	movi	r2,4100
   8108c:	e0b7e915 	stw	r2,-8284(fp)
    nPos = 0;
   81090:	e037ec15 	stw	zero,-8272(fp)
    while(bPass && nPos < ByteLen){
   81094:	00006e06 	br	81250 <TMEM_Verify+0x4b0>
        nRemainedLen = ByteLen - nPos;
   81098:	e0fffd17 	ldw	r3,-12(fp)
   8109c:	e0b7ec17 	ldw	r2,-8272(fp)
   810a0:	1885c83a 	sub	r2,r3,r2
   810a4:	e0b7ef15 	stw	r2,-8260(fp)
        if (nAccessLen > nRemainedLen)
   810a8:	e0b7e917 	ldw	r2,-8284(fp)
   810ac:	e0f7ef17 	ldw	r3,-8260(fp)
   810b0:	1880020e 	bge	r3,r2,810bc <TMEM_Verify+0x31c>
            nAccessLen = nRemainedLen;
   810b4:	e0b7ef17 	ldw	r2,-8260(fp)
   810b8:	e0b7e915 	stw	r2,-8284(fp)
       // memset(szRead, 0xAA, nAccessLen); // reset content    
        memcpy(szRead, pSrc, nAccessLen);
   810bc:	e0b7e917 	ldw	r2,-8284(fp)
   810c0:	e0fbf104 	addi	r3,fp,-4156
   810c4:	1809883a 	mov	r4,r3
   810c8:	e177eb17 	ldw	r5,-8276(fp)
   810cc:	100d883a 	mov	r6,r2
   810d0:	00818980 	call	81898 <memcpy>
        // verify
        nItemNum = nAccessLen / 4;
   810d4:	e0b7e917 	ldw	r2,-8284(fp)
   810d8:	1000010e 	bge	r2,zero,810e0 <TMEM_Verify+0x340>
   810dc:	108000c4 	addi	r2,r2,3
   810e0:	1005d0ba 	srai	r2,r2,2
   810e4:	e0b7ee15 	stw	r2,-8264(fp)
        for(i=0;i<nItemNum && bPass;i++){
   810e8:	e037e815 	stw	zero,-8288(fp)
   810ec:	00003006 	br	811b0 <TMEM_Verify+0x410>
            if (szRead[i] != szData[i]){
   810f0:	e0b7e817 	ldw	r2,-8288(fp)
   810f4:	1085883a 	add	r2,r2,r2
   810f8:	1085883a 	add	r2,r2,r2
   810fc:	e137e704 	addi	r4,fp,-8292
   81100:	2085883a 	add	r2,r4,r2
   81104:	10840a04 	addi	r2,r2,4136
   81108:	10c00017 	ldw	r3,0(r2)
   8110c:	e0b7e817 	ldw	r2,-8288(fp)
   81110:	1085883a 	add	r2,r2,r2
   81114:	1085883a 	add	r2,r2,r2
   81118:	e137e704 	addi	r4,fp,-8292
   8111c:	2085883a 	add	r2,r4,r2
   81120:	10800904 	addi	r2,r2,36
   81124:	10800017 	ldw	r2,0(r2)
   81128:	18801e26 	beq	r3,r2,811a4 <TMEM_Verify+0x404>
                if (bShowMessage){
   8112c:	e0bfff17 	ldw	r2,-4(fp)
   81130:	10001b26 	beq	r2,zero,811a0 <TMEM_Verify+0x400>
                   printf("verify ng, read=%08Xh, expected=%08Xh, i=%Xh\n", (int)szRead[i], (int)szData[i], (int)(nPos/4+i));
   81134:	e0b7e817 	ldw	r2,-8288(fp)
   81138:	1085883a 	add	r2,r2,r2
   8113c:	1085883a 	add	r2,r2,r2
   81140:	e0f7e704 	addi	r3,fp,-8292
   81144:	1885883a 	add	r2,r3,r2
   81148:	10840a04 	addi	r2,r2,4136
   8114c:	10800017 	ldw	r2,0(r2)
   81150:	100b883a 	mov	r5,r2
   81154:	e0b7e817 	ldw	r2,-8288(fp)
   81158:	1085883a 	add	r2,r2,r2
   8115c:	1085883a 	add	r2,r2,r2
   81160:	e137e704 	addi	r4,fp,-8292
   81164:	2085883a 	add	r2,r4,r2
   81168:	10800904 	addi	r2,r2,36
   8116c:	10800017 	ldw	r2,0(r2)
   81170:	1007883a 	mov	r3,r2
   81174:	e0b7ec17 	ldw	r2,-8272(fp)
   81178:	1008d0ba 	srli	r4,r2,2
   8117c:	e0b7e817 	ldw	r2,-8288(fp)
   81180:	2085883a 	add	r2,r4,r2
   81184:	01000274 	movhi	r4,9
   81188:	21384804 	addi	r4,r4,-7904
   8118c:	180d883a 	mov	r6,r3
   81190:	100f883a 	mov	r7,r2
   81194:	00819bc0 	call	819bc <printf>
                   usleep(50);
   81198:	01000c84 	movi	r4,50
   8119c:	008b8000 	call	8b800 <usleep>
                }   
                bPass = FALSE;
   811a0:	e037e715 	stw	zero,-8292(fp)
            nAccessLen = nRemainedLen;
       // memset(szRead, 0xAA, nAccessLen); // reset content    
        memcpy(szRead, pSrc, nAccessLen);
        // verify
        nItemNum = nAccessLen / 4;
        for(i=0;i<nItemNum && bPass;i++){
   811a4:	e0b7e817 	ldw	r2,-8288(fp)
   811a8:	10800044 	addi	r2,r2,1
   811ac:	e0b7e815 	stw	r2,-8288(fp)
   811b0:	e0f7e817 	ldw	r3,-8288(fp)
   811b4:	e0b7ee17 	ldw	r2,-8264(fp)
   811b8:	1880022e 	bgeu	r3,r2,811c4 <TMEM_Verify+0x424>
   811bc:	e0b7e717 	ldw	r2,-8292(fp)
   811c0:	103fcb1e 	bne	r2,zero,810f0 <TMEM_Verify+0x350>
                }   
                bPass = FALSE;
            }    
        }
        //
        pSrc += nItemNum;
   811c4:	e0b7ee17 	ldw	r2,-8264(fp)
   811c8:	1085883a 	add	r2,r2,r2
   811cc:	1085883a 	add	r2,r2,r2
   811d0:	e0f7eb17 	ldw	r3,-8276(fp)
   811d4:	1885883a 	add	r2,r3,r2
   811d8:	e0b7eb15 	stw	r2,-8276(fp)
        nPos += nAccessLen;
   811dc:	e0b7e917 	ldw	r2,-8284(fp)
   811e0:	e0f7ec17 	ldw	r3,-8272(fp)
   811e4:	1885883a 	add	r2,r3,r2
   811e8:	e0b7ec15 	stw	r2,-8272(fp)

        if (bShowMessage){
   811ec:	e0bfff17 	ldw	r2,-4(fp)
   811f0:	10001726 	beq	r2,zero,81250 <TMEM_Verify+0x4b0>
            if (nProgressIndex <= 9 && nPos >= szProgress[nProgressIndex]){
   811f4:	e0b7ed17 	ldw	r2,-8268(fp)
   811f8:	10800288 	cmpgei	r2,r2,10
   811fc:	1000141e 	bne	r2,zero,81250 <TMEM_Verify+0x4b0>
   81200:	e0b7ed17 	ldw	r2,-8268(fp)
   81204:	1085883a 	add	r2,r2,r2
   81208:	1085883a 	add	r2,r2,r2
   8120c:	e0f7e704 	addi	r3,fp,-8292
   81210:	1885883a 	add	r2,r3,r2
   81214:	10880b04 	addi	r2,r2,8236
   81218:	10800017 	ldw	r2,0(r2)
   8121c:	e0f7ec17 	ldw	r3,-8272(fp)
   81220:	18800b36 	bltu	r3,r2,81250 <TMEM_Verify+0x4b0>
                nProgressIndex++;
   81224:	e0b7ed17 	ldw	r2,-8268(fp)
   81228:	10800044 	addi	r2,r2,1
   8122c:	e0b7ed15 	stw	r2,-8268(fp)
                printf("%02d%% ", nProgressIndex*10);
   81230:	e0b7ed17 	ldw	r2,-8268(fp)
   81234:	108002a4 	muli	r2,r2,10
   81238:	01000274 	movhi	r4,9
   8123c:	21384204 	addi	r4,r4,-7928
   81240:	100b883a 	mov	r5,r2
   81244:	00819bc0 	call	819bc <printf>
                usleep(50);
   81248:	01000c84 	movi	r4,50
   8124c:	008b8000 	call	8b800 <usleep>
    
    // read & verify
    pSrc = (alt_u32 *)BaseAddr;
    nAccessLen = sizeof(szRead);
    nPos = 0;
    while(bPass && nPos < ByteLen){
   81250:	e0b7e717 	ldw	r2,-8292(fp)
   81254:	10000326 	beq	r2,zero,81264 <TMEM_Verify+0x4c4>
   81258:	e0f7ec17 	ldw	r3,-8272(fp)
   8125c:	e0bffd17 	ldw	r2,-12(fp)
   81260:	18bf8d36 	bltu	r3,r2,81098 <TMEM_Verify+0x2f8>
                usleep(50);
            }
        }            
    }     
    
    if (bShowMessage)
   81264:	e0bfff17 	ldw	r2,-4(fp)
   81268:	10000226 	beq	r2,zero,81274 <TMEM_Verify+0x4d4>
        printf("\n");
   8126c:	01000284 	movi	r4,10
   81270:	0081a000 	call	81a00 <putchar>
   
    
    return bPass;
   81274:	e0b7e717 	ldw	r2,-8292(fp)
}
   81278:	e037883a 	mov	sp,fp
   8127c:	dfc00117 	ldw	ra,4(sp)
   81280:	df000017 	ldw	fp,0(sp)
   81284:	dec00204 	addi	sp,sp,8
   81288:	f800283a 	ret

0008128c <TMEM_QuickVerify>:

bool TMEM_QuickVerify(alt_u32 BaseAddr, alt_u32 DataSize, alt_u32 DataWidth, alt_u32 AddrWidth){
   8128c:	defff104 	addi	sp,sp,-60
   81290:	dfc00e15 	stw	ra,56(sp)
   81294:	df000d15 	stw	fp,52(sp)
   81298:	df000d04 	addi	fp,sp,52
   8129c:	e13ffc15 	stw	r4,-16(fp)
   812a0:	e17ffd15 	stw	r5,-12(fp)
   812a4:	e1bffe15 	stw	r6,-8(fp)
   812a8:	e1ffff15 	stw	r7,-4(fp)
    bool bPass = TRUE;
   812ac:	00800044 	movi	r2,1
   812b0:	e0bff315 	stw	r2,-52(fp)
    const alt_u32 TestNum = 1024*512;
   812b4:	00800234 	movhi	r2,8
   812b8:	e0bff615 	stw	r2,-40(fp)
    const alt_u32 TestPattern = 0xAA;
   812bc:	00802a84 	movi	r2,170
   812c0:	e0bff715 	stw	r2,-36(fp)
    alt_u32 mask, Read32, Addr32, TestData32, TestAddr32;
    int i;
    
    //alt_u32 *pMem = (alt_u32 *)BaseAddr;
    // test address line
    mask = 0x01;
   812c4:	00800044 	movi	r2,1
   812c8:	e0bff415 	stw	r2,-48(fp)
    for(i=0;i<AddrWidth && bPass;i++){
   812cc:	e03ff515 	stw	zero,-44(fp)
   812d0:	00001a06 	br	8133c <TMEM_QuickVerify+0xb0>
        //*(pMem + mask) = TestPattern;
        IOWR(BaseAddr, mask, TestPattern);
   812d4:	e0bff417 	ldw	r2,-48(fp)
   812d8:	1085883a 	add	r2,r2,r2
   812dc:	1085883a 	add	r2,r2,r2
   812e0:	1007883a 	mov	r3,r2
   812e4:	e0bffc17 	ldw	r2,-16(fp)
   812e8:	1885883a 	add	r2,r3,r2
   812ec:	e0fff717 	ldw	r3,-36(fp)
   812f0:	10c00035 	stwio	r3,0(r2)
        //if (*(pMem + mask) != TestPattern)
        Read32 = IORD(BaseAddr, mask);
   812f4:	e0bff417 	ldw	r2,-48(fp)
   812f8:	1085883a 	add	r2,r2,r2
   812fc:	1085883a 	add	r2,r2,r2
   81300:	1007883a 	mov	r3,r2
   81304:	e0bffc17 	ldw	r2,-16(fp)
   81308:	1885883a 	add	r2,r3,r2
   8130c:	10800037 	ldwio	r2,0(r2)
   81310:	e0bff815 	stw	r2,-32(fp)
        if (Read32 != TestPattern)
   81314:	e0fff817 	ldw	r3,-32(fp)
   81318:	e0bff717 	ldw	r2,-36(fp)
   8131c:	18800126 	beq	r3,r2,81324 <TMEM_QuickVerify+0x98>
            bPass = FALSE;
   81320:	e03ff315 	stw	zero,-52(fp)
        mask <<= 1;    
   81324:	e0bff417 	ldw	r2,-48(fp)
   81328:	1085883a 	add	r2,r2,r2
   8132c:	e0bff415 	stw	r2,-48(fp)
    int i;
    
    //alt_u32 *pMem = (alt_u32 *)BaseAddr;
    // test address line
    mask = 0x01;
    for(i=0;i<AddrWidth && bPass;i++){
   81330:	e0bff517 	ldw	r2,-44(fp)
   81334:	10800044 	addi	r2,r2,1
   81338:	e0bff515 	stw	r2,-44(fp)
   8133c:	e0fff517 	ldw	r3,-44(fp)
   81340:	e0bfff17 	ldw	r2,-4(fp)
   81344:	1880022e 	bgeu	r3,r2,81350 <TMEM_QuickVerify+0xc4>
   81348:	e0bff317 	ldw	r2,-52(fp)
   8134c:	103fe11e 	bne	r2,zero,812d4 <TMEM_QuickVerify+0x48>
            bPass = FALSE;
        mask <<= 1;    
    }
    
    // test data line
    mask = 0x01;
   81350:	00800044 	movi	r2,1
   81354:	e0bff415 	stw	r2,-48(fp)
    for(i=0;i<DataWidth && bPass;i++){
   81358:	e03ff515 	stw	zero,-44(fp)
   8135c:	00002106 	br	813e4 <TMEM_QuickVerify+0x158>
        //*(pMem+i/32) = mask;
        Addr32 = i*13;
   81360:	e0bff517 	ldw	r2,-44(fp)
   81364:	10800364 	muli	r2,r2,13
   81368:	e0bff915 	stw	r2,-28(fp)
        IOWR(BaseAddr, Addr32, mask);
   8136c:	e0bff917 	ldw	r2,-28(fp)
   81370:	1085883a 	add	r2,r2,r2
   81374:	1085883a 	add	r2,r2,r2
   81378:	1007883a 	mov	r3,r2
   8137c:	e0bffc17 	ldw	r2,-16(fp)
   81380:	1885883a 	add	r2,r3,r2
   81384:	e0fff417 	ldw	r3,-48(fp)
   81388:	10c00035 	stwio	r3,0(r2)
        Read32 = IORD(BaseAddr, Addr32);
   8138c:	e0bff917 	ldw	r2,-28(fp)
   81390:	1085883a 	add	r2,r2,r2
   81394:	1085883a 	add	r2,r2,r2
   81398:	1007883a 	mov	r3,r2
   8139c:	e0bffc17 	ldw	r2,-16(fp)
   813a0:	1885883a 	add	r2,r3,r2
   813a4:	10800037 	ldwio	r2,0(r2)
   813a8:	e0bff815 	stw	r2,-32(fp)
        //if (*(pMem+i/32) != mask)
        if (Read32 != mask)
   813ac:	e0fff817 	ldw	r3,-32(fp)
   813b0:	e0bff417 	ldw	r2,-48(fp)
   813b4:	18800126 	beq	r3,r2,813bc <TMEM_QuickVerify+0x130>
            bPass = FALSE;
   813b8:	e03ff315 	stw	zero,-52(fp)
        mask <<= 1;
   813bc:	e0bff417 	ldw	r2,-48(fp)
   813c0:	1085883a 	add	r2,r2,r2
   813c4:	e0bff415 	stw	r2,-48(fp)
        if (mask == 0x00)
   813c8:	e0bff417 	ldw	r2,-48(fp)
   813cc:	1000021e 	bne	r2,zero,813d8 <TMEM_QuickVerify+0x14c>
            mask = 0x01;    
   813d0:	00800044 	movi	r2,1
   813d4:	e0bff415 	stw	r2,-48(fp)
        mask <<= 1;    
    }
    
    // test data line
    mask = 0x01;
    for(i=0;i<DataWidth && bPass;i++){
   813d8:	e0bff517 	ldw	r2,-44(fp)
   813dc:	10800044 	addi	r2,r2,1
   813e0:	e0bff515 	stw	r2,-44(fp)
   813e4:	e0fff517 	ldw	r3,-44(fp)
   813e8:	e0bffe17 	ldw	r2,-8(fp)
   813ec:	1880022e 	bgeu	r3,r2,813f8 <TMEM_QuickVerify+0x16c>
   813f0:	e0bff317 	ldw	r2,-52(fp)
   813f4:	103fda1e 	bne	r2,zero,81360 <TMEM_QuickVerify+0xd4>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   813f8:	00800274 	movhi	r2,9
   813fc:	1086da04 	addi	r2,r2,7016
   81400:	10800017 	ldw	r2,0(r2)
        if (mask == 0x00)
            mask = 0x01;    
    }
    
    // random data test
    srand(alt_nticks());
   81404:	1009883a 	mov	r4,r2
   81408:	0081ab40 	call	81ab4 <srand>
    for(i=0;i<TestNum && bPass;i++){
   8140c:	e03ff515 	stw	zero,-44(fp)
   81410:	00002106 	br	81498 <TMEM_QuickVerify+0x20c>
        TestAddr32 = rand()%(DataSize/4);
   81414:	0081acc0 	call	81acc <rand>
   81418:	1007883a 	mov	r3,r2
   8141c:	e0bffd17 	ldw	r2,-12(fp)
   81420:	1004d0ba 	srli	r2,r2,2
   81424:	1809883a 	mov	r4,r3
   81428:	100b883a 	mov	r5,r2
   8142c:	00818900 	call	81890 <__umodsi3>
   81430:	e0bffa15 	stw	r2,-24(fp)
        TestData32 = rand();
   81434:	0081acc0 	call	81acc <rand>
   81438:	e0bffb15 	stw	r2,-20(fp)
        IOWR(BaseAddr, TestAddr32, TestData32);
   8143c:	e0bffa17 	ldw	r2,-24(fp)
   81440:	1085883a 	add	r2,r2,r2
   81444:	1085883a 	add	r2,r2,r2
   81448:	1007883a 	mov	r3,r2
   8144c:	e0bffc17 	ldw	r2,-16(fp)
   81450:	1885883a 	add	r2,r3,r2
   81454:	e0fffb17 	ldw	r3,-20(fp)
   81458:	10c00035 	stwio	r3,0(r2)
        Read32 = IORD(BaseAddr, TestAddr32);
   8145c:	e0bffa17 	ldw	r2,-24(fp)
   81460:	1085883a 	add	r2,r2,r2
   81464:	1085883a 	add	r2,r2,r2
   81468:	1007883a 	mov	r3,r2
   8146c:	e0bffc17 	ldw	r2,-16(fp)
   81470:	1885883a 	add	r2,r3,r2
   81474:	10800037 	ldwio	r2,0(r2)
   81478:	e0bff815 	stw	r2,-32(fp)
        if (Read32 != TestData32)
   8147c:	e0fff817 	ldw	r3,-32(fp)
   81480:	e0bffb17 	ldw	r2,-20(fp)
   81484:	18800126 	beq	r3,r2,8148c <TMEM_QuickVerify+0x200>
            bPass = FALSE;        
   81488:	e03ff315 	stw	zero,-52(fp)
            mask = 0x01;    
    }
    
    // random data test
    srand(alt_nticks());
    for(i=0;i<TestNum && bPass;i++){
   8148c:	e0bff517 	ldw	r2,-44(fp)
   81490:	10800044 	addi	r2,r2,1
   81494:	e0bff515 	stw	r2,-44(fp)
   81498:	e0fff517 	ldw	r3,-44(fp)
   8149c:	e0bff617 	ldw	r2,-40(fp)
   814a0:	1880022e 	bgeu	r3,r2,814ac <TMEM_QuickVerify+0x220>
   814a4:	e0bff317 	ldw	r2,-52(fp)
   814a8:	103fda1e 	bne	r2,zero,81414 <TMEM_QuickVerify+0x188>
        if (Read32 != TestData32)
            bPass = FALSE;        
        
    }
    
    return bPass;
   814ac:	e0bff317 	ldw	r2,-52(fp)
}
   814b0:	e037883a 	mov	sp,fp
   814b4:	dfc00117 	ldw	ra,4(sp)
   814b8:	df000017 	ldw	fp,0(sp)
   814bc:	dec00204 	addi	sp,sp,8
   814c0:	f800283a 	ret

000814c4 <VIDEO_Enable>:
#endif    
  
};    


bool VIDEO_Enable(bool bEnable){
   814c4:	defff804 	addi	sp,sp,-32
   814c8:	dfc00715 	stw	ra,28(sp)
   814cc:	df000615 	stw	fp,24(sp)
   814d0:	df000604 	addi	fp,sp,24
   814d4:	e13fff15 	stw	r4,-4(fp)
    bool bPass = TRUE;
   814d8:	00800044 	movi	r2,1
   814dc:	e0bffb15 	stw	r2,-20(fp)
        0x0444, // ITU-R BT.656 compatible
        0x0d1c  // Set Free-run color
    };
     */
    
    IOWR(ALT_VIP_CTI_0_BASE, 0, bEnable?0x01:0x00);
   814e0:	e0bfff17 	ldw	r2,-4(fp)
   814e4:	1004c03a 	cmpne	r2,r2,zero
   814e8:	10c03fcc 	andi	r3,r2,255
   814ec:	00800074 	movhi	r2,1
   814f0:	10802004 	addi	r2,r2,128
   814f4:	10c00035 	stwio	r3,0(r2)
    if (!bEnable)
   814f8:	e0bfff17 	ldw	r2,-4(fp)
   814fc:	1000021e 	bne	r2,zero,81508 <VIDEO_Enable+0x44>
        return TRUE; 
   81500:	00800044 	movi	r2,1
   81504:	00004d06 	br	8163c <VIDEO_Enable+0x178>
     
    nNum = sizeof(szTvConfig)/sizeof(szTvConfig[0]);
   81508:	00800544 	movi	r2,21
   8150c:	e0bffd15 	stw	r2,-12(fp)
    
  //  hardware reset
    IOWR(TD_RESET_N_BASE, 0, 0x01);
   81510:	00c00044 	movi	r3,1
   81514:	0080c034 	movhi	r2,768
   81518:	10800804 	addi	r2,r2,32
   8151c:	10c00035 	stwio	r3,0(r2)
    usleep(100);
   81520:	01001904 	movi	r4,100
   81524:	008b8000 	call	8b800 <usleep>
    IOWR(TD_RESET_N_BASE, 0, 0x00);
   81528:	0007883a 	mov	r3,zero
   8152c:	0080c034 	movhi	r2,768
   81530:	10800804 	addi	r2,r2,32
   81534:	10c00035 	stwio	r3,0(r2)
    usleep(100);
   81538:	01001904 	movi	r4,100
   8153c:	008b8000 	call	8b800 <usleep>
    IOWR(TD_RESET_N_BASE, 0, 0x01);
   81540:	00c00044 	movi	r3,1
   81544:	0080c034 	movhi	r2,768
   81548:	10800804 	addi	r2,r2,32
   8154c:	10c00035 	stwio	r3,0(r2)
    usleep(100);
   81550:	01001904 	movi	r4,100
   81554:	008b8000 	call	8b800 <usleep>
    

    if (I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, I2C_TV_ADDR, 0x11, &ID)){
   81558:	e0bffe04 	addi	r2,fp,-8
   8155c:	d8800015 	stw	r2,0(sp)
   81560:	0100c034 	movhi	r4,768
   81564:	21001404 	addi	r4,r4,80
   81568:	0140c034 	movhi	r5,768
   8156c:	29401004 	addi	r5,r5,64
   81570:	01801004 	movi	r6,64
   81574:	01c00444 	movi	r7,17
   81578:	00802dc0 	call	802dc <I2C_Read>
   8157c:	10000726 	beq	r2,zero,8159c <VIDEO_Enable+0xd8>
    	printf("id(reg 0x11)=%02xh\r\n", ID);
   81580:	e0bffe03 	ldbu	r2,-8(fp)
   81584:	10803fcc 	andi	r2,r2,255
   81588:	01000274 	movhi	r4,9
   8158c:	21385404 	addi	r4,r4,-7856
   81590:	100b883a 	mov	r5,r2
   81594:	00819bc0 	call	819bc <printf>
   81598:	00000306 	br	815a8 <VIDEO_Enable+0xe4>
    }else{
    	printf("Failed to read chip id\r\n");
   8159c:	01000274 	movhi	r4,9
   815a0:	21385a04 	addi	r4,r4,-7832
   815a4:	0081aa00 	call	81aa0 <puts>

    }

    for(i=0;i<nNum && bPass;i++){
   815a8:	e03ffc15 	stw	zero,-16(fp)
   815ac:	00001d06 	br	81624 <VIDEO_Enable+0x160>
        bPass = I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, I2C_TV_ADDR, szTvConfig[i].Address, szTvConfig[i].Data);
   815b0:	00c00274 	movhi	r3,9
   815b4:	18f92b04 	addi	r3,r3,-6996
   815b8:	e0bffc17 	ldw	r2,-16(fp)
   815bc:	1085883a 	add	r2,r2,r2
   815c0:	1885883a 	add	r2,r3,r2
   815c4:	10800003 	ldbu	r2,0(r2)
   815c8:	10c03fcc 	andi	r3,r2,255
   815cc:	01000274 	movhi	r4,9
   815d0:	21392b04 	addi	r4,r4,-6996
   815d4:	e0bffc17 	ldw	r2,-16(fp)
   815d8:	1085883a 	add	r2,r2,r2
   815dc:	2085883a 	add	r2,r4,r2
   815e0:	10800044 	addi	r2,r2,1
   815e4:	10800003 	ldbu	r2,0(r2)
   815e8:	10803fcc 	andi	r2,r2,255
   815ec:	d8800015 	stw	r2,0(sp)
   815f0:	0100c034 	movhi	r4,768
   815f4:	21001404 	addi	r4,r4,80
   815f8:	0140c034 	movhi	r5,768
   815fc:	29401004 	addi	r5,r5,64
   81600:	01801004 	movi	r6,64
   81604:	180f883a 	mov	r7,r3
   81608:	00802040 	call	80204 <I2C_Write>
   8160c:	e0bffb15 	stw	r2,-20(fp)
        usleep(10);
   81610:	01000284 	movi	r4,10
   81614:	008b8000 	call	8b800 <usleep>
    }else{
    	printf("Failed to read chip id\r\n");

    }

    for(i=0;i<nNum && bPass;i++){
   81618:	e0bffc17 	ldw	r2,-16(fp)
   8161c:	10800044 	addi	r2,r2,1
   81620:	e0bffc15 	stw	r2,-16(fp)
   81624:	e0fffc17 	ldw	r3,-16(fp)
   81628:	e0bffd17 	ldw	r2,-12(fp)
   8162c:	1880020e 	bge	r3,r2,81638 <VIDEO_Enable+0x174>
   81630:	e0bffb17 	ldw	r2,-20(fp)
   81634:	103fde1e 	bne	r2,zero,815b0 <VIDEO_Enable+0xec>
        bPass = I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, I2C_TV_ADDR, szTvConfig[i].Address, szTvConfig[i].Data);
        usleep(10);
    }        
    return bPass;
   81638:	e0bffb17 	ldw	r2,-20(fp)
}
   8163c:	e037883a 	mov	sp,fp
   81640:	dfc00117 	ldw	ra,4(sp)
   81644:	df000017 	ldw	fp,0(sp)
   81648:	dec00204 	addi	sp,sp,8
   8164c:	f800283a 	ret

00081650 <MIX_LayerEnable>:

// background is layer 0 ???



void MIX_LayerEnable(int nLayerIndex, bool bEnable){
   81650:	defffd04 	addi	sp,sp,-12
   81654:	df000215 	stw	fp,8(sp)
   81658:	df000204 	addi	fp,sp,8
   8165c:	e13ffe15 	stw	r4,-8(fp)
   81660:	e17fff15 	stw	r5,-4(fp)

	// stop
	IOWR(ALT_VIP_MIX_0_BASE, 0x00, 0x00);
   81664:	0007883a 	mov	r3,zero
   81668:	00800074 	movhi	r2,1
   8166c:	10804004 	addi	r2,r2,256
   81670:	10c00035 	stwio	r3,0(r2)

	IOWR(ALT_VIP_MIX_0_BASE, nLayerIndex*3+1, bEnable?0x01:0x00);
   81674:	e0bffe17 	ldw	r2,-8(fp)
   81678:	10800324 	muli	r2,r2,12
   8167c:	10800104 	addi	r2,r2,4
   81680:	1007883a 	mov	r3,r2
   81684:	00800074 	movhi	r2,1
   81688:	10804004 	addi	r2,r2,256
   8168c:	1885883a 	add	r2,r3,r2
   81690:	e0ffff17 	ldw	r3,-4(fp)
   81694:	1806c03a 	cmpne	r3,r3,zero
   81698:	18c03fcc 	andi	r3,r3,255
   8169c:	10c00035 	stwio	r3,0(r2)

	// start
	IOWR(ALT_VIP_MIX_0_BASE, 0x00, 0x01);
   816a0:	00c00044 	movi	r3,1
   816a4:	00800074 	movhi	r2,1
   816a8:	10804004 	addi	r2,r2,256
   816ac:	10c00035 	stwio	r3,0(r2)
}
   816b0:	e037883a 	mov	sp,fp
   816b4:	df000017 	ldw	fp,0(sp)
   816b8:	dec00104 	addi	sp,sp,4
   816bc:	f800283a 	ret

000816c0 <MIX_LayerMove>:

void MIX_LayerMove(int nLayerIndex, int x, int y){
   816c0:	defffc04 	addi	sp,sp,-16
   816c4:	df000315 	stw	fp,12(sp)
   816c8:	df000304 	addi	fp,sp,12
   816cc:	e13ffd15 	stw	r4,-12(fp)
   816d0:	e17ffe15 	stw	r5,-8(fp)
   816d4:	e1bfff15 	stw	r6,-4(fp)
	IOWR(ALT_VIP_MIX_0_BASE, nLayerIndex*3-1, x);
   816d8:	e0bffd17 	ldw	r2,-12(fp)
   816dc:	10800324 	muli	r2,r2,12
   816e0:	10bfff04 	addi	r2,r2,-4
   816e4:	1007883a 	mov	r3,r2
   816e8:	00800074 	movhi	r2,1
   816ec:	10804004 	addi	r2,r2,256
   816f0:	1885883a 	add	r2,r3,r2
   816f4:	e0fffe17 	ldw	r3,-8(fp)
   816f8:	10c00035 	stwio	r3,0(r2)
	IOWR(ALT_VIP_MIX_0_BASE, nLayerIndex*3+0, y);
   816fc:	e0bffd17 	ldw	r2,-12(fp)
   81700:	10800324 	muli	r2,r2,12
   81704:	1007883a 	mov	r3,r2
   81708:	00800074 	movhi	r2,1
   8170c:	10804004 	addi	r2,r2,256
   81710:	1885883a 	add	r2,r3,r2
   81714:	e0ffff17 	ldw	r3,-4(fp)
   81718:	10c00035 	stwio	r3,0(r2)

}
   8171c:	e037883a 	mov	sp,fp
   81720:	df000017 	ldw	fp,0(sp)
   81724:	dec00104 	addi	sp,sp,4
   81728:	f800283a 	ret

0008172c <MIX_Init>:



void MIX_Init(void){
   8172c:	deffff04 	addi	sp,sp,-4
   81730:	df000015 	stw	fp,0(sp)
   81734:	d839883a 	mov	fp,sp

	// stop
	IOWR(ALT_VIP_MIX_0_BASE, 0x00, 0x00);
   81738:	0007883a 	mov	r3,zero
   8173c:	00800074 	movhi	r2,1
   81740:	10804004 	addi	r2,r2,256
   81744:	10c00035 	stwio	r3,0(r2)
//	MIX_LayerEnable(1, FALSE);
	//MIX_LayerMove(1, 0, 0);


	// start
	IOWR(ALT_VIP_MIX_0_BASE, 0x00, 0x01);
   81748:	00c00044 	movi	r3,1
   8174c:	00800074 	movhi	r2,1
   81750:	10804004 	addi	r2,r2,256
   81754:	10c00035 	stwio	r3,0(r2)

}
   81758:	e037883a 	mov	sp,fp
   8175c:	df000017 	ldw	fp,0(sp)
   81760:	dec00104 	addi	sp,sp,4
   81764:	f800283a 	ret

00081768 <udivmodsi4>:
   81768:	2005883a 	mov	r2,r4
   8176c:	2900182e 	bgeu	r5,r4,817d0 <udivmodsi4+0x68>
   81770:	28001716 	blt	r5,zero,817d0 <udivmodsi4+0x68>
   81774:	01000804 	movi	r4,32
   81778:	00c00044 	movi	r3,1
   8177c:	00000206 	br	81788 <udivmodsi4+0x20>
   81780:	20001126 	beq	r4,zero,817c8 <udivmodsi4+0x60>
   81784:	28000516 	blt	r5,zero,8179c <udivmodsi4+0x34>
   81788:	294b883a 	add	r5,r5,r5
   8178c:	213fffc4 	addi	r4,r4,-1
   81790:	18c7883a 	add	r3,r3,r3
   81794:	28bffa36 	bltu	r5,r2,81780 <udivmodsi4+0x18>
   81798:	18000b26 	beq	r3,zero,817c8 <udivmodsi4+0x60>
   8179c:	0009883a 	mov	r4,zero
   817a0:	11400236 	bltu	r2,r5,817ac <udivmodsi4+0x44>
   817a4:	1145c83a 	sub	r2,r2,r5
   817a8:	20c8b03a 	or	r4,r4,r3
   817ac:	1806d07a 	srli	r3,r3,1
   817b0:	280ad07a 	srli	r5,r5,1
   817b4:	183ffa1e 	bne	r3,zero,817a0 <udivmodsi4+0x38>
   817b8:	3000021e 	bne	r6,zero,817c4 <udivmodsi4+0x5c>
   817bc:	2005883a 	mov	r2,r4
   817c0:	f800283a 	ret
   817c4:	f800283a 	ret
   817c8:	0009883a 	mov	r4,zero
   817cc:	003ffa06 	br	817b8 <udivmodsi4+0x50>
   817d0:	00c00044 	movi	r3,1
   817d4:	0009883a 	mov	r4,zero
   817d8:	003ff106 	br	817a0 <udivmodsi4+0x38>

000817dc <__divsi3>:
   817dc:	defffe04 	addi	sp,sp,-8
   817e0:	dfc00115 	stw	ra,4(sp)
   817e4:	dc000015 	stw	r16,0(sp)
   817e8:	20000a16 	blt	r4,zero,81814 <__divsi3+0x38>
   817ec:	0021883a 	mov	r16,zero
   817f0:	28000b16 	blt	r5,zero,81820 <__divsi3+0x44>
   817f4:	000d883a 	mov	r6,zero
   817f8:	00817680 	call	81768 <udivmodsi4>
   817fc:	80000126 	beq	r16,zero,81804 <__divsi3+0x28>
   81800:	0085c83a 	sub	r2,zero,r2
   81804:	dfc00117 	ldw	ra,4(sp)
   81808:	dc000017 	ldw	r16,0(sp)
   8180c:	dec00204 	addi	sp,sp,8
   81810:	f800283a 	ret
   81814:	0109c83a 	sub	r4,zero,r4
   81818:	04000044 	movi	r16,1
   8181c:	283ff50e 	bge	r5,zero,817f4 <__divsi3+0x18>
   81820:	014bc83a 	sub	r5,zero,r5
   81824:	8400005c 	xori	r16,r16,1
   81828:	003ff206 	br	817f4 <__divsi3+0x18>

0008182c <__modsi3>:
   8182c:	deffff04 	addi	sp,sp,-4
   81830:	dfc00015 	stw	ra,0(sp)
   81834:	20000516 	blt	r4,zero,8184c <__modsi3+0x20>
   81838:	28000c16 	blt	r5,zero,8186c <__modsi3+0x40>
   8183c:	01800044 	movi	r6,1
   81840:	dfc00017 	ldw	ra,0(sp)
   81844:	dec00104 	addi	sp,sp,4
   81848:	00817681 	jmpi	81768 <udivmodsi4>
   8184c:	0109c83a 	sub	r4,zero,r4
   81850:	28000b16 	blt	r5,zero,81880 <__modsi3+0x54>
   81854:	01800044 	movi	r6,1
   81858:	00817680 	call	81768 <udivmodsi4>
   8185c:	0085c83a 	sub	r2,zero,r2
   81860:	dfc00017 	ldw	ra,0(sp)
   81864:	dec00104 	addi	sp,sp,4
   81868:	f800283a 	ret
   8186c:	014bc83a 	sub	r5,zero,r5
   81870:	01800044 	movi	r6,1
   81874:	dfc00017 	ldw	ra,0(sp)
   81878:	dec00104 	addi	sp,sp,4
   8187c:	00817681 	jmpi	81768 <udivmodsi4>
   81880:	014bc83a 	sub	r5,zero,r5
   81884:	003ff306 	br	81854 <__modsi3+0x28>

00081888 <__udivsi3>:
   81888:	000d883a 	mov	r6,zero
   8188c:	00817681 	jmpi	81768 <udivmodsi4>

00081890 <__umodsi3>:
   81890:	01800044 	movi	r6,1
   81894:	00817681 	jmpi	81768 <udivmodsi4>

00081898 <memcpy>:
   81898:	00c003c4 	movi	r3,15
   8189c:	2005883a 	mov	r2,r4
   818a0:	3009883a 	mov	r4,r6
   818a4:	1980032e 	bgeu	r3,r6,818b4 <memcpy+0x1c>
   818a8:	2886b03a 	or	r3,r5,r2
   818ac:	18c000cc 	andi	r3,r3,3
   818b0:	18000926 	beq	r3,zero,818d8 <memcpy+0x40>
   818b4:	1007883a 	mov	r3,r2
   818b8:	290f883a 	add	r7,r5,r4
   818bc:	20000526 	beq	r4,zero,818d4 <memcpy+0x3c>
   818c0:	29800003 	ldbu	r6,0(r5)
   818c4:	18c00044 	addi	r3,r3,1
   818c8:	29400044 	addi	r5,r5,1
   818cc:	19bfffc5 	stb	r6,-1(r3)
   818d0:	29fffb1e 	bne	r5,r7,818c0 <memcpy+0x28>
   818d4:	f800283a 	ret
   818d8:	327ffc04 	addi	r9,r6,-16
   818dc:	4812d13a 	srli	r9,r9,4
   818e0:	11000404 	addi	r4,r2,16
   818e4:	1007883a 	mov	r3,r2
   818e8:	4810913a 	slli	r8,r9,4
   818ec:	280f883a 	mov	r7,r5
   818f0:	2209883a 	add	r4,r4,r8
   818f4:	3a000017 	ldw	r8,0(r7)
   818f8:	18c00404 	addi	r3,r3,16
   818fc:	39c00404 	addi	r7,r7,16
   81900:	1a3ffc15 	stw	r8,-16(r3)
   81904:	3a3ffd17 	ldw	r8,-12(r7)
   81908:	1a3ffd15 	stw	r8,-12(r3)
   8190c:	3a3ffe17 	ldw	r8,-8(r7)
   81910:	1a3ffe15 	stw	r8,-8(r3)
   81914:	3a3fff17 	ldw	r8,-4(r7)
   81918:	1a3fff15 	stw	r8,-4(r3)
   8191c:	193ff51e 	bne	r3,r4,818f4 <memcpy+0x5c>
   81920:	49c00044 	addi	r7,r9,1
   81924:	380e913a 	slli	r7,r7,4
   81928:	310003cc 	andi	r4,r6,15
   8192c:	018000c4 	movi	r6,3
   81930:	11c7883a 	add	r3,r2,r7
   81934:	29cb883a 	add	r5,r5,r7
   81938:	313fdf2e 	bgeu	r6,r4,818b8 <memcpy+0x20>
   8193c:	213fff04 	addi	r4,r4,-4
   81940:	2014d0ba 	srli	r10,r4,2
   81944:	1a400104 	addi	r9,r3,4
   81948:	180d883a 	mov	r6,r3
   8194c:	528f883a 	add	r7,r10,r10
   81950:	39cf883a 	add	r7,r7,r7
   81954:	49d3883a 	add	r9,r9,r7
   81958:	280f883a 	mov	r7,r5
   8195c:	3a000017 	ldw	r8,0(r7)
   81960:	31800104 	addi	r6,r6,4
   81964:	39c00104 	addi	r7,r7,4
   81968:	323fff15 	stw	r8,-4(r6)
   8196c:	327ffb1e 	bne	r6,r9,8195c <memcpy+0xc4>
   81970:	51800044 	addi	r6,r10,1
   81974:	52bfff24 	muli	r10,r10,-4
   81978:	318d883a 	add	r6,r6,r6
   8197c:	318d883a 	add	r6,r6,r6
   81980:	5109883a 	add	r4,r10,r4
   81984:	298b883a 	add	r5,r5,r6
   81988:	1987883a 	add	r3,r3,r6
   8198c:	003fca06 	br	818b8 <memcpy+0x20>

00081990 <_printf_r>:
   81990:	defffd04 	addi	sp,sp,-12
   81994:	dfc00015 	stw	ra,0(sp)
   81998:	d9800115 	stw	r6,4(sp)
   8199c:	d9c00215 	stw	r7,8(sp)
   819a0:	280d883a 	mov	r6,r5
   819a4:	21400217 	ldw	r5,8(r4)
   819a8:	d9c00104 	addi	r7,sp,4
   819ac:	0081bf00 	call	81bf0 <___vfprintf_internal_r>
   819b0:	dfc00017 	ldw	ra,0(sp)
   819b4:	dec00304 	addi	sp,sp,12
   819b8:	f800283a 	ret

000819bc <printf>:
   819bc:	defffc04 	addi	sp,sp,-16
   819c0:	dfc00015 	stw	ra,0(sp)
   819c4:	d9400115 	stw	r5,4(sp)
   819c8:	d9800215 	stw	r6,8(sp)
   819cc:	d9c00315 	stw	r7,12(sp)
   819d0:	00800274 	movhi	r2,9
   819d4:	10bfef04 	addi	r2,r2,-68
   819d8:	10800017 	ldw	r2,0(r2)
   819dc:	200b883a 	mov	r5,r4
   819e0:	d9800104 	addi	r6,sp,4
   819e4:	11000217 	ldw	r4,8(r2)
   819e8:	00839e80 	call	839e8 <__vfprintf_internal>
   819ec:	dfc00017 	ldw	ra,0(sp)
   819f0:	dec00404 	addi	sp,sp,16
   819f4:	f800283a 	ret

000819f8 <_putchar_r>:
   819f8:	21800217 	ldw	r6,8(r4)
   819fc:	0087f901 	jmpi	87f90 <_putc_r>

00081a00 <putchar>:
   81a00:	00800274 	movhi	r2,9
   81a04:	10bfef04 	addi	r2,r2,-68
   81a08:	10800017 	ldw	r2,0(r2)
   81a0c:	200b883a 	mov	r5,r4
   81a10:	11800217 	ldw	r6,8(r2)
   81a14:	1009883a 	mov	r4,r2
   81a18:	0087f901 	jmpi	87f90 <_putc_r>

00081a1c <_puts_r>:
   81a1c:	defff604 	addi	sp,sp,-40
   81a20:	dc400815 	stw	r17,32(sp)
   81a24:	2023883a 	mov	r17,r4
   81a28:	2809883a 	mov	r4,r5
   81a2c:	dc000715 	stw	r16,28(sp)
   81a30:	dfc00915 	stw	ra,36(sp)
   81a34:	2821883a 	mov	r16,r5
   81a38:	0081b300 	call	81b30 <strlen>
   81a3c:	10c00044 	addi	r3,r2,1
   81a40:	d8800115 	stw	r2,4(sp)
   81a44:	89400217 	ldw	r5,8(r17)
   81a48:	00800274 	movhi	r2,9
   81a4c:	10b86004 	addi	r2,r2,-7808
   81a50:	d8800215 	stw	r2,8(sp)
   81a54:	00800044 	movi	r2,1
   81a58:	d8800315 	stw	r2,12(sp)
   81a5c:	8809883a 	mov	r4,r17
   81a60:	00800084 	movi	r2,2
   81a64:	d9800404 	addi	r6,sp,16
   81a68:	dc000015 	stw	r16,0(sp)
   81a6c:	d8c00615 	stw	r3,24(sp)
   81a70:	dec00415 	stw	sp,16(sp)
   81a74:	d8800515 	stw	r2,20(sp)
   81a78:	0085ca00 	call	85ca0 <__sfvwrite_r>
   81a7c:	1000061e 	bne	r2,zero,81a98 <_puts_r+0x7c>
   81a80:	00800284 	movi	r2,10
   81a84:	dfc00917 	ldw	ra,36(sp)
   81a88:	dc400817 	ldw	r17,32(sp)
   81a8c:	dc000717 	ldw	r16,28(sp)
   81a90:	dec00a04 	addi	sp,sp,40
   81a94:	f800283a 	ret
   81a98:	00bfffc4 	movi	r2,-1
   81a9c:	003ff906 	br	81a84 <_puts_r+0x68>

00081aa0 <puts>:
   81aa0:	00800274 	movhi	r2,9
   81aa4:	10bfef04 	addi	r2,r2,-68
   81aa8:	200b883a 	mov	r5,r4
   81aac:	11000017 	ldw	r4,0(r2)
   81ab0:	0081a1c1 	jmpi	81a1c <_puts_r>

00081ab4 <srand>:
   81ab4:	00800274 	movhi	r2,9
   81ab8:	10bfef04 	addi	r2,r2,-68
   81abc:	10800017 	ldw	r2,0(r2)
   81ac0:	11002915 	stw	r4,164(r2)
   81ac4:	10002a15 	stw	zero,168(r2)
   81ac8:	f800283a 	ret

00081acc <rand>:
   81acc:	defffe04 	addi	sp,sp,-8
   81ad0:	00800274 	movhi	r2,9
   81ad4:	10bfef04 	addi	r2,r2,-68
   81ad8:	dc000015 	stw	r16,0(sp)
   81adc:	14000017 	ldw	r16,0(r2)
   81ae0:	dfc00115 	stw	ra,4(sp)
   81ae4:	01932574 	movhi	r6,19605
   81ae8:	319fcb44 	addi	r6,r6,32557
   81aec:	81002917 	ldw	r4,164(r16)
   81af0:	81402a17 	ldw	r5,168(r16)
   81af4:	01d614b4 	movhi	r7,22610
   81af8:	39fd0b44 	addi	r7,r7,-3027
   81afc:	0088fbc0 	call	88fbc <__muldi3>
   81b00:	11000044 	addi	r4,r2,1
   81b04:	2085803a 	cmpltu	r2,r4,r2
   81b08:	10c7883a 	add	r3,r2,r3
   81b0c:	00a00034 	movhi	r2,32768
   81b10:	10bfffc4 	addi	r2,r2,-1
   81b14:	1884703a 	and	r2,r3,r2
   81b18:	81002915 	stw	r4,164(r16)
   81b1c:	80c02a15 	stw	r3,168(r16)
   81b20:	dfc00117 	ldw	ra,4(sp)
   81b24:	dc000017 	ldw	r16,0(sp)
   81b28:	dec00204 	addi	sp,sp,8
   81b2c:	f800283a 	ret

00081b30 <strlen>:
   81b30:	208000cc 	andi	r2,r4,3
   81b34:	10001f1e 	bne	r2,zero,81bb4 <strlen+0x84>
   81b38:	20800017 	ldw	r2,0(r4)
   81b3c:	01ffbff4 	movhi	r7,65279
   81b40:	39ffbfc4 	addi	r7,r7,-257
   81b44:	01a02074 	movhi	r6,32897
   81b48:	31a02004 	addi	r6,r6,-32640
   81b4c:	11c7883a 	add	r3,r2,r7
   81b50:	0084303a 	nor	r2,zero,r2
   81b54:	1886703a 	and	r3,r3,r2
   81b58:	1986703a 	and	r3,r3,r6
   81b5c:	2005883a 	mov	r2,r4
   81b60:	1800101e 	bne	r3,zero,81ba4 <strlen+0x74>
   81b64:	10800104 	addi	r2,r2,4
   81b68:	10c00017 	ldw	r3,0(r2)
   81b6c:	19cb883a 	add	r5,r3,r7
   81b70:	00c6303a 	nor	r3,zero,r3
   81b74:	28c6703a 	and	r3,r5,r3
   81b78:	1986703a 	and	r3,r3,r6
   81b7c:	1800091e 	bne	r3,zero,81ba4 <strlen+0x74>
   81b80:	10800104 	addi	r2,r2,4
   81b84:	10c00017 	ldw	r3,0(r2)
   81b88:	19cb883a 	add	r5,r3,r7
   81b8c:	00c6303a 	nor	r3,zero,r3
   81b90:	28c6703a 	and	r3,r5,r3
   81b94:	1986703a 	and	r3,r3,r6
   81b98:	183ff226 	beq	r3,zero,81b64 <strlen+0x34>
   81b9c:	00000106 	br	81ba4 <strlen+0x74>
   81ba0:	10800044 	addi	r2,r2,1
   81ba4:	10c00007 	ldb	r3,0(r2)
   81ba8:	183ffd1e 	bne	r3,zero,81ba0 <strlen+0x70>
   81bac:	1105c83a 	sub	r2,r2,r4
   81bb0:	f800283a 	ret
   81bb4:	2005883a 	mov	r2,r4
   81bb8:	003ffa06 	br	81ba4 <strlen+0x74>

00081bbc <__sprint_r>:
   81bbc:	30800217 	ldw	r2,8(r6)
   81bc0:	defffe04 	addi	sp,sp,-8
   81bc4:	dc000015 	stw	r16,0(sp)
   81bc8:	dfc00115 	stw	ra,4(sp)
   81bcc:	3021883a 	mov	r16,r6
   81bd0:	10000226 	beq	r2,zero,81bdc <__sprint_r+0x20>
   81bd4:	0085ca00 	call	85ca0 <__sfvwrite_r>
   81bd8:	80000215 	stw	zero,8(r16)
   81bdc:	80000115 	stw	zero,4(r16)
   81be0:	dfc00117 	ldw	ra,4(sp)
   81be4:	dc000017 	ldw	r16,0(sp)
   81be8:	dec00204 	addi	sp,sp,8
   81bec:	f800283a 	ret

00081bf0 <___vfprintf_internal_r>:
   81bf0:	defeb904 	addi	sp,sp,-1308
   81bf4:	dc013d15 	stw	r16,1268(sp)
   81bf8:	d9013015 	stw	r4,1216(sp)
   81bfc:	dfc14615 	stw	ra,1304(sp)
   81c00:	df014515 	stw	fp,1300(sp)
   81c04:	ddc14415 	stw	r23,1296(sp)
   81c08:	dd814315 	stw	r22,1292(sp)
   81c0c:	dd414215 	stw	r21,1288(sp)
   81c10:	dd014115 	stw	r20,1284(sp)
   81c14:	dcc14015 	stw	r19,1280(sp)
   81c18:	dc813f15 	stw	r18,1276(sp)
   81c1c:	dc413e15 	stw	r17,1272(sp)
   81c20:	d9412915 	stw	r5,1188(sp)
   81c24:	3021883a 	mov	r16,r6
   81c28:	d9c12d15 	stw	r7,1204(sp)
   81c2c:	008638c0 	call	8638c <_localeconv_r>
   81c30:	10800017 	ldw	r2,0(r2)
   81c34:	d9013017 	ldw	r4,1216(sp)
   81c38:	d8013315 	stw	zero,1228(sp)
   81c3c:	d8813715 	stw	r2,1244(sp)
   81c40:	d8013415 	stw	zero,1232(sp)
   81c44:	20000226 	beq	r4,zero,81c50 <___vfprintf_internal_r+0x60>
   81c48:	20800e17 	ldw	r2,56(r4)
   81c4c:	10019826 	beq	r2,zero,822b0 <___vfprintf_internal_r+0x6c0>
   81c50:	da012917 	ldw	r8,1188(sp)
   81c54:	4080030b 	ldhu	r2,12(r8)
   81c58:	10c0020c 	andi	r3,r2,8
   81c5c:	18ffffcc 	andi	r3,r3,65535
   81c60:	18e0001c 	xori	r3,r3,32768
   81c64:	18e00004 	addi	r3,r3,-32768
   81c68:	18013a26 	beq	r3,zero,82154 <___vfprintf_internal_r+0x564>
   81c6c:	40c00417 	ldw	r3,16(r8)
   81c70:	18013826 	beq	r3,zero,82154 <___vfprintf_internal_r+0x564>
   81c74:	1100068c 	andi	r4,r2,26
   81c78:	00c00284 	movi	r3,10
   81c7c:	20c13e26 	beq	r4,r3,82178 <___vfprintf_internal_r+0x588>
   81c80:	da010dc4 	addi	r8,sp,1079
   81c84:	d8800404 	addi	r2,sp,16
   81c88:	da012615 	stw	r8,1176(sp)
   81c8c:	d8811b15 	stw	r2,1132(sp)
   81c90:	1013883a 	mov	r9,r2
   81c94:	d8812617 	ldw	r2,1176(sp)
   81c98:	da010e04 	addi	r8,sp,1080
   81c9c:	dc413017 	ldw	r17,1216(sp)
   81ca0:	da012715 	stw	r8,1180(sp)
   81ca4:	4091c83a 	sub	r8,r8,r2
   81ca8:	d8011d15 	stw	zero,1140(sp)
   81cac:	d8011c15 	stw	zero,1136(sp)
   81cb0:	802b883a 	mov	r21,r16
   81cb4:	d8013215 	stw	zero,1224(sp)
   81cb8:	d8013615 	stw	zero,1240(sp)
   81cbc:	d8013515 	stw	zero,1236(sp)
   81cc0:	d8012c15 	stw	zero,1200(sp)
   81cc4:	da013915 	stw	r8,1252(sp)
   81cc8:	a8800007 	ldb	r2,0(r21)
   81ccc:	1002ec26 	beq	r2,zero,82880 <___vfprintf_internal_r+0xc90>
   81cd0:	00c00944 	movi	r3,37
   81cd4:	a825883a 	mov	r18,r21
   81cd8:	10c0021e 	bne	r2,r3,81ce4 <___vfprintf_internal_r+0xf4>
   81cdc:	00001406 	br	81d30 <___vfprintf_internal_r+0x140>
   81ce0:	10c00326 	beq	r2,r3,81cf0 <___vfprintf_internal_r+0x100>
   81ce4:	94800044 	addi	r18,r18,1
   81ce8:	90800007 	ldb	r2,0(r18)
   81cec:	103ffc1e 	bne	r2,zero,81ce0 <___vfprintf_internal_r+0xf0>
   81cf0:	9561c83a 	sub	r16,r18,r21
   81cf4:	80000e26 	beq	r16,zero,81d30 <___vfprintf_internal_r+0x140>
   81cf8:	da011d17 	ldw	r8,1140(sp)
   81cfc:	d8c11c17 	ldw	r3,1136(sp)
   81d00:	4d400015 	stw	r21,0(r9)
   81d04:	4c000115 	stw	r16,4(r9)
   81d08:	4411883a 	add	r8,r8,r16
   81d0c:	18c00044 	addi	r3,r3,1
   81d10:	da011d15 	stw	r8,1140(sp)
   81d14:	d8c11c15 	stw	r3,1136(sp)
   81d18:	008001c4 	movi	r2,7
   81d1c:	10c15d16 	blt	r2,r3,82294 <___vfprintf_internal_r+0x6a4>
   81d20:	4a400204 	addi	r9,r9,8
   81d24:	d8812c17 	ldw	r2,1200(sp)
   81d28:	1405883a 	add	r2,r2,r16
   81d2c:	d8812c15 	stw	r2,1200(sp)
   81d30:	90800007 	ldb	r2,0(r18)
   81d34:	10013b26 	beq	r2,zero,82224 <___vfprintf_internal_r+0x634>
   81d38:	95400044 	addi	r21,r18,1
   81d3c:	94800047 	ldb	r18,1(r18)
   81d40:	d8012585 	stb	zero,1174(sp)
   81d44:	073fffc4 	movi	fp,-1
   81d48:	d8012e15 	stw	zero,1208(sp)
   81d4c:	0021883a 	mov	r16,zero
   81d50:	00c01604 	movi	r3,88
   81d54:	01400244 	movi	r5,9
   81d58:	02800a84 	movi	r10,42
   81d5c:	01c01b04 	movi	r7,108
   81d60:	01800ac4 	movi	r6,43
   81d64:	02c00804 	movi	r11,32
   81d68:	ad400044 	addi	r21,r21,1
   81d6c:	90bff804 	addi	r2,r18,-32
   81d70:	1880092e 	bgeu	r3,r2,81d98 <___vfprintf_internal_r+0x1a8>
   81d74:	90012b26 	beq	r18,zero,82224 <___vfprintf_internal_r+0x634>
   81d78:	00c00044 	movi	r3,1
   81d7c:	d8c12815 	stw	r3,1184(sp)
   81d80:	dc810405 	stb	r18,1040(sp)
   81d84:	d8012585 	stb	zero,1174(sp)
   81d88:	d8c12b15 	stw	r3,1196(sp)
   81d8c:	dcc10404 	addi	r19,sp,1040
   81d90:	d8013115 	stw	zero,1220(sp)
   81d94:	00008806 	br	81fb8 <___vfprintf_internal_r+0x3c8>
   81d98:	1085883a 	add	r2,r2,r2
   81d9c:	1085883a 	add	r2,r2,r2
   81da0:	01000234 	movhi	r4,8
   81da4:	21076d04 	addi	r4,r4,7604
   81da8:	1105883a 	add	r2,r2,r4
   81dac:	10800017 	ldw	r2,0(r2)
   81db0:	1000683a 	jmp	r2
   81db4:	00082368 	cmpgeui	zero,zero,8333
   81db8:	00081d74 	movhi	zero,8309
   81dbc:	00081d74 	movhi	zero,8309
   81dc0:	0008237c 	xorhi	zero,zero,8333
   81dc4:	00081d74 	movhi	zero,8309
   81dc8:	00081d74 	movhi	zero,8309
   81dcc:	00081d74 	movhi	zero,8309
   81dd0:	00081d74 	movhi	zero,8309
   81dd4:	00081d74 	movhi	zero,8309
   81dd8:	00081d74 	movhi	zero,8309
   81ddc:	00082464 	muli	zero,zero,8337
   81de0:	00082320 	cmpeqi	zero,zero,8332
   81de4:	00081d74 	movhi	zero,8309
   81de8:	00082148 	cmpgei	zero,zero,8325
   81dec:	0008232c 	andhi	zero,zero,8332
   81df0:	00081d74 	movhi	zero,8309
   81df4:	00082388 	cmpgei	zero,zero,8334
   81df8:	00082488 	cmpgei	zero,zero,8338
   81dfc:	00082488 	cmpgei	zero,zero,8338
   81e00:	00082488 	cmpgei	zero,zero,8338
   81e04:	00082488 	cmpgei	zero,zero,8338
   81e08:	00082488 	cmpgei	zero,zero,8338
   81e0c:	00082488 	cmpgei	zero,zero,8338
   81e10:	00082488 	cmpgei	zero,zero,8338
   81e14:	00082488 	cmpgei	zero,zero,8338
   81e18:	00082488 	cmpgei	zero,zero,8338
   81e1c:	00081d74 	movhi	zero,8309
   81e20:	00081d74 	movhi	zero,8309
   81e24:	00081d74 	movhi	zero,8309
   81e28:	00081d74 	movhi	zero,8309
   81e2c:	00081d74 	movhi	zero,8309
   81e30:	00081d74 	movhi	zero,8309
   81e34:	00081d74 	movhi	zero,8309
   81e38:	00081d74 	movhi	zero,8309
   81e3c:	00081d74 	movhi	zero,8309
   81e40:	00081d74 	movhi	zero,8309
   81e44:	000820e4 	muli	zero,zero,8323
   81e48:	000824b0 	cmpltui	zero,zero,8338
   81e4c:	00081d74 	movhi	zero,8309
   81e50:	000824b0 	cmpltui	zero,zero,8338
   81e54:	00081d74 	movhi	zero,8309
   81e58:	00081d74 	movhi	zero,8309
   81e5c:	00081d74 	movhi	zero,8309
   81e60:	00081d74 	movhi	zero,8309
   81e64:	00082620 	cmpeqi	zero,zero,8344
   81e68:	00081d74 	movhi	zero,8309
   81e6c:	00081d74 	movhi	zero,8309
   81e70:	000820ac 	andhi	zero,zero,8322
   81e74:	00081d74 	movhi	zero,8309
   81e78:	00081d74 	movhi	zero,8309
   81e7c:	00081d74 	movhi	zero,8309
   81e80:	00081d74 	movhi	zero,8309
   81e84:	00081d74 	movhi	zero,8309
   81e88:	00081f18 	cmpnei	zero,zero,8316
   81e8c:	00081d74 	movhi	zero,8309
   81e90:	00081d74 	movhi	zero,8309
   81e94:	00082394 	movui	zero,8334
   81e98:	00081d74 	movhi	zero,8309
   81e9c:	00081d74 	movhi	zero,8309
   81ea0:	00081d74 	movhi	zero,8309
   81ea4:	00081d74 	movhi	zero,8309
   81ea8:	00081d74 	movhi	zero,8309
   81eac:	00081d74 	movhi	zero,8309
   81eb0:	00081d74 	movhi	zero,8309
   81eb4:	00081d74 	movhi	zero,8309
   81eb8:	00081d74 	movhi	zero,8309
   81ebc:	00081d74 	movhi	zero,8309
   81ec0:	00082408 	cmpgei	zero,zero,8336
   81ec4:	000820e8 	cmpgeui	zero,zero,8323
   81ec8:	000824b0 	cmpltui	zero,zero,8338
   81ecc:	000824b0 	cmpltui	zero,zero,8338
   81ed0:	000824b0 	cmpltui	zero,zero,8338
   81ed4:	000823e8 	cmpgeui	zero,zero,8335
   81ed8:	000820e8 	cmpgeui	zero,zero,8323
   81edc:	00081d74 	movhi	zero,8309
   81ee0:	00081d74 	movhi	zero,8309
   81ee4:	000823f4 	movhi	zero,8335
   81ee8:	00081d74 	movhi	zero,8309
   81eec:	00082438 	rdprs	zero,zero,8336
   81ef0:	000820b0 	cmpltui	zero,zero,8322
   81ef4:	00082538 	rdprs	zero,zero,8340
   81ef8:	00082584 	movi	zero,8342
   81efc:	00081d74 	movhi	zero,8309
   81f00:	00082590 	cmplti	zero,zero,8342
   81f04:	00081d74 	movhi	zero,8309
   81f08:	00081f1c 	xori	zero,zero,8316
   81f0c:	00081d74 	movhi	zero,8309
   81f10:	00081d74 	movhi	zero,8309
   81f14:	000825ec 	andhi	zero,zero,8343
   81f18:	84000414 	ori	r16,r16,16
   81f1c:	8080080c 	andi	r2,r16,32
   81f20:	1000f51e 	bne	r2,zero,822f8 <___vfprintf_internal_r+0x708>
   81f24:	8080040c 	andi	r2,r16,16
   81f28:	10042c26 	beq	r2,zero,82fdc <___vfprintf_internal_r+0x13ec>
   81f2c:	da012d17 	ldw	r8,1204(sp)
   81f30:	002d883a 	mov	r22,zero
   81f34:	00c00044 	movi	r3,1
   81f38:	45c00017 	ldw	r23,0(r8)
   81f3c:	42000104 	addi	r8,r8,4
   81f40:	da012d15 	stw	r8,1204(sp)
   81f44:	b805883a 	mov	r2,r23
   81f48:	d8012585 	stb	zero,1174(sp)
   81f4c:	e0000216 	blt	fp,zero,81f58 <___vfprintf_internal_r+0x368>
   81f50:	013fdfc4 	movi	r4,-129
   81f54:	8120703a 	and	r16,r16,r4
   81f58:	1002671e 	bne	r2,zero,828f8 <___vfprintf_internal_r+0xd08>
   81f5c:	e002661e 	bne	fp,zero,828f8 <___vfprintf_internal_r+0xd08>
   81f60:	18c03fcc 	andi	r3,r3,255
   81f64:	1803561e 	bne	r3,zero,82cc0 <___vfprintf_internal_r+0x10d0>
   81f68:	8080004c 	andi	r2,r16,1
   81f6c:	10035426 	beq	r2,zero,82cc0 <___vfprintf_internal_r+0x10d0>
   81f70:	da013917 	ldw	r8,1252(sp)
   81f74:	00800c04 	movi	r2,48
   81f78:	d8810dc5 	stb	r2,1079(sp)
   81f7c:	da012b15 	stw	r8,1196(sp)
   81f80:	dcc10dc4 	addi	r19,sp,1079
   81f84:	d8812b17 	ldw	r2,1196(sp)
   81f88:	d8812815 	stw	r2,1184(sp)
   81f8c:	1700010e 	bge	r2,fp,81f94 <___vfprintf_internal_r+0x3a4>
   81f90:	df012815 	stw	fp,1184(sp)
   81f94:	d8812583 	ldbu	r2,1174(sp)
   81f98:	df013115 	stw	fp,1220(sp)
   81f9c:	10803fcc 	andi	r2,r2,255
   81fa0:	1080201c 	xori	r2,r2,128
   81fa4:	10bfe004 	addi	r2,r2,-128
   81fa8:	10000326 	beq	r2,zero,81fb8 <___vfprintf_internal_r+0x3c8>
   81fac:	da012817 	ldw	r8,1184(sp)
   81fb0:	42000044 	addi	r8,r8,1
   81fb4:	da012815 	stw	r8,1184(sp)
   81fb8:	80c0008c 	andi	r3,r16,2
   81fbc:	d8c12a15 	stw	r3,1192(sp)
   81fc0:	18000326 	beq	r3,zero,81fd0 <___vfprintf_internal_r+0x3e0>
   81fc4:	da012817 	ldw	r8,1184(sp)
   81fc8:	42000084 	addi	r8,r8,2
   81fcc:	da012815 	stw	r8,1184(sp)
   81fd0:	80c0210c 	andi	r3,r16,132
   81fd4:	d8c12f15 	stw	r3,1212(sp)
   81fd8:	1801941e 	bne	r3,zero,8262c <___vfprintf_internal_r+0xa3c>
   81fdc:	da012e17 	ldw	r8,1208(sp)
   81fe0:	d8c12817 	ldw	r3,1184(sp)
   81fe4:	40edc83a 	sub	r22,r8,r3
   81fe8:	0581900e 	bge	zero,r22,8262c <___vfprintf_internal_r+0xa3c>
   81fec:	02800404 	movi	r10,16
   81ff0:	da011d17 	ldw	r8,1140(sp)
   81ff4:	d8c11c17 	ldw	r3,1136(sp)
   81ff8:	05c00274 	movhi	r23,9
   81ffc:	bdf87184 	addi	r23,r23,-7738
   82000:	5580200e 	bge	r10,r22,82084 <___vfprintf_internal_r+0x494>
   82004:	dc813815 	stw	r18,1248(sp)
   82008:	5039883a 	mov	fp,r10
   8200c:	b825883a 	mov	r18,r23
   82010:	050001c4 	movi	r20,7
   82014:	b02f883a 	mov	r23,r22
   82018:	802d883a 	mov	r22,r16
   8201c:	dc012917 	ldw	r16,1188(sp)
   82020:	00000306 	br	82030 <___vfprintf_internal_r+0x440>
   82024:	bdfffc04 	addi	r23,r23,-16
   82028:	4a400204 	addi	r9,r9,8
   8202c:	e5c0110e 	bge	fp,r23,82074 <___vfprintf_internal_r+0x484>
   82030:	4c800015 	stw	r18,0(r9)
   82034:	4f000115 	stw	fp,4(r9)
   82038:	42000404 	addi	r8,r8,16
   8203c:	18c00044 	addi	r3,r3,1
   82040:	da011d15 	stw	r8,1140(sp)
   82044:	d8c11c15 	stw	r3,1136(sp)
   82048:	a0fff60e 	bge	r20,r3,82024 <___vfprintf_internal_r+0x434>
   8204c:	8809883a 	mov	r4,r17
   82050:	800b883a 	mov	r5,r16
   82054:	d9811b04 	addi	r6,sp,1132
   82058:	0081bbc0 	call	81bbc <__sprint_r>
   8205c:	1000771e 	bne	r2,zero,8223c <___vfprintf_internal_r+0x64c>
   82060:	bdfffc04 	addi	r23,r23,-16
   82064:	da011d17 	ldw	r8,1140(sp)
   82068:	d8c11c17 	ldw	r3,1136(sp)
   8206c:	da400404 	addi	r9,sp,16
   82070:	e5ffef16 	blt	fp,r23,82030 <___vfprintf_internal_r+0x440>
   82074:	b021883a 	mov	r16,r22
   82078:	b82d883a 	mov	r22,r23
   8207c:	902f883a 	mov	r23,r18
   82080:	dc813817 	ldw	r18,1248(sp)
   82084:	4dc00015 	stw	r23,0(r9)
   82088:	4d800115 	stw	r22,4(r9)
   8208c:	4591883a 	add	r8,r8,r22
   82090:	18c00044 	addi	r3,r3,1
   82094:	da011d15 	stw	r8,1140(sp)
   82098:	d8c11c15 	stw	r3,1136(sp)
   8209c:	008001c4 	movi	r2,7
   820a0:	10c36d16 	blt	r2,r3,82e58 <___vfprintf_internal_r+0x1268>
   820a4:	4a400204 	addi	r9,r9,8
   820a8:	00016206 	br	82634 <___vfprintf_internal_r+0xa44>
   820ac:	84000414 	ori	r16,r16,16
   820b0:	8080080c 	andi	r2,r16,32
   820b4:	1000801e 	bne	r2,zero,822b8 <___vfprintf_internal_r+0x6c8>
   820b8:	8080040c 	andi	r2,r16,16
   820bc:	1003da26 	beq	r2,zero,83028 <___vfprintf_internal_r+0x1438>
   820c0:	d8c12d17 	ldw	r3,1204(sp)
   820c4:	002d883a 	mov	r22,zero
   820c8:	1dc00017 	ldw	r23,0(r3)
   820cc:	18c00104 	addi	r3,r3,4
   820d0:	d8c12d15 	stw	r3,1204(sp)
   820d4:	b805883a 	mov	r2,r23
   820d8:	0007883a 	mov	r3,zero
   820dc:	d8012585 	stb	zero,1174(sp)
   820e0:	003f9a06 	br	81f4c <___vfprintf_internal_r+0x35c>
   820e4:	84000414 	ori	r16,r16,16
   820e8:	8080080c 	andi	r2,r16,32
   820ec:	10007b1e 	bne	r2,zero,822dc <___vfprintf_internal_r+0x6ec>
   820f0:	8080040c 	andi	r2,r16,16
   820f4:	1003ed26 	beq	r2,zero,830ac <___vfprintf_internal_r+0x14bc>
   820f8:	d9012d17 	ldw	r4,1204(sp)
   820fc:	25c00017 	ldw	r23,0(r4)
   82100:	21000104 	addi	r4,r4,4
   82104:	d9012d15 	stw	r4,1204(sp)
   82108:	b82dd7fa 	srai	r22,r23,31
   8210c:	b005883a 	mov	r2,r22
   82110:	1003230e 	bge	r2,zero,82da0 <___vfprintf_internal_r+0x11b0>
   82114:	05efc83a 	sub	r23,zero,r23
   82118:	b804c03a 	cmpne	r2,r23,zero
   8211c:	05adc83a 	sub	r22,zero,r22
   82120:	b0adc83a 	sub	r22,r22,r2
   82124:	00800b44 	movi	r2,45
   82128:	d8812585 	stb	r2,1174(sp)
   8212c:	00c00044 	movi	r3,1
   82130:	bd84b03a 	or	r2,r23,r22
   82134:	003f8506 	br	81f4c <___vfprintf_internal_r+0x35c>
   82138:	da012e17 	ldw	r8,1208(sp)
   8213c:	d8812d15 	stw	r2,1204(sp)
   82140:	0211c83a 	sub	r8,zero,r8
   82144:	da012e15 	stw	r8,1208(sp)
   82148:	84000114 	ori	r16,r16,4
   8214c:	ac800007 	ldb	r18,0(r21)
   82150:	003f0506 	br	81d68 <___vfprintf_internal_r+0x178>
   82154:	d9013017 	ldw	r4,1216(sp)
   82158:	d9412917 	ldw	r5,1188(sp)
   8215c:	0083a0c0 	call	83a0c <__swsetup_r>
   82160:	10003d1e 	bne	r2,zero,82258 <___vfprintf_internal_r+0x668>
   82164:	d8c12917 	ldw	r3,1188(sp)
   82168:	1880030b 	ldhu	r2,12(r3)
   8216c:	00c00284 	movi	r3,10
   82170:	1100068c 	andi	r4,r2,26
   82174:	20fec21e 	bne	r4,r3,81c80 <___vfprintf_internal_r+0x90>
   82178:	d9012917 	ldw	r4,1188(sp)
   8217c:	20c0038b 	ldhu	r3,14(r4)
   82180:	193fffcc 	andi	r4,r3,65535
   82184:	2120001c 	xori	r4,r4,32768
   82188:	21200004 	addi	r4,r4,-32768
   8218c:	203ebc16 	blt	r4,zero,81c80 <___vfprintf_internal_r+0x90>
   82190:	da012917 	ldw	r8,1188(sp)
   82194:	d9013017 	ldw	r4,1216(sp)
   82198:	d9c12d17 	ldw	r7,1204(sp)
   8219c:	42800717 	ldw	r10,28(r8)
   821a0:	42400917 	ldw	r9,36(r8)
   821a4:	10bfff4c 	andi	r2,r2,65533
   821a8:	02010004 	movi	r8,1024
   821ac:	d881070d 	sth	r2,1052(sp)
   821b0:	d9410404 	addi	r5,sp,1040
   821b4:	d8800404 	addi	r2,sp,16
   821b8:	800d883a 	mov	r6,r16
   821bc:	d8c1078d 	sth	r3,1054(sp)
   821c0:	da810b15 	stw	r10,1068(sp)
   821c4:	da410d15 	stw	r9,1076(sp)
   821c8:	d8810415 	stw	r2,1040(sp)
   821cc:	d8810815 	stw	r2,1056(sp)
   821d0:	da010615 	stw	r8,1048(sp)
   821d4:	da010915 	stw	r8,1060(sp)
   821d8:	d8010a15 	stw	zero,1064(sp)
   821dc:	0081bf00 	call	81bf0 <___vfprintf_internal_r>
   821e0:	d8812c15 	stw	r2,1200(sp)
   821e4:	10000416 	blt	r2,zero,821f8 <___vfprintf_internal_r+0x608>
   821e8:	d9013017 	ldw	r4,1216(sp)
   821ec:	d9410404 	addi	r5,sp,1040
   821f0:	00853a40 	call	853a4 <_fflush_r>
   821f4:	1005d81e 	bne	r2,zero,83958 <___vfprintf_internal_r+0x1d68>
   821f8:	d881070b 	ldhu	r2,1052(sp)
   821fc:	1080100c 	andi	r2,r2,64
   82200:	10bfffcc 	andi	r2,r2,65535
   82204:	10a0001c 	xori	r2,r2,32768
   82208:	10a00004 	addi	r2,r2,-32768
   8220c:	10001426 	beq	r2,zero,82260 <___vfprintf_internal_r+0x670>
   82210:	d8c12917 	ldw	r3,1188(sp)
   82214:	1880030b 	ldhu	r2,12(r3)
   82218:	10801014 	ori	r2,r2,64
   8221c:	1880030d 	sth	r2,12(r3)
   82220:	00000f06 	br	82260 <___vfprintf_internal_r+0x670>
   82224:	d8811d17 	ldw	r2,1140(sp)
   82228:	10000426 	beq	r2,zero,8223c <___vfprintf_internal_r+0x64c>
   8222c:	d9013017 	ldw	r4,1216(sp)
   82230:	d9412917 	ldw	r5,1188(sp)
   82234:	d9811b04 	addi	r6,sp,1132
   82238:	0081bbc0 	call	81bbc <__sprint_r>
   8223c:	d8c12917 	ldw	r3,1188(sp)
   82240:	1880030b 	ldhu	r2,12(r3)
   82244:	1080100c 	andi	r2,r2,64
   82248:	10bfffcc 	andi	r2,r2,65535
   8224c:	10a0001c 	xori	r2,r2,32768
   82250:	10a00004 	addi	r2,r2,-32768
   82254:	10000226 	beq	r2,zero,82260 <___vfprintf_internal_r+0x670>
   82258:	00bfffc4 	movi	r2,-1
   8225c:	d8812c15 	stw	r2,1200(sp)
   82260:	d8812c17 	ldw	r2,1200(sp)
   82264:	dfc14617 	ldw	ra,1304(sp)
   82268:	df014517 	ldw	fp,1300(sp)
   8226c:	ddc14417 	ldw	r23,1296(sp)
   82270:	dd814317 	ldw	r22,1292(sp)
   82274:	dd414217 	ldw	r21,1288(sp)
   82278:	dd014117 	ldw	r20,1284(sp)
   8227c:	dcc14017 	ldw	r19,1280(sp)
   82280:	dc813f17 	ldw	r18,1276(sp)
   82284:	dc413e17 	ldw	r17,1272(sp)
   82288:	dc013d17 	ldw	r16,1268(sp)
   8228c:	dec14704 	addi	sp,sp,1308
   82290:	f800283a 	ret
   82294:	d9412917 	ldw	r5,1188(sp)
   82298:	8809883a 	mov	r4,r17
   8229c:	d9811b04 	addi	r6,sp,1132
   822a0:	0081bbc0 	call	81bbc <__sprint_r>
   822a4:	103fe51e 	bne	r2,zero,8223c <___vfprintf_internal_r+0x64c>
   822a8:	da400404 	addi	r9,sp,16
   822ac:	003e9d06 	br	81d24 <___vfprintf_internal_r+0x134>
   822b0:	008564c0 	call	8564c <__sinit>
   822b4:	003e6606 	br	81c50 <___vfprintf_internal_r+0x60>
   822b8:	d8812d17 	ldw	r2,1204(sp)
   822bc:	0007883a 	mov	r3,zero
   822c0:	15c00017 	ldw	r23,0(r2)
   822c4:	15800117 	ldw	r22,4(r2)
   822c8:	10800204 	addi	r2,r2,8
   822cc:	d8812d15 	stw	r2,1204(sp)
   822d0:	d8012585 	stb	zero,1174(sp)
   822d4:	bd84b03a 	or	r2,r23,r22
   822d8:	003f1c06 	br	81f4c <___vfprintf_internal_r+0x35c>
   822dc:	d8c12d17 	ldw	r3,1204(sp)
   822e0:	18800117 	ldw	r2,4(r3)
   822e4:	1dc00017 	ldw	r23,0(r3)
   822e8:	18c00204 	addi	r3,r3,8
   822ec:	d8c12d15 	stw	r3,1204(sp)
   822f0:	102d883a 	mov	r22,r2
   822f4:	003f8606 	br	82110 <___vfprintf_internal_r+0x520>
   822f8:	d8c12d17 	ldw	r3,1204(sp)
   822fc:	d9012d17 	ldw	r4,1204(sp)
   82300:	1dc00017 	ldw	r23,0(r3)
   82304:	1d800117 	ldw	r22,4(r3)
   82308:	21000204 	addi	r4,r4,8
   8230c:	00c00044 	movi	r3,1
   82310:	d9012d15 	stw	r4,1204(sp)
   82314:	bd84b03a 	or	r2,r23,r22
   82318:	d8012585 	stb	zero,1174(sp)
   8231c:	003f0b06 	br	81f4c <___vfprintf_internal_r+0x35c>
   82320:	d9812585 	stb	r6,1174(sp)
   82324:	ac800007 	ldb	r18,0(r21)
   82328:	003e8f06 	br	81d68 <___vfprintf_internal_r+0x178>
   8232c:	ac800007 	ldb	r18,0(r21)
   82330:	a9000044 	addi	r4,r21,1
   82334:	92857d26 	beq	r18,r10,8392c <___vfprintf_internal_r+0x1d3c>
   82338:	90bff404 	addi	r2,r18,-48
   8233c:	0039883a 	mov	fp,zero
   82340:	28800736 	bltu	r5,r2,82360 <___vfprintf_internal_r+0x770>
   82344:	24800007 	ldb	r18,0(r4)
   82348:	e70002a4 	muli	fp,fp,10
   8234c:	21000044 	addi	r4,r4,1
   82350:	1739883a 	add	fp,r2,fp
   82354:	90bff404 	addi	r2,r18,-48
   82358:	28bffa2e 	bgeu	r5,r2,82344 <___vfprintf_internal_r+0x754>
   8235c:	e0044216 	blt	fp,zero,83468 <___vfprintf_internal_r+0x1878>
   82360:	202b883a 	mov	r21,r4
   82364:	003e8106 	br	81d6c <___vfprintf_internal_r+0x17c>
   82368:	d8812587 	ldb	r2,1174(sp)
   8236c:	1003581e 	bne	r2,zero,830d0 <___vfprintf_internal_r+0x14e0>
   82370:	dac12585 	stb	r11,1174(sp)
   82374:	ac800007 	ldb	r18,0(r21)
   82378:	003e7b06 	br	81d68 <___vfprintf_internal_r+0x178>
   8237c:	84000054 	ori	r16,r16,1
   82380:	ac800007 	ldb	r18,0(r21)
   82384:	003e7806 	br	81d68 <___vfprintf_internal_r+0x178>
   82388:	84002014 	ori	r16,r16,128
   8238c:	ac800007 	ldb	r18,0(r21)
   82390:	003e7506 	br	81d68 <___vfprintf_internal_r+0x178>
   82394:	02000274 	movhi	r8,9
   82398:	42386504 	addi	r8,r8,-7788
   8239c:	da013615 	stw	r8,1240(sp)
   823a0:	8080080c 	andi	r2,r16,32
   823a4:	10009626 	beq	r2,zero,82600 <___vfprintf_internal_r+0xa10>
   823a8:	d8812d17 	ldw	r2,1204(sp)
   823ac:	15c00017 	ldw	r23,0(r2)
   823b0:	15800117 	ldw	r22,4(r2)
   823b4:	10800204 	addi	r2,r2,8
   823b8:	d8812d15 	stw	r2,1204(sp)
   823bc:	8080004c 	andi	r2,r16,1
   823c0:	1002ae26 	beq	r2,zero,82e7c <___vfprintf_internal_r+0x128c>
   823c4:	bd84b03a 	or	r2,r23,r22
   823c8:	10032a26 	beq	r2,zero,83074 <___vfprintf_internal_r+0x1484>
   823cc:	00c00c04 	movi	r3,48
   823d0:	d8c12505 	stb	r3,1172(sp)
   823d4:	dc812545 	stb	r18,1173(sp)
   823d8:	84000094 	ori	r16,r16,2
   823dc:	00c00084 	movi	r3,2
   823e0:	d8012585 	stb	zero,1174(sp)
   823e4:	003ed906 	br	81f4c <___vfprintf_internal_r+0x35c>
   823e8:	84001014 	ori	r16,r16,64
   823ec:	ac800007 	ldb	r18,0(r21)
   823f0:	003e5d06 	br	81d68 <___vfprintf_internal_r+0x178>
   823f4:	ac800007 	ldb	r18,0(r21)
   823f8:	a805883a 	mov	r2,r21
   823fc:	91c43226 	beq	r18,r7,834c8 <___vfprintf_internal_r+0x18d8>
   82400:	84000414 	ori	r16,r16,16
   82404:	003e5806 	br	81d68 <___vfprintf_internal_r+0x178>
   82408:	d8c12d17 	ldw	r3,1204(sp)
   8240c:	02000044 	movi	r8,1
   82410:	da012815 	stw	r8,1184(sp)
   82414:	18800017 	ldw	r2,0(r3)
   82418:	18c00104 	addi	r3,r3,4
   8241c:	d8012585 	stb	zero,1174(sp)
   82420:	d8810405 	stb	r2,1040(sp)
   82424:	d8c12d15 	stw	r3,1204(sp)
   82428:	da012b15 	stw	r8,1196(sp)
   8242c:	dcc10404 	addi	r19,sp,1040
   82430:	d8013115 	stw	zero,1220(sp)
   82434:	003ee006 	br	81fb8 <___vfprintf_internal_r+0x3c8>
   82438:	8080080c 	andi	r2,r16,32
   8243c:	10031026 	beq	r2,zero,83080 <___vfprintf_internal_r+0x1490>
   82440:	d9012d17 	ldw	r4,1204(sp)
   82444:	da012c17 	ldw	r8,1200(sp)
   82448:	20800017 	ldw	r2,0(r4)
   8244c:	4007d7fa 	srai	r3,r8,31
   82450:	21000104 	addi	r4,r4,4
   82454:	d9012d15 	stw	r4,1204(sp)
   82458:	12000015 	stw	r8,0(r2)
   8245c:	10c00115 	stw	r3,4(r2)
   82460:	003e1906 	br	81cc8 <___vfprintf_internal_r+0xd8>
   82464:	da012d17 	ldw	r8,1204(sp)
   82468:	d9012d17 	ldw	r4,1204(sp)
   8246c:	42000017 	ldw	r8,0(r8)
   82470:	20800104 	addi	r2,r4,4
   82474:	da012e15 	stw	r8,1208(sp)
   82478:	403f2f16 	blt	r8,zero,82138 <___vfprintf_internal_r+0x548>
   8247c:	d8812d15 	stw	r2,1204(sp)
   82480:	ac800007 	ldb	r18,0(r21)
   82484:	003e3806 	br	81d68 <___vfprintf_internal_r+0x178>
   82488:	0009883a 	mov	r4,zero
   8248c:	90bff404 	addi	r2,r18,-48
   82490:	ac800007 	ldb	r18,0(r21)
   82494:	210002a4 	muli	r4,r4,10
   82498:	ad400044 	addi	r21,r21,1
   8249c:	2089883a 	add	r4,r4,r2
   824a0:	90bff404 	addi	r2,r18,-48
   824a4:	28bffa2e 	bgeu	r5,r2,82490 <___vfprintf_internal_r+0x8a0>
   824a8:	d9012e15 	stw	r4,1208(sp)
   824ac:	003e2f06 	br	81d6c <___vfprintf_internal_r+0x17c>
   824b0:	8080020c 	andi	r2,r16,8
   824b4:	1002d426 	beq	r2,zero,83008 <___vfprintf_internal_r+0x1418>
   824b8:	d8c12d17 	ldw	r3,1204(sp)
   824bc:	1d800017 	ldw	r22,0(r3)
   824c0:	1d000117 	ldw	r20,4(r3)
   824c4:	18c00204 	addi	r3,r3,8
   824c8:	d8c12d15 	stw	r3,1204(sp)
   824cc:	dd813315 	stw	r22,1228(sp)
   824d0:	dd013415 	stw	r20,1232(sp)
   824d4:	b009883a 	mov	r4,r22
   824d8:	a00b883a 	mov	r5,r20
   824dc:	da413c15 	stw	r9,1264(sp)
   824e0:	00887380 	call	88738 <__isinfd>
   824e4:	da413c17 	ldw	r9,1264(sp)
   824e8:	b009883a 	mov	r4,r22
   824ec:	a00b883a 	mov	r5,r20
   824f0:	10035726 	beq	r2,zero,83250 <___vfprintf_internal_r+0x1660>
   824f4:	000d883a 	mov	r6,zero
   824f8:	000f883a 	mov	r7,zero
   824fc:	008a5900 	call	8a590 <__ltdf2>
   82500:	da413c17 	ldw	r9,1264(sp)
   82504:	10041b16 	blt	r2,zero,83574 <___vfprintf_internal_r+0x1984>
   82508:	d8812583 	ldbu	r2,1174(sp)
   8250c:	00c011c4 	movi	r3,71
   82510:	1c830b16 	blt	r3,r18,83140 <___vfprintf_internal_r+0x1550>
   82514:	04c00274 	movhi	r19,9
   82518:	9cf86104 	addi	r19,r19,-7804
   8251c:	020000c4 	movi	r8,3
   82520:	00ffdfc4 	movi	r3,-129
   82524:	da012815 	stw	r8,1184(sp)
   82528:	80e0703a 	and	r16,r16,r3
   8252c:	da012b15 	stw	r8,1196(sp)
   82530:	d8013115 	stw	zero,1220(sp)
   82534:	003e9906 	br	81f9c <___vfprintf_internal_r+0x3ac>
   82538:	d8812d17 	ldw	r2,1204(sp)
   8253c:	d8c12d17 	ldw	r3,1204(sp)
   82540:	02000274 	movhi	r8,9
   82544:	42386a04 	addi	r8,r8,-7768
   82548:	15c00017 	ldw	r23,0(r2)
   8254c:	00800c04 	movi	r2,48
   82550:	18c00104 	addi	r3,r3,4
   82554:	d8812505 	stb	r2,1172(sp)
   82558:	00801e04 	movi	r2,120
   8255c:	d8812545 	stb	r2,1173(sp)
   82560:	d8c12d15 	stw	r3,1204(sp)
   82564:	002d883a 	mov	r22,zero
   82568:	84000094 	ori	r16,r16,2
   8256c:	da013615 	stw	r8,1240(sp)
   82570:	00c00084 	movi	r3,2
   82574:	04801e04 	movi	r18,120
   82578:	b805883a 	mov	r2,r23
   8257c:	d8012585 	stb	zero,1174(sp)
   82580:	003e7206 	br	81f4c <___vfprintf_internal_r+0x35c>
   82584:	84000814 	ori	r16,r16,32
   82588:	ac800007 	ldb	r18,0(r21)
   8258c:	003df606 	br	81d68 <___vfprintf_internal_r+0x178>
   82590:	d8812d17 	ldw	r2,1204(sp)
   82594:	d8012585 	stb	zero,1174(sp)
   82598:	14c00017 	ldw	r19,0(r2)
   8259c:	15c00104 	addi	r23,r2,4
   825a0:	98040126 	beq	r19,zero,835a8 <___vfprintf_internal_r+0x19b8>
   825a4:	9809883a 	mov	r4,r19
   825a8:	e003dd16 	blt	fp,zero,83520 <___vfprintf_internal_r+0x1930>
   825ac:	000b883a 	mov	r5,zero
   825b0:	e00d883a 	mov	r6,fp
   825b4:	da413c15 	stw	r9,1264(sp)
   825b8:	0086cec0 	call	86cec <memchr>
   825bc:	da413c17 	ldw	r9,1264(sp)
   825c0:	10042e26 	beq	r2,zero,8367c <___vfprintf_internal_r+0x1a8c>
   825c4:	14c5c83a 	sub	r2,r2,r19
   825c8:	d8812b15 	stw	r2,1196(sp)
   825cc:	e083790e 	bge	fp,r2,833b4 <___vfprintf_internal_r+0x17c4>
   825d0:	df012815 	stw	fp,1184(sp)
   825d4:	e0049516 	blt	fp,zero,8382c <___vfprintf_internal_r+0x1c3c>
   825d8:	d8812583 	ldbu	r2,1174(sp)
   825dc:	df012b15 	stw	fp,1196(sp)
   825e0:	ddc12d15 	stw	r23,1204(sp)
   825e4:	d8013115 	stw	zero,1220(sp)
   825e8:	003e6c06 	br	81f9c <___vfprintf_internal_r+0x3ac>
   825ec:	02000274 	movhi	r8,9
   825f0:	42386a04 	addi	r8,r8,-7768
   825f4:	da013615 	stw	r8,1240(sp)
   825f8:	8080080c 	andi	r2,r16,32
   825fc:	103f6a1e 	bne	r2,zero,823a8 <___vfprintf_internal_r+0x7b8>
   82600:	8080040c 	andi	r2,r16,16
   82604:	10029326 	beq	r2,zero,83054 <___vfprintf_internal_r+0x1464>
   82608:	d8c12d17 	ldw	r3,1204(sp)
   8260c:	002d883a 	mov	r22,zero
   82610:	1dc00017 	ldw	r23,0(r3)
   82614:	18c00104 	addi	r3,r3,4
   82618:	d8c12d15 	stw	r3,1204(sp)
   8261c:	003f6706 	br	823bc <___vfprintf_internal_r+0x7cc>
   82620:	84000214 	ori	r16,r16,8
   82624:	ac800007 	ldb	r18,0(r21)
   82628:	003dcf06 	br	81d68 <___vfprintf_internal_r+0x178>
   8262c:	da011d17 	ldw	r8,1140(sp)
   82630:	d8c11c17 	ldw	r3,1136(sp)
   82634:	d8812587 	ldb	r2,1174(sp)
   82638:	10000b26 	beq	r2,zero,82668 <___vfprintf_internal_r+0xa78>
   8263c:	d8812584 	addi	r2,sp,1174
   82640:	48800015 	stw	r2,0(r9)
   82644:	00800044 	movi	r2,1
   82648:	48800115 	stw	r2,4(r9)
   8264c:	4091883a 	add	r8,r8,r2
   82650:	1887883a 	add	r3,r3,r2
   82654:	da011d15 	stw	r8,1140(sp)
   82658:	d8c11c15 	stw	r3,1136(sp)
   8265c:	008001c4 	movi	r2,7
   82660:	10c18516 	blt	r2,r3,82c78 <___vfprintf_internal_r+0x1088>
   82664:	4a400204 	addi	r9,r9,8
   82668:	d9012a17 	ldw	r4,1192(sp)
   8266c:	20000b26 	beq	r4,zero,8269c <___vfprintf_internal_r+0xaac>
   82670:	d8812504 	addi	r2,sp,1172
   82674:	48800015 	stw	r2,0(r9)
   82678:	00800084 	movi	r2,2
   8267c:	48800115 	stw	r2,4(r9)
   82680:	4091883a 	add	r8,r8,r2
   82684:	18c00044 	addi	r3,r3,1
   82688:	da011d15 	stw	r8,1140(sp)
   8268c:	d8c11c15 	stw	r3,1136(sp)
   82690:	008001c4 	movi	r2,7
   82694:	10c18116 	blt	r2,r3,82c9c <___vfprintf_internal_r+0x10ac>
   82698:	4a400204 	addi	r9,r9,8
   8269c:	d9012f17 	ldw	r4,1212(sp)
   826a0:	00802004 	movi	r2,128
   826a4:	2080fc26 	beq	r4,r2,82a98 <___vfprintf_internal_r+0xea8>
   826a8:	d8813117 	ldw	r2,1220(sp)
   826ac:	d9012b17 	ldw	r4,1196(sp)
   826b0:	112fc83a 	sub	r23,r2,r4
   826b4:	05c02a0e 	bge	zero,r23,82760 <___vfprintf_internal_r+0xb70>
   826b8:	07000404 	movi	fp,16
   826bc:	05000274 	movhi	r20,9
   826c0:	a5387584 	addi	r20,r20,-7722
   826c4:	e5c01d0e 	bge	fp,r23,8273c <___vfprintf_internal_r+0xb4c>
   826c8:	dc812a15 	stw	r18,1192(sp)
   826cc:	058001c4 	movi	r22,7
   826d0:	a025883a 	mov	r18,r20
   826d4:	8029883a 	mov	r20,r16
   826d8:	dc012917 	ldw	r16,1188(sp)
   826dc:	00000306 	br	826ec <___vfprintf_internal_r+0xafc>
   826e0:	bdfffc04 	addi	r23,r23,-16
   826e4:	4a400204 	addi	r9,r9,8
   826e8:	e5c0110e 	bge	fp,r23,82730 <___vfprintf_internal_r+0xb40>
   826ec:	4c800015 	stw	r18,0(r9)
   826f0:	4f000115 	stw	fp,4(r9)
   826f4:	42000404 	addi	r8,r8,16
   826f8:	18c00044 	addi	r3,r3,1
   826fc:	da011d15 	stw	r8,1140(sp)
   82700:	d8c11c15 	stw	r3,1136(sp)
   82704:	b0fff60e 	bge	r22,r3,826e0 <___vfprintf_internal_r+0xaf0>
   82708:	8809883a 	mov	r4,r17
   8270c:	800b883a 	mov	r5,r16
   82710:	d9811b04 	addi	r6,sp,1132
   82714:	0081bbc0 	call	81bbc <__sprint_r>
   82718:	103ec81e 	bne	r2,zero,8223c <___vfprintf_internal_r+0x64c>
   8271c:	bdfffc04 	addi	r23,r23,-16
   82720:	da011d17 	ldw	r8,1140(sp)
   82724:	d8c11c17 	ldw	r3,1136(sp)
   82728:	da400404 	addi	r9,sp,16
   8272c:	e5ffef16 	blt	fp,r23,826ec <___vfprintf_internal_r+0xafc>
   82730:	a021883a 	mov	r16,r20
   82734:	9029883a 	mov	r20,r18
   82738:	dc812a17 	ldw	r18,1192(sp)
   8273c:	4d000015 	stw	r20,0(r9)
   82740:	4dc00115 	stw	r23,4(r9)
   82744:	45d1883a 	add	r8,r8,r23
   82748:	18c00044 	addi	r3,r3,1
   8274c:	da011d15 	stw	r8,1140(sp)
   82750:	d8c11c15 	stw	r3,1136(sp)
   82754:	008001c4 	movi	r2,7
   82758:	10c13e16 	blt	r2,r3,82c54 <___vfprintf_internal_r+0x1064>
   8275c:	4a400204 	addi	r9,r9,8
   82760:	8080400c 	andi	r2,r16,256
   82764:	1000831e 	bne	r2,zero,82974 <___vfprintf_internal_r+0xd84>
   82768:	d8812b17 	ldw	r2,1196(sp)
   8276c:	4cc00015 	stw	r19,0(r9)
   82770:	48800115 	stw	r2,4(r9)
   82774:	4091883a 	add	r8,r8,r2
   82778:	18c00044 	addi	r3,r3,1
   8277c:	da011d15 	stw	r8,1140(sp)
   82780:	d8c11c15 	stw	r3,1136(sp)
   82784:	008001c4 	movi	r2,7
   82788:	10c05316 	blt	r2,r3,828d8 <___vfprintf_internal_r+0xce8>
   8278c:	4a400204 	addi	r9,r9,8
   82790:	8400010c 	andi	r16,r16,4
   82794:	80002e26 	beq	r16,zero,82850 <___vfprintf_internal_r+0xc60>
   82798:	d8812e17 	ldw	r2,1208(sp)
   8279c:	d8c12817 	ldw	r3,1184(sp)
   827a0:	10e1c83a 	sub	r16,r2,r3
   827a4:	04002a0e 	bge	zero,r16,82850 <___vfprintf_internal_r+0xc60>
   827a8:	04800404 	movi	r18,16
   827ac:	d8c11c17 	ldw	r3,1136(sp)
   827b0:	05c00274 	movhi	r23,9
   827b4:	bdf87184 	addi	r23,r23,-7738
   827b8:	9400170e 	bge	r18,r16,82818 <___vfprintf_internal_r+0xc28>
   827bc:	04c001c4 	movi	r19,7
   827c0:	dd012917 	ldw	r20,1188(sp)
   827c4:	00000306 	br	827d4 <___vfprintf_internal_r+0xbe4>
   827c8:	843ffc04 	addi	r16,r16,-16
   827cc:	4a400204 	addi	r9,r9,8
   827d0:	9400110e 	bge	r18,r16,82818 <___vfprintf_internal_r+0xc28>
   827d4:	4dc00015 	stw	r23,0(r9)
   827d8:	4c800115 	stw	r18,4(r9)
   827dc:	42000404 	addi	r8,r8,16
   827e0:	18c00044 	addi	r3,r3,1
   827e4:	da011d15 	stw	r8,1140(sp)
   827e8:	d8c11c15 	stw	r3,1136(sp)
   827ec:	98fff60e 	bge	r19,r3,827c8 <___vfprintf_internal_r+0xbd8>
   827f0:	8809883a 	mov	r4,r17
   827f4:	a00b883a 	mov	r5,r20
   827f8:	d9811b04 	addi	r6,sp,1132
   827fc:	0081bbc0 	call	81bbc <__sprint_r>
   82800:	103e8e1e 	bne	r2,zero,8223c <___vfprintf_internal_r+0x64c>
   82804:	843ffc04 	addi	r16,r16,-16
   82808:	da011d17 	ldw	r8,1140(sp)
   8280c:	d8c11c17 	ldw	r3,1136(sp)
   82810:	da400404 	addi	r9,sp,16
   82814:	943fef16 	blt	r18,r16,827d4 <___vfprintf_internal_r+0xbe4>
   82818:	4dc00015 	stw	r23,0(r9)
   8281c:	4c000115 	stw	r16,4(r9)
   82820:	8211883a 	add	r8,r16,r8
   82824:	18c00044 	addi	r3,r3,1
   82828:	da011d15 	stw	r8,1140(sp)
   8282c:	d8c11c15 	stw	r3,1136(sp)
   82830:	008001c4 	movi	r2,7
   82834:	10c0060e 	bge	r2,r3,82850 <___vfprintf_internal_r+0xc60>
   82838:	d9412917 	ldw	r5,1188(sp)
   8283c:	8809883a 	mov	r4,r17
   82840:	d9811b04 	addi	r6,sp,1132
   82844:	0081bbc0 	call	81bbc <__sprint_r>
   82848:	103e7c1e 	bne	r2,zero,8223c <___vfprintf_internal_r+0x64c>
   8284c:	da011d17 	ldw	r8,1140(sp)
   82850:	dd012817 	ldw	r20,1184(sp)
   82854:	d9012e17 	ldw	r4,1208(sp)
   82858:	a100010e 	bge	r20,r4,82860 <___vfprintf_internal_r+0xc70>
   8285c:	2029883a 	mov	r20,r4
   82860:	d8812c17 	ldw	r2,1200(sp)
   82864:	1505883a 	add	r2,r2,r20
   82868:	d8812c15 	stw	r2,1200(sp)
   8286c:	4000b91e 	bne	r8,zero,82b54 <___vfprintf_internal_r+0xf64>
   82870:	d8011c15 	stw	zero,1136(sp)
   82874:	a8800007 	ldb	r2,0(r21)
   82878:	da400404 	addi	r9,sp,16
   8287c:	103d141e 	bne	r2,zero,81cd0 <___vfprintf_internal_r+0xe0>
   82880:	a825883a 	mov	r18,r21
   82884:	003d2a06 	br	81d30 <___vfprintf_internal_r+0x140>
   82888:	d9412917 	ldw	r5,1188(sp)
   8288c:	8809883a 	mov	r4,r17
   82890:	d9811b04 	addi	r6,sp,1132
   82894:	0081bbc0 	call	81bbc <__sprint_r>
   82898:	103e681e 	bne	r2,zero,8223c <___vfprintf_internal_r+0x64c>
   8289c:	da011d17 	ldw	r8,1140(sp)
   828a0:	da400404 	addi	r9,sp,16
   828a4:	8080004c 	andi	r2,r16,1
   828a8:	103fb926 	beq	r2,zero,82790 <___vfprintf_internal_r+0xba0>
   828ac:	d8c11c17 	ldw	r3,1136(sp)
   828b0:	d9013717 	ldw	r4,1244(sp)
   828b4:	00800044 	movi	r2,1
   828b8:	48800115 	stw	r2,4(r9)
   828bc:	49000015 	stw	r4,0(r9)
   828c0:	4091883a 	add	r8,r8,r2
   828c4:	1887883a 	add	r3,r3,r2
   828c8:	da011d15 	stw	r8,1140(sp)
   828cc:	d8c11c15 	stw	r3,1136(sp)
   828d0:	008001c4 	movi	r2,7
   828d4:	10ffad0e 	bge	r2,r3,8278c <___vfprintf_internal_r+0xb9c>
   828d8:	d9412917 	ldw	r5,1188(sp)
   828dc:	8809883a 	mov	r4,r17
   828e0:	d9811b04 	addi	r6,sp,1132
   828e4:	0081bbc0 	call	81bbc <__sprint_r>
   828e8:	103e541e 	bne	r2,zero,8223c <___vfprintf_internal_r+0x64c>
   828ec:	da400404 	addi	r9,sp,16
   828f0:	da011d17 	ldw	r8,1140(sp)
   828f4:	003fa606 	br	82790 <___vfprintf_internal_r+0xba0>
   828f8:	18803fcc 	andi	r2,r3,255
   828fc:	00c00044 	movi	r3,1
   82900:	10c10126 	beq	r2,r3,82d08 <___vfprintf_internal_r+0x1118>
   82904:	00c00084 	movi	r3,2
   82908:	10c0f026 	beq	r2,r3,82ccc <___vfprintf_internal_r+0x10dc>
   8290c:	d8c10dc4 	addi	r3,sp,1079
   82910:	b808d0fa 	srli	r4,r23,3
   82914:	b00a977a 	slli	r5,r22,29
   82918:	b02cd0fa 	srli	r22,r22,3
   8291c:	bdc001cc 	andi	r23,r23,7
   82920:	b8800c04 	addi	r2,r23,48
   82924:	292eb03a 	or	r23,r5,r4
   82928:	18800005 	stb	r2,0(r3)
   8292c:	bd88b03a 	or	r4,r23,r22
   82930:	1827883a 	mov	r19,r3
   82934:	18ffffc4 	addi	r3,r3,-1
   82938:	203ff51e 	bne	r4,zero,82910 <___vfprintf_internal_r+0xd20>
   8293c:	8100004c 	andi	r4,r16,1
   82940:	980b883a 	mov	r5,r19
   82944:	20000726 	beq	r4,zero,82964 <___vfprintf_internal_r+0xd74>
   82948:	10803fcc 	andi	r2,r2,255
   8294c:	1080201c 	xori	r2,r2,128
   82950:	10bfe004 	addi	r2,r2,-128
   82954:	01000c04 	movi	r4,48
   82958:	11000226 	beq	r2,r4,82964 <___vfprintf_internal_r+0xd74>
   8295c:	1827883a 	mov	r19,r3
   82960:	293fffc5 	stb	r4,-1(r5)
   82964:	d8812717 	ldw	r2,1180(sp)
   82968:	14c5c83a 	sub	r2,r2,r19
   8296c:	d8812b15 	stw	r2,1196(sp)
   82970:	003d8406 	br	81f84 <___vfprintf_internal_r+0x394>
   82974:	00801944 	movi	r2,101
   82978:	14807c0e 	bge	r2,r18,82b6c <___vfprintf_internal_r+0xf7c>
   8297c:	d9013317 	ldw	r4,1228(sp)
   82980:	d9413417 	ldw	r5,1232(sp)
   82984:	000d883a 	mov	r6,zero
   82988:	000f883a 	mov	r7,zero
   8298c:	d8c13b15 	stw	r3,1260(sp)
   82990:	da013a15 	stw	r8,1256(sp)
   82994:	da413c15 	stw	r9,1264(sp)
   82998:	008a4100 	call	8a410 <__eqdf2>
   8299c:	d8c13b17 	ldw	r3,1260(sp)
   829a0:	da013a17 	ldw	r8,1256(sp)
   829a4:	da413c17 	ldw	r9,1264(sp)
   829a8:	1001001e 	bne	r2,zero,82dac <___vfprintf_internal_r+0x11bc>
   829ac:	00800274 	movhi	r2,9
   829b0:	10b87104 	addi	r2,r2,-7740
   829b4:	48800015 	stw	r2,0(r9)
   829b8:	00800044 	movi	r2,1
   829bc:	48800115 	stw	r2,4(r9)
   829c0:	4091883a 	add	r8,r8,r2
   829c4:	1887883a 	add	r3,r3,r2
   829c8:	da011d15 	stw	r8,1140(sp)
   829cc:	d8c11c15 	stw	r3,1136(sp)
   829d0:	008001c4 	movi	r2,7
   829d4:	10c1dd16 	blt	r2,r3,8314c <___vfprintf_internal_r+0x155c>
   829d8:	4a400204 	addi	r9,r9,8
   829dc:	d8812417 	ldw	r2,1168(sp)
   829e0:	d8c13217 	ldw	r3,1224(sp)
   829e4:	10c00216 	blt	r2,r3,829f0 <___vfprintf_internal_r+0xe00>
   829e8:	8080004c 	andi	r2,r16,1
   829ec:	103f6826 	beq	r2,zero,82790 <___vfprintf_internal_r+0xba0>
   829f0:	d8c11c17 	ldw	r3,1136(sp)
   829f4:	d9013717 	ldw	r4,1244(sp)
   829f8:	00800044 	movi	r2,1
   829fc:	48800115 	stw	r2,4(r9)
   82a00:	49000015 	stw	r4,0(r9)
   82a04:	4091883a 	add	r8,r8,r2
   82a08:	1887883a 	add	r3,r3,r2
   82a0c:	da011d15 	stw	r8,1140(sp)
   82a10:	d8c11c15 	stw	r3,1136(sp)
   82a14:	008001c4 	movi	r2,7
   82a18:	10c2af16 	blt	r2,r3,834d8 <___vfprintf_internal_r+0x18e8>
   82a1c:	4a400204 	addi	r9,r9,8
   82a20:	d8813217 	ldw	r2,1224(sp)
   82a24:	14bfffc4 	addi	r18,r2,-1
   82a28:	04bf590e 	bge	zero,r18,82790 <___vfprintf_internal_r+0xba0>
   82a2c:	04c00404 	movi	r19,16
   82a30:	d8c11c17 	ldw	r3,1136(sp)
   82a34:	05000274 	movhi	r20,9
   82a38:	a5387584 	addi	r20,r20,-7722
   82a3c:	9c81630e 	bge	r19,r18,82fcc <___vfprintf_internal_r+0x13dc>
   82a40:	058001c4 	movi	r22,7
   82a44:	ddc12917 	ldw	r23,1188(sp)
   82a48:	00000306 	br	82a58 <___vfprintf_internal_r+0xe68>
   82a4c:	4a400204 	addi	r9,r9,8
   82a50:	94bffc04 	addi	r18,r18,-16
   82a54:	9c815d0e 	bge	r19,r18,82fcc <___vfprintf_internal_r+0x13dc>
   82a58:	4d000015 	stw	r20,0(r9)
   82a5c:	4cc00115 	stw	r19,4(r9)
   82a60:	42000404 	addi	r8,r8,16
   82a64:	18c00044 	addi	r3,r3,1
   82a68:	da011d15 	stw	r8,1140(sp)
   82a6c:	d8c11c15 	stw	r3,1136(sp)
   82a70:	b0fff60e 	bge	r22,r3,82a4c <___vfprintf_internal_r+0xe5c>
   82a74:	8809883a 	mov	r4,r17
   82a78:	b80b883a 	mov	r5,r23
   82a7c:	d9811b04 	addi	r6,sp,1132
   82a80:	0081bbc0 	call	81bbc <__sprint_r>
   82a84:	103ded1e 	bne	r2,zero,8223c <___vfprintf_internal_r+0x64c>
   82a88:	da011d17 	ldw	r8,1140(sp)
   82a8c:	d8c11c17 	ldw	r3,1136(sp)
   82a90:	da400404 	addi	r9,sp,16
   82a94:	003fee06 	br	82a50 <___vfprintf_internal_r+0xe60>
   82a98:	d8812e17 	ldw	r2,1208(sp)
   82a9c:	d9012817 	ldw	r4,1184(sp)
   82aa0:	112fc83a 	sub	r23,r2,r4
   82aa4:	05ff000e 	bge	zero,r23,826a8 <___vfprintf_internal_r+0xab8>
   82aa8:	07000404 	movi	fp,16
   82aac:	05000274 	movhi	r20,9
   82ab0:	a5387584 	addi	r20,r20,-7722
   82ab4:	e5c01d0e 	bge	fp,r23,82b2c <___vfprintf_internal_r+0xf3c>
   82ab8:	dc812a15 	stw	r18,1192(sp)
   82abc:	058001c4 	movi	r22,7
   82ac0:	a025883a 	mov	r18,r20
   82ac4:	8029883a 	mov	r20,r16
   82ac8:	dc012917 	ldw	r16,1188(sp)
   82acc:	00000306 	br	82adc <___vfprintf_internal_r+0xeec>
   82ad0:	bdfffc04 	addi	r23,r23,-16
   82ad4:	4a400204 	addi	r9,r9,8
   82ad8:	e5c0110e 	bge	fp,r23,82b20 <___vfprintf_internal_r+0xf30>
   82adc:	4c800015 	stw	r18,0(r9)
   82ae0:	4f000115 	stw	fp,4(r9)
   82ae4:	42000404 	addi	r8,r8,16
   82ae8:	18c00044 	addi	r3,r3,1
   82aec:	da011d15 	stw	r8,1140(sp)
   82af0:	d8c11c15 	stw	r3,1136(sp)
   82af4:	b0fff60e 	bge	r22,r3,82ad0 <___vfprintf_internal_r+0xee0>
   82af8:	8809883a 	mov	r4,r17
   82afc:	800b883a 	mov	r5,r16
   82b00:	d9811b04 	addi	r6,sp,1132
   82b04:	0081bbc0 	call	81bbc <__sprint_r>
   82b08:	103dcc1e 	bne	r2,zero,8223c <___vfprintf_internal_r+0x64c>
   82b0c:	bdfffc04 	addi	r23,r23,-16
   82b10:	da011d17 	ldw	r8,1140(sp)
   82b14:	d8c11c17 	ldw	r3,1136(sp)
   82b18:	da400404 	addi	r9,sp,16
   82b1c:	e5ffef16 	blt	fp,r23,82adc <___vfprintf_internal_r+0xeec>
   82b20:	a021883a 	mov	r16,r20
   82b24:	9029883a 	mov	r20,r18
   82b28:	dc812a17 	ldw	r18,1192(sp)
   82b2c:	4d000015 	stw	r20,0(r9)
   82b30:	4dc00115 	stw	r23,4(r9)
   82b34:	45d1883a 	add	r8,r8,r23
   82b38:	18c00044 	addi	r3,r3,1
   82b3c:	da011d15 	stw	r8,1140(sp)
   82b40:	d8c11c15 	stw	r3,1136(sp)
   82b44:	008001c4 	movi	r2,7
   82b48:	10c11716 	blt	r2,r3,82fa8 <___vfprintf_internal_r+0x13b8>
   82b4c:	4a400204 	addi	r9,r9,8
   82b50:	003ed506 	br	826a8 <___vfprintf_internal_r+0xab8>
   82b54:	d9412917 	ldw	r5,1188(sp)
   82b58:	8809883a 	mov	r4,r17
   82b5c:	d9811b04 	addi	r6,sp,1132
   82b60:	0081bbc0 	call	81bbc <__sprint_r>
   82b64:	103f4226 	beq	r2,zero,82870 <___vfprintf_internal_r+0xc80>
   82b68:	003db406 	br	8223c <___vfprintf_internal_r+0x64c>
   82b6c:	d9013217 	ldw	r4,1224(sp)
   82b70:	00800044 	movi	r2,1
   82b74:	4cc00015 	stw	r19,0(r9)
   82b78:	1100e10e 	bge	r2,r4,82f00 <___vfprintf_internal_r+0x1310>
   82b7c:	00800044 	movi	r2,1
   82b80:	48800115 	stw	r2,4(r9)
   82b84:	4091883a 	add	r8,r8,r2
   82b88:	1887883a 	add	r3,r3,r2
   82b8c:	da011d15 	stw	r8,1140(sp)
   82b90:	d8c11c15 	stw	r3,1136(sp)
   82b94:	008001c4 	movi	r2,7
   82b98:	10c0ed16 	blt	r2,r3,82f50 <___vfprintf_internal_r+0x1360>
   82b9c:	4a400204 	addi	r9,r9,8
   82ba0:	d8813717 	ldw	r2,1244(sp)
   82ba4:	48800015 	stw	r2,0(r9)
   82ba8:	00800044 	movi	r2,1
   82bac:	48800115 	stw	r2,4(r9)
   82bb0:	4091883a 	add	r8,r8,r2
   82bb4:	1887883a 	add	r3,r3,r2
   82bb8:	da011d15 	stw	r8,1140(sp)
   82bbc:	d8c11c15 	stw	r3,1136(sp)
   82bc0:	008001c4 	movi	r2,7
   82bc4:	10c0eb16 	blt	r2,r3,82f74 <___vfprintf_internal_r+0x1384>
   82bc8:	4c800204 	addi	r18,r9,8
   82bcc:	d9013317 	ldw	r4,1228(sp)
   82bd0:	d9413417 	ldw	r5,1232(sp)
   82bd4:	000d883a 	mov	r6,zero
   82bd8:	000f883a 	mov	r7,zero
   82bdc:	d8c13b15 	stw	r3,1260(sp)
   82be0:	da013a15 	stw	r8,1256(sp)
   82be4:	008a46c0 	call	8a46c <__nedf2>
   82be8:	d8c13b17 	ldw	r3,1260(sp)
   82bec:	da013a17 	ldw	r8,1256(sp)
   82bf0:	1000a626 	beq	r2,zero,82e8c <___vfprintf_internal_r+0x129c>
   82bf4:	d9013217 	ldw	r4,1224(sp)
   82bf8:	9cc00044 	addi	r19,r19,1
   82bfc:	94c00015 	stw	r19,0(r18)
   82c00:	20bfffc4 	addi	r2,r4,-1
   82c04:	90800115 	stw	r2,4(r18)
   82c08:	4091883a 	add	r8,r8,r2
   82c0c:	18c00044 	addi	r3,r3,1
   82c10:	da011d15 	stw	r8,1140(sp)
   82c14:	d8c11c15 	stw	r3,1136(sp)
   82c18:	008001c4 	movi	r2,7
   82c1c:	10c0c316 	blt	r2,r3,82f2c <___vfprintf_internal_r+0x133c>
   82c20:	94800204 	addi	r18,r18,8
   82c24:	d9013517 	ldw	r4,1236(sp)
   82c28:	d8811fc4 	addi	r2,sp,1151
   82c2c:	90800015 	stw	r2,0(r18)
   82c30:	91000115 	stw	r4,4(r18)
   82c34:	4111883a 	add	r8,r8,r4
   82c38:	18c00044 	addi	r3,r3,1
   82c3c:	da011d15 	stw	r8,1140(sp)
   82c40:	d8c11c15 	stw	r3,1136(sp)
   82c44:	008001c4 	movi	r2,7
   82c48:	10ff2316 	blt	r2,r3,828d8 <___vfprintf_internal_r+0xce8>
   82c4c:	92400204 	addi	r9,r18,8
   82c50:	003ecf06 	br	82790 <___vfprintf_internal_r+0xba0>
   82c54:	d9412917 	ldw	r5,1188(sp)
   82c58:	8809883a 	mov	r4,r17
   82c5c:	d9811b04 	addi	r6,sp,1132
   82c60:	0081bbc0 	call	81bbc <__sprint_r>
   82c64:	103d751e 	bne	r2,zero,8223c <___vfprintf_internal_r+0x64c>
   82c68:	da011d17 	ldw	r8,1140(sp)
   82c6c:	d8c11c17 	ldw	r3,1136(sp)
   82c70:	da400404 	addi	r9,sp,16
   82c74:	003eba06 	br	82760 <___vfprintf_internal_r+0xb70>
   82c78:	d9412917 	ldw	r5,1188(sp)
   82c7c:	8809883a 	mov	r4,r17
   82c80:	d9811b04 	addi	r6,sp,1132
   82c84:	0081bbc0 	call	81bbc <__sprint_r>
   82c88:	103d6c1e 	bne	r2,zero,8223c <___vfprintf_internal_r+0x64c>
   82c8c:	da011d17 	ldw	r8,1140(sp)
   82c90:	d8c11c17 	ldw	r3,1136(sp)
   82c94:	da400404 	addi	r9,sp,16
   82c98:	003e7306 	br	82668 <___vfprintf_internal_r+0xa78>
   82c9c:	d9412917 	ldw	r5,1188(sp)
   82ca0:	8809883a 	mov	r4,r17
   82ca4:	d9811b04 	addi	r6,sp,1132
   82ca8:	0081bbc0 	call	81bbc <__sprint_r>
   82cac:	103d631e 	bne	r2,zero,8223c <___vfprintf_internal_r+0x64c>
   82cb0:	da011d17 	ldw	r8,1140(sp)
   82cb4:	d8c11c17 	ldw	r3,1136(sp)
   82cb8:	da400404 	addi	r9,sp,16
   82cbc:	003e7706 	br	8269c <___vfprintf_internal_r+0xaac>
   82cc0:	d8012b15 	stw	zero,1196(sp)
   82cc4:	dcc10e04 	addi	r19,sp,1080
   82cc8:	003cae06 	br	81f84 <___vfprintf_internal_r+0x394>
   82ccc:	d9413617 	ldw	r5,1240(sp)
   82cd0:	d8810dc4 	addi	r2,sp,1079
   82cd4:	b8c003cc 	andi	r3,r23,15
   82cd8:	b008973a 	slli	r4,r22,28
   82cdc:	28c7883a 	add	r3,r5,r3
   82ce0:	b82ed13a 	srli	r23,r23,4
   82ce4:	18c00003 	ldbu	r3,0(r3)
   82ce8:	b02cd13a 	srli	r22,r22,4
   82cec:	25eeb03a 	or	r23,r4,r23
   82cf0:	10c00005 	stb	r3,0(r2)
   82cf4:	bd86b03a 	or	r3,r23,r22
   82cf8:	1027883a 	mov	r19,r2
   82cfc:	10bfffc4 	addi	r2,r2,-1
   82d00:	183ff41e 	bne	r3,zero,82cd4 <___vfprintf_internal_r+0x10e4>
   82d04:	003f1706 	br	82964 <___vfprintf_internal_r+0xd74>
   82d08:	b0025826 	beq	r22,zero,8366c <___vfprintf_internal_r+0x1a7c>
   82d0c:	b807883a 	mov	r3,r23
   82d10:	d8810dc4 	addi	r2,sp,1079
   82d14:	882f883a 	mov	r23,r17
   82d18:	04c00244 	movi	r19,9
   82d1c:	8023883a 	mov	r17,r16
   82d20:	da412815 	stw	r9,1184(sp)
   82d24:	1821883a 	mov	r16,r3
   82d28:	8009883a 	mov	r4,r16
   82d2c:	b00b883a 	mov	r5,r22
   82d30:	01800284 	movi	r6,10
   82d34:	000f883a 	mov	r7,zero
   82d38:	1029883a 	mov	r20,r2
   82d3c:	00895e40 	call	895e4 <__umoddi3>
   82d40:	10800c04 	addi	r2,r2,48
   82d44:	8009883a 	mov	r4,r16
   82d48:	b00b883a 	mov	r5,r22
   82d4c:	a0800005 	stb	r2,0(r20)
   82d50:	01800284 	movi	r6,10
   82d54:	000f883a 	mov	r7,zero
   82d58:	008901c0 	call	8901c <__udivdi3>
   82d5c:	1021883a 	mov	r16,r2
   82d60:	182d883a 	mov	r22,r3
   82d64:	a0bfffc4 	addi	r2,r20,-1
   82d68:	183fef1e 	bne	r3,zero,82d28 <___vfprintf_internal_r+0x1138>
   82d6c:	9c3fee36 	bltu	r19,r16,82d28 <___vfprintf_internal_r+0x1138>
   82d70:	da412817 	ldw	r9,1184(sp)
   82d74:	8005883a 	mov	r2,r16
   82d78:	8821883a 	mov	r16,r17
   82d7c:	b823883a 	mov	r17,r23
   82d80:	102f883a 	mov	r23,r2
   82d84:	d8812717 	ldw	r2,1180(sp)
   82d88:	a4ffffc4 	addi	r19,r20,-1
   82d8c:	bdc00c04 	addi	r23,r23,48
   82d90:	14c5c83a 	sub	r2,r2,r19
   82d94:	a5ffffc5 	stb	r23,-1(r20)
   82d98:	d8812b15 	stw	r2,1196(sp)
   82d9c:	003c7906 	br	81f84 <___vfprintf_internal_r+0x394>
   82da0:	00c00044 	movi	r3,1
   82da4:	bd84b03a 	or	r2,r23,r22
   82da8:	003c6806 	br	81f4c <___vfprintf_internal_r+0x35c>
   82dac:	dc812417 	ldw	r18,1168(sp)
   82db0:	0480ee0e 	bge	zero,r18,8316c <___vfprintf_internal_r+0x157c>
   82db4:	d9013217 	ldw	r4,1224(sp)
   82db8:	4cc00015 	stw	r19,0(r9)
   82dbc:	9100c616 	blt	r18,r4,830d8 <___vfprintf_internal_r+0x14e8>
   82dc0:	49000115 	stw	r4,4(r9)
   82dc4:	4111883a 	add	r8,r8,r4
   82dc8:	18c00044 	addi	r3,r3,1
   82dcc:	da011d15 	stw	r8,1140(sp)
   82dd0:	d8c11c15 	stw	r3,1136(sp)
   82dd4:	008001c4 	movi	r2,7
   82dd8:	10c20916 	blt	r2,r3,83600 <___vfprintf_internal_r+0x1a10>
   82ddc:	4a400204 	addi	r9,r9,8
   82de0:	d8813217 	ldw	r2,1224(sp)
   82de4:	90a5c83a 	sub	r18,r18,r2
   82de8:	04beae0e 	bge	zero,r18,828a4 <___vfprintf_internal_r+0xcb4>
   82dec:	04c00404 	movi	r19,16
   82df0:	d8c11c17 	ldw	r3,1136(sp)
   82df4:	05000274 	movhi	r20,9
   82df8:	a5387584 	addi	r20,r20,-7722
   82dfc:	9c81be0e 	bge	r19,r18,834f8 <___vfprintf_internal_r+0x1908>
   82e00:	058001c4 	movi	r22,7
   82e04:	ddc12917 	ldw	r23,1188(sp)
   82e08:	00000306 	br	82e18 <___vfprintf_internal_r+0x1228>
   82e0c:	4a400204 	addi	r9,r9,8
   82e10:	94bffc04 	addi	r18,r18,-16
   82e14:	9c81b80e 	bge	r19,r18,834f8 <___vfprintf_internal_r+0x1908>
   82e18:	4d000015 	stw	r20,0(r9)
   82e1c:	4cc00115 	stw	r19,4(r9)
   82e20:	42000404 	addi	r8,r8,16
   82e24:	18c00044 	addi	r3,r3,1
   82e28:	da011d15 	stw	r8,1140(sp)
   82e2c:	d8c11c15 	stw	r3,1136(sp)
   82e30:	b0fff60e 	bge	r22,r3,82e0c <___vfprintf_internal_r+0x121c>
   82e34:	8809883a 	mov	r4,r17
   82e38:	b80b883a 	mov	r5,r23
   82e3c:	d9811b04 	addi	r6,sp,1132
   82e40:	0081bbc0 	call	81bbc <__sprint_r>
   82e44:	103cfd1e 	bne	r2,zero,8223c <___vfprintf_internal_r+0x64c>
   82e48:	da011d17 	ldw	r8,1140(sp)
   82e4c:	d8c11c17 	ldw	r3,1136(sp)
   82e50:	da400404 	addi	r9,sp,16
   82e54:	003fee06 	br	82e10 <___vfprintf_internal_r+0x1220>
   82e58:	d9412917 	ldw	r5,1188(sp)
   82e5c:	8809883a 	mov	r4,r17
   82e60:	d9811b04 	addi	r6,sp,1132
   82e64:	0081bbc0 	call	81bbc <__sprint_r>
   82e68:	103cf41e 	bne	r2,zero,8223c <___vfprintf_internal_r+0x64c>
   82e6c:	da011d17 	ldw	r8,1140(sp)
   82e70:	d8c11c17 	ldw	r3,1136(sp)
   82e74:	da400404 	addi	r9,sp,16
   82e78:	003dee06 	br	82634 <___vfprintf_internal_r+0xa44>
   82e7c:	00c00084 	movi	r3,2
   82e80:	bd84b03a 	or	r2,r23,r22
   82e84:	d8012585 	stb	zero,1174(sp)
   82e88:	003c3006 	br	81f4c <___vfprintf_internal_r+0x35c>
   82e8c:	d8813217 	ldw	r2,1224(sp)
   82e90:	14ffffc4 	addi	r19,r2,-1
   82e94:	04ff630e 	bge	zero,r19,82c24 <___vfprintf_internal_r+0x1034>
   82e98:	05800404 	movi	r22,16
   82e9c:	05000274 	movhi	r20,9
   82ea0:	a5387584 	addi	r20,r20,-7722
   82ea4:	b4c03c0e 	bge	r22,r19,82f98 <___vfprintf_internal_r+0x13a8>
   82ea8:	05c001c4 	movi	r23,7
   82eac:	df012917 	ldw	fp,1188(sp)
   82eb0:	00000306 	br	82ec0 <___vfprintf_internal_r+0x12d0>
   82eb4:	94800204 	addi	r18,r18,8
   82eb8:	9cfffc04 	addi	r19,r19,-16
   82ebc:	b4c0360e 	bge	r22,r19,82f98 <___vfprintf_internal_r+0x13a8>
   82ec0:	95000015 	stw	r20,0(r18)
   82ec4:	95800115 	stw	r22,4(r18)
   82ec8:	42000404 	addi	r8,r8,16
   82ecc:	18c00044 	addi	r3,r3,1
   82ed0:	da011d15 	stw	r8,1140(sp)
   82ed4:	d8c11c15 	stw	r3,1136(sp)
   82ed8:	b8fff60e 	bge	r23,r3,82eb4 <___vfprintf_internal_r+0x12c4>
   82edc:	8809883a 	mov	r4,r17
   82ee0:	e00b883a 	mov	r5,fp
   82ee4:	d9811b04 	addi	r6,sp,1132
   82ee8:	0081bbc0 	call	81bbc <__sprint_r>
   82eec:	103cd31e 	bne	r2,zero,8223c <___vfprintf_internal_r+0x64c>
   82ef0:	da011d17 	ldw	r8,1140(sp)
   82ef4:	d8c11c17 	ldw	r3,1136(sp)
   82ef8:	dc800404 	addi	r18,sp,16
   82efc:	003fee06 	br	82eb8 <___vfprintf_internal_r+0x12c8>
   82f00:	8088703a 	and	r4,r16,r2
   82f04:	203f1d1e 	bne	r4,zero,82b7c <___vfprintf_internal_r+0xf8c>
   82f08:	48800115 	stw	r2,4(r9)
   82f0c:	42000044 	addi	r8,r8,1
   82f10:	18c00044 	addi	r3,r3,1
   82f14:	da011d15 	stw	r8,1140(sp)
   82f18:	d8c11c15 	stw	r3,1136(sp)
   82f1c:	008001c4 	movi	r2,7
   82f20:	10c00216 	blt	r2,r3,82f2c <___vfprintf_internal_r+0x133c>
   82f24:	4c800204 	addi	r18,r9,8
   82f28:	003f3e06 	br	82c24 <___vfprintf_internal_r+0x1034>
   82f2c:	d9412917 	ldw	r5,1188(sp)
   82f30:	8809883a 	mov	r4,r17
   82f34:	d9811b04 	addi	r6,sp,1132
   82f38:	0081bbc0 	call	81bbc <__sprint_r>
   82f3c:	103cbf1e 	bne	r2,zero,8223c <___vfprintf_internal_r+0x64c>
   82f40:	dc800404 	addi	r18,sp,16
   82f44:	da011d17 	ldw	r8,1140(sp)
   82f48:	d8c11c17 	ldw	r3,1136(sp)
   82f4c:	003f3506 	br	82c24 <___vfprintf_internal_r+0x1034>
   82f50:	d9412917 	ldw	r5,1188(sp)
   82f54:	8809883a 	mov	r4,r17
   82f58:	d9811b04 	addi	r6,sp,1132
   82f5c:	0081bbc0 	call	81bbc <__sprint_r>
   82f60:	103cb61e 	bne	r2,zero,8223c <___vfprintf_internal_r+0x64c>
   82f64:	da011d17 	ldw	r8,1140(sp)
   82f68:	d8c11c17 	ldw	r3,1136(sp)
   82f6c:	da400404 	addi	r9,sp,16
   82f70:	003f0b06 	br	82ba0 <___vfprintf_internal_r+0xfb0>
   82f74:	d9412917 	ldw	r5,1188(sp)
   82f78:	8809883a 	mov	r4,r17
   82f7c:	d9811b04 	addi	r6,sp,1132
   82f80:	0081bbc0 	call	81bbc <__sprint_r>
   82f84:	103cad1e 	bne	r2,zero,8223c <___vfprintf_internal_r+0x64c>
   82f88:	da011d17 	ldw	r8,1140(sp)
   82f8c:	d8c11c17 	ldw	r3,1136(sp)
   82f90:	dc800404 	addi	r18,sp,16
   82f94:	003f0d06 	br	82bcc <___vfprintf_internal_r+0xfdc>
   82f98:	95000015 	stw	r20,0(r18)
   82f9c:	94c00115 	stw	r19,4(r18)
   82fa0:	44d1883a 	add	r8,r8,r19
   82fa4:	003f1906 	br	82c0c <___vfprintf_internal_r+0x101c>
   82fa8:	d9412917 	ldw	r5,1188(sp)
   82fac:	8809883a 	mov	r4,r17
   82fb0:	d9811b04 	addi	r6,sp,1132
   82fb4:	0081bbc0 	call	81bbc <__sprint_r>
   82fb8:	103ca01e 	bne	r2,zero,8223c <___vfprintf_internal_r+0x64c>
   82fbc:	da011d17 	ldw	r8,1140(sp)
   82fc0:	d8c11c17 	ldw	r3,1136(sp)
   82fc4:	da400404 	addi	r9,sp,16
   82fc8:	003db706 	br	826a8 <___vfprintf_internal_r+0xab8>
   82fcc:	4d000015 	stw	r20,0(r9)
   82fd0:	4c800115 	stw	r18,4(r9)
   82fd4:	4491883a 	add	r8,r8,r18
   82fd8:	003de706 	br	82778 <___vfprintf_internal_r+0xb88>
   82fdc:	8080100c 	andi	r2,r16,64
   82fe0:	10010226 	beq	r2,zero,833ec <___vfprintf_internal_r+0x17fc>
   82fe4:	d8812d17 	ldw	r2,1204(sp)
   82fe8:	002d883a 	mov	r22,zero
   82fec:	00c00044 	movi	r3,1
   82ff0:	15c0000b 	ldhu	r23,0(r2)
   82ff4:	10800104 	addi	r2,r2,4
   82ff8:	d8812d15 	stw	r2,1204(sp)
   82ffc:	d8012585 	stb	zero,1174(sp)
   83000:	b805883a 	mov	r2,r23
   83004:	003bd106 	br	81f4c <___vfprintf_internal_r+0x35c>
   83008:	d9012d17 	ldw	r4,1204(sp)
   8300c:	25800017 	ldw	r22,0(r4)
   83010:	25000117 	ldw	r20,4(r4)
   83014:	21000204 	addi	r4,r4,8
   83018:	d9012d15 	stw	r4,1204(sp)
   8301c:	dd813315 	stw	r22,1228(sp)
   83020:	dd013415 	stw	r20,1232(sp)
   83024:	003d2b06 	br	824d4 <___vfprintf_internal_r+0x8e4>
   83028:	8080100c 	andi	r2,r16,64
   8302c:	1000fe26 	beq	r2,zero,83428 <___vfprintf_internal_r+0x1838>
   83030:	d9012d17 	ldw	r4,1204(sp)
   83034:	002d883a 	mov	r22,zero
   83038:	0007883a 	mov	r3,zero
   8303c:	25c0000b 	ldhu	r23,0(r4)
   83040:	21000104 	addi	r4,r4,4
   83044:	d9012d15 	stw	r4,1204(sp)
   83048:	b805883a 	mov	r2,r23
   8304c:	d8012585 	stb	zero,1174(sp)
   83050:	003bbe06 	br	81f4c <___vfprintf_internal_r+0x35c>
   83054:	8080100c 	andi	r2,r16,64
   83058:	1000ed26 	beq	r2,zero,83410 <___vfprintf_internal_r+0x1820>
   8305c:	d9012d17 	ldw	r4,1204(sp)
   83060:	002d883a 	mov	r22,zero
   83064:	25c0000b 	ldhu	r23,0(r4)
   83068:	21000104 	addi	r4,r4,4
   8306c:	d9012d15 	stw	r4,1204(sp)
   83070:	003cd206 	br	823bc <___vfprintf_internal_r+0x7cc>
   83074:	00c00084 	movi	r3,2
   83078:	d8012585 	stb	zero,1174(sp)
   8307c:	003bb306 	br	81f4c <___vfprintf_internal_r+0x35c>
   83080:	8080040c 	andi	r2,r16,16
   83084:	1000f11e 	bne	r2,zero,8344c <___vfprintf_internal_r+0x185c>
   83088:	8400100c 	andi	r16,r16,64
   8308c:	80015526 	beq	r16,zero,835e4 <___vfprintf_internal_r+0x19f4>
   83090:	da012d17 	ldw	r8,1204(sp)
   83094:	d8c12c17 	ldw	r3,1200(sp)
   83098:	40800017 	ldw	r2,0(r8)
   8309c:	42000104 	addi	r8,r8,4
   830a0:	da012d15 	stw	r8,1204(sp)
   830a4:	10c0000d 	sth	r3,0(r2)
   830a8:	003b0706 	br	81cc8 <___vfprintf_internal_r+0xd8>
   830ac:	8080100c 	andi	r2,r16,64
   830b0:	1000c726 	beq	r2,zero,833d0 <___vfprintf_internal_r+0x17e0>
   830b4:	da012d17 	ldw	r8,1204(sp)
   830b8:	45c0000f 	ldh	r23,0(r8)
   830bc:	42000104 	addi	r8,r8,4
   830c0:	da012d15 	stw	r8,1204(sp)
   830c4:	b82dd7fa 	srai	r22,r23,31
   830c8:	b005883a 	mov	r2,r22
   830cc:	003c1006 	br	82110 <___vfprintf_internal_r+0x520>
   830d0:	ac800007 	ldb	r18,0(r21)
   830d4:	003b2406 	br	81d68 <___vfprintf_internal_r+0x178>
   830d8:	4c800115 	stw	r18,4(r9)
   830dc:	9211883a 	add	r8,r18,r8
   830e0:	18c00044 	addi	r3,r3,1
   830e4:	da011d15 	stw	r8,1140(sp)
   830e8:	d8c11c15 	stw	r3,1136(sp)
   830ec:	008001c4 	movi	r2,7
   830f0:	10c15416 	blt	r2,r3,83644 <___vfprintf_internal_r+0x1a54>
   830f4:	4a400204 	addi	r9,r9,8
   830f8:	d8813717 	ldw	r2,1244(sp)
   830fc:	9ca7883a 	add	r19,r19,r18
   83100:	48800015 	stw	r2,0(r9)
   83104:	00800044 	movi	r2,1
   83108:	48800115 	stw	r2,4(r9)
   8310c:	4091883a 	add	r8,r8,r2
   83110:	1887883a 	add	r3,r3,r2
   83114:	da011d15 	stw	r8,1140(sp)
   83118:	d8c11c15 	stw	r3,1136(sp)
   8311c:	008001c4 	movi	r2,7
   83120:	10c14016 	blt	r2,r3,83624 <___vfprintf_internal_r+0x1a34>
   83124:	4a400204 	addi	r9,r9,8
   83128:	d9013217 	ldw	r4,1224(sp)
   8312c:	da011d17 	ldw	r8,1140(sp)
   83130:	d8c11c17 	ldw	r3,1136(sp)
   83134:	24a5c83a 	sub	r18,r4,r18
   83138:	4cc00015 	stw	r19,0(r9)
   8313c:	003fa406 	br	82fd0 <___vfprintf_internal_r+0x13e0>
   83140:	04c00274 	movhi	r19,9
   83144:	9cf86204 	addi	r19,r19,-7800
   83148:	003cf406 	br	8251c <___vfprintf_internal_r+0x92c>
   8314c:	d9412917 	ldw	r5,1188(sp)
   83150:	8809883a 	mov	r4,r17
   83154:	d9811b04 	addi	r6,sp,1132
   83158:	0081bbc0 	call	81bbc <__sprint_r>
   8315c:	103c371e 	bne	r2,zero,8223c <___vfprintf_internal_r+0x64c>
   83160:	da011d17 	ldw	r8,1140(sp)
   83164:	da400404 	addi	r9,sp,16
   83168:	003e1c06 	br	829dc <___vfprintf_internal_r+0xdec>
   8316c:	00800274 	movhi	r2,9
   83170:	10b87104 	addi	r2,r2,-7740
   83174:	48800015 	stw	r2,0(r9)
   83178:	00800044 	movi	r2,1
   8317c:	48800115 	stw	r2,4(r9)
   83180:	4091883a 	add	r8,r8,r2
   83184:	1887883a 	add	r3,r3,r2
   83188:	da011d15 	stw	r8,1140(sp)
   8318c:	d8c11c15 	stw	r3,1136(sp)
   83190:	008001c4 	movi	r2,7
   83194:	10c0c316 	blt	r2,r3,834a4 <___vfprintf_internal_r+0x18b4>
   83198:	4a400204 	addi	r9,r9,8
   8319c:	9000041e 	bne	r18,zero,831b0 <___vfprintf_internal_r+0x15c0>
   831a0:	d8c13217 	ldw	r3,1224(sp)
   831a4:	1800021e 	bne	r3,zero,831b0 <___vfprintf_internal_r+0x15c0>
   831a8:	8080004c 	andi	r2,r16,1
   831ac:	103d7826 	beq	r2,zero,82790 <___vfprintf_internal_r+0xba0>
   831b0:	d8c11c17 	ldw	r3,1136(sp)
   831b4:	d9013717 	ldw	r4,1244(sp)
   831b8:	00800044 	movi	r2,1
   831bc:	48800115 	stw	r2,4(r9)
   831c0:	49000015 	stw	r4,0(r9)
   831c4:	4091883a 	add	r8,r8,r2
   831c8:	1887883a 	add	r3,r3,r2
   831cc:	da011d15 	stw	r8,1140(sp)
   831d0:	d8c11c15 	stw	r3,1136(sp)
   831d4:	008001c4 	movi	r2,7
   831d8:	10c12e16 	blt	r2,r3,83694 <___vfprintf_internal_r+0x1aa4>
   831dc:	4a400204 	addi	r9,r9,8
   831e0:	04a5c83a 	sub	r18,zero,r18
   831e4:	0480de0e 	bge	zero,r18,83560 <___vfprintf_internal_r+0x1970>
   831e8:	05800404 	movi	r22,16
   831ec:	05000274 	movhi	r20,9
   831f0:	a5387584 	addi	r20,r20,-7722
   831f4:	b480e20e 	bge	r22,r18,83580 <___vfprintf_internal_r+0x1990>
   831f8:	05c001c4 	movi	r23,7
   831fc:	df012917 	ldw	fp,1188(sp)
   83200:	00000306 	br	83210 <___vfprintf_internal_r+0x1620>
   83204:	4a400204 	addi	r9,r9,8
   83208:	94bffc04 	addi	r18,r18,-16
   8320c:	b480dc0e 	bge	r22,r18,83580 <___vfprintf_internal_r+0x1990>
   83210:	4d000015 	stw	r20,0(r9)
   83214:	4d800115 	stw	r22,4(r9)
   83218:	42000404 	addi	r8,r8,16
   8321c:	18c00044 	addi	r3,r3,1
   83220:	da011d15 	stw	r8,1140(sp)
   83224:	d8c11c15 	stw	r3,1136(sp)
   83228:	b8fff60e 	bge	r23,r3,83204 <___vfprintf_internal_r+0x1614>
   8322c:	8809883a 	mov	r4,r17
   83230:	e00b883a 	mov	r5,fp
   83234:	d9811b04 	addi	r6,sp,1132
   83238:	0081bbc0 	call	81bbc <__sprint_r>
   8323c:	103bff1e 	bne	r2,zero,8223c <___vfprintf_internal_r+0x64c>
   83240:	da011d17 	ldw	r8,1140(sp)
   83244:	d8c11c17 	ldw	r3,1136(sp)
   83248:	da400404 	addi	r9,sp,16
   8324c:	003fee06 	br	83208 <___vfprintf_internal_r+0x1618>
   83250:	da413c15 	stw	r9,1264(sp)
   83254:	00887700 	call	88770 <__isnand>
   83258:	da413c17 	ldw	r9,1264(sp)
   8325c:	1000851e 	bne	r2,zero,83474 <___vfprintf_internal_r+0x1884>
   83260:	00bfffc4 	movi	r2,-1
   83264:	e0817626 	beq	fp,r2,83840 <___vfprintf_internal_r+0x1c50>
   83268:	008019c4 	movi	r2,103
   8326c:	90817126 	beq	r18,r2,83834 <___vfprintf_internal_r+0x1c44>
   83270:	008011c4 	movi	r2,71
   83274:	90816f26 	beq	r18,r2,83834 <___vfprintf_internal_r+0x1c44>
   83278:	82004014 	ori	r8,r16,256
   8327c:	da012a15 	stw	r8,1192(sp)
   83280:	a0017116 	blt	r20,zero,83848 <___vfprintf_internal_r+0x1c58>
   83284:	d8012f05 	stb	zero,1212(sp)
   83288:	00801984 	movi	r2,102
   8328c:	90811226 	beq	r18,r2,836d8 <___vfprintf_internal_r+0x1ae8>
   83290:	00801184 	movi	r2,70
   83294:	90811026 	beq	r18,r2,836d8 <___vfprintf_internal_r+0x1ae8>
   83298:	00801944 	movi	r2,101
   8329c:	90819b26 	beq	r18,r2,8390c <___vfprintf_internal_r+0x1d1c>
   832a0:	00801144 	movi	r2,69
   832a4:	90819926 	beq	r18,r2,8390c <___vfprintf_internal_r+0x1d1c>
   832a8:	e02f883a 	mov	r23,fp
   832ac:	d8812404 	addi	r2,sp,1168
   832b0:	d8800115 	stw	r2,4(sp)
   832b4:	d8812304 	addi	r2,sp,1164
   832b8:	d8800215 	stw	r2,8(sp)
   832bc:	d8812204 	addi	r2,sp,1160
   832c0:	ddc00015 	stw	r23,0(sp)
   832c4:	d8800315 	stw	r2,12(sp)
   832c8:	8809883a 	mov	r4,r17
   832cc:	b00b883a 	mov	r5,r22
   832d0:	a00d883a 	mov	r6,r20
   832d4:	01c00084 	movi	r7,2
   832d8:	da413c15 	stw	r9,1264(sp)
   832dc:	0083d880 	call	83d88 <_dtoa_r>
   832e0:	1027883a 	mov	r19,r2
   832e4:	008019c4 	movi	r2,103
   832e8:	da413c17 	ldw	r9,1264(sp)
   832ec:	90818c1e 	bne	r18,r2,83920 <___vfprintf_internal_r+0x1d30>
   832f0:	8080004c 	andi	r2,r16,1
   832f4:	10017926 	beq	r2,zero,838dc <___vfprintf_internal_r+0x1cec>
   832f8:	00801184 	movi	r2,70
   832fc:	9dc7883a 	add	r3,r19,r23
   83300:	90810626 	beq	r18,r2,8371c <___vfprintf_internal_r+0x1b2c>
   83304:	b009883a 	mov	r4,r22
   83308:	a00b883a 	mov	r5,r20
   8330c:	000d883a 	mov	r6,zero
   83310:	000f883a 	mov	r7,zero
   83314:	d8c13b15 	stw	r3,1260(sp)
   83318:	da413c15 	stw	r9,1264(sp)
   8331c:	008a4100 	call	8a410 <__eqdf2>
   83320:	d8c13b17 	ldw	r3,1260(sp)
   83324:	da413c17 	ldw	r9,1264(sp)
   83328:	10000726 	beq	r2,zero,83348 <___vfprintf_internal_r+0x1758>
   8332c:	d8812217 	ldw	r2,1160(sp)
   83330:	10c1962e 	bgeu	r2,r3,8398c <___vfprintf_internal_r+0x1d9c>
   83334:	01000c04 	movi	r4,48
   83338:	11000005 	stb	r4,0(r2)
   8333c:	10800044 	addi	r2,r2,1
   83340:	d8812215 	stw	r2,1160(sp)
   83344:	10fffc1e 	bne	r2,r3,83338 <___vfprintf_internal_r+0x1748>
   83348:	1cc7c83a 	sub	r3,r3,r19
   8334c:	d8c13215 	stw	r3,1224(sp)
   83350:	008019c4 	movi	r2,103
   83354:	90810626 	beq	r18,r2,83770 <___vfprintf_internal_r+0x1b80>
   83358:	008011c4 	movi	r2,71
   8335c:	90810426 	beq	r18,r2,83770 <___vfprintf_internal_r+0x1b80>
   83360:	00801984 	movi	r2,102
   83364:	90819a1e 	bne	r18,r2,839d0 <___vfprintf_internal_r+0x1de0>
   83368:	d8812417 	ldw	r2,1168(sp)
   8336c:	d8812b15 	stw	r2,1196(sp)
   83370:	0081880e 	bge	zero,r2,83994 <___vfprintf_internal_r+0x1da4>
   83374:	e000021e 	bne	fp,zero,83380 <___vfprintf_internal_r+0x1790>
   83378:	8400004c 	andi	r16,r16,1
   8337c:	80000426 	beq	r16,zero,83390 <___vfprintf_internal_r+0x17a0>
   83380:	d8812b17 	ldw	r2,1196(sp)
   83384:	e2000044 	addi	r8,fp,1
   83388:	1205883a 	add	r2,r2,r8
   8338c:	d8812b15 	stw	r2,1196(sp)
   83390:	d8812815 	stw	r2,1184(sp)
   83394:	10011716 	blt	r2,zero,837f4 <___vfprintf_internal_r+0x1c04>
   83398:	ddc12f07 	ldb	r23,1212(sp)
   8339c:	b800ca26 	beq	r23,zero,836c8 <___vfprintf_internal_r+0x1ad8>
   833a0:	00800b44 	movi	r2,45
   833a4:	d8812585 	stb	r2,1174(sp)
   833a8:	dc012a17 	ldw	r16,1192(sp)
   833ac:	d8013115 	stw	zero,1220(sp)
   833b0:	003afe06 	br	81fac <___vfprintf_internal_r+0x3bc>
   833b4:	d8812b17 	ldw	r2,1196(sp)
   833b8:	d8812815 	stw	r2,1184(sp)
   833bc:	10005e16 	blt	r2,zero,83538 <___vfprintf_internal_r+0x1948>
   833c0:	d8812583 	ldbu	r2,1174(sp)
   833c4:	ddc12d15 	stw	r23,1204(sp)
   833c8:	d8013115 	stw	zero,1220(sp)
   833cc:	003af306 	br	81f9c <___vfprintf_internal_r+0x3ac>
   833d0:	d8812d17 	ldw	r2,1204(sp)
   833d4:	15c00017 	ldw	r23,0(r2)
   833d8:	10800104 	addi	r2,r2,4
   833dc:	d8812d15 	stw	r2,1204(sp)
   833e0:	b82dd7fa 	srai	r22,r23,31
   833e4:	b005883a 	mov	r2,r22
   833e8:	003b4906 	br	82110 <___vfprintf_internal_r+0x520>
   833ec:	d8c12d17 	ldw	r3,1204(sp)
   833f0:	002d883a 	mov	r22,zero
   833f4:	1dc00017 	ldw	r23,0(r3)
   833f8:	18c00104 	addi	r3,r3,4
   833fc:	d8c12d15 	stw	r3,1204(sp)
   83400:	b805883a 	mov	r2,r23
   83404:	00c00044 	movi	r3,1
   83408:	d8012585 	stb	zero,1174(sp)
   8340c:	003acf06 	br	81f4c <___vfprintf_internal_r+0x35c>
   83410:	da012d17 	ldw	r8,1204(sp)
   83414:	002d883a 	mov	r22,zero
   83418:	45c00017 	ldw	r23,0(r8)
   8341c:	42000104 	addi	r8,r8,4
   83420:	da012d15 	stw	r8,1204(sp)
   83424:	003be506 	br	823bc <___vfprintf_internal_r+0x7cc>
   83428:	da012d17 	ldw	r8,1204(sp)
   8342c:	002d883a 	mov	r22,zero
   83430:	0007883a 	mov	r3,zero
   83434:	45c00017 	ldw	r23,0(r8)
   83438:	42000104 	addi	r8,r8,4
   8343c:	da012d15 	stw	r8,1204(sp)
   83440:	b805883a 	mov	r2,r23
   83444:	d8012585 	stb	zero,1174(sp)
   83448:	003ac006 	br	81f4c <___vfprintf_internal_r+0x35c>
   8344c:	d8c12d17 	ldw	r3,1204(sp)
   83450:	d9012c17 	ldw	r4,1200(sp)
   83454:	18800017 	ldw	r2,0(r3)
   83458:	18c00104 	addi	r3,r3,4
   8345c:	d8c12d15 	stw	r3,1204(sp)
   83460:	11000015 	stw	r4,0(r2)
   83464:	003a1806 	br	81cc8 <___vfprintf_internal_r+0xd8>
   83468:	073fffc4 	movi	fp,-1
   8346c:	202b883a 	mov	r21,r4
   83470:	003a3e06 	br	81d6c <___vfprintf_internal_r+0x17c>
   83474:	008011c4 	movi	r2,71
   83478:	14809016 	blt	r2,r18,836bc <___vfprintf_internal_r+0x1acc>
   8347c:	04c00274 	movhi	r19,9
   83480:	9cf86304 	addi	r19,r19,-7796
   83484:	00c000c4 	movi	r3,3
   83488:	00bfdfc4 	movi	r2,-129
   8348c:	80a0703a 	and	r16,r16,r2
   83490:	d8c12815 	stw	r3,1184(sp)
   83494:	d8812583 	ldbu	r2,1174(sp)
   83498:	d8c12b15 	stw	r3,1196(sp)
   8349c:	d8013115 	stw	zero,1220(sp)
   834a0:	003abe06 	br	81f9c <___vfprintf_internal_r+0x3ac>
   834a4:	d9412917 	ldw	r5,1188(sp)
   834a8:	8809883a 	mov	r4,r17
   834ac:	d9811b04 	addi	r6,sp,1132
   834b0:	0081bbc0 	call	81bbc <__sprint_r>
   834b4:	103b611e 	bne	r2,zero,8223c <___vfprintf_internal_r+0x64c>
   834b8:	dc812417 	ldw	r18,1168(sp)
   834bc:	da011d17 	ldw	r8,1140(sp)
   834c0:	da400404 	addi	r9,sp,16
   834c4:	003f3506 	br	8319c <___vfprintf_internal_r+0x15ac>
   834c8:	ad400044 	addi	r21,r21,1
   834cc:	84000814 	ori	r16,r16,32
   834d0:	14800047 	ldb	r18,1(r2)
   834d4:	003a2406 	br	81d68 <___vfprintf_internal_r+0x178>
   834d8:	d9412917 	ldw	r5,1188(sp)
   834dc:	8809883a 	mov	r4,r17
   834e0:	d9811b04 	addi	r6,sp,1132
   834e4:	0081bbc0 	call	81bbc <__sprint_r>
   834e8:	103b541e 	bne	r2,zero,8223c <___vfprintf_internal_r+0x64c>
   834ec:	da011d17 	ldw	r8,1140(sp)
   834f0:	da400404 	addi	r9,sp,16
   834f4:	003d4a06 	br	82a20 <___vfprintf_internal_r+0xe30>
   834f8:	4d000015 	stw	r20,0(r9)
   834fc:	4c800115 	stw	r18,4(r9)
   83500:	4491883a 	add	r8,r8,r18
   83504:	18c00044 	addi	r3,r3,1
   83508:	da011d15 	stw	r8,1140(sp)
   8350c:	d8c11c15 	stw	r3,1136(sp)
   83510:	008001c4 	movi	r2,7
   83514:	10fcdc16 	blt	r2,r3,82888 <___vfprintf_internal_r+0xc98>
   83518:	4a400204 	addi	r9,r9,8
   8351c:	003ce106 	br	828a4 <___vfprintf_internal_r+0xcb4>
   83520:	da413c15 	stw	r9,1264(sp)
   83524:	0081b300 	call	81b30 <strlen>
   83528:	d8812b15 	stw	r2,1196(sp)
   8352c:	d8812815 	stw	r2,1184(sp)
   83530:	da413c17 	ldw	r9,1264(sp)
   83534:	103fa20e 	bge	r2,zero,833c0 <___vfprintf_internal_r+0x17d0>
   83538:	d8012815 	stw	zero,1184(sp)
   8353c:	003fa006 	br	833c0 <___vfprintf_internal_r+0x17d0>
   83540:	d9412917 	ldw	r5,1188(sp)
   83544:	8809883a 	mov	r4,r17
   83548:	d9811b04 	addi	r6,sp,1132
   8354c:	0081bbc0 	call	81bbc <__sprint_r>
   83550:	103b3a1e 	bne	r2,zero,8223c <___vfprintf_internal_r+0x64c>
   83554:	da011d17 	ldw	r8,1140(sp)
   83558:	d8c11c17 	ldw	r3,1136(sp)
   8355c:	da400404 	addi	r9,sp,16
   83560:	d8813217 	ldw	r2,1224(sp)
   83564:	4cc00015 	stw	r19,0(r9)
   83568:	48800115 	stw	r2,4(r9)
   8356c:	4091883a 	add	r8,r8,r2
   83570:	003c8106 	br	82778 <___vfprintf_internal_r+0xb88>
   83574:	00800b44 	movi	r2,45
   83578:	d8812585 	stb	r2,1174(sp)
   8357c:	003be306 	br	8250c <___vfprintf_internal_r+0x91c>
   83580:	4d000015 	stw	r20,0(r9)
   83584:	4c800115 	stw	r18,4(r9)
   83588:	4491883a 	add	r8,r8,r18
   8358c:	18c00044 	addi	r3,r3,1
   83590:	da011d15 	stw	r8,1140(sp)
   83594:	d8c11c15 	stw	r3,1136(sp)
   83598:	008001c4 	movi	r2,7
   8359c:	10ffe816 	blt	r2,r3,83540 <___vfprintf_internal_r+0x1950>
   835a0:	4a400204 	addi	r9,r9,8
   835a4:	003fee06 	br	83560 <___vfprintf_internal_r+0x1970>
   835a8:	df012b15 	stw	fp,1196(sp)
   835ac:	00800184 	movi	r2,6
   835b0:	1700072e 	bgeu	r2,fp,835d0 <___vfprintf_internal_r+0x19e0>
   835b4:	d8812b15 	stw	r2,1196(sp)
   835b8:	d8812815 	stw	r2,1184(sp)
   835bc:	ddc12d15 	stw	r23,1204(sp)
   835c0:	04c00274 	movhi	r19,9
   835c4:	9cf86f04 	addi	r19,r19,-7748
   835c8:	d8013115 	stw	zero,1220(sp)
   835cc:	003a7a06 	br	81fb8 <___vfprintf_internal_r+0x3c8>
   835d0:	d8812b17 	ldw	r2,1196(sp)
   835d4:	d8812815 	stw	r2,1184(sp)
   835d8:	103ff80e 	bge	r2,zero,835bc <___vfprintf_internal_r+0x19cc>
   835dc:	d8012815 	stw	zero,1184(sp)
   835e0:	003ff606 	br	835bc <___vfprintf_internal_r+0x19cc>
   835e4:	d9012d17 	ldw	r4,1204(sp)
   835e8:	da012c17 	ldw	r8,1200(sp)
   835ec:	20800017 	ldw	r2,0(r4)
   835f0:	21000104 	addi	r4,r4,4
   835f4:	d9012d15 	stw	r4,1204(sp)
   835f8:	12000015 	stw	r8,0(r2)
   835fc:	0039b206 	br	81cc8 <___vfprintf_internal_r+0xd8>
   83600:	d9412917 	ldw	r5,1188(sp)
   83604:	8809883a 	mov	r4,r17
   83608:	d9811b04 	addi	r6,sp,1132
   8360c:	0081bbc0 	call	81bbc <__sprint_r>
   83610:	103b0a1e 	bne	r2,zero,8223c <___vfprintf_internal_r+0x64c>
   83614:	dc812417 	ldw	r18,1168(sp)
   83618:	da011d17 	ldw	r8,1140(sp)
   8361c:	da400404 	addi	r9,sp,16
   83620:	003def06 	br	82de0 <___vfprintf_internal_r+0x11f0>
   83624:	d9412917 	ldw	r5,1188(sp)
   83628:	8809883a 	mov	r4,r17
   8362c:	d9811b04 	addi	r6,sp,1132
   83630:	0081bbc0 	call	81bbc <__sprint_r>
   83634:	103b011e 	bne	r2,zero,8223c <___vfprintf_internal_r+0x64c>
   83638:	dc812417 	ldw	r18,1168(sp)
   8363c:	da400404 	addi	r9,sp,16
   83640:	003eb906 	br	83128 <___vfprintf_internal_r+0x1538>
   83644:	d9412917 	ldw	r5,1188(sp)
   83648:	8809883a 	mov	r4,r17
   8364c:	d9811b04 	addi	r6,sp,1132
   83650:	0081bbc0 	call	81bbc <__sprint_r>
   83654:	103af91e 	bne	r2,zero,8223c <___vfprintf_internal_r+0x64c>
   83658:	dc812417 	ldw	r18,1168(sp)
   8365c:	da011d17 	ldw	r8,1140(sp)
   83660:	d8c11c17 	ldw	r3,1136(sp)
   83664:	da400404 	addi	r9,sp,16
   83668:	003ea306 	br	830f8 <___vfprintf_internal_r+0x1508>
   8366c:	00800244 	movi	r2,9
   83670:	15fda636 	bltu	r2,r23,82d0c <___vfprintf_internal_r+0x111c>
   83674:	dd010e04 	addi	r20,sp,1080
   83678:	003dc206 	br	82d84 <___vfprintf_internal_r+0x1194>
   8367c:	df012815 	stw	fp,1184(sp)
   83680:	d8812583 	ldbu	r2,1174(sp)
   83684:	df012b15 	stw	fp,1196(sp)
   83688:	ddc12d15 	stw	r23,1204(sp)
   8368c:	d8013115 	stw	zero,1220(sp)
   83690:	003a4206 	br	81f9c <___vfprintf_internal_r+0x3ac>
   83694:	d9412917 	ldw	r5,1188(sp)
   83698:	8809883a 	mov	r4,r17
   8369c:	d9811b04 	addi	r6,sp,1132
   836a0:	0081bbc0 	call	81bbc <__sprint_r>
   836a4:	103ae51e 	bne	r2,zero,8223c <___vfprintf_internal_r+0x64c>
   836a8:	dc812417 	ldw	r18,1168(sp)
   836ac:	da011d17 	ldw	r8,1140(sp)
   836b0:	d8c11c17 	ldw	r3,1136(sp)
   836b4:	da400404 	addi	r9,sp,16
   836b8:	003ec906 	br	831e0 <___vfprintf_internal_r+0x15f0>
   836bc:	04c00274 	movhi	r19,9
   836c0:	9cf86404 	addi	r19,r19,-7792
   836c4:	003f6f06 	br	83484 <___vfprintf_internal_r+0x1894>
   836c8:	d8812583 	ldbu	r2,1174(sp)
   836cc:	dc012a17 	ldw	r16,1192(sp)
   836d0:	d8013115 	stw	zero,1220(sp)
   836d4:	003a3106 	br	81f9c <___vfprintf_internal_r+0x3ac>
   836d8:	d8812404 	addi	r2,sp,1168
   836dc:	d8800115 	stw	r2,4(sp)
   836e0:	d8812304 	addi	r2,sp,1164
   836e4:	d8800215 	stw	r2,8(sp)
   836e8:	d8812204 	addi	r2,sp,1160
   836ec:	df000015 	stw	fp,0(sp)
   836f0:	d8800315 	stw	r2,12(sp)
   836f4:	8809883a 	mov	r4,r17
   836f8:	b00b883a 	mov	r5,r22
   836fc:	a00d883a 	mov	r6,r20
   83700:	01c000c4 	movi	r7,3
   83704:	da413c15 	stw	r9,1264(sp)
   83708:	0083d880 	call	83d88 <_dtoa_r>
   8370c:	da413c17 	ldw	r9,1264(sp)
   83710:	1027883a 	mov	r19,r2
   83714:	1707883a 	add	r3,r2,fp
   83718:	e02f883a 	mov	r23,fp
   8371c:	99000007 	ldb	r4,0(r19)
   83720:	00800c04 	movi	r2,48
   83724:	20800326 	beq	r4,r2,83734 <___vfprintf_internal_r+0x1b44>
   83728:	da812417 	ldw	r10,1168(sp)
   8372c:	1a87883a 	add	r3,r3,r10
   83730:	003ef406 	br	83304 <___vfprintf_internal_r+0x1714>
   83734:	b009883a 	mov	r4,r22
   83738:	a00b883a 	mov	r5,r20
   8373c:	000d883a 	mov	r6,zero
   83740:	000f883a 	mov	r7,zero
   83744:	d8c13b15 	stw	r3,1260(sp)
   83748:	da413c15 	stw	r9,1264(sp)
   8374c:	008a46c0 	call	8a46c <__nedf2>
   83750:	d8c13b17 	ldw	r3,1260(sp)
   83754:	da413c17 	ldw	r9,1264(sp)
   83758:	103ff326 	beq	r2,zero,83728 <___vfprintf_internal_r+0x1b38>
   8375c:	00800044 	movi	r2,1
   83760:	15d5c83a 	sub	r10,r2,r23
   83764:	da812415 	stw	r10,1168(sp)
   83768:	1a87883a 	add	r3,r3,r10
   8376c:	003ee506 	br	83304 <___vfprintf_internal_r+0x1714>
   83770:	d8812417 	ldw	r2,1168(sp)
   83774:	d8812b15 	stw	r2,1196(sp)
   83778:	1029883a 	mov	r20,r2
   8377c:	00bfff44 	movi	r2,-3
   83780:	a0800116 	blt	r20,r2,83788 <___vfprintf_internal_r+0x1b98>
   83784:	e5001d0e 	bge	fp,r20,837fc <___vfprintf_internal_r+0x1c0c>
   83788:	94bfff84 	addi	r18,r18,-2
   8378c:	a53fffc4 	addi	r20,r20,-1
   83790:	dd012415 	stw	r20,1168(sp)
   83794:	dc811fc5 	stb	r18,1151(sp)
   83798:	a0007816 	blt	r20,zero,8397c <___vfprintf_internal_r+0x1d8c>
   8379c:	00800ac4 	movi	r2,43
   837a0:	d8812005 	stb	r2,1152(sp)
   837a4:	00800244 	movi	r2,9
   837a8:	15002b16 	blt	r2,r20,83858 <___vfprintf_internal_r+0x1c68>
   837ac:	00800c04 	movi	r2,48
   837b0:	a5000c04 	addi	r20,r20,48
   837b4:	d8812045 	stb	r2,1153(sp)
   837b8:	dd012085 	stb	r20,1154(sp)
   837bc:	d8c120c4 	addi	r3,sp,1155
   837c0:	d8811fc4 	addi	r2,sp,1151
   837c4:	da013217 	ldw	r8,1224(sp)
   837c8:	1885c83a 	sub	r2,r3,r2
   837cc:	d8813515 	stw	r2,1236(sp)
   837d0:	4085883a 	add	r2,r8,r2
   837d4:	d8812b15 	stw	r2,1196(sp)
   837d8:	00800044 	movi	r2,1
   837dc:	1200610e 	bge	r2,r8,83964 <___vfprintf_internal_r+0x1d74>
   837e0:	d8812b17 	ldw	r2,1196(sp)
   837e4:	10800044 	addi	r2,r2,1
   837e8:	d8812b15 	stw	r2,1196(sp)
   837ec:	d8812815 	stw	r2,1184(sp)
   837f0:	103ee90e 	bge	r2,zero,83398 <___vfprintf_internal_r+0x17a8>
   837f4:	d8012815 	stw	zero,1184(sp)
   837f8:	003ee706 	br	83398 <___vfprintf_internal_r+0x17a8>
   837fc:	d8812b17 	ldw	r2,1196(sp)
   83800:	da013217 	ldw	r8,1224(sp)
   83804:	12003716 	blt	r2,r8,838e4 <___vfprintf_internal_r+0x1cf4>
   83808:	8400004c 	andi	r16,r16,1
   8380c:	80000326 	beq	r16,zero,8381c <___vfprintf_internal_r+0x1c2c>
   83810:	d8812b17 	ldw	r2,1196(sp)
   83814:	10800044 	addi	r2,r2,1
   83818:	d8812b15 	stw	r2,1196(sp)
   8381c:	d8812815 	stw	r2,1184(sp)
   83820:	10003716 	blt	r2,zero,83900 <___vfprintf_internal_r+0x1d10>
   83824:	048019c4 	movi	r18,103
   83828:	003edb06 	br	83398 <___vfprintf_internal_r+0x17a8>
   8382c:	d8012815 	stw	zero,1184(sp)
   83830:	003b6906 	br	825d8 <___vfprintf_internal_r+0x9e8>
   83834:	e03e901e 	bne	fp,zero,83278 <___vfprintf_internal_r+0x1688>
   83838:	07000044 	movi	fp,1
   8383c:	003e8e06 	br	83278 <___vfprintf_internal_r+0x1688>
   83840:	07000184 	movi	fp,6
   83844:	003e8c06 	br	83278 <___vfprintf_internal_r+0x1688>
   83848:	00c00b44 	movi	r3,45
   8384c:	a520003c 	xorhi	r20,r20,32768
   83850:	d8c12f05 	stb	r3,1212(sp)
   83854:	003e8c06 	br	83288 <___vfprintf_internal_r+0x1698>
   83858:	d8c11f84 	addi	r3,sp,1150
   8385c:	102f883a 	mov	r23,r2
   83860:	4839883a 	mov	fp,r9
   83864:	a009883a 	mov	r4,r20
   83868:	01400284 	movi	r5,10
   8386c:	182d883a 	mov	r22,r3
   83870:	008182c0 	call	8182c <__modsi3>
   83874:	10800c04 	addi	r2,r2,48
   83878:	a009883a 	mov	r4,r20
   8387c:	b0800005 	stb	r2,0(r22)
   83880:	01400284 	movi	r5,10
   83884:	00817dc0 	call	817dc <__divsi3>
   83888:	1029883a 	mov	r20,r2
   8388c:	b0ffffc4 	addi	r3,r22,-1
   83890:	b8bff416 	blt	r23,r2,83864 <___vfprintf_internal_r+0x1c74>
   83894:	11400c04 	addi	r5,r2,48
   83898:	b17fffc5 	stb	r5,-1(r22)
   8389c:	d8811fc4 	addi	r2,sp,1151
   838a0:	e013883a 	mov	r9,fp
   838a4:	1880482e 	bgeu	r3,r2,839c8 <___vfprintf_internal_r+0x1dd8>
   838a8:	b007883a 	mov	r3,r22
   838ac:	d9012044 	addi	r4,sp,1153
   838b0:	00000206 	br	838bc <___vfprintf_internal_r+0x1ccc>
   838b4:	19400003 	ldbu	r5,0(r3)
   838b8:	18c00044 	addi	r3,r3,1
   838bc:	21400005 	stb	r5,0(r4)
   838c0:	21000044 	addi	r4,r4,1
   838c4:	10fffb1e 	bne	r2,r3,838b4 <___vfprintf_internal_r+0x1cc4>
   838c8:	d8c12004 	addi	r3,sp,1152
   838cc:	1d87c83a 	sub	r3,r3,r22
   838d0:	d9012044 	addi	r4,sp,1153
   838d4:	20c7883a 	add	r3,r4,r3
   838d8:	003fba06 	br	837c4 <___vfprintf_internal_r+0x1bd4>
   838dc:	d8c12217 	ldw	r3,1160(sp)
   838e0:	003e9906 	br	83348 <___vfprintf_internal_r+0x1758>
   838e4:	05000b0e 	bge	zero,r20,83914 <___vfprintf_internal_r+0x1d24>
   838e8:	05000044 	movi	r20,1
   838ec:	da013217 	ldw	r8,1224(sp)
   838f0:	a229883a 	add	r20,r20,r8
   838f4:	dd012b15 	stw	r20,1196(sp)
   838f8:	dd012815 	stw	r20,1184(sp)
   838fc:	a03fc90e 	bge	r20,zero,83824 <___vfprintf_internal_r+0x1c34>
   83900:	d8012815 	stw	zero,1184(sp)
   83904:	048019c4 	movi	r18,103
   83908:	003ea306 	br	83398 <___vfprintf_internal_r+0x17a8>
   8390c:	e5c00044 	addi	r23,fp,1
   83910:	003e6606 	br	832ac <___vfprintf_internal_r+0x16bc>
   83914:	00800084 	movi	r2,2
   83918:	1529c83a 	sub	r20,r2,r20
   8391c:	003ff306 	br	838ec <___vfprintf_internal_r+0x1cfc>
   83920:	008011c4 	movi	r2,71
   83924:	90be7226 	beq	r18,r2,832f0 <___vfprintf_internal_r+0x1700>
   83928:	003e7306 	br	832f8 <___vfprintf_internal_r+0x1708>
   8392c:	d8812d17 	ldw	r2,1204(sp)
   83930:	ac800043 	ldbu	r18,1(r21)
   83934:	202b883a 	mov	r21,r4
   83938:	17000017 	ldw	fp,0(r2)
   8393c:	10800104 	addi	r2,r2,4
   83940:	d8812d15 	stw	r2,1204(sp)
   83944:	e0001b16 	blt	fp,zero,839b4 <___vfprintf_internal_r+0x1dc4>
   83948:	94803fcc 	andi	r18,r18,255
   8394c:	9480201c 	xori	r18,r18,128
   83950:	94bfe004 	addi	r18,r18,-128
   83954:	00390406 	br	81d68 <___vfprintf_internal_r+0x178>
   83958:	00bfffc4 	movi	r2,-1
   8395c:	d8812c15 	stw	r2,1200(sp)
   83960:	003a2506 	br	821f8 <___vfprintf_internal_r+0x608>
   83964:	80a0703a 	and	r16,r16,r2
   83968:	803f9d1e 	bne	r16,zero,837e0 <___vfprintf_internal_r+0x1bf0>
   8396c:	d8812b17 	ldw	r2,1196(sp)
   83970:	d8812815 	stw	r2,1184(sp)
   83974:	103e880e 	bge	r2,zero,83398 <___vfprintf_internal_r+0x17a8>
   83978:	003f9e06 	br	837f4 <___vfprintf_internal_r+0x1c04>
   8397c:	00800b44 	movi	r2,45
   83980:	0529c83a 	sub	r20,zero,r20
   83984:	d8812005 	stb	r2,1152(sp)
   83988:	003f8606 	br	837a4 <___vfprintf_internal_r+0x1bb4>
   8398c:	1007883a 	mov	r3,r2
   83990:	003e6d06 	br	83348 <___vfprintf_internal_r+0x1758>
   83994:	e000021e 	bne	fp,zero,839a0 <___vfprintf_internal_r+0x1db0>
   83998:	8400004c 	andi	r16,r16,1
   8399c:	80000e26 	beq	r16,zero,839d8 <___vfprintf_internal_r+0x1de8>
   839a0:	e7000084 	addi	fp,fp,2
   839a4:	df012b15 	stw	fp,1196(sp)
   839a8:	df012815 	stw	fp,1184(sp)
   839ac:	e03e7a0e 	bge	fp,zero,83398 <___vfprintf_internal_r+0x17a8>
   839b0:	003f9006 	br	837f4 <___vfprintf_internal_r+0x1c04>
   839b4:	94803fcc 	andi	r18,r18,255
   839b8:	9480201c 	xori	r18,r18,128
   839bc:	073fffc4 	movi	fp,-1
   839c0:	94bfe004 	addi	r18,r18,-128
   839c4:	0038e806 	br	81d68 <___vfprintf_internal_r+0x178>
   839c8:	d8c12044 	addi	r3,sp,1153
   839cc:	003f7d06 	br	837c4 <___vfprintf_internal_r+0x1bd4>
   839d0:	dd012417 	ldw	r20,1168(sp)
   839d4:	003f6d06 	br	8378c <___vfprintf_internal_r+0x1b9c>
   839d8:	00c00044 	movi	r3,1
   839dc:	d8c12815 	stw	r3,1184(sp)
   839e0:	d8c12b15 	stw	r3,1196(sp)
   839e4:	003e6c06 	br	83398 <___vfprintf_internal_r+0x17a8>

000839e8 <__vfprintf_internal>:
   839e8:	00800274 	movhi	r2,9
   839ec:	10bfef04 	addi	r2,r2,-68
   839f0:	2007883a 	mov	r3,r4
   839f4:	11000017 	ldw	r4,0(r2)
   839f8:	2805883a 	mov	r2,r5
   839fc:	300f883a 	mov	r7,r6
   83a00:	180b883a 	mov	r5,r3
   83a04:	100d883a 	mov	r6,r2
   83a08:	0081bf01 	jmpi	81bf0 <___vfprintf_internal_r>

00083a0c <__swsetup_r>:
   83a0c:	00800274 	movhi	r2,9
   83a10:	10bfef04 	addi	r2,r2,-68
   83a14:	10800017 	ldw	r2,0(r2)
   83a18:	defffd04 	addi	sp,sp,-12
   83a1c:	dc400115 	stw	r17,4(sp)
   83a20:	dc000015 	stw	r16,0(sp)
   83a24:	dfc00215 	stw	ra,8(sp)
   83a28:	2023883a 	mov	r17,r4
   83a2c:	2821883a 	mov	r16,r5
   83a30:	10000226 	beq	r2,zero,83a3c <__swsetup_r+0x30>
   83a34:	10c00e17 	ldw	r3,56(r2)
   83a38:	18003d26 	beq	r3,zero,83b30 <__swsetup_r+0x124>
   83a3c:	8080030b 	ldhu	r2,12(r16)
   83a40:	10c0020c 	andi	r3,r2,8
   83a44:	18ffffcc 	andi	r3,r3,65535
   83a48:	18e0001c 	xori	r3,r3,32768
   83a4c:	18e00004 	addi	r3,r3,-32768
   83a50:	18001226 	beq	r3,zero,83a9c <__swsetup_r+0x90>
   83a54:	80c00417 	ldw	r3,16(r16)
   83a58:	18001f26 	beq	r3,zero,83ad8 <__swsetup_r+0xcc>
   83a5c:	1100004c 	andi	r4,r2,1
   83a60:	2000261e 	bne	r4,zero,83afc <__swsetup_r+0xf0>
   83a64:	1080008c 	andi	r2,r2,2
   83a68:	10bfffcc 	andi	r2,r2,65535
   83a6c:	10a0001c 	xori	r2,r2,32768
   83a70:	10a00004 	addi	r2,r2,-32768
   83a74:	1000311e 	bne	r2,zero,83b3c <__swsetup_r+0x130>
   83a78:	80800517 	ldw	r2,20(r16)
   83a7c:	80800215 	stw	r2,8(r16)
   83a80:	18002326 	beq	r3,zero,83b10 <__swsetup_r+0x104>
   83a84:	0005883a 	mov	r2,zero
   83a88:	dfc00217 	ldw	ra,8(sp)
   83a8c:	dc400117 	ldw	r17,4(sp)
   83a90:	dc000017 	ldw	r16,0(sp)
   83a94:	dec00304 	addi	sp,sp,12
   83a98:	f800283a 	ret
   83a9c:	10c0040c 	andi	r3,r2,16
   83aa0:	18ffffcc 	andi	r3,r3,65535
   83aa4:	18e0001c 	xori	r3,r3,32768
   83aa8:	18e00004 	addi	r3,r3,-32768
   83aac:	18001e26 	beq	r3,zero,83b28 <__swsetup_r+0x11c>
   83ab0:	10c0010c 	andi	r3,r2,4
   83ab4:	18ffffcc 	andi	r3,r3,65535
   83ab8:	18e0001c 	xori	r3,r3,32768
   83abc:	18e00004 	addi	r3,r3,-32768
   83ac0:	1800211e 	bne	r3,zero,83b48 <__swsetup_r+0x13c>
   83ac4:	80c00417 	ldw	r3,16(r16)
   83ac8:	11400214 	ori	r5,r2,8
   83acc:	8140030d 	sth	r5,12(r16)
   83ad0:	2805883a 	mov	r2,r5
   83ad4:	183fe11e 	bne	r3,zero,83a5c <__swsetup_r+0x50>
   83ad8:	1140a00c 	andi	r5,r2,640
   83adc:	01008004 	movi	r4,512
   83ae0:	293fde26 	beq	r5,r4,83a5c <__swsetup_r+0x50>
   83ae4:	8809883a 	mov	r4,r17
   83ae8:	800b883a 	mov	r5,r16
   83aec:	00863c00 	call	863c0 <__smakebuf_r>
   83af0:	8080030b 	ldhu	r2,12(r16)
   83af4:	80c00417 	ldw	r3,16(r16)
   83af8:	003fd806 	br	83a5c <__swsetup_r+0x50>
   83afc:	80800517 	ldw	r2,20(r16)
   83b00:	80000215 	stw	zero,8(r16)
   83b04:	0085c83a 	sub	r2,zero,r2
   83b08:	80800615 	stw	r2,24(r16)
   83b0c:	183fdd1e 	bne	r3,zero,83a84 <__swsetup_r+0x78>
   83b10:	8080030b 	ldhu	r2,12(r16)
   83b14:	1080200c 	andi	r2,r2,128
   83b18:	10bfffcc 	andi	r2,r2,65535
   83b1c:	10a0001c 	xori	r2,r2,32768
   83b20:	10a00004 	addi	r2,r2,-32768
   83b24:	103fd826 	beq	r2,zero,83a88 <__swsetup_r+0x7c>
   83b28:	00bfffc4 	movi	r2,-1
   83b2c:	003fd606 	br	83a88 <__swsetup_r+0x7c>
   83b30:	1009883a 	mov	r4,r2
   83b34:	008564c0 	call	8564c <__sinit>
   83b38:	003fc006 	br	83a3c <__swsetup_r+0x30>
   83b3c:	0005883a 	mov	r2,zero
   83b40:	80800215 	stw	r2,8(r16)
   83b44:	003fce06 	br	83a80 <__swsetup_r+0x74>
   83b48:	81400c17 	ldw	r5,48(r16)
   83b4c:	28000626 	beq	r5,zero,83b68 <__swsetup_r+0x15c>
   83b50:	80c01004 	addi	r3,r16,64
   83b54:	28c00326 	beq	r5,r3,83b64 <__swsetup_r+0x158>
   83b58:	8809883a 	mov	r4,r17
   83b5c:	00859d00 	call	859d0 <_free_r>
   83b60:	8080030b 	ldhu	r2,12(r16)
   83b64:	80000c15 	stw	zero,48(r16)
   83b68:	80c00417 	ldw	r3,16(r16)
   83b6c:	013ff6c4 	movi	r4,-37
   83b70:	2084703a 	and	r2,r4,r2
   83b74:	80000115 	stw	zero,4(r16)
   83b78:	80c00015 	stw	r3,0(r16)
   83b7c:	003fd206 	br	83ac8 <__swsetup_r+0xbc>

00083b80 <quorem>:
   83b80:	defff704 	addi	sp,sp,-36
   83b84:	dc400115 	stw	r17,4(sp)
   83b88:	20800417 	ldw	r2,16(r4)
   83b8c:	2c400417 	ldw	r17,16(r5)
   83b90:	dd800615 	stw	r22,24(sp)
   83b94:	dd400515 	stw	r21,20(sp)
   83b98:	dfc00815 	stw	ra,32(sp)
   83b9c:	ddc00715 	stw	r23,28(sp)
   83ba0:	dd000415 	stw	r20,16(sp)
   83ba4:	dcc00315 	stw	r19,12(sp)
   83ba8:	dc800215 	stw	r18,8(sp)
   83bac:	dc000015 	stw	r16,0(sp)
   83bb0:	202b883a 	mov	r21,r4
   83bb4:	282d883a 	mov	r22,r5
   83bb8:	14407116 	blt	r2,r17,83d80 <quorem+0x200>
   83bbc:	88800104 	addi	r2,r17,4
   83bc0:	1085883a 	add	r2,r2,r2
   83bc4:	1085883a 	add	r2,r2,r2
   83bc8:	28a7883a 	add	r19,r5,r2
   83bcc:	2085883a 	add	r2,r4,r2
   83bd0:	15c00017 	ldw	r23,0(r2)
   83bd4:	99400017 	ldw	r5,0(r19)
   83bd8:	8c7fffc4 	addi	r17,r17,-1
   83bdc:	b809883a 	mov	r4,r23
   83be0:	29400044 	addi	r5,r5,1
   83be4:	00818880 	call	81888 <__udivsi3>
   83be8:	1025883a 	mov	r18,r2
   83bec:	b4000504 	addi	r16,r22,20
   83bf0:	ad000504 	addi	r20,r21,20
   83bf4:	10002d26 	beq	r2,zero,83cac <quorem+0x12c>
   83bf8:	800d883a 	mov	r6,r16
   83bfc:	a007883a 	mov	r3,r20
   83c00:	000f883a 	mov	r7,zero
   83c04:	0005883a 	mov	r2,zero
   83c08:	32c00017 	ldw	r11,0(r6)
   83c0c:	1a400017 	ldw	r9,0(r3)
   83c10:	31800104 	addi	r6,r6,4
   83c14:	5abfffcc 	andi	r10,r11,65535
   83c18:	5495383a 	mul	r10,r10,r18
   83c1c:	5816d43a 	srli	r11,r11,16
   83c20:	4a3fffcc 	andi	r8,r9,65535
   83c24:	3a95883a 	add	r10,r7,r10
   83c28:	500ed43a 	srli	r7,r10,16
   83c2c:	5c97383a 	mul	r11,r11,r18
   83c30:	4085883a 	add	r2,r8,r2
   83c34:	52bfffcc 	andi	r10,r10,65535
   83c38:	1291c83a 	sub	r8,r2,r10
   83c3c:	4804d43a 	srli	r2,r9,16
   83c40:	3acf883a 	add	r7,r7,r11
   83c44:	4015d43a 	srai	r10,r8,16
   83c48:	393fffcc 	andi	r4,r7,65535
   83c4c:	1105c83a 	sub	r2,r2,r4
   83c50:	1285883a 	add	r2,r2,r10
   83c54:	1880008d 	sth	r2,2(r3)
   83c58:	1a00000d 	sth	r8,0(r3)
   83c5c:	380ed43a 	srli	r7,r7,16
   83c60:	1005d43a 	srai	r2,r2,16
   83c64:	18c00104 	addi	r3,r3,4
   83c68:	99bfe72e 	bgeu	r19,r6,83c08 <quorem+0x88>
   83c6c:	b8000f1e 	bne	r23,zero,83cac <quorem+0x12c>
   83c70:	88800144 	addi	r2,r17,5
   83c74:	1085883a 	add	r2,r2,r2
   83c78:	1085883a 	add	r2,r2,r2
   83c7c:	a887883a 	add	r3,r21,r2
   83c80:	18bfff04 	addi	r2,r3,-4
   83c84:	a080082e 	bgeu	r20,r2,83ca8 <quorem+0x128>
   83c88:	18ffff17 	ldw	r3,-4(r3)
   83c8c:	18000326 	beq	r3,zero,83c9c <quorem+0x11c>
   83c90:	00000506 	br	83ca8 <quorem+0x128>
   83c94:	10c00017 	ldw	r3,0(r2)
   83c98:	1800031e 	bne	r3,zero,83ca8 <quorem+0x128>
   83c9c:	10bfff04 	addi	r2,r2,-4
   83ca0:	8c7fffc4 	addi	r17,r17,-1
   83ca4:	a0bffb36 	bltu	r20,r2,83c94 <quorem+0x114>
   83ca8:	ac400415 	stw	r17,16(r21)
   83cac:	a809883a 	mov	r4,r21
   83cb0:	b00b883a 	mov	r5,r22
   83cb4:	008788c0 	call	8788c <__mcmp>
   83cb8:	10002516 	blt	r2,zero,83d50 <quorem+0x1d0>
   83cbc:	94800044 	addi	r18,r18,1
   83cc0:	a007883a 	mov	r3,r20
   83cc4:	000b883a 	mov	r5,zero
   83cc8:	1a000017 	ldw	r8,0(r3)
   83ccc:	81c00017 	ldw	r7,0(r16)
   83cd0:	84000104 	addi	r16,r16,4
   83cd4:	41bfffcc 	andi	r6,r8,65535
   83cd8:	38bfffcc 	andi	r2,r7,65535
   83cdc:	314b883a 	add	r5,r6,r5
   83ce0:	288dc83a 	sub	r6,r5,r2
   83ce4:	380ed43a 	srli	r7,r7,16
   83ce8:	400ad43a 	srli	r5,r8,16
   83cec:	3005d43a 	srai	r2,r6,16
   83cf0:	1980000d 	sth	r6,0(r3)
   83cf4:	29cbc83a 	sub	r5,r5,r7
   83cf8:	288b883a 	add	r5,r5,r2
   83cfc:	1940008d 	sth	r5,2(r3)
   83d00:	280bd43a 	srai	r5,r5,16
   83d04:	18c00104 	addi	r3,r3,4
   83d08:	9c3fef2e 	bgeu	r19,r16,83cc8 <quorem+0x148>
   83d0c:	88800144 	addi	r2,r17,5
   83d10:	1085883a 	add	r2,r2,r2
   83d14:	1085883a 	add	r2,r2,r2
   83d18:	a885883a 	add	r2,r21,r2
   83d1c:	10c00017 	ldw	r3,0(r2)
   83d20:	18000b1e 	bne	r3,zero,83d50 <quorem+0x1d0>
   83d24:	10ffff04 	addi	r3,r2,-4
   83d28:	a0c0082e 	bgeu	r20,r3,83d4c <quorem+0x1cc>
   83d2c:	10bfff17 	ldw	r2,-4(r2)
   83d30:	10000326 	beq	r2,zero,83d40 <quorem+0x1c0>
   83d34:	00000506 	br	83d4c <quorem+0x1cc>
   83d38:	18800017 	ldw	r2,0(r3)
   83d3c:	1000031e 	bne	r2,zero,83d4c <quorem+0x1cc>
   83d40:	18ffff04 	addi	r3,r3,-4
   83d44:	8c7fffc4 	addi	r17,r17,-1
   83d48:	a0fffb36 	bltu	r20,r3,83d38 <quorem+0x1b8>
   83d4c:	ac400415 	stw	r17,16(r21)
   83d50:	9005883a 	mov	r2,r18
   83d54:	dfc00817 	ldw	ra,32(sp)
   83d58:	ddc00717 	ldw	r23,28(sp)
   83d5c:	dd800617 	ldw	r22,24(sp)
   83d60:	dd400517 	ldw	r21,20(sp)
   83d64:	dd000417 	ldw	r20,16(sp)
   83d68:	dcc00317 	ldw	r19,12(sp)
   83d6c:	dc800217 	ldw	r18,8(sp)
   83d70:	dc400117 	ldw	r17,4(sp)
   83d74:	dc000017 	ldw	r16,0(sp)
   83d78:	dec00904 	addi	sp,sp,36
   83d7c:	f800283a 	ret
   83d80:	0005883a 	mov	r2,zero
   83d84:	003ff306 	br	83d54 <quorem+0x1d4>

00083d88 <_dtoa_r>:
   83d88:	20801017 	ldw	r2,64(r4)
   83d8c:	deffdf04 	addi	sp,sp,-132
   83d90:	dcc01a15 	stw	r19,104(sp)
   83d94:	dc801915 	stw	r18,100(sp)
   83d98:	dc401815 	stw	r17,96(sp)
   83d9c:	dc001715 	stw	r16,92(sp)
   83da0:	dfc02015 	stw	ra,128(sp)
   83da4:	df001f15 	stw	fp,124(sp)
   83da8:	ddc01e15 	stw	r23,120(sp)
   83dac:	dd801d15 	stw	r22,116(sp)
   83db0:	dd401c15 	stw	r21,112(sp)
   83db4:	dd001b15 	stw	r20,108(sp)
   83db8:	d9400315 	stw	r5,12(sp)
   83dbc:	d9c00415 	stw	r7,16(sp)
   83dc0:	2021883a 	mov	r16,r4
   83dc4:	3025883a 	mov	r18,r6
   83dc8:	dcc02317 	ldw	r19,140(sp)
   83dcc:	3023883a 	mov	r17,r6
   83dd0:	10000826 	beq	r2,zero,83df4 <_dtoa_r+0x6c>
   83dd4:	20c01117 	ldw	r3,68(r4)
   83dd8:	01800044 	movi	r6,1
   83ddc:	100b883a 	mov	r5,r2
   83de0:	30cc983a 	sll	r6,r6,r3
   83de4:	10c00115 	stw	r3,4(r2)
   83de8:	11800215 	stw	r6,8(r2)
   83dec:	00870900 	call	87090 <_Bfree>
   83df0:	80001015 	stw	zero,64(r16)
   83df4:	90002f16 	blt	r18,zero,83eb4 <_dtoa_r+0x12c>
   83df8:	98000015 	stw	zero,0(r19)
   83dfc:	90dffc2c 	andhi	r3,r18,32752
   83e00:	009ffc34 	movhi	r2,32752
   83e04:	18801c26 	beq	r3,r2,83e78 <_dtoa_r+0xf0>
   83e08:	d9000317 	ldw	r4,12(sp)
   83e0c:	880b883a 	mov	r5,r17
   83e10:	000d883a 	mov	r6,zero
   83e14:	000f883a 	mov	r7,zero
   83e18:	008a4100 	call	8a410 <__eqdf2>
   83e1c:	10002c1e 	bne	r2,zero,83ed0 <_dtoa_r+0x148>
   83e20:	d9002217 	ldw	r4,136(sp)
   83e24:	d9c02417 	ldw	r7,144(sp)
   83e28:	00800044 	movi	r2,1
   83e2c:	20800015 	stw	r2,0(r4)
   83e30:	38019426 	beq	r7,zero,84484 <_dtoa_r+0x6fc>
   83e34:	00800274 	movhi	r2,9
   83e38:	10b87144 	addi	r2,r2,-7739
   83e3c:	38800015 	stw	r2,0(r7)
   83e40:	15ffffc4 	addi	r23,r2,-1
   83e44:	b805883a 	mov	r2,r23
   83e48:	dfc02017 	ldw	ra,128(sp)
   83e4c:	df001f17 	ldw	fp,124(sp)
   83e50:	ddc01e17 	ldw	r23,120(sp)
   83e54:	dd801d17 	ldw	r22,116(sp)
   83e58:	dd401c17 	ldw	r21,112(sp)
   83e5c:	dd001b17 	ldw	r20,108(sp)
   83e60:	dcc01a17 	ldw	r19,104(sp)
   83e64:	dc801917 	ldw	r18,100(sp)
   83e68:	dc401817 	ldw	r17,96(sp)
   83e6c:	dc001717 	ldw	r16,92(sp)
   83e70:	dec02104 	addi	sp,sp,132
   83e74:	f800283a 	ret
   83e78:	d8c02217 	ldw	r3,136(sp)
   83e7c:	d9000317 	ldw	r4,12(sp)
   83e80:	0089c3c4 	movi	r2,9999
   83e84:	18800015 	stw	r2,0(r3)
   83e88:	20016c26 	beq	r4,zero,8443c <_dtoa_r+0x6b4>
   83e8c:	05c00274 	movhi	r23,9
   83e90:	bdf87d04 	addi	r23,r23,-7692
   83e94:	d9c02417 	ldw	r7,144(sp)
   83e98:	383fea26 	beq	r7,zero,83e44 <_dtoa_r+0xbc>
   83e9c:	b88000c7 	ldb	r2,3(r23)
   83ea0:	10016d1e 	bne	r2,zero,84458 <_dtoa_r+0x6d0>
   83ea4:	b88000c4 	addi	r2,r23,3
   83ea8:	d8c02417 	ldw	r3,144(sp)
   83eac:	18800015 	stw	r2,0(r3)
   83eb0:	003fe406 	br	83e44 <_dtoa_r+0xbc>
   83eb4:	04600034 	movhi	r17,32768
   83eb8:	8c7fffc4 	addi	r17,r17,-1
   83ebc:	9462703a 	and	r17,r18,r17
   83ec0:	00800044 	movi	r2,1
   83ec4:	98800015 	stw	r2,0(r19)
   83ec8:	8825883a 	mov	r18,r17
   83ecc:	003fcb06 	br	83dfc <_dtoa_r+0x74>
   83ed0:	d9400317 	ldw	r5,12(sp)
   83ed4:	9028d53a 	srli	r20,r18,20
   83ed8:	d8800204 	addi	r2,sp,8
   83edc:	d8800015 	stw	r2,0(sp)
   83ee0:	8009883a 	mov	r4,r16
   83ee4:	880d883a 	mov	r6,r17
   83ee8:	d9c00104 	addi	r7,sp,4
   83eec:	0087c340 	call	87c34 <__d2b>
   83ef0:	a501ffcc 	andi	r20,r20,2047
   83ef4:	1039883a 	mov	fp,r2
   83ef8:	a001591e 	bne	r20,zero,84460 <_dtoa_r+0x6d8>
   83efc:	dd400217 	ldw	r21,8(sp)
   83f00:	dd000117 	ldw	r20,4(sp)
   83f04:	00befbc4 	movi	r2,-1041
   83f08:	ad29883a 	add	r20,r21,r20
   83f0c:	a082d216 	blt	r20,r2,84a58 <_dtoa_r+0xcd0>
   83f10:	d8c00317 	ldw	r3,12(sp)
   83f14:	013f0384 	movi	r4,-1010
   83f18:	2509c83a 	sub	r4,r4,r20
   83f1c:	a0810484 	addi	r2,r20,1042
   83f20:	9124983a 	sll	r18,r18,r4
   83f24:	1884d83a 	srl	r2,r3,r2
   83f28:	9088b03a 	or	r4,r18,r2
   83f2c:	008a7940 	call	8a794 <__floatunsidf>
   83f30:	1009883a 	mov	r4,r2
   83f34:	017f8434 	movhi	r5,65040
   83f38:	00800044 	movi	r2,1
   83f3c:	194b883a 	add	r5,r3,r5
   83f40:	a53fffc4 	addi	r20,r20,-1
   83f44:	d8800f15 	stw	r2,60(sp)
   83f48:	000d883a 	mov	r6,zero
   83f4c:	01cffe34 	movhi	r7,16376
   83f50:	0089f180 	call	89f18 <__subdf3>
   83f54:	1009883a 	mov	r4,r2
   83f58:	180b883a 	mov	r5,r3
   83f5c:	0198dbf4 	movhi	r6,25455
   83f60:	3190d844 	addi	r6,r6,17249
   83f64:	01cff4f4 	movhi	r7,16339
   83f68:	39e1e9c4 	addi	r7,r7,-30809
   83f6c:	0089f780 	call	89f78 <__muldf3>
   83f70:	180b883a 	mov	r5,r3
   83f74:	01a2d874 	movhi	r6,35681
   83f78:	31b22cc4 	addi	r6,r6,-14157
   83f7c:	01cff1f4 	movhi	r7,16327
   83f80:	39e28a04 	addi	r7,r7,-30168
   83f84:	1009883a 	mov	r4,r2
   83f88:	0089ec40 	call	89ec4 <__adddf3>
   83f8c:	a009883a 	mov	r4,r20
   83f90:	1027883a 	mov	r19,r2
   83f94:	1825883a 	mov	r18,r3
   83f98:	008a5ec0 	call	8a5ec <__floatsidf>
   83f9c:	1009883a 	mov	r4,r2
   83fa0:	180b883a 	mov	r5,r3
   83fa4:	019427f4 	movhi	r6,20639
   83fa8:	319e7ec4 	addi	r6,r6,31227
   83fac:	01cff4f4 	movhi	r7,16339
   83fb0:	39d104c4 	addi	r7,r7,17427
   83fb4:	0089f780 	call	89f78 <__muldf3>
   83fb8:	9809883a 	mov	r4,r19
   83fbc:	900b883a 	mov	r5,r18
   83fc0:	100d883a 	mov	r6,r2
   83fc4:	180f883a 	mov	r7,r3
   83fc8:	0089ec40 	call	89ec4 <__adddf3>
   83fcc:	1009883a 	mov	r4,r2
   83fd0:	180b883a 	mov	r5,r3
   83fd4:	1027883a 	mov	r19,r2
   83fd8:	1825883a 	mov	r18,r3
   83fdc:	008a6c00 	call	8a6c0 <__fixdfsi>
   83fe0:	9809883a 	mov	r4,r19
   83fe4:	900b883a 	mov	r5,r18
   83fe8:	000d883a 	mov	r6,zero
   83fec:	000f883a 	mov	r7,zero
   83ff0:	d8800615 	stw	r2,24(sp)
   83ff4:	008a5900 	call	8a590 <__ltdf2>
   83ff8:	10027e16 	blt	r2,zero,849f4 <_dtoa_r+0xc6c>
   83ffc:	d8c00617 	ldw	r3,24(sp)
   84000:	00800584 	movi	r2,22
   84004:	10c26c36 	bltu	r2,r3,849b8 <_dtoa_r+0xc30>
   84008:	180490fa 	slli	r2,r3,3
   8400c:	00c00274 	movhi	r3,9
   84010:	18f8a304 	addi	r3,r3,-7540
   84014:	d9800317 	ldw	r6,12(sp)
   84018:	1885883a 	add	r2,r3,r2
   8401c:	11000017 	ldw	r4,0(r2)
   84020:	11400117 	ldw	r5,4(r2)
   84024:	880f883a 	mov	r7,r17
   84028:	008a4c80 	call	8a4c8 <__gtdf2>
   8402c:	00828f0e 	bge	zero,r2,84a6c <_dtoa_r+0xce4>
   84030:	d8800617 	ldw	r2,24(sp)
   84034:	d8000d15 	stw	zero,52(sp)
   84038:	10bfffc4 	addi	r2,r2,-1
   8403c:	d8800615 	stw	r2,24(sp)
   84040:	ad29c83a 	sub	r20,r21,r20
   84044:	a53fffc4 	addi	r20,r20,-1
   84048:	a0026616 	blt	r20,zero,849e4 <_dtoa_r+0xc5c>
   8404c:	dd000715 	stw	r20,28(sp)
   84050:	d8000815 	stw	zero,32(sp)
   84054:	d8800617 	ldw	r2,24(sp)
   84058:	10025a16 	blt	r2,zero,849c4 <_dtoa_r+0xc3c>
   8405c:	d8c00717 	ldw	r3,28(sp)
   84060:	d8800b15 	stw	r2,44(sp)
   84064:	d8000a15 	stw	zero,40(sp)
   84068:	1887883a 	add	r3,r3,r2
   8406c:	d8c00715 	stw	r3,28(sp)
   84070:	d9c00417 	ldw	r7,16(sp)
   84074:	00800244 	movi	r2,9
   84078:	11c10536 	bltu	r2,r7,84490 <_dtoa_r+0x708>
   8407c:	00800144 	movi	r2,5
   84080:	11c4c60e 	bge	r2,r7,8539c <_dtoa_r+0x1614>
   84084:	39ffff04 	addi	r7,r7,-4
   84088:	d9c00415 	stw	r7,16(sp)
   8408c:	0027883a 	mov	r19,zero
   84090:	d9c00417 	ldw	r7,16(sp)
   84094:	008000c4 	movi	r2,3
   84098:	3883a226 	beq	r7,r2,84f24 <_dtoa_r+0x119c>
   8409c:	11c2bc16 	blt	r2,r7,84b90 <_dtoa_r+0xe08>
   840a0:	00800084 	movi	r2,2
   840a4:	3880fb1e 	bne	r7,r2,84494 <_dtoa_r+0x70c>
   840a8:	d8000c15 	stw	zero,48(sp)
   840ac:	d9002117 	ldw	r4,132(sp)
   840b0:	0103ae0e 	bge	zero,r4,84f6c <_dtoa_r+0x11e4>
   840b4:	2025883a 	mov	r18,r4
   840b8:	d9000e15 	stw	r4,56(sp)
   840bc:	d9000915 	stw	r4,36(sp)
   840c0:	80001115 	stw	zero,68(r16)
   840c4:	008005c4 	movi	r2,23
   840c8:	1484b22e 	bgeu	r2,r18,85394 <_dtoa_r+0x160c>
   840cc:	00c00044 	movi	r3,1
   840d0:	00800104 	movi	r2,4
   840d4:	1085883a 	add	r2,r2,r2
   840d8:	11000504 	addi	r4,r2,20
   840dc:	180b883a 	mov	r5,r3
   840e0:	18c00044 	addi	r3,r3,1
   840e4:	913ffb2e 	bgeu	r18,r4,840d4 <_dtoa_r+0x34c>
   840e8:	81401115 	stw	r5,68(r16)
   840ec:	8009883a 	mov	r4,r16
   840f0:	0086fe80 	call	86fe8 <_Balloc>
   840f4:	102f883a 	mov	r23,r2
   840f8:	80801015 	stw	r2,64(r16)
   840fc:	00800384 	movi	r2,14
   84100:	1480f036 	bltu	r2,r18,844c4 <_dtoa_r+0x73c>
   84104:	9800ef26 	beq	r19,zero,844c4 <_dtoa_r+0x73c>
   84108:	d8800617 	ldw	r2,24(sp)
   8410c:	00839c0e 	bge	zero,r2,84f80 <_dtoa_r+0x11f8>
   84110:	d8c00617 	ldw	r3,24(sp)
   84114:	108003cc 	andi	r2,r2,15
   84118:	100490fa 	slli	r2,r2,3
   8411c:	182bd13a 	srai	r21,r3,4
   84120:	00c00274 	movhi	r3,9
   84124:	18f8a304 	addi	r3,r3,-7540
   84128:	1885883a 	add	r2,r3,r2
   8412c:	a8c0040c 	andi	r3,r21,16
   84130:	12800017 	ldw	r10,0(r2)
   84134:	15800117 	ldw	r22,4(r2)
   84138:	18038726 	beq	r3,zero,84f58 <_dtoa_r+0x11d0>
   8413c:	00800274 	movhi	r2,9
   84140:	10b89904 	addi	r2,r2,-7580
   84144:	11800817 	ldw	r6,32(r2)
   84148:	11c00917 	ldw	r7,36(r2)
   8414c:	d9000317 	ldw	r4,12(sp)
   84150:	880b883a 	mov	r5,r17
   84154:	da801515 	stw	r10,84(sp)
   84158:	008a25c0 	call	8a25c <__divdf3>
   8415c:	da801517 	ldw	r10,84(sp)
   84160:	d8801015 	stw	r2,64(sp)
   84164:	1829883a 	mov	r20,r3
   84168:	ad4003cc 	andi	r21,r21,15
   8416c:	048000c4 	movi	r18,3
   84170:	a8001126 	beq	r21,zero,841b8 <_dtoa_r+0x430>
   84174:	04c00274 	movhi	r19,9
   84178:	9cf89904 	addi	r19,r19,-7580
   8417c:	5005883a 	mov	r2,r10
   84180:	b007883a 	mov	r3,r22
   84184:	a980004c 	andi	r6,r21,1
   84188:	1009883a 	mov	r4,r2
   8418c:	a82bd07a 	srai	r21,r21,1
   84190:	180b883a 	mov	r5,r3
   84194:	30000426 	beq	r6,zero,841a8 <_dtoa_r+0x420>
   84198:	99800017 	ldw	r6,0(r19)
   8419c:	99c00117 	ldw	r7,4(r19)
   841a0:	94800044 	addi	r18,r18,1
   841a4:	0089f780 	call	89f78 <__muldf3>
   841a8:	9cc00204 	addi	r19,r19,8
   841ac:	a83ff51e 	bne	r21,zero,84184 <_dtoa_r+0x3fc>
   841b0:	1015883a 	mov	r10,r2
   841b4:	182d883a 	mov	r22,r3
   841b8:	d9001017 	ldw	r4,64(sp)
   841bc:	a00b883a 	mov	r5,r20
   841c0:	500d883a 	mov	r6,r10
   841c4:	b00f883a 	mov	r7,r22
   841c8:	008a25c0 	call	8a25c <__divdf3>
   841cc:	1027883a 	mov	r19,r2
   841d0:	1829883a 	mov	r20,r3
   841d4:	d8c00d17 	ldw	r3,52(sp)
   841d8:	18000626 	beq	r3,zero,841f4 <_dtoa_r+0x46c>
   841dc:	9809883a 	mov	r4,r19
   841e0:	a00b883a 	mov	r5,r20
   841e4:	000d883a 	mov	r6,zero
   841e8:	01cffc34 	movhi	r7,16368
   841ec:	008a5900 	call	8a590 <__ltdf2>
   841f0:	10040e16 	blt	r2,zero,8522c <_dtoa_r+0x14a4>
   841f4:	9009883a 	mov	r4,r18
   841f8:	008a5ec0 	call	8a5ec <__floatsidf>
   841fc:	1009883a 	mov	r4,r2
   84200:	180b883a 	mov	r5,r3
   84204:	980d883a 	mov	r6,r19
   84208:	a00f883a 	mov	r7,r20
   8420c:	0089f780 	call	89f78 <__muldf3>
   84210:	1009883a 	mov	r4,r2
   84214:	180b883a 	mov	r5,r3
   84218:	000d883a 	mov	r6,zero
   8421c:	01d00734 	movhi	r7,16412
   84220:	0089ec40 	call	89ec4 <__adddf3>
   84224:	057f3034 	movhi	r21,64704
   84228:	1d6b883a 	add	r21,r3,r21
   8422c:	d8c00917 	ldw	r3,36(sp)
   84230:	1025883a 	mov	r18,r2
   84234:	18031f26 	beq	r3,zero,84eb4 <_dtoa_r+0x112c>
   84238:	d8800617 	ldw	r2,24(sp)
   8423c:	dac00917 	ldw	r11,36(sp)
   84240:	d8801315 	stw	r2,76(sp)
   84244:	d8c00c17 	ldw	r3,48(sp)
   84248:	18039026 	beq	r3,zero,8508c <_dtoa_r+0x1304>
   8424c:	58bfffc4 	addi	r2,r11,-1
   84250:	100490fa 	slli	r2,r2,3
   84254:	00c00274 	movhi	r3,9
   84258:	18f8a304 	addi	r3,r3,-7540
   8425c:	0009883a 	mov	r4,zero
   84260:	1885883a 	add	r2,r3,r2
   84264:	11800017 	ldw	r6,0(r2)
   84268:	11c00117 	ldw	r7,4(r2)
   8426c:	014ff834 	movhi	r5,16352
   84270:	dac01615 	stw	r11,88(sp)
   84274:	008a25c0 	call	8a25c <__divdf3>
   84278:	900d883a 	mov	r6,r18
   8427c:	a80f883a 	mov	r7,r21
   84280:	1009883a 	mov	r4,r2
   84284:	180b883a 	mov	r5,r3
   84288:	0089f180 	call	89f18 <__subdf3>
   8428c:	a00b883a 	mov	r5,r20
   84290:	9809883a 	mov	r4,r19
   84294:	182b883a 	mov	r21,r3
   84298:	d8801015 	stw	r2,64(sp)
   8429c:	008a6c00 	call	8a6c0 <__fixdfsi>
   842a0:	1009883a 	mov	r4,r2
   842a4:	d8801515 	stw	r2,84(sp)
   842a8:	008a5ec0 	call	8a5ec <__floatsidf>
   842ac:	9809883a 	mov	r4,r19
   842b0:	a00b883a 	mov	r5,r20
   842b4:	100d883a 	mov	r6,r2
   842b8:	180f883a 	mov	r7,r3
   842bc:	0089f180 	call	89f18 <__subdf3>
   842c0:	da401517 	ldw	r9,84(sp)
   842c4:	d9001017 	ldw	r4,64(sp)
   842c8:	a80b883a 	mov	r5,r21
   842cc:	4d000c04 	addi	r20,r9,48
   842d0:	bd000005 	stb	r20,0(r23)
   842d4:	100d883a 	mov	r6,r2
   842d8:	180f883a 	mov	r7,r3
   842dc:	bd800044 	addi	r22,r23,1
   842e0:	1025883a 	mov	r18,r2
   842e4:	1827883a 	mov	r19,r3
   842e8:	008a4c80 	call	8a4c8 <__gtdf2>
   842ec:	00842216 	blt	zero,r2,85378 <_dtoa_r+0x15f0>
   842f0:	0009883a 	mov	r4,zero
   842f4:	014ffc34 	movhi	r5,16368
   842f8:	900d883a 	mov	r6,r18
   842fc:	980f883a 	mov	r7,r19
   84300:	0089f180 	call	89f18 <__subdf3>
   84304:	d9001017 	ldw	r4,64(sp)
   84308:	a80b883a 	mov	r5,r21
   8430c:	100d883a 	mov	r6,r2
   84310:	180f883a 	mov	r7,r3
   84314:	008a4c80 	call	8a4c8 <__gtdf2>
   84318:	dac01617 	ldw	r11,88(sp)
   8431c:	00841316 	blt	zero,r2,8536c <_dtoa_r+0x15e4>
   84320:	00800044 	movi	r2,1
   84324:	12c0670e 	bge	r2,r11,844c4 <_dtoa_r+0x73c>
   84328:	bad7883a 	add	r11,r23,r11
   8432c:	df001115 	stw	fp,68(sp)
   84330:	dc401215 	stw	r17,72(sp)
   84334:	5839883a 	mov	fp,r11
   84338:	dc401017 	ldw	r17,64(sp)
   8433c:	00000806 	br	84360 <_dtoa_r+0x5d8>
   84340:	0089f180 	call	89f18 <__subdf3>
   84344:	1009883a 	mov	r4,r2
   84348:	180b883a 	mov	r5,r3
   8434c:	880d883a 	mov	r6,r17
   84350:	a80f883a 	mov	r7,r21
   84354:	008a5900 	call	8a590 <__ltdf2>
   84358:	1003ee16 	blt	r2,zero,85314 <_dtoa_r+0x158c>
   8435c:	b703f126 	beq	r22,fp,85324 <_dtoa_r+0x159c>
   84360:	8809883a 	mov	r4,r17
   84364:	a80b883a 	mov	r5,r21
   84368:	000d883a 	mov	r6,zero
   8436c:	01d00934 	movhi	r7,16420
   84370:	0089f780 	call	89f78 <__muldf3>
   84374:	000d883a 	mov	r6,zero
   84378:	01d00934 	movhi	r7,16420
   8437c:	9009883a 	mov	r4,r18
   84380:	980b883a 	mov	r5,r19
   84384:	1023883a 	mov	r17,r2
   84388:	182b883a 	mov	r21,r3
   8438c:	0089f780 	call	89f78 <__muldf3>
   84390:	180b883a 	mov	r5,r3
   84394:	1009883a 	mov	r4,r2
   84398:	1825883a 	mov	r18,r3
   8439c:	1027883a 	mov	r19,r2
   843a0:	008a6c00 	call	8a6c0 <__fixdfsi>
   843a4:	1009883a 	mov	r4,r2
   843a8:	1029883a 	mov	r20,r2
   843ac:	008a5ec0 	call	8a5ec <__floatsidf>
   843b0:	9809883a 	mov	r4,r19
   843b4:	900b883a 	mov	r5,r18
   843b8:	100d883a 	mov	r6,r2
   843bc:	180f883a 	mov	r7,r3
   843c0:	0089f180 	call	89f18 <__subdf3>
   843c4:	a5000c04 	addi	r20,r20,48
   843c8:	b5000005 	stb	r20,0(r22)
   843cc:	1009883a 	mov	r4,r2
   843d0:	180b883a 	mov	r5,r3
   843d4:	880d883a 	mov	r6,r17
   843d8:	a80f883a 	mov	r7,r21
   843dc:	1025883a 	mov	r18,r2
   843e0:	1827883a 	mov	r19,r3
   843e4:	008a5900 	call	8a590 <__ltdf2>
   843e8:	b5800044 	addi	r22,r22,1
   843ec:	0009883a 	mov	r4,zero
   843f0:	014ffc34 	movhi	r5,16368
   843f4:	900d883a 	mov	r6,r18
   843f8:	980f883a 	mov	r7,r19
   843fc:	103fd00e 	bge	r2,zero,84340 <_dtoa_r+0x5b8>
   84400:	d9001317 	ldw	r4,76(sp)
   84404:	df001117 	ldw	fp,68(sp)
   84408:	d9000615 	stw	r4,24(sp)
   8440c:	8009883a 	mov	r4,r16
   84410:	e00b883a 	mov	r5,fp
   84414:	00870900 	call	87090 <_Bfree>
   84418:	d9c00617 	ldw	r7,24(sp)
   8441c:	d8c02217 	ldw	r3,136(sp)
   84420:	d9002417 	ldw	r4,144(sp)
   84424:	b0000005 	stb	zero,0(r22)
   84428:	38800044 	addi	r2,r7,1
   8442c:	18800015 	stw	r2,0(r3)
   84430:	203e8426 	beq	r4,zero,83e44 <_dtoa_r+0xbc>
   84434:	25800015 	stw	r22,0(r4)
   84438:	003e8206 	br	83e44 <_dtoa_r+0xbc>
   8443c:	00800434 	movhi	r2,16
   84440:	10bfffc4 	addi	r2,r2,-1
   84444:	90a4703a 	and	r18,r18,r2
   84448:	903e901e 	bne	r18,zero,83e8c <_dtoa_r+0x104>
   8444c:	05c00274 	movhi	r23,9
   84450:	bdf87a04 	addi	r23,r23,-7704
   84454:	003e8f06 	br	83e94 <_dtoa_r+0x10c>
   84458:	b8800204 	addi	r2,r23,8
   8445c:	003e9206 	br	83ea8 <_dtoa_r+0x120>
   84460:	01400434 	movhi	r5,16
   84464:	297fffc4 	addi	r5,r5,-1
   84468:	894a703a 	and	r5,r17,r5
   8446c:	d9000317 	ldw	r4,12(sp)
   84470:	294ffc34 	orhi	r5,r5,16368
   84474:	a53f0044 	addi	r20,r20,-1023
   84478:	dd400217 	ldw	r21,8(sp)
   8447c:	d8000f15 	stw	zero,60(sp)
   84480:	003eb106 	br	83f48 <_dtoa_r+0x1c0>
   84484:	05c00274 	movhi	r23,9
   84488:	bdf87104 	addi	r23,r23,-7740
   8448c:	003e6d06 	br	83e44 <_dtoa_r+0xbc>
   84490:	d8000415 	stw	zero,16(sp)
   84494:	80001115 	stw	zero,68(r16)
   84498:	8009883a 	mov	r4,r16
   8449c:	000b883a 	mov	r5,zero
   844a0:	0086fe80 	call	86fe8 <_Balloc>
   844a4:	01ffffc4 	movi	r7,-1
   844a8:	102f883a 	mov	r23,r2
   844ac:	80801015 	stw	r2,64(r16)
   844b0:	00800044 	movi	r2,1
   844b4:	d9c00915 	stw	r7,36(sp)
   844b8:	d8002115 	stw	zero,132(sp)
   844bc:	d9c00e15 	stw	r7,56(sp)
   844c0:	d8800c15 	stw	r2,48(sp)
   844c4:	d8800117 	ldw	r2,4(sp)
   844c8:	10008b16 	blt	r2,zero,846f8 <_dtoa_r+0x970>
   844cc:	d9000617 	ldw	r4,24(sp)
   844d0:	00c00384 	movi	r3,14
   844d4:	19008816 	blt	r3,r4,846f8 <_dtoa_r+0x970>
   844d8:	200490fa 	slli	r2,r4,3
   844dc:	d9c02117 	ldw	r7,132(sp)
   844e0:	00c00274 	movhi	r3,9
   844e4:	18f8a304 	addi	r3,r3,-7540
   844e8:	1885883a 	add	r2,r3,r2
   844ec:	14800017 	ldw	r18,0(r2)
   844f0:	14c00117 	ldw	r19,4(r2)
   844f4:	3801c916 	blt	r7,zero,84c1c <_dtoa_r+0xe94>
   844f8:	d9000317 	ldw	r4,12(sp)
   844fc:	900d883a 	mov	r6,r18
   84500:	980f883a 	mov	r7,r19
   84504:	880b883a 	mov	r5,r17
   84508:	008a25c0 	call	8a25c <__divdf3>
   8450c:	180b883a 	mov	r5,r3
   84510:	1009883a 	mov	r4,r2
   84514:	008a6c00 	call	8a6c0 <__fixdfsi>
   84518:	1009883a 	mov	r4,r2
   8451c:	102b883a 	mov	r21,r2
   84520:	008a5ec0 	call	8a5ec <__floatsidf>
   84524:	1009883a 	mov	r4,r2
   84528:	180b883a 	mov	r5,r3
   8452c:	900d883a 	mov	r6,r18
   84530:	980f883a 	mov	r7,r19
   84534:	0089f780 	call	89f78 <__muldf3>
   84538:	d9000317 	ldw	r4,12(sp)
   8453c:	880b883a 	mov	r5,r17
   84540:	100d883a 	mov	r6,r2
   84544:	180f883a 	mov	r7,r3
   84548:	0089f180 	call	89f18 <__subdf3>
   8454c:	d9c00917 	ldw	r7,36(sp)
   84550:	1009883a 	mov	r4,r2
   84554:	a8800c04 	addi	r2,r21,48
   84558:	b8800005 	stb	r2,0(r23)
   8455c:	01800044 	movi	r6,1
   84560:	180b883a 	mov	r5,r3
   84564:	2005883a 	mov	r2,r4
   84568:	bd800044 	addi	r22,r23,1
   8456c:	39803726 	beq	r7,r6,8464c <_dtoa_r+0x8c4>
   84570:	000d883a 	mov	r6,zero
   84574:	01d00934 	movhi	r7,16420
   84578:	0089f780 	call	89f78 <__muldf3>
   8457c:	1009883a 	mov	r4,r2
   84580:	180b883a 	mov	r5,r3
   84584:	000d883a 	mov	r6,zero
   84588:	000f883a 	mov	r7,zero
   8458c:	1029883a 	mov	r20,r2
   84590:	1823883a 	mov	r17,r3
   84594:	008a4100 	call	8a410 <__eqdf2>
   84598:	103f9c26 	beq	r2,zero,8440c <_dtoa_r+0x684>
   8459c:	dd400917 	ldw	r21,36(sp)
   845a0:	dc000415 	stw	r16,16(sp)
   845a4:	00000906 	br	845cc <_dtoa_r+0x844>
   845a8:	0089f780 	call	89f78 <__muldf3>
   845ac:	1009883a 	mov	r4,r2
   845b0:	180b883a 	mov	r5,r3
   845b4:	000d883a 	mov	r6,zero
   845b8:	000f883a 	mov	r7,zero
   845bc:	1029883a 	mov	r20,r2
   845c0:	1823883a 	mov	r17,r3
   845c4:	008a4100 	call	8a410 <__eqdf2>
   845c8:	10022926 	beq	r2,zero,84e70 <_dtoa_r+0x10e8>
   845cc:	900d883a 	mov	r6,r18
   845d0:	980f883a 	mov	r7,r19
   845d4:	a009883a 	mov	r4,r20
   845d8:	880b883a 	mov	r5,r17
   845dc:	008a25c0 	call	8a25c <__divdf3>
   845e0:	180b883a 	mov	r5,r3
   845e4:	1009883a 	mov	r4,r2
   845e8:	008a6c00 	call	8a6c0 <__fixdfsi>
   845ec:	1009883a 	mov	r4,r2
   845f0:	1021883a 	mov	r16,r2
   845f4:	008a5ec0 	call	8a5ec <__floatsidf>
   845f8:	1009883a 	mov	r4,r2
   845fc:	180b883a 	mov	r5,r3
   84600:	900d883a 	mov	r6,r18
   84604:	980f883a 	mov	r7,r19
   84608:	0089f780 	call	89f78 <__muldf3>
   8460c:	a009883a 	mov	r4,r20
   84610:	880b883a 	mov	r5,r17
   84614:	100d883a 	mov	r6,r2
   84618:	180f883a 	mov	r7,r3
   8461c:	0089f180 	call	89f18 <__subdf3>
   84620:	82400c04 	addi	r9,r16,48
   84624:	b2400005 	stb	r9,0(r22)
   84628:	b5800044 	addi	r22,r22,1
   8462c:	b5d3c83a 	sub	r9,r22,r23
   84630:	000d883a 	mov	r6,zero
   84634:	01d00934 	movhi	r7,16420
   84638:	1009883a 	mov	r4,r2
   8463c:	180b883a 	mov	r5,r3
   84640:	aa7fd91e 	bne	r21,r9,845a8 <_dtoa_r+0x820>
   84644:	802b883a 	mov	r21,r16
   84648:	dc000417 	ldw	r16,16(sp)
   8464c:	1009883a 	mov	r4,r2
   84650:	180b883a 	mov	r5,r3
   84654:	100d883a 	mov	r6,r2
   84658:	180f883a 	mov	r7,r3
   8465c:	0089ec40 	call	89ec4 <__adddf3>
   84660:	9009883a 	mov	r4,r18
   84664:	980b883a 	mov	r5,r19
   84668:	100d883a 	mov	r6,r2
   8466c:	180f883a 	mov	r7,r3
   84670:	1023883a 	mov	r17,r2
   84674:	1829883a 	mov	r20,r3
   84678:	008a5900 	call	8a590 <__ltdf2>
   8467c:	10000816 	blt	r2,zero,846a0 <_dtoa_r+0x918>
   84680:	9009883a 	mov	r4,r18
   84684:	980b883a 	mov	r5,r19
   84688:	880d883a 	mov	r6,r17
   8468c:	a00f883a 	mov	r7,r20
   84690:	008a4100 	call	8a410 <__eqdf2>
   84694:	103f5d1e 	bne	r2,zero,8440c <_dtoa_r+0x684>
   84698:	ad40004c 	andi	r21,r21,1
   8469c:	a83f5b26 	beq	r21,zero,8440c <_dtoa_r+0x684>
   846a0:	b53fffc3 	ldbu	r20,-1(r22)
   846a4:	b0ffff84 	addi	r3,r22,-2
   846a8:	01400e44 	movi	r5,57
   846ac:	00000306 	br	846bc <_dtoa_r+0x934>
   846b0:	1d000003 	ldbu	r20,0(r3)
   846b4:	102d883a 	mov	r22,r2
   846b8:	18ffffc4 	addi	r3,r3,-1
   846bc:	a1003fcc 	andi	r4,r20,255
   846c0:	2100201c 	xori	r4,r4,128
   846c4:	213fe004 	addi	r4,r4,-128
   846c8:	b0bfffc4 	addi	r2,r22,-1
   846cc:	2142ca1e 	bne	r4,r5,851f8 <_dtoa_r+0x1470>
   846d0:	b8bff71e 	bne	r23,r2,846b0 <_dtoa_r+0x928>
   846d4:	d8800617 	ldw	r2,24(sp)
   846d8:	05000c44 	movi	r20,49
   846dc:	10800044 	addi	r2,r2,1
   846e0:	d8800615 	stw	r2,24(sp)
   846e4:	00800c04 	movi	r2,48
   846e8:	b8800005 	stb	r2,0(r23)
   846ec:	b805883a 	mov	r2,r23
   846f0:	15000005 	stb	r20,0(r2)
   846f4:	003f4506 	br	8440c <_dtoa_r+0x684>
   846f8:	d9c00c17 	ldw	r7,48(sp)
   846fc:	3800c926 	beq	r7,zero,84a24 <_dtoa_r+0xc9c>
   84700:	d9c00417 	ldw	r7,16(sp)
   84704:	00c00044 	movi	r3,1
   84708:	19c16c0e 	bge	r3,r7,84cbc <_dtoa_r+0xf34>
   8470c:	d9000917 	ldw	r4,36(sp)
   84710:	d9c00a17 	ldw	r7,40(sp)
   84714:	24ffffc4 	addi	r19,r4,-1
   84718:	3cc20716 	blt	r7,r19,84f38 <_dtoa_r+0x11b0>
   8471c:	3ce7c83a 	sub	r19,r7,r19
   84720:	d9c00917 	ldw	r7,36(sp)
   84724:	3802ae16 	blt	r7,zero,851e0 <_dtoa_r+0x1458>
   84728:	dc800817 	ldw	r18,32(sp)
   8472c:	d8800917 	ldw	r2,36(sp)
   84730:	d8c00817 	ldw	r3,32(sp)
   84734:	d9c00717 	ldw	r7,28(sp)
   84738:	8009883a 	mov	r4,r16
   8473c:	1887883a 	add	r3,r3,r2
   84740:	388f883a 	add	r7,r7,r2
   84744:	01400044 	movi	r5,1
   84748:	d8c00815 	stw	r3,32(sp)
   8474c:	d9c00715 	stw	r7,28(sp)
   84750:	00873e80 	call	873e8 <__i2b>
   84754:	102b883a 	mov	r21,r2
   84758:	90000a26 	beq	r18,zero,84784 <_dtoa_r+0x9fc>
   8475c:	d8800717 	ldw	r2,28(sp)
   84760:	0080080e 	bge	zero,r2,84784 <_dtoa_r+0x9fc>
   84764:	90812b16 	blt	r18,r2,84c14 <_dtoa_r+0xe8c>
   84768:	d8c00817 	ldw	r3,32(sp)
   8476c:	d9000717 	ldw	r4,28(sp)
   84770:	90a5c83a 	sub	r18,r18,r2
   84774:	1887c83a 	sub	r3,r3,r2
   84778:	2089c83a 	sub	r4,r4,r2
   8477c:	d8c00815 	stw	r3,32(sp)
   84780:	d9000715 	stw	r4,28(sp)
   84784:	d9c00a17 	ldw	r7,40(sp)
   84788:	01c0140e 	bge	zero,r7,847dc <_dtoa_r+0xa54>
   8478c:	d8800c17 	ldw	r2,48(sp)
   84790:	1001de26 	beq	r2,zero,84f0c <_dtoa_r+0x1184>
   84794:	04c00e0e 	bge	zero,r19,847d0 <_dtoa_r+0xa48>
   84798:	a80b883a 	mov	r5,r21
   8479c:	8009883a 	mov	r4,r16
   847a0:	980d883a 	mov	r6,r19
   847a4:	00876040 	call	87604 <__pow5mult>
   847a8:	e00d883a 	mov	r6,fp
   847ac:	8009883a 	mov	r4,r16
   847b0:	100b883a 	mov	r5,r2
   847b4:	102b883a 	mov	r21,r2
   847b8:	00874240 	call	87424 <__multiply>
   847bc:	1029883a 	mov	r20,r2
   847c0:	e00b883a 	mov	r5,fp
   847c4:	8009883a 	mov	r4,r16
   847c8:	00870900 	call	87090 <_Bfree>
   847cc:	a039883a 	mov	fp,r20
   847d0:	d8c00a17 	ldw	r3,40(sp)
   847d4:	1ccdc83a 	sub	r6,r3,r19
   847d8:	3001291e 	bne	r6,zero,84c80 <_dtoa_r+0xef8>
   847dc:	8009883a 	mov	r4,r16
   847e0:	01400044 	movi	r5,1
   847e4:	00873e80 	call	873e8 <__i2b>
   847e8:	d9000b17 	ldw	r4,44(sp)
   847ec:	1029883a 	mov	r20,r2
   847f0:	0100050e 	bge	zero,r4,84808 <_dtoa_r+0xa80>
   847f4:	d9800b17 	ldw	r6,44(sp)
   847f8:	8009883a 	mov	r4,r16
   847fc:	100b883a 	mov	r5,r2
   84800:	00876040 	call	87604 <__pow5mult>
   84804:	1029883a 	mov	r20,r2
   84808:	d9c00417 	ldw	r7,16(sp)
   8480c:	00800044 	movi	r2,1
   84810:	11c0f00e 	bge	r2,r7,84bd4 <_dtoa_r+0xe4c>
   84814:	0023883a 	mov	r17,zero
   84818:	d8800b17 	ldw	r2,44(sp)
   8481c:	1001741e 	bne	r2,zero,84df0 <_dtoa_r+0x1068>
   84820:	00800044 	movi	r2,1
   84824:	d8c00717 	ldw	r3,28(sp)
   84828:	10c5883a 	add	r2,r2,r3
   8482c:	108007cc 	andi	r2,r2,31
   84830:	10008026 	beq	r2,zero,84a34 <_dtoa_r+0xcac>
   84834:	01000804 	movi	r4,32
   84838:	2089c83a 	sub	r4,r4,r2
   8483c:	00c00104 	movi	r3,4
   84840:	1902d00e 	bge	r3,r4,85384 <_dtoa_r+0x15fc>
   84844:	d9000817 	ldw	r4,32(sp)
   84848:	d9c00717 	ldw	r7,28(sp)
   8484c:	00c00704 	movi	r3,28
   84850:	1885c83a 	sub	r2,r3,r2
   84854:	2089883a 	add	r4,r4,r2
   84858:	388f883a 	add	r7,r7,r2
   8485c:	d9000815 	stw	r4,32(sp)
   84860:	90a5883a 	add	r18,r18,r2
   84864:	d9c00715 	stw	r7,28(sp)
   84868:	d9c00817 	ldw	r7,32(sp)
   8486c:	01c0050e 	bge	zero,r7,84884 <_dtoa_r+0xafc>
   84870:	e00b883a 	mov	r5,fp
   84874:	8009883a 	mov	r4,r16
   84878:	380d883a 	mov	r6,r7
   8487c:	00877300 	call	87730 <__lshift>
   84880:	1039883a 	mov	fp,r2
   84884:	d8800717 	ldw	r2,28(sp)
   84888:	0080050e 	bge	zero,r2,848a0 <_dtoa_r+0xb18>
   8488c:	a00b883a 	mov	r5,r20
   84890:	8009883a 	mov	r4,r16
   84894:	100d883a 	mov	r6,r2
   84898:	00877300 	call	87730 <__lshift>
   8489c:	1029883a 	mov	r20,r2
   848a0:	d8c00d17 	ldw	r3,52(sp)
   848a4:	1801401e 	bne	r3,zero,84da8 <_dtoa_r+0x1020>
   848a8:	d8800917 	ldw	r2,36(sp)
   848ac:	00815a0e 	bge	zero,r2,84e18 <_dtoa_r+0x1090>
   848b0:	d8c00c17 	ldw	r3,48(sp)
   848b4:	18006f1e 	bne	r3,zero,84a74 <_dtoa_r+0xcec>
   848b8:	b823883a 	mov	r17,r23
   848bc:	dc800917 	ldw	r18,36(sp)
   848c0:	00000206 	br	848cc <_dtoa_r+0xb44>
   848c4:	00870b80 	call	870b8 <__multadd>
   848c8:	1039883a 	mov	fp,r2
   848cc:	e009883a 	mov	r4,fp
   848d0:	a00b883a 	mov	r5,r20
   848d4:	0083b800 	call	83b80 <quorem>
   848d8:	10800c04 	addi	r2,r2,48
   848dc:	88800005 	stb	r2,0(r17)
   848e0:	8c400044 	addi	r17,r17,1
   848e4:	8dc7c83a 	sub	r3,r17,r23
   848e8:	8009883a 	mov	r4,r16
   848ec:	e00b883a 	mov	r5,fp
   848f0:	01800284 	movi	r6,10
   848f4:	000f883a 	mov	r7,zero
   848f8:	1cbff216 	blt	r3,r18,848c4 <_dtoa_r+0xb3c>
   848fc:	dd800917 	ldw	r22,36(sp)
   84900:	1007883a 	mov	r3,r2
   84904:	05823a0e 	bge	zero,r22,851f0 <_dtoa_r+0x1468>
   84908:	bdad883a 	add	r22,r23,r22
   8490c:	0023883a 	mov	r17,zero
   84910:	e00b883a 	mov	r5,fp
   84914:	01800044 	movi	r6,1
   84918:	8009883a 	mov	r4,r16
   8491c:	d8c01515 	stw	r3,84(sp)
   84920:	00877300 	call	87730 <__lshift>
   84924:	1009883a 	mov	r4,r2
   84928:	a00b883a 	mov	r5,r20
   8492c:	1039883a 	mov	fp,r2
   84930:	008788c0 	call	8788c <__mcmp>
   84934:	d8c01517 	ldw	r3,84(sp)
   84938:	0080d60e 	bge	zero,r2,84c94 <_dtoa_r+0xf0c>
   8493c:	b13fffc3 	ldbu	r4,-1(r22)
   84940:	b0ffff84 	addi	r3,r22,-2
   84944:	01800e44 	movi	r6,57
   84948:	00000306 	br	84958 <_dtoa_r+0xbd0>
   8494c:	19000003 	ldbu	r4,0(r3)
   84950:	102d883a 	mov	r22,r2
   84954:	18ffffc4 	addi	r3,r3,-1
   84958:	21403fcc 	andi	r5,r4,255
   8495c:	2940201c 	xori	r5,r5,128
   84960:	297fe004 	addi	r5,r5,-128
   84964:	b0bfffc4 	addi	r2,r22,-1
   84968:	2981a71e 	bne	r5,r6,85008 <_dtoa_r+0x1280>
   8496c:	b8bff71e 	bne	r23,r2,8494c <_dtoa_r+0xbc4>
   84970:	d8800617 	ldw	r2,24(sp)
   84974:	10800044 	addi	r2,r2,1
   84978:	d8800615 	stw	r2,24(sp)
   8497c:	00800c44 	movi	r2,49
   84980:	b8800005 	stb	r2,0(r23)
   84984:	8009883a 	mov	r4,r16
   84988:	a00b883a 	mov	r5,r20
   8498c:	00870900 	call	87090 <_Bfree>
   84990:	a83e9e26 	beq	r21,zero,8440c <_dtoa_r+0x684>
   84994:	88000426 	beq	r17,zero,849a8 <_dtoa_r+0xc20>
   84998:	8d400326 	beq	r17,r21,849a8 <_dtoa_r+0xc20>
   8499c:	8009883a 	mov	r4,r16
   849a0:	880b883a 	mov	r5,r17
   849a4:	00870900 	call	87090 <_Bfree>
   849a8:	8009883a 	mov	r4,r16
   849ac:	a80b883a 	mov	r5,r21
   849b0:	00870900 	call	87090 <_Bfree>
   849b4:	003e9506 	br	8440c <_dtoa_r+0x684>
   849b8:	00c00044 	movi	r3,1
   849bc:	d8c00d15 	stw	r3,52(sp)
   849c0:	003d9f06 	br	84040 <_dtoa_r+0x2b8>
   849c4:	d9000817 	ldw	r4,32(sp)
   849c8:	d8800617 	ldw	r2,24(sp)
   849cc:	d8000b15 	stw	zero,44(sp)
   849d0:	2089c83a 	sub	r4,r4,r2
   849d4:	0087c83a 	sub	r3,zero,r2
   849d8:	d9000815 	stw	r4,32(sp)
   849dc:	d8c00a15 	stw	r3,40(sp)
   849e0:	003da306 	br	84070 <_dtoa_r+0x2e8>
   849e4:	0529c83a 	sub	r20,zero,r20
   849e8:	dd000815 	stw	r20,32(sp)
   849ec:	d8000715 	stw	zero,28(sp)
   849f0:	003d9806 	br	84054 <_dtoa_r+0x2cc>
   849f4:	d9000617 	ldw	r4,24(sp)
   849f8:	008a5ec0 	call	8a5ec <__floatsidf>
   849fc:	1009883a 	mov	r4,r2
   84a00:	180b883a 	mov	r5,r3
   84a04:	980d883a 	mov	r6,r19
   84a08:	900f883a 	mov	r7,r18
   84a0c:	008a46c0 	call	8a46c <__nedf2>
   84a10:	103d7a26 	beq	r2,zero,83ffc <_dtoa_r+0x274>
   84a14:	d8800617 	ldw	r2,24(sp)
   84a18:	10bfffc4 	addi	r2,r2,-1
   84a1c:	d8800615 	stw	r2,24(sp)
   84a20:	003d7606 	br	83ffc <_dtoa_r+0x274>
   84a24:	dcc00a17 	ldw	r19,40(sp)
   84a28:	dc800817 	ldw	r18,32(sp)
   84a2c:	002b883a 	mov	r21,zero
   84a30:	003f4906 	br	84758 <_dtoa_r+0x9d0>
   84a34:	00800704 	movi	r2,28
   84a38:	d8c00817 	ldw	r3,32(sp)
   84a3c:	d9000717 	ldw	r4,28(sp)
   84a40:	90a5883a 	add	r18,r18,r2
   84a44:	1887883a 	add	r3,r3,r2
   84a48:	2089883a 	add	r4,r4,r2
   84a4c:	d8c00815 	stw	r3,32(sp)
   84a50:	d9000715 	stw	r4,28(sp)
   84a54:	003f8406 	br	84868 <_dtoa_r+0xae0>
   84a58:	d9c00317 	ldw	r7,12(sp)
   84a5c:	013efb84 	movi	r4,-1042
   84a60:	2509c83a 	sub	r4,r4,r20
   84a64:	3908983a 	sll	r4,r7,r4
   84a68:	003d3006 	br	83f2c <_dtoa_r+0x1a4>
   84a6c:	d8000d15 	stw	zero,52(sp)
   84a70:	003d7306 	br	84040 <_dtoa_r+0x2b8>
   84a74:	0480050e 	bge	zero,r18,84a8c <_dtoa_r+0xd04>
   84a78:	a80b883a 	mov	r5,r21
   84a7c:	8009883a 	mov	r4,r16
   84a80:	900d883a 	mov	r6,r18
   84a84:	00877300 	call	87730 <__lshift>
   84a88:	102b883a 	mov	r21,r2
   84a8c:	8801611e 	bne	r17,zero,85014 <_dtoa_r+0x128c>
   84a90:	a827883a 	mov	r19,r21
   84a94:	d8c00317 	ldw	r3,12(sp)
   84a98:	d9000917 	ldw	r4,36(sp)
   84a9c:	b8bfffc4 	addi	r2,r23,-1
   84aa0:	18c0004c 	andi	r3,r3,1
   84aa4:	1105883a 	add	r2,r2,r4
   84aa8:	b825883a 	mov	r18,r23
   84aac:	d8800515 	stw	r2,20(sp)
   84ab0:	a823883a 	mov	r17,r21
   84ab4:	d8c00315 	stw	r3,12(sp)
   84ab8:	ddc00715 	stw	r23,28(sp)
   84abc:	e009883a 	mov	r4,fp
   84ac0:	a00b883a 	mov	r5,r20
   84ac4:	0083b800 	call	83b80 <quorem>
   84ac8:	e009883a 	mov	r4,fp
   84acc:	880b883a 	mov	r5,r17
   84ad0:	102d883a 	mov	r22,r2
   84ad4:	008788c0 	call	8788c <__mcmp>
   84ad8:	980d883a 	mov	r6,r19
   84adc:	8009883a 	mov	r4,r16
   84ae0:	a00b883a 	mov	r5,r20
   84ae4:	102b883a 	mov	r21,r2
   84ae8:	00878e40 	call	878e4 <__mdiff>
   84aec:	100d883a 	mov	r6,r2
   84af0:	10800317 	ldw	r2,12(r2)
   84af4:	b5c00c04 	addi	r23,r22,48
   84af8:	10008c26 	beq	r2,zero,84d2c <_dtoa_r+0xfa4>
   84afc:	8009883a 	mov	r4,r16
   84b00:	300b883a 	mov	r5,r6
   84b04:	00870900 	call	87090 <_Bfree>
   84b08:	00800044 	movi	r2,1
   84b0c:	a8007116 	blt	r21,zero,84cd4 <_dtoa_r+0xf4c>
   84b10:	a800041e 	bne	r21,zero,84b24 <_dtoa_r+0xd9c>
   84b14:	d9c00417 	ldw	r7,16(sp)
   84b18:	3800021e 	bne	r7,zero,84b24 <_dtoa_r+0xd9c>
   84b1c:	d8c00317 	ldw	r3,12(sp)
   84b20:	18006c26 	beq	r3,zero,84cd4 <_dtoa_r+0xf4c>
   84b24:	00814c16 	blt	zero,r2,85058 <_dtoa_r+0x12d0>
   84b28:	d8c00517 	ldw	r3,20(sp)
   84b2c:	95400044 	addi	r21,r18,1
   84b30:	95c00005 	stb	r23,0(r18)
   84b34:	a82d883a 	mov	r22,r21
   84b38:	90c14d26 	beq	r18,r3,85070 <_dtoa_r+0x12e8>
   84b3c:	e00b883a 	mov	r5,fp
   84b40:	8009883a 	mov	r4,r16
   84b44:	01800284 	movi	r6,10
   84b48:	000f883a 	mov	r7,zero
   84b4c:	00870b80 	call	870b8 <__multadd>
   84b50:	1039883a 	mov	fp,r2
   84b54:	8cc08b26 	beq	r17,r19,84d84 <_dtoa_r+0xffc>
   84b58:	880b883a 	mov	r5,r17
   84b5c:	01800284 	movi	r6,10
   84b60:	000f883a 	mov	r7,zero
   84b64:	8009883a 	mov	r4,r16
   84b68:	00870b80 	call	870b8 <__multadd>
   84b6c:	980b883a 	mov	r5,r19
   84b70:	8009883a 	mov	r4,r16
   84b74:	01800284 	movi	r6,10
   84b78:	000f883a 	mov	r7,zero
   84b7c:	1023883a 	mov	r17,r2
   84b80:	00870b80 	call	870b8 <__multadd>
   84b84:	1027883a 	mov	r19,r2
   84b88:	a825883a 	mov	r18,r21
   84b8c:	003fcb06 	br	84abc <_dtoa_r+0xd34>
   84b90:	d9c00417 	ldw	r7,16(sp)
   84b94:	00800104 	movi	r2,4
   84b98:	3880e426 	beq	r7,r2,84f2c <_dtoa_r+0x11a4>
   84b9c:	00800144 	movi	r2,5
   84ba0:	38be3c1e 	bne	r7,r2,84494 <_dtoa_r+0x70c>
   84ba4:	00c00044 	movi	r3,1
   84ba8:	d8c00c15 	stw	r3,48(sp)
   84bac:	d9c02117 	ldw	r7,132(sp)
   84bb0:	d8800617 	ldw	r2,24(sp)
   84bb4:	388f883a 	add	r7,r7,r2
   84bb8:	3c800044 	addi	r18,r7,1
   84bbc:	d9c00e15 	stw	r7,56(sp)
   84bc0:	dc800915 	stw	r18,36(sp)
   84bc4:	04bd3e16 	blt	zero,r18,840c0 <_dtoa_r+0x338>
   84bc8:	80001115 	stw	zero,68(r16)
   84bcc:	000b883a 	mov	r5,zero
   84bd0:	003d4606 	br	840ec <_dtoa_r+0x364>
   84bd4:	d8c00317 	ldw	r3,12(sp)
   84bd8:	183f0e1e 	bne	r3,zero,84814 <_dtoa_r+0xa8c>
   84bdc:	00c00434 	movhi	r3,16
   84be0:	18ffffc4 	addi	r3,r3,-1
   84be4:	88c6703a 	and	r3,r17,r3
   84be8:	183f0a1e 	bne	r3,zero,84814 <_dtoa_r+0xa8c>
   84bec:	8c5ffc2c 	andhi	r17,r17,32752
   84bf0:	883f0826 	beq	r17,zero,84814 <_dtoa_r+0xa8c>
   84bf4:	d9000817 	ldw	r4,32(sp)
   84bf8:	d9c00717 	ldw	r7,28(sp)
   84bfc:	1023883a 	mov	r17,r2
   84c00:	2089883a 	add	r4,r4,r2
   84c04:	388f883a 	add	r7,r7,r2
   84c08:	d9000815 	stw	r4,32(sp)
   84c0c:	d9c00715 	stw	r7,28(sp)
   84c10:	003f0106 	br	84818 <_dtoa_r+0xa90>
   84c14:	9005883a 	mov	r2,r18
   84c18:	003ed306 	br	84768 <_dtoa_r+0x9e0>
   84c1c:	d8800917 	ldw	r2,36(sp)
   84c20:	00be3516 	blt	zero,r2,844f8 <_dtoa_r+0x770>
   84c24:	1000b61e 	bne	r2,zero,84f00 <_dtoa_r+0x1178>
   84c28:	9009883a 	mov	r4,r18
   84c2c:	980b883a 	mov	r5,r19
   84c30:	000d883a 	mov	r6,zero
   84c34:	01d00534 	movhi	r7,16404
   84c38:	0089f780 	call	89f78 <__muldf3>
   84c3c:	d9800317 	ldw	r6,12(sp)
   84c40:	1009883a 	mov	r4,r2
   84c44:	180b883a 	mov	r5,r3
   84c48:	880f883a 	mov	r7,r17
   84c4c:	008a52c0 	call	8a52c <__gedf2>
   84c50:	0029883a 	mov	r20,zero
   84c54:	002b883a 	mov	r21,zero
   84c58:	10007e16 	blt	r2,zero,84e54 <_dtoa_r+0x10cc>
   84c5c:	d8802117 	ldw	r2,132(sp)
   84c60:	b82d883a 	mov	r22,r23
   84c64:	0084303a 	nor	r2,zero,r2
   84c68:	d8800615 	stw	r2,24(sp)
   84c6c:	8009883a 	mov	r4,r16
   84c70:	a00b883a 	mov	r5,r20
   84c74:	00870900 	call	87090 <_Bfree>
   84c78:	a83f4b1e 	bne	r21,zero,849a8 <_dtoa_r+0xc20>
   84c7c:	003de306 	br	8440c <_dtoa_r+0x684>
   84c80:	e00b883a 	mov	r5,fp
   84c84:	8009883a 	mov	r4,r16
   84c88:	00876040 	call	87604 <__pow5mult>
   84c8c:	1039883a 	mov	fp,r2
   84c90:	003ed206 	br	847dc <_dtoa_r+0xa54>
   84c94:	1000021e 	bne	r2,zero,84ca0 <_dtoa_r+0xf18>
   84c98:	18c0004c 	andi	r3,r3,1
   84c9c:	183f271e 	bne	r3,zero,8493c <_dtoa_r+0xbb4>
   84ca0:	01000c04 	movi	r4,48
   84ca4:	00000106 	br	84cac <_dtoa_r+0xf24>
   84ca8:	102d883a 	mov	r22,r2
   84cac:	b0bfffc4 	addi	r2,r22,-1
   84cb0:	10c00007 	ldb	r3,0(r2)
   84cb4:	193ffc26 	beq	r3,r4,84ca8 <_dtoa_r+0xf20>
   84cb8:	003f3206 	br	84984 <_dtoa_r+0xbfc>
   84cbc:	d8c00f17 	ldw	r3,60(sp)
   84cc0:	18015026 	beq	r3,zero,85204 <_dtoa_r+0x147c>
   84cc4:	10810cc4 	addi	r2,r2,1075
   84cc8:	dcc00a17 	ldw	r19,40(sp)
   84ccc:	dc800817 	ldw	r18,32(sp)
   84cd0:	003e9706 	br	84730 <_dtoa_r+0x9a8>
   84cd4:	b807883a 	mov	r3,r23
   84cd8:	182b883a 	mov	r21,r3
   84cdc:	ddc00717 	ldw	r23,28(sp)
   84ce0:	00800e0e 	bge	zero,r2,84d1c <_dtoa_r+0xf94>
   84ce4:	e00b883a 	mov	r5,fp
   84ce8:	01800044 	movi	r6,1
   84cec:	8009883a 	mov	r4,r16
   84cf0:	d8c01515 	stw	r3,84(sp)
   84cf4:	00877300 	call	87730 <__lshift>
   84cf8:	1009883a 	mov	r4,r2
   84cfc:	a00b883a 	mov	r5,r20
   84d00:	1039883a 	mov	fp,r2
   84d04:	008788c0 	call	8788c <__mcmp>
   84d08:	d8c01517 	ldw	r3,84(sp)
   84d0c:	0081880e 	bge	zero,r2,85330 <_dtoa_r+0x15a8>
   84d10:	00800e44 	movi	r2,57
   84d14:	b0c00c44 	addi	r3,r22,49
   84d18:	a8816326 	beq	r21,r2,852a8 <_dtoa_r+0x1520>
   84d1c:	90c00005 	stb	r3,0(r18)
   84d20:	95800044 	addi	r22,r18,1
   84d24:	982b883a 	mov	r21,r19
   84d28:	003f1606 	br	84984 <_dtoa_r+0xbfc>
   84d2c:	300b883a 	mov	r5,r6
   84d30:	e009883a 	mov	r4,fp
   84d34:	d9801515 	stw	r6,84(sp)
   84d38:	008788c0 	call	8788c <__mcmp>
   84d3c:	d9801517 	ldw	r6,84(sp)
   84d40:	8009883a 	mov	r4,r16
   84d44:	d8801515 	stw	r2,84(sp)
   84d48:	300b883a 	mov	r5,r6
   84d4c:	00870900 	call	87090 <_Bfree>
   84d50:	d8801517 	ldw	r2,84(sp)
   84d54:	103f6d1e 	bne	r2,zero,84b0c <_dtoa_r+0xd84>
   84d58:	d9c00417 	ldw	r7,16(sp)
   84d5c:	383f6b1e 	bne	r7,zero,84b0c <_dtoa_r+0xd84>
   84d60:	d8c00317 	ldw	r3,12(sp)
   84d64:	183f691e 	bne	r3,zero,84b0c <_dtoa_r+0xd84>
   84d68:	b807883a 	mov	r3,r23
   84d6c:	00800e44 	movi	r2,57
   84d70:	ddc00717 	ldw	r23,28(sp)
   84d74:	18814c26 	beq	r3,r2,852a8 <_dtoa_r+0x1520>
   84d78:	057fe80e 	bge	zero,r21,84d1c <_dtoa_r+0xf94>
   84d7c:	b0c00c44 	addi	r3,r22,49
   84d80:	003fe606 	br	84d1c <_dtoa_r+0xf94>
   84d84:	880b883a 	mov	r5,r17
   84d88:	8009883a 	mov	r4,r16
   84d8c:	01800284 	movi	r6,10
   84d90:	000f883a 	mov	r7,zero
   84d94:	00870b80 	call	870b8 <__multadd>
   84d98:	1023883a 	mov	r17,r2
   84d9c:	1027883a 	mov	r19,r2
   84da0:	a825883a 	mov	r18,r21
   84da4:	003f4506 	br	84abc <_dtoa_r+0xd34>
   84da8:	e009883a 	mov	r4,fp
   84dac:	a00b883a 	mov	r5,r20
   84db0:	008788c0 	call	8788c <__mcmp>
   84db4:	103ebc0e 	bge	r2,zero,848a8 <_dtoa_r+0xb20>
   84db8:	e00b883a 	mov	r5,fp
   84dbc:	8009883a 	mov	r4,r16
   84dc0:	01800284 	movi	r6,10
   84dc4:	000f883a 	mov	r7,zero
   84dc8:	00870b80 	call	870b8 <__multadd>
   84dcc:	1039883a 	mov	fp,r2
   84dd0:	d8800617 	ldw	r2,24(sp)
   84dd4:	d8c00c17 	ldw	r3,48(sp)
   84dd8:	10bfffc4 	addi	r2,r2,-1
   84ddc:	d8800615 	stw	r2,24(sp)
   84de0:	1801571e 	bne	r3,zero,85340 <_dtoa_r+0x15b8>
   84de4:	d9c00e17 	ldw	r7,56(sp)
   84de8:	d9c00915 	stw	r7,36(sp)
   84dec:	003eae06 	br	848a8 <_dtoa_r+0xb20>
   84df0:	a0800417 	ldw	r2,16(r20)
   84df4:	10800104 	addi	r2,r2,4
   84df8:	1085883a 	add	r2,r2,r2
   84dfc:	1085883a 	add	r2,r2,r2
   84e00:	a085883a 	add	r2,r20,r2
   84e04:	11000017 	ldw	r4,0(r2)
   84e08:	00872d00 	call	872d0 <__hi0bits>
   84e0c:	00c00804 	movi	r3,32
   84e10:	1885c83a 	sub	r2,r3,r2
   84e14:	003e8306 	br	84824 <_dtoa_r+0xa9c>
   84e18:	d9c00417 	ldw	r7,16(sp)
   84e1c:	00800084 	movi	r2,2
   84e20:	11fea30e 	bge	r2,r7,848b0 <_dtoa_r+0xb28>
   84e24:	d8800917 	ldw	r2,36(sp)
   84e28:	103f8c1e 	bne	r2,zero,84c5c <_dtoa_r+0xed4>
   84e2c:	a00b883a 	mov	r5,r20
   84e30:	8009883a 	mov	r4,r16
   84e34:	01800144 	movi	r6,5
   84e38:	000f883a 	mov	r7,zero
   84e3c:	00870b80 	call	870b8 <__multadd>
   84e40:	e009883a 	mov	r4,fp
   84e44:	100b883a 	mov	r5,r2
   84e48:	1029883a 	mov	r20,r2
   84e4c:	008788c0 	call	8788c <__mcmp>
   84e50:	00bf820e 	bge	zero,r2,84c5c <_dtoa_r+0xed4>
   84e54:	00800c44 	movi	r2,49
   84e58:	b8800005 	stb	r2,0(r23)
   84e5c:	d8800617 	ldw	r2,24(sp)
   84e60:	bd800044 	addi	r22,r23,1
   84e64:	10800044 	addi	r2,r2,1
   84e68:	d8800615 	stw	r2,24(sp)
   84e6c:	003f7f06 	br	84c6c <_dtoa_r+0xee4>
   84e70:	dc000417 	ldw	r16,16(sp)
   84e74:	003d6506 	br	8440c <_dtoa_r+0x684>
   84e78:	9009883a 	mov	r4,r18
   84e7c:	008a5ec0 	call	8a5ec <__floatsidf>
   84e80:	1009883a 	mov	r4,r2
   84e84:	180b883a 	mov	r5,r3
   84e88:	980d883a 	mov	r6,r19
   84e8c:	a00f883a 	mov	r7,r20
   84e90:	0089f780 	call	89f78 <__muldf3>
   84e94:	1009883a 	mov	r4,r2
   84e98:	180b883a 	mov	r5,r3
   84e9c:	000d883a 	mov	r6,zero
   84ea0:	01d00734 	movhi	r7,16412
   84ea4:	0089ec40 	call	89ec4 <__adddf3>
   84ea8:	057f3034 	movhi	r21,64704
   84eac:	1025883a 	mov	r18,r2
   84eb0:	1d6b883a 	add	r21,r3,r21
   84eb4:	9809883a 	mov	r4,r19
   84eb8:	a00b883a 	mov	r5,r20
   84ebc:	000d883a 	mov	r6,zero
   84ec0:	01d00534 	movhi	r7,16404
   84ec4:	0089f180 	call	89f18 <__subdf3>
   84ec8:	1009883a 	mov	r4,r2
   84ecc:	180b883a 	mov	r5,r3
   84ed0:	900d883a 	mov	r6,r18
   84ed4:	a80f883a 	mov	r7,r21
   84ed8:	1027883a 	mov	r19,r2
   84edc:	1829883a 	mov	r20,r3
   84ee0:	008a4c80 	call	8a4c8 <__gtdf2>
   84ee4:	00806616 	blt	zero,r2,85080 <_dtoa_r+0x12f8>
   84ee8:	a9e0003c 	xorhi	r7,r21,32768
   84eec:	9809883a 	mov	r4,r19
   84ef0:	a00b883a 	mov	r5,r20
   84ef4:	900d883a 	mov	r6,r18
   84ef8:	008a5900 	call	8a590 <__ltdf2>
   84efc:	103d710e 	bge	r2,zero,844c4 <_dtoa_r+0x73c>
   84f00:	0029883a 	mov	r20,zero
   84f04:	002b883a 	mov	r21,zero
   84f08:	003f5406 	br	84c5c <_dtoa_r+0xed4>
   84f0c:	d9800a17 	ldw	r6,40(sp)
   84f10:	e00b883a 	mov	r5,fp
   84f14:	8009883a 	mov	r4,r16
   84f18:	00876040 	call	87604 <__pow5mult>
   84f1c:	1039883a 	mov	fp,r2
   84f20:	003e2e06 	br	847dc <_dtoa_r+0xa54>
   84f24:	d8000c15 	stw	zero,48(sp)
   84f28:	003f2006 	br	84bac <_dtoa_r+0xe24>
   84f2c:	00800044 	movi	r2,1
   84f30:	d8800c15 	stw	r2,48(sp)
   84f34:	003c5d06 	br	840ac <_dtoa_r+0x324>
   84f38:	d8c00a17 	ldw	r3,40(sp)
   84f3c:	d9000b17 	ldw	r4,44(sp)
   84f40:	dcc00a15 	stw	r19,40(sp)
   84f44:	98c5c83a 	sub	r2,r19,r3
   84f48:	2089883a 	add	r4,r4,r2
   84f4c:	d9000b15 	stw	r4,44(sp)
   84f50:	0027883a 	mov	r19,zero
   84f54:	003df206 	br	84720 <_dtoa_r+0x998>
   84f58:	d9000317 	ldw	r4,12(sp)
   84f5c:	8829883a 	mov	r20,r17
   84f60:	04800084 	movi	r18,2
   84f64:	d9001015 	stw	r4,64(sp)
   84f68:	003c8106 	br	84170 <_dtoa_r+0x3e8>
   84f6c:	04800044 	movi	r18,1
   84f70:	dc800e15 	stw	r18,56(sp)
   84f74:	dc800915 	stw	r18,36(sp)
   84f78:	dc802115 	stw	r18,132(sp)
   84f7c:	003f1206 	br	84bc8 <_dtoa_r+0xe40>
   84f80:	d8800617 	ldw	r2,24(sp)
   84f84:	00abc83a 	sub	r21,zero,r2
   84f88:	a800a426 	beq	r21,zero,8521c <_dtoa_r+0x1494>
   84f8c:	a88003cc 	andi	r2,r21,15
   84f90:	100490fa 	slli	r2,r2,3
   84f94:	00c00274 	movhi	r3,9
   84f98:	18f8a304 	addi	r3,r3,-7540
   84f9c:	d9000317 	ldw	r4,12(sp)
   84fa0:	1885883a 	add	r2,r3,r2
   84fa4:	11800017 	ldw	r6,0(r2)
   84fa8:	11c00117 	ldw	r7,4(r2)
   84fac:	a82bd13a 	srai	r21,r21,4
   84fb0:	880b883a 	mov	r5,r17
   84fb4:	0089f780 	call	89f78 <__muldf3>
   84fb8:	1027883a 	mov	r19,r2
   84fbc:	1829883a 	mov	r20,r3
   84fc0:	a800e826 	beq	r21,zero,85364 <_dtoa_r+0x15dc>
   84fc4:	05800274 	movhi	r22,9
   84fc8:	b5b89904 	addi	r22,r22,-7580
   84fcc:	04800084 	movi	r18,2
   84fd0:	a980004c 	andi	r6,r21,1
   84fd4:	1009883a 	mov	r4,r2
   84fd8:	a82bd07a 	srai	r21,r21,1
   84fdc:	180b883a 	mov	r5,r3
   84fe0:	30000426 	beq	r6,zero,84ff4 <_dtoa_r+0x126c>
   84fe4:	b1800017 	ldw	r6,0(r22)
   84fe8:	b1c00117 	ldw	r7,4(r22)
   84fec:	94800044 	addi	r18,r18,1
   84ff0:	0089f780 	call	89f78 <__muldf3>
   84ff4:	b5800204 	addi	r22,r22,8
   84ff8:	a83ff51e 	bne	r21,zero,84fd0 <_dtoa_r+0x1248>
   84ffc:	1027883a 	mov	r19,r2
   85000:	1829883a 	mov	r20,r3
   85004:	003c7306 	br	841d4 <_dtoa_r+0x44c>
   85008:	21000044 	addi	r4,r4,1
   8500c:	11000005 	stb	r4,0(r2)
   85010:	003e5c06 	br	84984 <_dtoa_r+0xbfc>
   85014:	a9400117 	ldw	r5,4(r21)
   85018:	8009883a 	mov	r4,r16
   8501c:	0086fe80 	call	86fe8 <_Balloc>
   85020:	a9800417 	ldw	r6,16(r21)
   85024:	11000304 	addi	r4,r2,12
   85028:	a9400304 	addi	r5,r21,12
   8502c:	31800084 	addi	r6,r6,2
   85030:	318d883a 	add	r6,r6,r6
   85034:	318d883a 	add	r6,r6,r6
   85038:	1023883a 	mov	r17,r2
   8503c:	00818980 	call	81898 <memcpy>
   85040:	8009883a 	mov	r4,r16
   85044:	880b883a 	mov	r5,r17
   85048:	01800044 	movi	r6,1
   8504c:	00877300 	call	87730 <__lshift>
   85050:	1027883a 	mov	r19,r2
   85054:	003e8f06 	br	84a94 <_dtoa_r+0xd0c>
   85058:	b807883a 	mov	r3,r23
   8505c:	00800e44 	movi	r2,57
   85060:	ddc00717 	ldw	r23,28(sp)
   85064:	18809026 	beq	r3,r2,852a8 <_dtoa_r+0x1520>
   85068:	18c00044 	addi	r3,r3,1
   8506c:	003f2b06 	br	84d1c <_dtoa_r+0xf94>
   85070:	b807883a 	mov	r3,r23
   85074:	982b883a 	mov	r21,r19
   85078:	ddc00717 	ldw	r23,28(sp)
   8507c:	003e2406 	br	84910 <_dtoa_r+0xb88>
   85080:	0029883a 	mov	r20,zero
   85084:	002b883a 	mov	r21,zero
   85088:	003f7206 	br	84e54 <_dtoa_r+0x10cc>
   8508c:	593fffc4 	addi	r4,r11,-1
   85090:	200490fa 	slli	r2,r4,3
   85094:	00c00274 	movhi	r3,9
   85098:	18f8a304 	addi	r3,r3,-7540
   8509c:	d9001015 	stw	r4,64(sp)
   850a0:	1885883a 	add	r2,r3,r2
   850a4:	11000017 	ldw	r4,0(r2)
   850a8:	11400117 	ldw	r5,4(r2)
   850ac:	900d883a 	mov	r6,r18
   850b0:	a80f883a 	mov	r7,r21
   850b4:	dac01615 	stw	r11,88(sp)
   850b8:	0089f780 	call	89f78 <__muldf3>
   850bc:	a00b883a 	mov	r5,r20
   850c0:	9809883a 	mov	r4,r19
   850c4:	d8c01215 	stw	r3,72(sp)
   850c8:	d8801115 	stw	r2,68(sp)
   850cc:	008a6c00 	call	8a6c0 <__fixdfsi>
   850d0:	1009883a 	mov	r4,r2
   850d4:	1025883a 	mov	r18,r2
   850d8:	008a5ec0 	call	8a5ec <__floatsidf>
   850dc:	9809883a 	mov	r4,r19
   850e0:	a00b883a 	mov	r5,r20
   850e4:	100d883a 	mov	r6,r2
   850e8:	180f883a 	mov	r7,r3
   850ec:	94800c04 	addi	r18,r18,48
   850f0:	0089f180 	call	89f18 <__subdf3>
   850f4:	bc800005 	stb	r18,0(r23)
   850f8:	dac01617 	ldw	r11,88(sp)
   850fc:	102b883a 	mov	r21,r2
   85100:	00800044 	movi	r2,1
   85104:	bd800044 	addi	r22,r23,1
   85108:	1815883a 	mov	r10,r3
   8510c:	58802226 	beq	r11,r2,85198 <_dtoa_r+0x1410>
   85110:	bad7883a 	add	r11,r23,r11
   85114:	dc001415 	stw	r16,80(sp)
   85118:	a805883a 	mov	r2,r21
   8511c:	b027883a 	mov	r19,r22
   85120:	5821883a 	mov	r16,r11
   85124:	882b883a 	mov	r21,r17
   85128:	000d883a 	mov	r6,zero
   8512c:	01d00934 	movhi	r7,16420
   85130:	1009883a 	mov	r4,r2
   85134:	180b883a 	mov	r5,r3
   85138:	0089f780 	call	89f78 <__muldf3>
   8513c:	180b883a 	mov	r5,r3
   85140:	1009883a 	mov	r4,r2
   85144:	1829883a 	mov	r20,r3
   85148:	1023883a 	mov	r17,r2
   8514c:	008a6c00 	call	8a6c0 <__fixdfsi>
   85150:	1009883a 	mov	r4,r2
   85154:	1025883a 	mov	r18,r2
   85158:	008a5ec0 	call	8a5ec <__floatsidf>
   8515c:	8809883a 	mov	r4,r17
   85160:	a00b883a 	mov	r5,r20
   85164:	100d883a 	mov	r6,r2
   85168:	180f883a 	mov	r7,r3
   8516c:	94800c04 	addi	r18,r18,48
   85170:	0089f180 	call	89f18 <__subdf3>
   85174:	9cc00044 	addi	r19,r19,1
   85178:	9cbfffc5 	stb	r18,-1(r19)
   8517c:	9c3fea1e 	bne	r19,r16,85128 <_dtoa_r+0x13a0>
   85180:	1815883a 	mov	r10,r3
   85184:	d8c01017 	ldw	r3,64(sp)
   85188:	dc001417 	ldw	r16,80(sp)
   8518c:	a823883a 	mov	r17,r21
   85190:	b0ed883a 	add	r22,r22,r3
   85194:	102b883a 	mov	r21,r2
   85198:	d9001117 	ldw	r4,68(sp)
   8519c:	d9401217 	ldw	r5,72(sp)
   851a0:	000d883a 	mov	r6,zero
   851a4:	01cff834 	movhi	r7,16352
   851a8:	da801515 	stw	r10,84(sp)
   851ac:	0089ec40 	call	89ec4 <__adddf3>
   851b0:	da801517 	ldw	r10,84(sp)
   851b4:	1009883a 	mov	r4,r2
   851b8:	180b883a 	mov	r5,r3
   851bc:	500f883a 	mov	r7,r10
   851c0:	a80d883a 	mov	r6,r21
   851c4:	008a5900 	call	8a590 <__ltdf2>
   851c8:	da801517 	ldw	r10,84(sp)
   851cc:	10003b0e 	bge	r2,zero,852bc <_dtoa_r+0x1534>
   851d0:	d9c01317 	ldw	r7,76(sp)
   851d4:	b53fffc3 	ldbu	r20,-1(r22)
   851d8:	d9c00615 	stw	r7,24(sp)
   851dc:	003d3106 	br	846a4 <_dtoa_r+0x91c>
   851e0:	d8800817 	ldw	r2,32(sp)
   851e4:	11e5c83a 	sub	r18,r2,r7
   851e8:	0005883a 	mov	r2,zero
   851ec:	003d5006 	br	84730 <_dtoa_r+0x9a8>
   851f0:	05800044 	movi	r22,1
   851f4:	003dc406 	br	84908 <_dtoa_r+0xb80>
   851f8:	a5000044 	addi	r20,r20,1
   851fc:	15000005 	stb	r20,0(r2)
   85200:	003c8206 	br	8440c <_dtoa_r+0x684>
   85204:	d8800217 	ldw	r2,8(sp)
   85208:	00c00d84 	movi	r3,54
   8520c:	dcc00a17 	ldw	r19,40(sp)
   85210:	1885c83a 	sub	r2,r3,r2
   85214:	dc800817 	ldw	r18,32(sp)
   85218:	003d4506 	br	84730 <_dtoa_r+0x9a8>
   8521c:	dcc00317 	ldw	r19,12(sp)
   85220:	8829883a 	mov	r20,r17
   85224:	04800084 	movi	r18,2
   85228:	003bea06 	br	841d4 <_dtoa_r+0x44c>
   8522c:	d9000917 	ldw	r4,36(sp)
   85230:	203f1126 	beq	r4,zero,84e78 <_dtoa_r+0x10f0>
   85234:	d9c00e17 	ldw	r7,56(sp)
   85238:	01fca20e 	bge	zero,r7,844c4 <_dtoa_r+0x73c>
   8523c:	a00b883a 	mov	r5,r20
   85240:	9809883a 	mov	r4,r19
   85244:	000d883a 	mov	r6,zero
   85248:	01d00934 	movhi	r7,16420
   8524c:	0089f780 	call	89f78 <__muldf3>
   85250:	91000044 	addi	r4,r18,1
   85254:	1027883a 	mov	r19,r2
   85258:	1829883a 	mov	r20,r3
   8525c:	008a5ec0 	call	8a5ec <__floatsidf>
   85260:	9809883a 	mov	r4,r19
   85264:	a00b883a 	mov	r5,r20
   85268:	100d883a 	mov	r6,r2
   8526c:	180f883a 	mov	r7,r3
   85270:	0089f780 	call	89f78 <__muldf3>
   85274:	1009883a 	mov	r4,r2
   85278:	180b883a 	mov	r5,r3
   8527c:	000d883a 	mov	r6,zero
   85280:	01d00734 	movhi	r7,16412
   85284:	0089ec40 	call	89ec4 <__adddf3>
   85288:	1025883a 	mov	r18,r2
   8528c:	d8800617 	ldw	r2,24(sp)
   85290:	057f3034 	movhi	r21,64704
   85294:	1d6b883a 	add	r21,r3,r21
   85298:	10bfffc4 	addi	r2,r2,-1
   8529c:	d8801315 	stw	r2,76(sp)
   852a0:	dac00e17 	ldw	r11,56(sp)
   852a4:	003be706 	br	84244 <_dtoa_r+0x4bc>
   852a8:	01000e44 	movi	r4,57
   852ac:	91000005 	stb	r4,0(r18)
   852b0:	95800044 	addi	r22,r18,1
   852b4:	982b883a 	mov	r21,r19
   852b8:	003da106 	br	84940 <_dtoa_r+0xbb8>
   852bc:	d9801117 	ldw	r6,68(sp)
   852c0:	d9c01217 	ldw	r7,72(sp)
   852c4:	0009883a 	mov	r4,zero
   852c8:	014ff834 	movhi	r5,16352
   852cc:	da801515 	stw	r10,84(sp)
   852d0:	0089f180 	call	89f18 <__subdf3>
   852d4:	da801517 	ldw	r10,84(sp)
   852d8:	1009883a 	mov	r4,r2
   852dc:	180b883a 	mov	r5,r3
   852e0:	a80d883a 	mov	r6,r21
   852e4:	500f883a 	mov	r7,r10
   852e8:	008a4c80 	call	8a4c8 <__gtdf2>
   852ec:	00bc750e 	bge	zero,r2,844c4 <_dtoa_r+0x73c>
   852f0:	01000c04 	movi	r4,48
   852f4:	00000106 	br	852fc <_dtoa_r+0x1574>
   852f8:	102d883a 	mov	r22,r2
   852fc:	b0bfffc4 	addi	r2,r22,-1
   85300:	10c00007 	ldb	r3,0(r2)
   85304:	193ffc26 	beq	r3,r4,852f8 <_dtoa_r+0x1570>
   85308:	d8801317 	ldw	r2,76(sp)
   8530c:	d8800615 	stw	r2,24(sp)
   85310:	003c3e06 	br	8440c <_dtoa_r+0x684>
   85314:	d9001317 	ldw	r4,76(sp)
   85318:	df001117 	ldw	fp,68(sp)
   8531c:	d9000615 	stw	r4,24(sp)
   85320:	003ce006 	br	846a4 <_dtoa_r+0x91c>
   85324:	df001117 	ldw	fp,68(sp)
   85328:	dc401217 	ldw	r17,72(sp)
   8532c:	003c6506 	br	844c4 <_dtoa_r+0x73c>
   85330:	103e7a1e 	bne	r2,zero,84d1c <_dtoa_r+0xf94>
   85334:	1880004c 	andi	r2,r3,1
   85338:	103e7826 	beq	r2,zero,84d1c <_dtoa_r+0xf94>
   8533c:	003e7406 	br	84d10 <_dtoa_r+0xf88>
   85340:	8009883a 	mov	r4,r16
   85344:	a80b883a 	mov	r5,r21
   85348:	01800284 	movi	r6,10
   8534c:	000f883a 	mov	r7,zero
   85350:	00870b80 	call	870b8 <__multadd>
   85354:	d9000e17 	ldw	r4,56(sp)
   85358:	102b883a 	mov	r21,r2
   8535c:	d9000915 	stw	r4,36(sp)
   85360:	003d5106 	br	848a8 <_dtoa_r+0xb20>
   85364:	04800084 	movi	r18,2
   85368:	003b9a06 	br	841d4 <_dtoa_r+0x44c>
   8536c:	d8c01317 	ldw	r3,76(sp)
   85370:	d8c00615 	stw	r3,24(sp)
   85374:	003ccb06 	br	846a4 <_dtoa_r+0x91c>
   85378:	d8c01317 	ldw	r3,76(sp)
   8537c:	d8c00615 	stw	r3,24(sp)
   85380:	003c2206 	br	8440c <_dtoa_r+0x684>
   85384:	20fd3826 	beq	r4,r3,84868 <_dtoa_r+0xae0>
   85388:	00c00f04 	movi	r3,60
   8538c:	1885c83a 	sub	r2,r3,r2
   85390:	003da906 	br	84a38 <_dtoa_r+0xcb0>
   85394:	000b883a 	mov	r5,zero
   85398:	003b5406 	br	840ec <_dtoa_r+0x364>
   8539c:	04c00044 	movi	r19,1
   853a0:	003b3b06 	br	84090 <_dtoa_r+0x308>

000853a4 <_fflush_r>:
   853a4:	defffb04 	addi	sp,sp,-20
   853a8:	dcc00315 	stw	r19,12(sp)
   853ac:	dc400115 	stw	r17,4(sp)
   853b0:	dfc00415 	stw	ra,16(sp)
   853b4:	dc800215 	stw	r18,8(sp)
   853b8:	dc000015 	stw	r16,0(sp)
   853bc:	2027883a 	mov	r19,r4
   853c0:	2823883a 	mov	r17,r5
   853c4:	20000226 	beq	r4,zero,853d0 <_fflush_r+0x2c>
   853c8:	20800e17 	ldw	r2,56(r4)
   853cc:	10005726 	beq	r2,zero,8552c <_fflush_r+0x188>
   853d0:	8880030b 	ldhu	r2,12(r17)
   853d4:	10c0020c 	andi	r3,r2,8
   853d8:	18ffffcc 	andi	r3,r3,65535
   853dc:	18e0001c 	xori	r3,r3,32768
   853e0:	18e00004 	addi	r3,r3,-32768
   853e4:	1800311e 	bne	r3,zero,854ac <_fflush_r+0x108>
   853e8:	89000117 	ldw	r4,4(r17)
   853ec:	10c20014 	ori	r3,r2,2048
   853f0:	88c0030d 	sth	r3,12(r17)
   853f4:	180b883a 	mov	r5,r3
   853f8:	0100520e 	bge	zero,r4,85544 <_fflush_r+0x1a0>
   853fc:	88c00a17 	ldw	r3,40(r17)
   85400:	18002226 	beq	r3,zero,8548c <_fflush_r+0xe8>
   85404:	1084000c 	andi	r2,r2,4096
   85408:	10bfffcc 	andi	r2,r2,65535
   8540c:	10a0001c 	xori	r2,r2,32768
   85410:	10a00004 	addi	r2,r2,-32768
   85414:	10004e26 	beq	r2,zero,85550 <_fflush_r+0x1ac>
   85418:	8c001417 	ldw	r16,80(r17)
   8541c:	2940010c 	andi	r5,r5,4
   85420:	297fffcc 	andi	r5,r5,65535
   85424:	2960001c 	xori	r5,r5,32768
   85428:	29600004 	addi	r5,r5,-32768
   8542c:	28000626 	beq	r5,zero,85448 <_fflush_r+0xa4>
   85430:	89000117 	ldw	r4,4(r17)
   85434:	88800c17 	ldw	r2,48(r17)
   85438:	8121c83a 	sub	r16,r16,r4
   8543c:	10000226 	beq	r2,zero,85448 <_fflush_r+0xa4>
   85440:	88800f17 	ldw	r2,60(r17)
   85444:	80a1c83a 	sub	r16,r16,r2
   85448:	89400717 	ldw	r5,28(r17)
   8544c:	9809883a 	mov	r4,r19
   85450:	800d883a 	mov	r6,r16
   85454:	000f883a 	mov	r7,zero
   85458:	183ee83a 	callr	r3
   8545c:	8080281e 	bne	r16,r2,85500 <_fflush_r+0x15c>
   85460:	8880030b 	ldhu	r2,12(r17)
   85464:	88c00417 	ldw	r3,16(r17)
   85468:	88000115 	stw	zero,4(r17)
   8546c:	113dffcc 	andi	r4,r2,63487
   85470:	1084000c 	andi	r2,r2,4096
   85474:	10bfffcc 	andi	r2,r2,65535
   85478:	10a0001c 	xori	r2,r2,32768
   8547c:	8900030d 	sth	r4,12(r17)
   85480:	88c00015 	stw	r3,0(r17)
   85484:	10a00004 	addi	r2,r2,-32768
   85488:	10002c1e 	bne	r2,zero,8553c <_fflush_r+0x198>
   8548c:	0005883a 	mov	r2,zero
   85490:	dfc00417 	ldw	ra,16(sp)
   85494:	dcc00317 	ldw	r19,12(sp)
   85498:	dc800217 	ldw	r18,8(sp)
   8549c:	dc400117 	ldw	r17,4(sp)
   854a0:	dc000017 	ldw	r16,0(sp)
   854a4:	dec00504 	addi	sp,sp,20
   854a8:	f800283a 	ret
   854ac:	8c800417 	ldw	r18,16(r17)
   854b0:	903ff626 	beq	r18,zero,8548c <_fflush_r+0xe8>
   854b4:	8c000017 	ldw	r16,0(r17)
   854b8:	108000cc 	andi	r2,r2,3
   854bc:	8c800015 	stw	r18,0(r17)
   854c0:	84a1c83a 	sub	r16,r16,r18
   854c4:	10001b1e 	bne	r2,zero,85534 <_fflush_r+0x190>
   854c8:	88800517 	ldw	r2,20(r17)
   854cc:	88800215 	stw	r2,8(r17)
   854d0:	04000316 	blt	zero,r16,854e0 <_fflush_r+0x13c>
   854d4:	003fed06 	br	8548c <_fflush_r+0xe8>
   854d8:	90a5883a 	add	r18,r18,r2
   854dc:	043feb0e 	bge	zero,r16,8548c <_fflush_r+0xe8>
   854e0:	88800917 	ldw	r2,36(r17)
   854e4:	89400717 	ldw	r5,28(r17)
   854e8:	800f883a 	mov	r7,r16
   854ec:	900d883a 	mov	r6,r18
   854f0:	9809883a 	mov	r4,r19
   854f4:	103ee83a 	callr	r2
   854f8:	80a1c83a 	sub	r16,r16,r2
   854fc:	00bff616 	blt	zero,r2,854d8 <_fflush_r+0x134>
   85500:	88c0030b 	ldhu	r3,12(r17)
   85504:	00bfffc4 	movi	r2,-1
   85508:	18c01014 	ori	r3,r3,64
   8550c:	88c0030d 	sth	r3,12(r17)
   85510:	dfc00417 	ldw	ra,16(sp)
   85514:	dcc00317 	ldw	r19,12(sp)
   85518:	dc800217 	ldw	r18,8(sp)
   8551c:	dc400117 	ldw	r17,4(sp)
   85520:	dc000017 	ldw	r16,0(sp)
   85524:	dec00504 	addi	sp,sp,20
   85528:	f800283a 	ret
   8552c:	008564c0 	call	8564c <__sinit>
   85530:	003fa706 	br	853d0 <_fflush_r+0x2c>
   85534:	0005883a 	mov	r2,zero
   85538:	003fe406 	br	854cc <_fflush_r+0x128>
   8553c:	8c001415 	stw	r16,80(r17)
   85540:	003fd206 	br	8548c <_fflush_r+0xe8>
   85544:	88c00f17 	ldw	r3,60(r17)
   85548:	00ffac16 	blt	zero,r3,853fc <_fflush_r+0x58>
   8554c:	003fcf06 	br	8548c <_fflush_r+0xe8>
   85550:	89400717 	ldw	r5,28(r17)
   85554:	9809883a 	mov	r4,r19
   85558:	000d883a 	mov	r6,zero
   8555c:	01c00044 	movi	r7,1
   85560:	183ee83a 	callr	r3
   85564:	1021883a 	mov	r16,r2
   85568:	00bfffc4 	movi	r2,-1
   8556c:	80800326 	beq	r16,r2,8557c <_fflush_r+0x1d8>
   85570:	8940030b 	ldhu	r5,12(r17)
   85574:	88c00a17 	ldw	r3,40(r17)
   85578:	003fa806 	br	8541c <_fflush_r+0x78>
   8557c:	98c00017 	ldw	r3,0(r19)
   85580:	00800744 	movi	r2,29
   85584:	18bfde1e 	bne	r3,r2,85500 <_fflush_r+0x15c>
   85588:	003fc006 	br	8548c <_fflush_r+0xe8>

0008558c <fflush>:
   8558c:	200b883a 	mov	r5,r4
   85590:	20000426 	beq	r4,zero,855a4 <fflush+0x18>
   85594:	00800274 	movhi	r2,9
   85598:	10bfef04 	addi	r2,r2,-68
   8559c:	11000017 	ldw	r4,0(r2)
   855a0:	00853a41 	jmpi	853a4 <_fflush_r>
   855a4:	00800274 	movhi	r2,9
   855a8:	10bfee04 	addi	r2,r2,-72
   855ac:	11000017 	ldw	r4,0(r2)
   855b0:	01400234 	movhi	r5,8
   855b4:	2954e904 	addi	r5,r5,21412
   855b8:	008622c1 	jmpi	8622c <_fwalk_reent>

000855bc <__fp_lock>:
   855bc:	0005883a 	mov	r2,zero
   855c0:	f800283a 	ret

000855c4 <__fp_unlock>:
   855c4:	0005883a 	mov	r2,zero
   855c8:	f800283a 	ret

000855cc <_cleanup_r>:
   855cc:	01400274 	movhi	r5,9
   855d0:	29638104 	addi	r5,r5,-29180
   855d4:	00861841 	jmpi	86184 <_fwalk>

000855d8 <__sfmoreglue>:
   855d8:	defffc04 	addi	sp,sp,-16
   855dc:	dc400115 	stw	r17,4(sp)
   855e0:	2c401724 	muli	r17,r5,92
   855e4:	dc800215 	stw	r18,8(sp)
   855e8:	2825883a 	mov	r18,r5
   855ec:	89400304 	addi	r5,r17,12
   855f0:	dc000015 	stw	r16,0(sp)
   855f4:	dfc00315 	stw	ra,12(sp)
   855f8:	00865680 	call	86568 <_malloc_r>
   855fc:	1021883a 	mov	r16,r2
   85600:	10000726 	beq	r2,zero,85620 <__sfmoreglue+0x48>
   85604:	11000304 	addi	r4,r2,12
   85608:	10000015 	stw	zero,0(r2)
   8560c:	14800115 	stw	r18,4(r2)
   85610:	11000215 	stw	r4,8(r2)
   85614:	000b883a 	mov	r5,zero
   85618:	880d883a 	mov	r6,r17
   8561c:	0086f0c0 	call	86f0c <memset>
   85620:	8005883a 	mov	r2,r16
   85624:	dfc00317 	ldw	ra,12(sp)
   85628:	dc800217 	ldw	r18,8(sp)
   8562c:	dc400117 	ldw	r17,4(sp)
   85630:	dc000017 	ldw	r16,0(sp)
   85634:	dec00404 	addi	sp,sp,16
   85638:	f800283a 	ret

0008563c <_cleanup>:
   8563c:	00800274 	movhi	r2,9
   85640:	10bfee04 	addi	r2,r2,-72
   85644:	11000017 	ldw	r4,0(r2)
   85648:	00855cc1 	jmpi	855cc <_cleanup_r>

0008564c <__sinit>:
   8564c:	20800e17 	ldw	r2,56(r4)
   85650:	1000401e 	bne	r2,zero,85754 <__sinit+0x108>
   85654:	21400117 	ldw	r5,4(r4)
   85658:	01800234 	movhi	r6,8
   8565c:	31957304 	addi	r6,r6,21964
   85660:	20c00217 	ldw	r3,8(r4)
   85664:	21800f15 	stw	r6,60(r4)
   85668:	2080bb04 	addi	r2,r4,748
   8566c:	02400044 	movi	r9,1
   85670:	018000c4 	movi	r6,3
   85674:	2180b915 	stw	r6,740(r4)
   85678:	2080ba15 	stw	r2,744(r4)
   8567c:	22400e15 	stw	r9,56(r4)
   85680:	20800317 	ldw	r2,12(r4)
   85684:	2000b815 	stw	zero,736(r4)
   85688:	02000274 	movhi	r8,9
   8568c:	42220004 	addi	r8,r8,-30720
   85690:	01c00274 	movhi	r7,9
   85694:	39e21504 	addi	r7,r7,-30636
   85698:	01800274 	movhi	r6,9
   8569c:	31a23704 	addi	r6,r6,-30500
   856a0:	01000274 	movhi	r4,9
   856a4:	21224e04 	addi	r4,r4,-30408
   856a8:	02800104 	movi	r10,4
   856ac:	28000015 	stw	zero,0(r5)
   856b0:	28000115 	stw	zero,4(r5)
   856b4:	28000215 	stw	zero,8(r5)
   856b8:	2a80030d 	sth	r10,12(r5)
   856bc:	2800038d 	sth	zero,14(r5)
   856c0:	28000415 	stw	zero,16(r5)
   856c4:	28000515 	stw	zero,20(r5)
   856c8:	28000615 	stw	zero,24(r5)
   856cc:	29400715 	stw	r5,28(r5)
   856d0:	2a000815 	stw	r8,32(r5)
   856d4:	29c00915 	stw	r7,36(r5)
   856d8:	29800a15 	stw	r6,40(r5)
   856dc:	29000b15 	stw	r4,44(r5)
   856e0:	01400284 	movi	r5,10
   856e4:	18000015 	stw	zero,0(r3)
   856e8:	18000115 	stw	zero,4(r3)
   856ec:	18000215 	stw	zero,8(r3)
   856f0:	1940030d 	sth	r5,12(r3)
   856f4:	1a40038d 	sth	r9,14(r3)
   856f8:	18000415 	stw	zero,16(r3)
   856fc:	18000515 	stw	zero,20(r3)
   85700:	18000615 	stw	zero,24(r3)
   85704:	18c00715 	stw	r3,28(r3)
   85708:	1a000815 	stw	r8,32(r3)
   8570c:	19c00915 	stw	r7,36(r3)
   85710:	19800a15 	stw	r6,40(r3)
   85714:	19000b15 	stw	r4,44(r3)
   85718:	00c00484 	movi	r3,18
   8571c:	10c0030d 	sth	r3,12(r2)
   85720:	00c00084 	movi	r3,2
   85724:	10000015 	stw	zero,0(r2)
   85728:	10000115 	stw	zero,4(r2)
   8572c:	10000215 	stw	zero,8(r2)
   85730:	10c0038d 	sth	r3,14(r2)
   85734:	10000415 	stw	zero,16(r2)
   85738:	10000515 	stw	zero,20(r2)
   8573c:	10000615 	stw	zero,24(r2)
   85740:	10800715 	stw	r2,28(r2)
   85744:	12000815 	stw	r8,32(r2)
   85748:	11c00915 	stw	r7,36(r2)
   8574c:	11800a15 	stw	r6,40(r2)
   85750:	11000b15 	stw	r4,44(r2)
   85754:	f800283a 	ret

00085758 <__sfp>:
   85758:	defffc04 	addi	sp,sp,-16
   8575c:	00800274 	movhi	r2,9
   85760:	10bfee04 	addi	r2,r2,-72
   85764:	dc400115 	stw	r17,4(sp)
   85768:	14400017 	ldw	r17,0(r2)
   8576c:	dc800215 	stw	r18,8(sp)
   85770:	dfc00315 	stw	ra,12(sp)
   85774:	88800e17 	ldw	r2,56(r17)
   85778:	dc000015 	stw	r16,0(sp)
   8577c:	2025883a 	mov	r18,r4
   85780:	10002826 	beq	r2,zero,85824 <__sfp+0xcc>
   85784:	8c40b804 	addi	r17,r17,736
   85788:	043fffc4 	movi	r16,-1
   8578c:	89400117 	ldw	r5,4(r17)
   85790:	88800217 	ldw	r2,8(r17)
   85794:	297fffc4 	addi	r5,r5,-1
   85798:	28000a16 	blt	r5,zero,857c4 <__sfp+0x6c>
   8579c:	10c0030f 	ldh	r3,12(r2)
   857a0:	18000c26 	beq	r3,zero,857d4 <__sfp+0x7c>
   857a4:	10c01a04 	addi	r3,r2,104
   857a8:	00000206 	br	857b4 <__sfp+0x5c>
   857ac:	19bfe90f 	ldh	r6,-92(r3)
   857b0:	30000826 	beq	r6,zero,857d4 <__sfp+0x7c>
   857b4:	297fffc4 	addi	r5,r5,-1
   857b8:	18bffd04 	addi	r2,r3,-12
   857bc:	18c01704 	addi	r3,r3,92
   857c0:	2c3ffa1e 	bne	r5,r16,857ac <__sfp+0x54>
   857c4:	88800017 	ldw	r2,0(r17)
   857c8:	10001926 	beq	r2,zero,85830 <__sfp+0xd8>
   857cc:	1023883a 	mov	r17,r2
   857d0:	003fee06 	br	8578c <__sfp+0x34>
   857d4:	00ffffc4 	movi	r3,-1
   857d8:	10c0038d 	sth	r3,14(r2)
   857dc:	00c00044 	movi	r3,1
   857e0:	10c0030d 	sth	r3,12(r2)
   857e4:	10000015 	stw	zero,0(r2)
   857e8:	10000215 	stw	zero,8(r2)
   857ec:	10000115 	stw	zero,4(r2)
   857f0:	10000415 	stw	zero,16(r2)
   857f4:	10000515 	stw	zero,20(r2)
   857f8:	10000615 	stw	zero,24(r2)
   857fc:	10000c15 	stw	zero,48(r2)
   85800:	10000d15 	stw	zero,52(r2)
   85804:	10001115 	stw	zero,68(r2)
   85808:	10001215 	stw	zero,72(r2)
   8580c:	dfc00317 	ldw	ra,12(sp)
   85810:	dc800217 	ldw	r18,8(sp)
   85814:	dc400117 	ldw	r17,4(sp)
   85818:	dc000017 	ldw	r16,0(sp)
   8581c:	dec00404 	addi	sp,sp,16
   85820:	f800283a 	ret
   85824:	8809883a 	mov	r4,r17
   85828:	008564c0 	call	8564c <__sinit>
   8582c:	003fd506 	br	85784 <__sfp+0x2c>
   85830:	9009883a 	mov	r4,r18
   85834:	01400104 	movi	r5,4
   85838:	00855d80 	call	855d8 <__sfmoreglue>
   8583c:	88800015 	stw	r2,0(r17)
   85840:	103fe21e 	bne	r2,zero,857cc <__sfp+0x74>
   85844:	00800304 	movi	r2,12
   85848:	90800015 	stw	r2,0(r18)
   8584c:	0005883a 	mov	r2,zero
   85850:	003fee06 	br	8580c <__sfp+0xb4>

00085854 <__sfp_lock_acquire>:
   85854:	f800283a 	ret

00085858 <__sfp_lock_release>:
   85858:	f800283a 	ret

0008585c <__sinit_lock_acquire>:
   8585c:	f800283a 	ret

00085860 <__sinit_lock_release>:
   85860:	f800283a 	ret

00085864 <__fp_lock_all>:
   85864:	00800274 	movhi	r2,9
   85868:	10bfef04 	addi	r2,r2,-68
   8586c:	11000017 	ldw	r4,0(r2)
   85870:	01400234 	movhi	r5,8
   85874:	29556f04 	addi	r5,r5,21948
   85878:	00861841 	jmpi	86184 <_fwalk>

0008587c <__fp_unlock_all>:
   8587c:	00800274 	movhi	r2,9
   85880:	10bfef04 	addi	r2,r2,-68
   85884:	11000017 	ldw	r4,0(r2)
   85888:	01400234 	movhi	r5,8
   8588c:	29557104 	addi	r5,r5,21956
   85890:	00861841 	jmpi	86184 <_fwalk>

00085894 <_malloc_trim_r>:
   85894:	defffb04 	addi	sp,sp,-20
   85898:	dcc00315 	stw	r19,12(sp)
   8589c:	dc800215 	stw	r18,8(sp)
   858a0:	dc400115 	stw	r17,4(sp)
   858a4:	dc000015 	stw	r16,0(sp)
   858a8:	2827883a 	mov	r19,r5
   858ac:	dfc00415 	stw	ra,16(sp)
   858b0:	04400274 	movhi	r17,9
   858b4:	8c7a3904 	addi	r17,r17,-5916
   858b8:	2021883a 	mov	r16,r4
   858bc:	008b3d40 	call	8b3d4 <__malloc_lock>
   858c0:	88800217 	ldw	r2,8(r17)
   858c4:	14800117 	ldw	r18,4(r2)
   858c8:	00bfff04 	movi	r2,-4
   858cc:	90a4703a 	and	r18,r18,r2
   858d0:	9083fbc4 	addi	r2,r18,4079
   858d4:	14e7c83a 	sub	r19,r2,r19
   858d8:	9826d33a 	srli	r19,r19,12
   858dc:	0083ffc4 	movi	r2,4095
   858e0:	9cffffc4 	addi	r19,r19,-1
   858e4:	9826933a 	slli	r19,r19,12
   858e8:	14c0060e 	bge	r2,r19,85904 <_malloc_trim_r+0x70>
   858ec:	8009883a 	mov	r4,r16
   858f0:	000b883a 	mov	r5,zero
   858f4:	008879c0 	call	8879c <_sbrk_r>
   858f8:	88c00217 	ldw	r3,8(r17)
   858fc:	1c87883a 	add	r3,r3,r18
   85900:	10c00a26 	beq	r2,r3,8592c <_malloc_trim_r+0x98>
   85904:	8009883a 	mov	r4,r16
   85908:	008b3f40 	call	8b3f4 <__malloc_unlock>
   8590c:	0005883a 	mov	r2,zero
   85910:	dfc00417 	ldw	ra,16(sp)
   85914:	dcc00317 	ldw	r19,12(sp)
   85918:	dc800217 	ldw	r18,8(sp)
   8591c:	dc400117 	ldw	r17,4(sp)
   85920:	dc000017 	ldw	r16,0(sp)
   85924:	dec00504 	addi	sp,sp,20
   85928:	f800283a 	ret
   8592c:	8009883a 	mov	r4,r16
   85930:	04cbc83a 	sub	r5,zero,r19
   85934:	008879c0 	call	8879c <_sbrk_r>
   85938:	00ffffc4 	movi	r3,-1
   8593c:	10c01326 	beq	r2,r3,8598c <_malloc_trim_r+0xf8>
   85940:	00800274 	movhi	r2,9
   85944:	1086de04 	addi	r2,r2,7032
   85948:	11000017 	ldw	r4,0(r2)
   8594c:	88c00217 	ldw	r3,8(r17)
   85950:	94e5c83a 	sub	r18,r18,r19
   85954:	94800054 	ori	r18,r18,1
   85958:	24e7c83a 	sub	r19,r4,r19
   8595c:	1c800115 	stw	r18,4(r3)
   85960:	8009883a 	mov	r4,r16
   85964:	14c00015 	stw	r19,0(r2)
   85968:	008b3f40 	call	8b3f4 <__malloc_unlock>
   8596c:	00800044 	movi	r2,1
   85970:	dfc00417 	ldw	ra,16(sp)
   85974:	dcc00317 	ldw	r19,12(sp)
   85978:	dc800217 	ldw	r18,8(sp)
   8597c:	dc400117 	ldw	r17,4(sp)
   85980:	dc000017 	ldw	r16,0(sp)
   85984:	dec00504 	addi	sp,sp,20
   85988:	f800283a 	ret
   8598c:	8009883a 	mov	r4,r16
   85990:	000b883a 	mov	r5,zero
   85994:	008879c0 	call	8879c <_sbrk_r>
   85998:	88c00217 	ldw	r3,8(r17)
   8599c:	014003c4 	movi	r5,15
   859a0:	10c9c83a 	sub	r4,r2,r3
   859a4:	293fd70e 	bge	r5,r4,85904 <_malloc_trim_r+0x70>
   859a8:	01400274 	movhi	r5,9
   859ac:	297ff104 	addi	r5,r5,-60
   859b0:	29400017 	ldw	r5,0(r5)
   859b4:	21000054 	ori	r4,r4,1
   859b8:	19000115 	stw	r4,4(r3)
   859bc:	1145c83a 	sub	r2,r2,r5
   859c0:	01400274 	movhi	r5,9
   859c4:	2946de04 	addi	r5,r5,7032
   859c8:	28800015 	stw	r2,0(r5)
   859cc:	003fcd06 	br	85904 <_malloc_trim_r+0x70>

000859d0 <_free_r>:
   859d0:	defffd04 	addi	sp,sp,-12
   859d4:	dc400115 	stw	r17,4(sp)
   859d8:	dc000015 	stw	r16,0(sp)
   859dc:	dfc00215 	stw	ra,8(sp)
   859e0:	2821883a 	mov	r16,r5
   859e4:	2023883a 	mov	r17,r4
   859e8:	28004b26 	beq	r5,zero,85b18 <_free_r+0x148>
   859ec:	008b3d40 	call	8b3d4 <__malloc_lock>
   859f0:	823fff17 	ldw	r8,-4(r16)
   859f4:	00bfff84 	movi	r2,-2
   859f8:	81bffe04 	addi	r6,r16,-8
   859fc:	4084703a 	and	r2,r8,r2
   85a00:	3087883a 	add	r3,r6,r2
   85a04:	01400274 	movhi	r5,9
   85a08:	297a3904 	addi	r5,r5,-5916
   85a0c:	1a400117 	ldw	r9,4(r3)
   85a10:	29000217 	ldw	r4,8(r5)
   85a14:	01ffff04 	movi	r7,-4
   85a18:	49ce703a 	and	r7,r9,r7
   85a1c:	20c06526 	beq	r4,r3,85bb4 <_free_r+0x1e4>
   85a20:	19c00115 	stw	r7,4(r3)
   85a24:	4200004c 	andi	r8,r8,1
   85a28:	40003026 	beq	r8,zero,85aec <_free_r+0x11c>
   85a2c:	0009883a 	mov	r4,zero
   85a30:	19d1883a 	add	r8,r3,r7
   85a34:	42000117 	ldw	r8,4(r8)
   85a38:	4200004c 	andi	r8,r8,1
   85a3c:	4000061e 	bne	r8,zero,85a58 <_free_r+0x88>
   85a40:	11c5883a 	add	r2,r2,r7
   85a44:	19c00217 	ldw	r7,8(r3)
   85a48:	20004e26 	beq	r4,zero,85b84 <_free_r+0x1b4>
   85a4c:	18c00317 	ldw	r3,12(r3)
   85a50:	38c00315 	stw	r3,12(r7)
   85a54:	19c00215 	stw	r7,8(r3)
   85a58:	11c00054 	ori	r7,r2,1
   85a5c:	3087883a 	add	r3,r6,r2
   85a60:	31c00115 	stw	r7,4(r6)
   85a64:	18800015 	stw	r2,0(r3)
   85a68:	20001a1e 	bne	r4,zero,85ad4 <_free_r+0x104>
   85a6c:	00c07fc4 	movi	r3,511
   85a70:	18802e2e 	bgeu	r3,r2,85b2c <_free_r+0x15c>
   85a74:	1006d27a 	srli	r3,r2,9
   85a78:	01000104 	movi	r4,4
   85a7c:	20c06636 	bltu	r4,r3,85c18 <_free_r+0x248>
   85a80:	1008d1ba 	srli	r4,r2,6
   85a84:	21000e04 	addi	r4,r4,56
   85a88:	210f883a 	add	r7,r4,r4
   85a8c:	39cf883a 	add	r7,r7,r7
   85a90:	39cf883a 	add	r7,r7,r7
   85a94:	29cf883a 	add	r7,r5,r7
   85a98:	38c00217 	ldw	r3,8(r7)
   85a9c:	01400274 	movhi	r5,9
   85aa0:	297a3904 	addi	r5,r5,-5916
   85aa4:	19c06126 	beq	r3,r7,85c2c <_free_r+0x25c>
   85aa8:	013fff04 	movi	r4,-4
   85aac:	19400117 	ldw	r5,4(r3)
   85ab0:	290a703a 	and	r5,r5,r4
   85ab4:	1140022e 	bgeu	r2,r5,85ac0 <_free_r+0xf0>
   85ab8:	18c00217 	ldw	r3,8(r3)
   85abc:	38fffb1e 	bne	r7,r3,85aac <_free_r+0xdc>
   85ac0:	18800317 	ldw	r2,12(r3)
   85ac4:	30800315 	stw	r2,12(r6)
   85ac8:	30c00215 	stw	r3,8(r6)
   85acc:	11800215 	stw	r6,8(r2)
   85ad0:	19800315 	stw	r6,12(r3)
   85ad4:	8809883a 	mov	r4,r17
   85ad8:	dfc00217 	ldw	ra,8(sp)
   85adc:	dc400117 	ldw	r17,4(sp)
   85ae0:	dc000017 	ldw	r16,0(sp)
   85ae4:	dec00304 	addi	sp,sp,12
   85ae8:	008b3f41 	jmpi	8b3f4 <__malloc_unlock>
   85aec:	813ffe17 	ldw	r4,-8(r16)
   85af0:	2a400204 	addi	r9,r5,8
   85af4:	310dc83a 	sub	r6,r6,r4
   85af8:	32000217 	ldw	r8,8(r6)
   85afc:	1105883a 	add	r2,r2,r4
   85b00:	42404326 	beq	r8,r9,85c10 <_free_r+0x240>
   85b04:	32400317 	ldw	r9,12(r6)
   85b08:	0009883a 	mov	r4,zero
   85b0c:	42400315 	stw	r9,12(r8)
   85b10:	4a000215 	stw	r8,8(r9)
   85b14:	003fc606 	br	85a30 <_free_r+0x60>
   85b18:	dfc00217 	ldw	ra,8(sp)
   85b1c:	dc400117 	ldw	r17,4(sp)
   85b20:	dc000017 	ldw	r16,0(sp)
   85b24:	dec00304 	addi	sp,sp,12
   85b28:	f800283a 	ret
   85b2c:	1004d0fa 	srli	r2,r2,3
   85b30:	02000044 	movi	r8,1
   85b34:	29c00117 	ldw	r7,4(r5)
   85b38:	1087883a 	add	r3,r2,r2
   85b3c:	18c7883a 	add	r3,r3,r3
   85b40:	1005d0ba 	srai	r2,r2,2
   85b44:	18c7883a 	add	r3,r3,r3
   85b48:	28c7883a 	add	r3,r5,r3
   85b4c:	19000217 	ldw	r4,8(r3)
   85b50:	4084983a 	sll	r2,r8,r2
   85b54:	30c00315 	stw	r3,12(r6)
   85b58:	31000215 	stw	r4,8(r6)
   85b5c:	11c4b03a 	or	r2,r2,r7
   85b60:	21800315 	stw	r6,12(r4)
   85b64:	8809883a 	mov	r4,r17
   85b68:	28800115 	stw	r2,4(r5)
   85b6c:	19800215 	stw	r6,8(r3)
   85b70:	dfc00217 	ldw	ra,8(sp)
   85b74:	dc400117 	ldw	r17,4(sp)
   85b78:	dc000017 	ldw	r16,0(sp)
   85b7c:	dec00304 	addi	sp,sp,12
   85b80:	008b3f41 	jmpi	8b3f4 <__malloc_unlock>
   85b84:	02000274 	movhi	r8,9
   85b88:	423a3b04 	addi	r8,r8,-5908
   85b8c:	3a3faf1e 	bne	r7,r8,85a4c <_free_r+0x7c>
   85b90:	29800515 	stw	r6,20(r5)
   85b94:	29800415 	stw	r6,16(r5)
   85b98:	11000054 	ori	r4,r2,1
   85b9c:	3087883a 	add	r3,r6,r2
   85ba0:	31c00315 	stw	r7,12(r6)
   85ba4:	31c00215 	stw	r7,8(r6)
   85ba8:	31000115 	stw	r4,4(r6)
   85bac:	18800015 	stw	r2,0(r3)
   85bb0:	003fc806 	br	85ad4 <_free_r+0x104>
   85bb4:	4200004c 	andi	r8,r8,1
   85bb8:	3885883a 	add	r2,r7,r2
   85bbc:	4000071e 	bne	r8,zero,85bdc <_free_r+0x20c>
   85bc0:	81fffe17 	ldw	r7,-8(r16)
   85bc4:	31cdc83a 	sub	r6,r6,r7
   85bc8:	30c00317 	ldw	r3,12(r6)
   85bcc:	31000217 	ldw	r4,8(r6)
   85bd0:	11c5883a 	add	r2,r2,r7
   85bd4:	20c00315 	stw	r3,12(r4)
   85bd8:	19000215 	stw	r4,8(r3)
   85bdc:	00c00274 	movhi	r3,9
   85be0:	18fff204 	addi	r3,r3,-56
   85be4:	18c00017 	ldw	r3,0(r3)
   85be8:	11000054 	ori	r4,r2,1
   85bec:	31000115 	stw	r4,4(r6)
   85bf0:	29800215 	stw	r6,8(r5)
   85bf4:	10ffb736 	bltu	r2,r3,85ad4 <_free_r+0x104>
   85bf8:	00800274 	movhi	r2,9
   85bfc:	1086d404 	addi	r2,r2,6992
   85c00:	11400017 	ldw	r5,0(r2)
   85c04:	8809883a 	mov	r4,r17
   85c08:	00858940 	call	85894 <_malloc_trim_r>
   85c0c:	003fb106 	br	85ad4 <_free_r+0x104>
   85c10:	01000044 	movi	r4,1
   85c14:	003f8606 	br	85a30 <_free_r+0x60>
   85c18:	01000504 	movi	r4,20
   85c1c:	20c00b36 	bltu	r4,r3,85c4c <_free_r+0x27c>
   85c20:	190016c4 	addi	r4,r3,91
   85c24:	210f883a 	add	r7,r4,r4
   85c28:	003f9806 	br	85a8c <_free_r+0xbc>
   85c2c:	2009d0ba 	srai	r4,r4,2
   85c30:	00800044 	movi	r2,1
   85c34:	29c00117 	ldw	r7,4(r5)
   85c38:	1108983a 	sll	r4,r2,r4
   85c3c:	1805883a 	mov	r2,r3
   85c40:	21c8b03a 	or	r4,r4,r7
   85c44:	29000115 	stw	r4,4(r5)
   85c48:	003f9e06 	br	85ac4 <_free_r+0xf4>
   85c4c:	01001504 	movi	r4,84
   85c50:	20c00436 	bltu	r4,r3,85c64 <_free_r+0x294>
   85c54:	1008d33a 	srli	r4,r2,12
   85c58:	21001b84 	addi	r4,r4,110
   85c5c:	210f883a 	add	r7,r4,r4
   85c60:	003f8a06 	br	85a8c <_free_r+0xbc>
   85c64:	01005504 	movi	r4,340
   85c68:	20c00436 	bltu	r4,r3,85c7c <_free_r+0x2ac>
   85c6c:	1008d3fa 	srli	r4,r2,15
   85c70:	21001dc4 	addi	r4,r4,119
   85c74:	210f883a 	add	r7,r4,r4
   85c78:	003f8406 	br	85a8c <_free_r+0xbc>
   85c7c:	01015504 	movi	r4,1364
   85c80:	20c00436 	bltu	r4,r3,85c94 <_free_r+0x2c4>
   85c84:	1008d4ba 	srli	r4,r2,18
   85c88:	21001f04 	addi	r4,r4,124
   85c8c:	210f883a 	add	r7,r4,r4
   85c90:	003f7e06 	br	85a8c <_free_r+0xbc>
   85c94:	01c03f04 	movi	r7,252
   85c98:	01001f84 	movi	r4,126
   85c9c:	003f7b06 	br	85a8c <_free_r+0xbc>

00085ca0 <__sfvwrite_r>:
   85ca0:	30800217 	ldw	r2,8(r6)
   85ca4:	defff504 	addi	sp,sp,-44
   85ca8:	dd400615 	stw	r21,24(sp)
   85cac:	dd000515 	stw	r20,20(sp)
   85cb0:	dc000115 	stw	r16,4(sp)
   85cb4:	dfc00a15 	stw	ra,40(sp)
   85cb8:	df000915 	stw	fp,36(sp)
   85cbc:	ddc00815 	stw	r23,32(sp)
   85cc0:	dd800715 	stw	r22,28(sp)
   85cc4:	dcc00415 	stw	r19,16(sp)
   85cc8:	dc800315 	stw	r18,12(sp)
   85ccc:	dc400215 	stw	r17,8(sp)
   85cd0:	3029883a 	mov	r20,r6
   85cd4:	202b883a 	mov	r21,r4
   85cd8:	2821883a 	mov	r16,r5
   85cdc:	10002126 	beq	r2,zero,85d64 <__sfvwrite_r+0xc4>
   85ce0:	2880030b 	ldhu	r2,12(r5)
   85ce4:	10c0020c 	andi	r3,r2,8
   85ce8:	18ffffcc 	andi	r3,r3,65535
   85cec:	18e0001c 	xori	r3,r3,32768
   85cf0:	18e00004 	addi	r3,r3,-32768
   85cf4:	18002826 	beq	r3,zero,85d98 <__sfvwrite_r+0xf8>
   85cf8:	28c00417 	ldw	r3,16(r5)
   85cfc:	18002626 	beq	r3,zero,85d98 <__sfvwrite_r+0xf8>
   85d00:	10c0008c 	andi	r3,r2,2
   85d04:	18ffffcc 	andi	r3,r3,65535
   85d08:	18e0001c 	xori	r3,r3,32768
   85d0c:	18e00004 	addi	r3,r3,-32768
   85d10:	a4400017 	ldw	r17,0(r20)
   85d14:	18002b26 	beq	r3,zero,85dc4 <__sfvwrite_r+0x124>
   85d18:	0027883a 	mov	r19,zero
   85d1c:	0025883a 	mov	r18,zero
   85d20:	05810004 	movi	r22,1024
   85d24:	980d883a 	mov	r6,r19
   85d28:	a809883a 	mov	r4,r21
   85d2c:	90004f26 	beq	r18,zero,85e6c <__sfvwrite_r+0x1cc>
   85d30:	900f883a 	mov	r7,r18
   85d34:	81400717 	ldw	r5,28(r16)
   85d38:	b480012e 	bgeu	r22,r18,85d40 <__sfvwrite_r+0xa0>
   85d3c:	01c10004 	movi	r7,1024
   85d40:	80800917 	ldw	r2,36(r16)
   85d44:	103ee83a 	callr	r2
   85d48:	0080540e 	bge	zero,r2,85e9c <__sfvwrite_r+0x1fc>
   85d4c:	a0c00217 	ldw	r3,8(r20)
   85d50:	98a7883a 	add	r19,r19,r2
   85d54:	90a5c83a 	sub	r18,r18,r2
   85d58:	1885c83a 	sub	r2,r3,r2
   85d5c:	a0800215 	stw	r2,8(r20)
   85d60:	103ff01e 	bne	r2,zero,85d24 <__sfvwrite_r+0x84>
   85d64:	0005883a 	mov	r2,zero
   85d68:	dfc00a17 	ldw	ra,40(sp)
   85d6c:	df000917 	ldw	fp,36(sp)
   85d70:	ddc00817 	ldw	r23,32(sp)
   85d74:	dd800717 	ldw	r22,28(sp)
   85d78:	dd400617 	ldw	r21,24(sp)
   85d7c:	dd000517 	ldw	r20,20(sp)
   85d80:	dcc00417 	ldw	r19,16(sp)
   85d84:	dc800317 	ldw	r18,12(sp)
   85d88:	dc400217 	ldw	r17,8(sp)
   85d8c:	dc000117 	ldw	r16,4(sp)
   85d90:	dec00b04 	addi	sp,sp,44
   85d94:	f800283a 	ret
   85d98:	a809883a 	mov	r4,r21
   85d9c:	800b883a 	mov	r5,r16
   85da0:	0083a0c0 	call	83a0c <__swsetup_r>
   85da4:	1000f01e 	bne	r2,zero,86168 <__sfvwrite_r+0x4c8>
   85da8:	8080030b 	ldhu	r2,12(r16)
   85dac:	a4400017 	ldw	r17,0(r20)
   85db0:	10c0008c 	andi	r3,r2,2
   85db4:	18ffffcc 	andi	r3,r3,65535
   85db8:	18e0001c 	xori	r3,r3,32768
   85dbc:	18e00004 	addi	r3,r3,-32768
   85dc0:	183fd51e 	bne	r3,zero,85d18 <__sfvwrite_r+0x78>
   85dc4:	10c0004c 	andi	r3,r2,1
   85dc8:	002d883a 	mov	r22,zero
   85dcc:	1800381e 	bne	r3,zero,85eb0 <__sfvwrite_r+0x210>
   85dd0:	0025883a 	mov	r18,zero
   85dd4:	90002126 	beq	r18,zero,85e5c <__sfvwrite_r+0x1bc>
   85dd8:	10c0800c 	andi	r3,r2,512
   85ddc:	18ffffcc 	andi	r3,r3,65535
   85de0:	18e0001c 	xori	r3,r3,32768
   85de4:	18e00004 	addi	r3,r3,-32768
   85de8:	84c00217 	ldw	r19,8(r16)
   85dec:	18006b26 	beq	r3,zero,85f9c <__sfvwrite_r+0x2fc>
   85df0:	980f883a 	mov	r7,r19
   85df4:	94c08636 	bltu	r18,r19,86010 <__sfvwrite_r+0x370>
   85df8:	10c1200c 	andi	r3,r2,1152
   85dfc:	18009f1e 	bne	r3,zero,8607c <__sfvwrite_r+0x3dc>
   85e00:	81000017 	ldw	r4,0(r16)
   85e04:	982f883a 	mov	r23,r19
   85e08:	9039883a 	mov	fp,r18
   85e0c:	9027883a 	mov	r19,r18
   85e10:	380d883a 	mov	r6,r7
   85e14:	b00b883a 	mov	r5,r22
   85e18:	d9c00015 	stw	r7,0(sp)
   85e1c:	0086de40 	call	86de4 <memmove>
   85e20:	d9c00017 	ldw	r7,0(sp)
   85e24:	81000217 	ldw	r4,8(r16)
   85e28:	80800017 	ldw	r2,0(r16)
   85e2c:	25efc83a 	sub	r23,r4,r23
   85e30:	11cf883a 	add	r7,r2,r7
   85e34:	85c00215 	stw	r23,8(r16)
   85e38:	81c00015 	stw	r7,0(r16)
   85e3c:	a0800217 	ldw	r2,8(r20)
   85e40:	b72d883a 	add	r22,r22,fp
   85e44:	9725c83a 	sub	r18,r18,fp
   85e48:	14e7c83a 	sub	r19,r2,r19
   85e4c:	a4c00215 	stw	r19,8(r20)
   85e50:	983fc426 	beq	r19,zero,85d64 <__sfvwrite_r+0xc4>
   85e54:	8080030b 	ldhu	r2,12(r16)
   85e58:	903fdf1e 	bne	r18,zero,85dd8 <__sfvwrite_r+0x138>
   85e5c:	8d800017 	ldw	r22,0(r17)
   85e60:	8c800117 	ldw	r18,4(r17)
   85e64:	8c400204 	addi	r17,r17,8
   85e68:	003fda06 	br	85dd4 <__sfvwrite_r+0x134>
   85e6c:	8cc00017 	ldw	r19,0(r17)
   85e70:	8c800117 	ldw	r18,4(r17)
   85e74:	8c400204 	addi	r17,r17,8
   85e78:	003faa06 	br	85d24 <__sfvwrite_r+0x84>
   85e7c:	008813c0 	call	8813c <_realloc_r>
   85e80:	102f883a 	mov	r23,r2
   85e84:	10009f1e 	bne	r2,zero,86104 <__sfvwrite_r+0x464>
   85e88:	81400417 	ldw	r5,16(r16)
   85e8c:	a809883a 	mov	r4,r21
   85e90:	00859d00 	call	859d0 <_free_r>
   85e94:	00800304 	movi	r2,12
   85e98:	a8800015 	stw	r2,0(r21)
   85e9c:	80c0030b 	ldhu	r3,12(r16)
   85ea0:	00bfffc4 	movi	r2,-1
   85ea4:	18c01014 	ori	r3,r3,64
   85ea8:	80c0030d 	sth	r3,12(r16)
   85eac:	003fae06 	br	85d68 <__sfvwrite_r+0xc8>
   85eb0:	0007883a 	mov	r3,zero
   85eb4:	0039883a 	mov	fp,zero
   85eb8:	0025883a 	mov	r18,zero
   85ebc:	90001e26 	beq	r18,zero,85f38 <__sfvwrite_r+0x298>
   85ec0:	18006526 	beq	r3,zero,86058 <__sfvwrite_r+0x3b8>
   85ec4:	b02f883a 	mov	r23,r22
   85ec8:	9580012e 	bgeu	r18,r22,85ed0 <__sfvwrite_r+0x230>
   85ecc:	902f883a 	mov	r23,r18
   85ed0:	81000017 	ldw	r4,0(r16)
   85ed4:	80800417 	ldw	r2,16(r16)
   85ed8:	84c00217 	ldw	r19,8(r16)
   85edc:	81c00517 	ldw	r7,20(r16)
   85ee0:	1100022e 	bgeu	r2,r4,85eec <__sfvwrite_r+0x24c>
   85ee4:	99e7883a 	add	r19,r19,r7
   85ee8:	9dc01816 	blt	r19,r23,85f4c <__sfvwrite_r+0x2ac>
   85eec:	b9c03b16 	blt	r23,r7,85fdc <__sfvwrite_r+0x33c>
   85ef0:	80800917 	ldw	r2,36(r16)
   85ef4:	81400717 	ldw	r5,28(r16)
   85ef8:	a809883a 	mov	r4,r21
   85efc:	d8c00015 	stw	r3,0(sp)
   85f00:	e00d883a 	mov	r6,fp
   85f04:	103ee83a 	callr	r2
   85f08:	1027883a 	mov	r19,r2
   85f0c:	d8c00017 	ldw	r3,0(sp)
   85f10:	00bfe20e 	bge	zero,r2,85e9c <__sfvwrite_r+0x1fc>
   85f14:	b4edc83a 	sub	r22,r22,r19
   85f18:	b0001a26 	beq	r22,zero,85f84 <__sfvwrite_r+0x2e4>
   85f1c:	a0800217 	ldw	r2,8(r20)
   85f20:	e4f9883a 	add	fp,fp,r19
   85f24:	94e5c83a 	sub	r18,r18,r19
   85f28:	14e7c83a 	sub	r19,r2,r19
   85f2c:	a4c00215 	stw	r19,8(r20)
   85f30:	983f8c26 	beq	r19,zero,85d64 <__sfvwrite_r+0xc4>
   85f34:	903fe21e 	bne	r18,zero,85ec0 <__sfvwrite_r+0x220>
   85f38:	8f000017 	ldw	fp,0(r17)
   85f3c:	8c800117 	ldw	r18,4(r17)
   85f40:	0007883a 	mov	r3,zero
   85f44:	8c400204 	addi	r17,r17,8
   85f48:	003fdc06 	br	85ebc <__sfvwrite_r+0x21c>
   85f4c:	e00b883a 	mov	r5,fp
   85f50:	980d883a 	mov	r6,r19
   85f54:	d8c00015 	stw	r3,0(sp)
   85f58:	0086de40 	call	86de4 <memmove>
   85f5c:	80800017 	ldw	r2,0(r16)
   85f60:	a809883a 	mov	r4,r21
   85f64:	800b883a 	mov	r5,r16
   85f68:	14c5883a 	add	r2,r2,r19
   85f6c:	80800015 	stw	r2,0(r16)
   85f70:	00853a40 	call	853a4 <_fflush_r>
   85f74:	d8c00017 	ldw	r3,0(sp)
   85f78:	103fc81e 	bne	r2,zero,85e9c <__sfvwrite_r+0x1fc>
   85f7c:	b4edc83a 	sub	r22,r22,r19
   85f80:	b03fe61e 	bne	r22,zero,85f1c <__sfvwrite_r+0x27c>
   85f84:	a809883a 	mov	r4,r21
   85f88:	800b883a 	mov	r5,r16
   85f8c:	00853a40 	call	853a4 <_fflush_r>
   85f90:	103fc21e 	bne	r2,zero,85e9c <__sfvwrite_r+0x1fc>
   85f94:	0007883a 	mov	r3,zero
   85f98:	003fe006 	br	85f1c <__sfvwrite_r+0x27c>
   85f9c:	81000017 	ldw	r4,0(r16)
   85fa0:	80800417 	ldw	r2,16(r16)
   85fa4:	1100022e 	bgeu	r2,r4,85fb0 <__sfvwrite_r+0x310>
   85fa8:	9839883a 	mov	fp,r19
   85fac:	9c806036 	bltu	r19,r18,86130 <__sfvwrite_r+0x490>
   85fb0:	81c00517 	ldw	r7,20(r16)
   85fb4:	91c01c36 	bltu	r18,r7,86028 <__sfvwrite_r+0x388>
   85fb8:	80800917 	ldw	r2,36(r16)
   85fbc:	81400717 	ldw	r5,28(r16)
   85fc0:	a809883a 	mov	r4,r21
   85fc4:	b00d883a 	mov	r6,r22
   85fc8:	103ee83a 	callr	r2
   85fcc:	1027883a 	mov	r19,r2
   85fd0:	00bfb20e 	bge	zero,r2,85e9c <__sfvwrite_r+0x1fc>
   85fd4:	1039883a 	mov	fp,r2
   85fd8:	003f9806 	br	85e3c <__sfvwrite_r+0x19c>
   85fdc:	b80d883a 	mov	r6,r23
   85fe0:	e00b883a 	mov	r5,fp
   85fe4:	d8c00015 	stw	r3,0(sp)
   85fe8:	0086de40 	call	86de4 <memmove>
   85fec:	80800217 	ldw	r2,8(r16)
   85ff0:	81000017 	ldw	r4,0(r16)
   85ff4:	b827883a 	mov	r19,r23
   85ff8:	15c5c83a 	sub	r2,r2,r23
   85ffc:	25ef883a 	add	r23,r4,r23
   86000:	80800215 	stw	r2,8(r16)
   86004:	85c00015 	stw	r23,0(r16)
   86008:	d8c00017 	ldw	r3,0(sp)
   8600c:	003fc106 	br	85f14 <__sfvwrite_r+0x274>
   86010:	81000017 	ldw	r4,0(r16)
   86014:	902f883a 	mov	r23,r18
   86018:	9039883a 	mov	fp,r18
   8601c:	9027883a 	mov	r19,r18
   86020:	900f883a 	mov	r7,r18
   86024:	003f7a06 	br	85e10 <__sfvwrite_r+0x170>
   86028:	b00b883a 	mov	r5,r22
   8602c:	900d883a 	mov	r6,r18
   86030:	0086de40 	call	86de4 <memmove>
   86034:	80c00217 	ldw	r3,8(r16)
   86038:	80800017 	ldw	r2,0(r16)
   8603c:	9027883a 	mov	r19,r18
   86040:	1c87c83a 	sub	r3,r3,r18
   86044:	1485883a 	add	r2,r2,r18
   86048:	80c00215 	stw	r3,8(r16)
   8604c:	80800015 	stw	r2,0(r16)
   86050:	9039883a 	mov	fp,r18
   86054:	003f7906 	br	85e3c <__sfvwrite_r+0x19c>
   86058:	e009883a 	mov	r4,fp
   8605c:	01400284 	movi	r5,10
   86060:	900d883a 	mov	r6,r18
   86064:	0086cec0 	call	86cec <memchr>
   86068:	10003c26 	beq	r2,zero,8615c <__sfvwrite_r+0x4bc>
   8606c:	15800044 	addi	r22,r2,1
   86070:	b72dc83a 	sub	r22,r22,fp
   86074:	00c00044 	movi	r3,1
   86078:	003f9206 	br	85ec4 <__sfvwrite_r+0x224>
   8607c:	81000517 	ldw	r4,20(r16)
   86080:	81400417 	ldw	r5,16(r16)
   86084:	80c00017 	ldw	r3,0(r16)
   86088:	210d883a 	add	r6,r4,r4
   8608c:	3109883a 	add	r4,r6,r4
   86090:	2026d7fa 	srli	r19,r4,31
   86094:	1979c83a 	sub	fp,r3,r5
   86098:	e1800044 	addi	r6,fp,1
   8609c:	9909883a 	add	r4,r19,r4
   860a0:	2027d07a 	srai	r19,r4,1
   860a4:	3489883a 	add	r4,r6,r18
   860a8:	980d883a 	mov	r6,r19
   860ac:	9900022e 	bgeu	r19,r4,860b8 <__sfvwrite_r+0x418>
   860b0:	2027883a 	mov	r19,r4
   860b4:	200d883a 	mov	r6,r4
   860b8:	1081000c 	andi	r2,r2,1024
   860bc:	10bfffcc 	andi	r2,r2,65535
   860c0:	10a0001c 	xori	r2,r2,32768
   860c4:	10a00004 	addi	r2,r2,-32768
   860c8:	a809883a 	mov	r4,r21
   860cc:	103f6b26 	beq	r2,zero,85e7c <__sfvwrite_r+0x1dc>
   860d0:	300b883a 	mov	r5,r6
   860d4:	00865680 	call	86568 <_malloc_r>
   860d8:	102f883a 	mov	r23,r2
   860dc:	103f6d26 	beq	r2,zero,85e94 <__sfvwrite_r+0x1f4>
   860e0:	81400417 	ldw	r5,16(r16)
   860e4:	1009883a 	mov	r4,r2
   860e8:	e00d883a 	mov	r6,fp
   860ec:	00818980 	call	81898 <memcpy>
   860f0:	8080030b 	ldhu	r2,12(r16)
   860f4:	00fedfc4 	movi	r3,-1153
   860f8:	10c4703a 	and	r2,r2,r3
   860fc:	10802014 	ori	r2,r2,128
   86100:	8080030d 	sth	r2,12(r16)
   86104:	bf09883a 	add	r4,r23,fp
   86108:	9f07c83a 	sub	r3,r19,fp
   8610c:	85c00415 	stw	r23,16(r16)
   86110:	84c00515 	stw	r19,20(r16)
   86114:	81000015 	stw	r4,0(r16)
   86118:	902f883a 	mov	r23,r18
   8611c:	80c00215 	stw	r3,8(r16)
   86120:	9039883a 	mov	fp,r18
   86124:	9027883a 	mov	r19,r18
   86128:	900f883a 	mov	r7,r18
   8612c:	003f3806 	br	85e10 <__sfvwrite_r+0x170>
   86130:	b00b883a 	mov	r5,r22
   86134:	980d883a 	mov	r6,r19
   86138:	0086de40 	call	86de4 <memmove>
   8613c:	80800017 	ldw	r2,0(r16)
   86140:	a809883a 	mov	r4,r21
   86144:	800b883a 	mov	r5,r16
   86148:	14c5883a 	add	r2,r2,r19
   8614c:	80800015 	stw	r2,0(r16)
   86150:	00853a40 	call	853a4 <_fflush_r>
   86154:	103f3926 	beq	r2,zero,85e3c <__sfvwrite_r+0x19c>
   86158:	003f5006 	br	85e9c <__sfvwrite_r+0x1fc>
   8615c:	95800044 	addi	r22,r18,1
   86160:	00c00044 	movi	r3,1
   86164:	003f5706 	br	85ec4 <__sfvwrite_r+0x224>
   86168:	80c0030b 	ldhu	r3,12(r16)
   8616c:	00bfffc4 	movi	r2,-1
   86170:	18c01014 	ori	r3,r3,64
   86174:	80c0030d 	sth	r3,12(r16)
   86178:	00c00244 	movi	r3,9
   8617c:	a8c00015 	stw	r3,0(r21)
   86180:	003ef906 	br	85d68 <__sfvwrite_r+0xc8>

00086184 <_fwalk>:
   86184:	defff904 	addi	sp,sp,-28
   86188:	dcc00315 	stw	r19,12(sp)
   8618c:	24c0b804 	addi	r19,r4,736
   86190:	dd400515 	stw	r21,20(sp)
   86194:	dd000415 	stw	r20,16(sp)
   86198:	dfc00615 	stw	ra,24(sp)
   8619c:	dc800215 	stw	r18,8(sp)
   861a0:	dc400115 	stw	r17,4(sp)
   861a4:	dc000015 	stw	r16,0(sp)
   861a8:	282b883a 	mov	r21,r5
   861ac:	0029883a 	mov	r20,zero
   861b0:	00858540 	call	85854 <__sfp_lock_acquire>
   861b4:	98001226 	beq	r19,zero,86200 <_fwalk+0x7c>
   861b8:	04bfffc4 	movi	r18,-1
   861bc:	9c400117 	ldw	r17,4(r19)
   861c0:	9c000217 	ldw	r16,8(r19)
   861c4:	8c7fffc4 	addi	r17,r17,-1
   861c8:	88000b16 	blt	r17,zero,861f8 <_fwalk+0x74>
   861cc:	84000304 	addi	r16,r16,12
   861d0:	80c0000f 	ldh	r3,0(r16)
   861d4:	8c7fffc4 	addi	r17,r17,-1
   861d8:	813ffd04 	addi	r4,r16,-12
   861dc:	18000426 	beq	r3,zero,861f0 <_fwalk+0x6c>
   861e0:	80c0008f 	ldh	r3,2(r16)
   861e4:	1c800226 	beq	r3,r18,861f0 <_fwalk+0x6c>
   861e8:	a83ee83a 	callr	r21
   861ec:	a0a8b03a 	or	r20,r20,r2
   861f0:	84001704 	addi	r16,r16,92
   861f4:	8cbff61e 	bne	r17,r18,861d0 <_fwalk+0x4c>
   861f8:	9cc00017 	ldw	r19,0(r19)
   861fc:	983fef1e 	bne	r19,zero,861bc <_fwalk+0x38>
   86200:	00858580 	call	85858 <__sfp_lock_release>
   86204:	a005883a 	mov	r2,r20
   86208:	dfc00617 	ldw	ra,24(sp)
   8620c:	dd400517 	ldw	r21,20(sp)
   86210:	dd000417 	ldw	r20,16(sp)
   86214:	dcc00317 	ldw	r19,12(sp)
   86218:	dc800217 	ldw	r18,8(sp)
   8621c:	dc400117 	ldw	r17,4(sp)
   86220:	dc000017 	ldw	r16,0(sp)
   86224:	dec00704 	addi	sp,sp,28
   86228:	f800283a 	ret

0008622c <_fwalk_reent>:
   8622c:	defff804 	addi	sp,sp,-32
   86230:	dcc00315 	stw	r19,12(sp)
   86234:	24c0b804 	addi	r19,r4,736
   86238:	dd800615 	stw	r22,24(sp)
   8623c:	dd400515 	stw	r21,20(sp)
   86240:	dd000415 	stw	r20,16(sp)
   86244:	dfc00715 	stw	ra,28(sp)
   86248:	dc800215 	stw	r18,8(sp)
   8624c:	dc400115 	stw	r17,4(sp)
   86250:	dc000015 	stw	r16,0(sp)
   86254:	2029883a 	mov	r20,r4
   86258:	282b883a 	mov	r21,r5
   8625c:	002d883a 	mov	r22,zero
   86260:	00858540 	call	85854 <__sfp_lock_acquire>
   86264:	98001326 	beq	r19,zero,862b4 <_fwalk_reent+0x88>
   86268:	04bfffc4 	movi	r18,-1
   8626c:	9c400117 	ldw	r17,4(r19)
   86270:	9c000217 	ldw	r16,8(r19)
   86274:	8c7fffc4 	addi	r17,r17,-1
   86278:	88000c16 	blt	r17,zero,862ac <_fwalk_reent+0x80>
   8627c:	84000304 	addi	r16,r16,12
   86280:	80c0000f 	ldh	r3,0(r16)
   86284:	8c7fffc4 	addi	r17,r17,-1
   86288:	817ffd04 	addi	r5,r16,-12
   8628c:	18000526 	beq	r3,zero,862a4 <_fwalk_reent+0x78>
   86290:	80c0008f 	ldh	r3,2(r16)
   86294:	a009883a 	mov	r4,r20
   86298:	1c800226 	beq	r3,r18,862a4 <_fwalk_reent+0x78>
   8629c:	a83ee83a 	callr	r21
   862a0:	b0acb03a 	or	r22,r22,r2
   862a4:	84001704 	addi	r16,r16,92
   862a8:	8cbff51e 	bne	r17,r18,86280 <_fwalk_reent+0x54>
   862ac:	9cc00017 	ldw	r19,0(r19)
   862b0:	983fee1e 	bne	r19,zero,8626c <_fwalk_reent+0x40>
   862b4:	00858580 	call	85858 <__sfp_lock_release>
   862b8:	b005883a 	mov	r2,r22
   862bc:	dfc00717 	ldw	ra,28(sp)
   862c0:	dd800617 	ldw	r22,24(sp)
   862c4:	dd400517 	ldw	r21,20(sp)
   862c8:	dd000417 	ldw	r20,16(sp)
   862cc:	dcc00317 	ldw	r19,12(sp)
   862d0:	dc800217 	ldw	r18,8(sp)
   862d4:	dc400117 	ldw	r17,4(sp)
   862d8:	dc000017 	ldw	r16,0(sp)
   862dc:	dec00804 	addi	sp,sp,32
   862e0:	f800283a 	ret

000862e4 <_setlocale_r>:
   862e4:	defffc04 	addi	sp,sp,-16
   862e8:	dc800215 	stw	r18,8(sp)
   862ec:	dc400115 	stw	r17,4(sp)
   862f0:	dc000015 	stw	r16,0(sp)
   862f4:	dfc00315 	stw	ra,12(sp)
   862f8:	3021883a 	mov	r16,r6
   862fc:	2023883a 	mov	r17,r4
   86300:	2825883a 	mov	r18,r5
   86304:	30001626 	beq	r6,zero,86360 <_setlocale_r+0x7c>
   86308:	3009883a 	mov	r4,r6
   8630c:	01400274 	movhi	r5,9
   86310:	29787e04 	addi	r5,r5,-7688
   86314:	00889400 	call	88940 <strcmp>
   86318:	10000a1e 	bne	r2,zero,86344 <_setlocale_r+0x60>
   8631c:	8c800c15 	stw	r18,48(r17)
   86320:	8c000d15 	stw	r16,52(r17)
   86324:	00800274 	movhi	r2,9
   86328:	10b87e04 	addi	r2,r2,-7688
   8632c:	dfc00317 	ldw	ra,12(sp)
   86330:	dc800217 	ldw	r18,8(sp)
   86334:	dc400117 	ldw	r17,4(sp)
   86338:	dc000017 	ldw	r16,0(sp)
   8633c:	dec00404 	addi	sp,sp,16
   86340:	f800283a 	ret
   86344:	8009883a 	mov	r4,r16
   86348:	01400274 	movhi	r5,9
   8634c:	29786904 	addi	r5,r5,-7772
   86350:	00889400 	call	88940 <strcmp>
   86354:	103ff126 	beq	r2,zero,8631c <_setlocale_r+0x38>
   86358:	0005883a 	mov	r2,zero
   8635c:	003ff306 	br	8632c <_setlocale_r+0x48>
   86360:	00800274 	movhi	r2,9
   86364:	10b87e04 	addi	r2,r2,-7688
   86368:	dfc00317 	ldw	ra,12(sp)
   8636c:	dc800217 	ldw	r18,8(sp)
   86370:	dc400117 	ldw	r17,4(sp)
   86374:	dc000017 	ldw	r16,0(sp)
   86378:	dec00404 	addi	sp,sp,16
   8637c:	f800283a 	ret

00086380 <__locale_charset>:
   86380:	00800274 	movhi	r2,9
   86384:	10b87f04 	addi	r2,r2,-7684
   86388:	f800283a 	ret

0008638c <_localeconv_r>:
   8638c:	00800274 	movhi	r2,9
   86390:	10b88304 	addi	r2,r2,-7668
   86394:	f800283a 	ret

00086398 <setlocale>:
   86398:	00c00274 	movhi	r3,9
   8639c:	18ffef04 	addi	r3,r3,-68
   863a0:	2005883a 	mov	r2,r4
   863a4:	19000017 	ldw	r4,0(r3)
   863a8:	280d883a 	mov	r6,r5
   863ac:	100b883a 	mov	r5,r2
   863b0:	00862e41 	jmpi	862e4 <_setlocale_r>

000863b4 <localeconv>:
   863b4:	00800274 	movhi	r2,9
   863b8:	10b88304 	addi	r2,r2,-7668
   863bc:	f800283a 	ret

000863c0 <__smakebuf_r>:
   863c0:	2880030b 	ldhu	r2,12(r5)
   863c4:	deffed04 	addi	sp,sp,-76
   863c8:	dc401015 	stw	r17,64(sp)
   863cc:	10c0008c 	andi	r3,r2,2
   863d0:	18ffffcc 	andi	r3,r3,65535
   863d4:	18e0001c 	xori	r3,r3,32768
   863d8:	dc000f15 	stw	r16,60(sp)
   863dc:	dfc01215 	stw	ra,72(sp)
   863e0:	dc801115 	stw	r18,68(sp)
   863e4:	18e00004 	addi	r3,r3,-32768
   863e8:	2821883a 	mov	r16,r5
   863ec:	2023883a 	mov	r17,r4
   863f0:	1800381e 	bne	r3,zero,864d4 <__smakebuf_r+0x114>
   863f4:	2940038f 	ldh	r5,14(r5)
   863f8:	28002d16 	blt	r5,zero,864b0 <__smakebuf_r+0xf0>
   863fc:	d80d883a 	mov	r6,sp
   86400:	0088e180 	call	88e18 <_fstat_r>
   86404:	10002916 	blt	r2,zero,864ac <__smakebuf_r+0xec>
   86408:	d8800117 	ldw	r2,4(sp)
   8640c:	00e00014 	movui	r3,32768
   86410:	10bc000c 	andi	r2,r2,61440
   86414:	10c03c26 	beq	r2,r3,86508 <__smakebuf_r+0x148>
   86418:	80c0030b 	ldhu	r3,12(r16)
   8641c:	18c20014 	ori	r3,r3,2048
   86420:	80c0030d 	sth	r3,12(r16)
   86424:	00c80004 	movi	r3,8192
   86428:	10c00c1e 	bne	r2,r3,8645c <__smakebuf_r+0x9c>
   8642c:	8140038f 	ldh	r5,14(r16)
   86430:	8809883a 	mov	r4,r17
   86434:	0088e800 	call	88e80 <_isatty_r>
   86438:	10000826 	beq	r2,zero,8645c <__smakebuf_r+0x9c>
   8643c:	80c0030b 	ldhu	r3,12(r16)
   86440:	808010c4 	addi	r2,r16,67
   86444:	80800015 	stw	r2,0(r16)
   86448:	18c00054 	ori	r3,r3,1
   8644c:	80800415 	stw	r2,16(r16)
   86450:	00800044 	movi	r2,1
   86454:	80c0030d 	sth	r3,12(r16)
   86458:	80800515 	stw	r2,20(r16)
   8645c:	04810004 	movi	r18,1024
   86460:	8809883a 	mov	r4,r17
   86464:	900b883a 	mov	r5,r18
   86468:	00865680 	call	86568 <_malloc_r>
   8646c:	10003026 	beq	r2,zero,86530 <__smakebuf_r+0x170>
   86470:	80c0030b 	ldhu	r3,12(r16)
   86474:	01000234 	movhi	r4,8
   86478:	21157304 	addi	r4,r4,21964
   8647c:	89000f15 	stw	r4,60(r17)
   86480:	18c02014 	ori	r3,r3,128
   86484:	80c0030d 	sth	r3,12(r16)
   86488:	80800015 	stw	r2,0(r16)
   8648c:	80800415 	stw	r2,16(r16)
   86490:	84800515 	stw	r18,20(r16)
   86494:	dfc01217 	ldw	ra,72(sp)
   86498:	dc801117 	ldw	r18,68(sp)
   8649c:	dc401017 	ldw	r17,64(sp)
   864a0:	dc000f17 	ldw	r16,60(sp)
   864a4:	dec01304 	addi	sp,sp,76
   864a8:	f800283a 	ret
   864ac:	8080030b 	ldhu	r2,12(r16)
   864b0:	10c0200c 	andi	r3,r2,128
   864b4:	18ffffcc 	andi	r3,r3,65535
   864b8:	18e0001c 	xori	r3,r3,32768
   864bc:	18e00004 	addi	r3,r3,-32768
   864c0:	18000f1e 	bne	r3,zero,86500 <__smakebuf_r+0x140>
   864c4:	04810004 	movi	r18,1024
   864c8:	10820014 	ori	r2,r2,2048
   864cc:	8080030d 	sth	r2,12(r16)
   864d0:	003fe306 	br	86460 <__smakebuf_r+0xa0>
   864d4:	288010c4 	addi	r2,r5,67
   864d8:	28800015 	stw	r2,0(r5)
   864dc:	28800415 	stw	r2,16(r5)
   864e0:	00800044 	movi	r2,1
   864e4:	28800515 	stw	r2,20(r5)
   864e8:	dfc01217 	ldw	ra,72(sp)
   864ec:	dc801117 	ldw	r18,68(sp)
   864f0:	dc401017 	ldw	r17,64(sp)
   864f4:	dc000f17 	ldw	r16,60(sp)
   864f8:	dec01304 	addi	sp,sp,76
   864fc:	f800283a 	ret
   86500:	04801004 	movi	r18,64
   86504:	003ff006 	br	864c8 <__smakebuf_r+0x108>
   86508:	81000a17 	ldw	r4,40(r16)
   8650c:	00c00274 	movhi	r3,9
   86510:	18e23704 	addi	r3,r3,-30500
   86514:	20ffc01e 	bne	r4,r3,86418 <__smakebuf_r+0x58>
   86518:	8080030b 	ldhu	r2,12(r16)
   8651c:	00c10004 	movi	r3,1024
   86520:	80c01315 	stw	r3,76(r16)
   86524:	10c4b03a 	or	r2,r2,r3
   86528:	8080030d 	sth	r2,12(r16)
   8652c:	003fcb06 	br	8645c <__smakebuf_r+0x9c>
   86530:	8080030b 	ldhu	r2,12(r16)
   86534:	10c0800c 	andi	r3,r2,512
   86538:	18ffffcc 	andi	r3,r3,65535
   8653c:	18e0001c 	xori	r3,r3,32768
   86540:	18e00004 	addi	r3,r3,-32768
   86544:	183fd31e 	bne	r3,zero,86494 <__smakebuf_r+0xd4>
   86548:	10800094 	ori	r2,r2,2
   8654c:	80c010c4 	addi	r3,r16,67
   86550:	8080030d 	sth	r2,12(r16)
   86554:	00800044 	movi	r2,1
   86558:	80c00015 	stw	r3,0(r16)
   8655c:	80c00415 	stw	r3,16(r16)
   86560:	80800515 	stw	r2,20(r16)
   86564:	003fcb06 	br	86494 <__smakebuf_r+0xd4>

00086568 <_malloc_r>:
   86568:	defff604 	addi	sp,sp,-40
   8656c:	dc800215 	stw	r18,8(sp)
   86570:	dfc00915 	stw	ra,36(sp)
   86574:	df000815 	stw	fp,32(sp)
   86578:	ddc00715 	stw	r23,28(sp)
   8657c:	dd800615 	stw	r22,24(sp)
   86580:	dd400515 	stw	r21,20(sp)
   86584:	dd000415 	stw	r20,16(sp)
   86588:	dcc00315 	stw	r19,12(sp)
   8658c:	dc400115 	stw	r17,4(sp)
   86590:	dc000015 	stw	r16,0(sp)
   86594:	288002c4 	addi	r2,r5,11
   86598:	00c00584 	movi	r3,22
   8659c:	2025883a 	mov	r18,r4
   865a0:	18802b2e 	bgeu	r3,r2,86650 <_malloc_r+0xe8>
   865a4:	047ffe04 	movi	r17,-8
   865a8:	1462703a 	and	r17,r2,r17
   865ac:	88002a16 	blt	r17,zero,86658 <_malloc_r+0xf0>
   865b0:	89402936 	bltu	r17,r5,86658 <_malloc_r+0xf0>
   865b4:	9009883a 	mov	r4,r18
   865b8:	008b3d40 	call	8b3d4 <__malloc_lock>
   865bc:	00807dc4 	movi	r2,503
   865c0:	14402936 	bltu	r2,r17,86668 <_malloc_r+0x100>
   865c4:	8808d0fa 	srli	r4,r17,3
   865c8:	04c00274 	movhi	r19,9
   865cc:	9cfa3904 	addi	r19,r19,-5916
   865d0:	2105883a 	add	r2,r4,r4
   865d4:	1085883a 	add	r2,r2,r2
   865d8:	1085883a 	add	r2,r2,r2
   865dc:	9885883a 	add	r2,r19,r2
   865e0:	14000317 	ldw	r16,12(r2)
   865e4:	80815526 	beq	r16,r2,86b3c <_malloc_r+0x5d4>
   865e8:	81000117 	ldw	r4,4(r16)
   865ec:	00bfff04 	movi	r2,-4
   865f0:	80c00317 	ldw	r3,12(r16)
   865f4:	2084703a 	and	r2,r4,r2
   865f8:	8085883a 	add	r2,r16,r2
   865fc:	11800117 	ldw	r6,4(r2)
   86600:	81400217 	ldw	r5,8(r16)
   86604:	9009883a 	mov	r4,r18
   86608:	31800054 	ori	r6,r6,1
   8660c:	11800115 	stw	r6,4(r2)
   86610:	28c00315 	stw	r3,12(r5)
   86614:	19400215 	stw	r5,8(r3)
   86618:	008b3f40 	call	8b3f4 <__malloc_unlock>
   8661c:	80800204 	addi	r2,r16,8
   86620:	dfc00917 	ldw	ra,36(sp)
   86624:	df000817 	ldw	fp,32(sp)
   86628:	ddc00717 	ldw	r23,28(sp)
   8662c:	dd800617 	ldw	r22,24(sp)
   86630:	dd400517 	ldw	r21,20(sp)
   86634:	dd000417 	ldw	r20,16(sp)
   86638:	dcc00317 	ldw	r19,12(sp)
   8663c:	dc800217 	ldw	r18,8(sp)
   86640:	dc400117 	ldw	r17,4(sp)
   86644:	dc000017 	ldw	r16,0(sp)
   86648:	dec00a04 	addi	sp,sp,40
   8664c:	f800283a 	ret
   86650:	04400404 	movi	r17,16
   86654:	897fd72e 	bgeu	r17,r5,865b4 <_malloc_r+0x4c>
   86658:	00800304 	movi	r2,12
   8665c:	90800015 	stw	r2,0(r18)
   86660:	0005883a 	mov	r2,zero
   86664:	003fee06 	br	86620 <_malloc_r+0xb8>
   86668:	8808d27a 	srli	r4,r17,9
   8666c:	20007126 	beq	r4,zero,86834 <_malloc_r+0x2cc>
   86670:	00800104 	movi	r2,4
   86674:	1100eb36 	bltu	r2,r4,86a24 <_malloc_r+0x4bc>
   86678:	8808d1ba 	srli	r4,r17,6
   8667c:	21000e04 	addi	r4,r4,56
   86680:	210b883a 	add	r5,r4,r4
   86684:	294b883a 	add	r5,r5,r5
   86688:	294b883a 	add	r5,r5,r5
   8668c:	04c00274 	movhi	r19,9
   86690:	9cfa3904 	addi	r19,r19,-5916
   86694:	994b883a 	add	r5,r19,r5
   86698:	2c000317 	ldw	r16,12(r5)
   8669c:	2c000e26 	beq	r5,r16,866d8 <_malloc_r+0x170>
   866a0:	80c00117 	ldw	r3,4(r16)
   866a4:	01ffff04 	movi	r7,-4
   866a8:	018003c4 	movi	r6,15
   866ac:	19c6703a 	and	r3,r3,r7
   866b0:	1c45c83a 	sub	r2,r3,r17
   866b4:	30800716 	blt	r6,r2,866d4 <_malloc_r+0x16c>
   866b8:	1000610e 	bge	r2,zero,86840 <_malloc_r+0x2d8>
   866bc:	84000317 	ldw	r16,12(r16)
   866c0:	2c000526 	beq	r5,r16,866d8 <_malloc_r+0x170>
   866c4:	80c00117 	ldw	r3,4(r16)
   866c8:	19c6703a 	and	r3,r3,r7
   866cc:	1c45c83a 	sub	r2,r3,r17
   866d0:	30bff90e 	bge	r6,r2,866b8 <_malloc_r+0x150>
   866d4:	213fffc4 	addi	r4,r4,-1
   866d8:	21000044 	addi	r4,r4,1
   866dc:	9c000417 	ldw	r16,16(r19)
   866e0:	00c00274 	movhi	r3,9
   866e4:	18fa3904 	addi	r3,r3,-5916
   866e8:	1a400204 	addi	r9,r3,8
   866ec:	8240ff26 	beq	r16,r9,86aec <_malloc_r+0x584>
   866f0:	81400117 	ldw	r5,4(r16)
   866f4:	00bfff04 	movi	r2,-4
   866f8:	018003c4 	movi	r6,15
   866fc:	2884703a 	and	r2,r5,r2
   86700:	144bc83a 	sub	r5,r2,r17
   86704:	3140ea16 	blt	r6,r5,86ab0 <_malloc_r+0x548>
   86708:	1a400515 	stw	r9,20(r3)
   8670c:	1a400415 	stw	r9,16(r3)
   86710:	2800570e 	bge	r5,zero,86870 <_malloc_r+0x308>
   86714:	01407fc4 	movi	r5,511
   86718:	2880ca36 	bltu	r5,r2,86a44 <_malloc_r+0x4dc>
   8671c:	1004d0fa 	srli	r2,r2,3
   86720:	02000044 	movi	r8,1
   86724:	19c00117 	ldw	r7,4(r3)
   86728:	108b883a 	add	r5,r2,r2
   8672c:	294b883a 	add	r5,r5,r5
   86730:	1005d0ba 	srai	r2,r2,2
   86734:	294b883a 	add	r5,r5,r5
   86738:	28cb883a 	add	r5,r5,r3
   8673c:	29800217 	ldw	r6,8(r5)
   86740:	4084983a 	sll	r2,r8,r2
   86744:	81400315 	stw	r5,12(r16)
   86748:	81800215 	stw	r6,8(r16)
   8674c:	11c4b03a 	or	r2,r2,r7
   86750:	18800115 	stw	r2,4(r3)
   86754:	2c000215 	stw	r16,8(r5)
   86758:	34000315 	stw	r16,12(r6)
   8675c:	200bd0ba 	srai	r5,r4,2
   86760:	00c00044 	movi	r3,1
   86764:	194a983a 	sll	r5,r3,r5
   86768:	11404936 	bltu	r2,r5,86890 <_malloc_r+0x328>
   8676c:	1146703a 	and	r3,r2,r5
   86770:	18000a1e 	bne	r3,zero,8679c <_malloc_r+0x234>
   86774:	00ffff04 	movi	r3,-4
   86778:	294b883a 	add	r5,r5,r5
   8677c:	20c8703a 	and	r4,r4,r3
   86780:	1146703a 	and	r3,r2,r5
   86784:	21000104 	addi	r4,r4,4
   86788:	1800041e 	bne	r3,zero,8679c <_malloc_r+0x234>
   8678c:	294b883a 	add	r5,r5,r5
   86790:	1146703a 	and	r3,r2,r5
   86794:	21000104 	addi	r4,r4,4
   86798:	183ffc26 	beq	r3,zero,8678c <_malloc_r+0x224>
   8679c:	023fff04 	movi	r8,-4
   867a0:	01c003c4 	movi	r7,15
   867a4:	2105883a 	add	r2,r4,r4
   867a8:	1085883a 	add	r2,r2,r2
   867ac:	1085883a 	add	r2,r2,r2
   867b0:	9899883a 	add	r12,r19,r2
   867b4:	62800304 	addi	r10,r12,12
   867b8:	2017883a 	mov	r11,r4
   867bc:	54000017 	ldw	r16,0(r10)
   867c0:	51bffd04 	addi	r6,r10,-12
   867c4:	8180041e 	bne	r16,r6,867d8 <_malloc_r+0x270>
   867c8:	0000ca06 	br	86af4 <_malloc_r+0x58c>
   867cc:	10001c0e 	bge	r2,zero,86840 <_malloc_r+0x2d8>
   867d0:	84000317 	ldw	r16,12(r16)
   867d4:	8180c726 	beq	r16,r6,86af4 <_malloc_r+0x58c>
   867d8:	80c00117 	ldw	r3,4(r16)
   867dc:	1a06703a 	and	r3,r3,r8
   867e0:	1c45c83a 	sub	r2,r3,r17
   867e4:	38bff90e 	bge	r7,r2,867cc <_malloc_r+0x264>
   867e8:	81000317 	ldw	r4,12(r16)
   867ec:	81400217 	ldw	r5,8(r16)
   867f0:	8447883a 	add	r3,r16,r17
   867f4:	8c400054 	ori	r17,r17,1
   867f8:	29000315 	stw	r4,12(r5)
   867fc:	21400215 	stw	r5,8(r4)
   86800:	84400115 	stw	r17,4(r16)
   86804:	1889883a 	add	r4,r3,r2
   86808:	11400054 	ori	r5,r2,1
   8680c:	98c00515 	stw	r3,20(r19)
   86810:	98c00415 	stw	r3,16(r19)
   86814:	20800015 	stw	r2,0(r4)
   86818:	1a400315 	stw	r9,12(r3)
   8681c:	1a400215 	stw	r9,8(r3)
   86820:	19400115 	stw	r5,4(r3)
   86824:	9009883a 	mov	r4,r18
   86828:	008b3f40 	call	8b3f4 <__malloc_unlock>
   8682c:	80800204 	addi	r2,r16,8
   86830:	003f7b06 	br	86620 <_malloc_r+0xb8>
   86834:	8808d0fa 	srli	r4,r17,3
   86838:	210b883a 	add	r5,r4,r4
   8683c:	003f9106 	br	86684 <_malloc_r+0x11c>
   86840:	80c7883a 	add	r3,r16,r3
   86844:	19400117 	ldw	r5,4(r3)
   86848:	80800317 	ldw	r2,12(r16)
   8684c:	81000217 	ldw	r4,8(r16)
   86850:	29400054 	ori	r5,r5,1
   86854:	19400115 	stw	r5,4(r3)
   86858:	20800315 	stw	r2,12(r4)
   8685c:	11000215 	stw	r4,8(r2)
   86860:	9009883a 	mov	r4,r18
   86864:	008b3f40 	call	8b3f4 <__malloc_unlock>
   86868:	80800204 	addi	r2,r16,8
   8686c:	003f6c06 	br	86620 <_malloc_r+0xb8>
   86870:	8085883a 	add	r2,r16,r2
   86874:	10c00117 	ldw	r3,4(r2)
   86878:	9009883a 	mov	r4,r18
   8687c:	18c00054 	ori	r3,r3,1
   86880:	10c00115 	stw	r3,4(r2)
   86884:	008b3f40 	call	8b3f4 <__malloc_unlock>
   86888:	80800204 	addi	r2,r16,8
   8688c:	003f6406 	br	86620 <_malloc_r+0xb8>
   86890:	9c000217 	ldw	r16,8(r19)
   86894:	00bfff04 	movi	r2,-4
   86898:	85400117 	ldw	r21,4(r16)
   8689c:	a8aa703a 	and	r21,r21,r2
   868a0:	ac400336 	bltu	r21,r17,868b0 <_malloc_r+0x348>
   868a4:	ac45c83a 	sub	r2,r21,r17
   868a8:	00c003c4 	movi	r3,15
   868ac:	18805316 	blt	r3,r2,869fc <_malloc_r+0x494>
   868b0:	d5e6e617 	ldw	r23,-25704(gp)
   868b4:	d0e00317 	ldw	r3,-32756(gp)
   868b8:	00bfffc4 	movi	r2,-1
   868bc:	8579883a 	add	fp,r16,r21
   868c0:	8def883a 	add	r23,r17,r23
   868c4:	1880d226 	beq	r3,r2,86c10 <_malloc_r+0x6a8>
   868c8:	bdc403c4 	addi	r23,r23,4111
   868cc:	00bc0004 	movi	r2,-4096
   868d0:	b8ae703a 	and	r23,r23,r2
   868d4:	9009883a 	mov	r4,r18
   868d8:	b80b883a 	mov	r5,r23
   868dc:	008879c0 	call	8879c <_sbrk_r>
   868e0:	1029883a 	mov	r20,r2
   868e4:	00bfffc4 	movi	r2,-1
   868e8:	a080d126 	beq	r20,r2,86c30 <_malloc_r+0x6c8>
   868ec:	a7009f36 	bltu	r20,fp,86b6c <_malloc_r+0x604>
   868f0:	05800274 	movhi	r22,9
   868f4:	b586de04 	addi	r22,r22,7032
   868f8:	b0800017 	ldw	r2,0(r22)
   868fc:	b885883a 	add	r2,r23,r2
   86900:	b0800015 	stw	r2,0(r22)
   86904:	e500cf26 	beq	fp,r20,86c44 <_malloc_r+0x6dc>
   86908:	d1200317 	ldw	r4,-32756(gp)
   8690c:	00ffffc4 	movi	r3,-1
   86910:	20c0e026 	beq	r4,r3,86c94 <_malloc_r+0x72c>
   86914:	a739c83a 	sub	fp,r20,fp
   86918:	1705883a 	add	r2,r2,fp
   8691c:	b0800015 	stw	r2,0(r22)
   86920:	a08001cc 	andi	r2,r20,7
   86924:	1000a526 	beq	r2,zero,86bbc <_malloc_r+0x654>
   86928:	a0a9c83a 	sub	r20,r20,r2
   8692c:	00c40204 	movi	r3,4104
   86930:	a5000204 	addi	r20,r20,8
   86934:	1885c83a 	sub	r2,r3,r2
   86938:	a5c7883a 	add	r3,r20,r23
   8693c:	18c3ffcc 	andi	r3,r3,4095
   86940:	10efc83a 	sub	r23,r2,r3
   86944:	9009883a 	mov	r4,r18
   86948:	b80b883a 	mov	r5,r23
   8694c:	008879c0 	call	8879c <_sbrk_r>
   86950:	00ffffc4 	movi	r3,-1
   86954:	10c0cc26 	beq	r2,r3,86c88 <_malloc_r+0x720>
   86958:	1505c83a 	sub	r2,r2,r20
   8695c:	b887883a 	add	r3,r23,r2
   86960:	18c00054 	ori	r3,r3,1
   86964:	b0800017 	ldw	r2,0(r22)
   86968:	9d000215 	stw	r20,8(r19)
   8696c:	a0c00115 	stw	r3,4(r20)
   86970:	b885883a 	add	r2,r23,r2
   86974:	b0800015 	stw	r2,0(r22)
   86978:	84c00e26 	beq	r16,r19,869b4 <_malloc_r+0x44c>
   8697c:	00c003c4 	movi	r3,15
   86980:	1d40902e 	bgeu	r3,r21,86bc4 <_malloc_r+0x65c>
   86984:	ad7ffd04 	addi	r21,r21,-12
   86988:	013ffe04 	movi	r4,-8
   8698c:	a908703a 	and	r4,r21,r4
   86990:	810b883a 	add	r5,r16,r4
   86994:	01800144 	movi	r6,5
   86998:	29800115 	stw	r6,4(r5)
   8699c:	29800215 	stw	r6,8(r5)
   869a0:	81400117 	ldw	r5,4(r16)
   869a4:	2940004c 	andi	r5,r5,1
   869a8:	214ab03a 	or	r5,r4,r5
   869ac:	81400115 	stw	r5,4(r16)
   869b0:	1900ae36 	bltu	r3,r4,86c6c <_malloc_r+0x704>
   869b4:	d0e6e517 	ldw	r3,-25708(gp)
   869b8:	1880012e 	bgeu	r3,r2,869c0 <_malloc_r+0x458>
   869bc:	d0a6e515 	stw	r2,-25708(gp)
   869c0:	d0e6e417 	ldw	r3,-25712(gp)
   869c4:	9c000217 	ldw	r16,8(r19)
   869c8:	1880012e 	bgeu	r3,r2,869d0 <_malloc_r+0x468>
   869cc:	d0a6e415 	stw	r2,-25712(gp)
   869d0:	80c00117 	ldw	r3,4(r16)
   869d4:	00bfff04 	movi	r2,-4
   869d8:	1886703a 	and	r3,r3,r2
   869dc:	1c45c83a 	sub	r2,r3,r17
   869e0:	1c400236 	bltu	r3,r17,869ec <_malloc_r+0x484>
   869e4:	00c003c4 	movi	r3,15
   869e8:	18800416 	blt	r3,r2,869fc <_malloc_r+0x494>
   869ec:	9009883a 	mov	r4,r18
   869f0:	008b3f40 	call	8b3f4 <__malloc_unlock>
   869f4:	0005883a 	mov	r2,zero
   869f8:	003f0906 	br	86620 <_malloc_r+0xb8>
   869fc:	88c00054 	ori	r3,r17,1
   86a00:	10800054 	ori	r2,r2,1
   86a04:	80c00115 	stw	r3,4(r16)
   86a08:	8463883a 	add	r17,r16,r17
   86a0c:	88800115 	stw	r2,4(r17)
   86a10:	9009883a 	mov	r4,r18
   86a14:	9c400215 	stw	r17,8(r19)
   86a18:	008b3f40 	call	8b3f4 <__malloc_unlock>
   86a1c:	80800204 	addi	r2,r16,8
   86a20:	003eff06 	br	86620 <_malloc_r+0xb8>
   86a24:	00800504 	movi	r2,20
   86a28:	1100492e 	bgeu	r2,r4,86b50 <_malloc_r+0x5e8>
   86a2c:	00801504 	movi	r2,84
   86a30:	11005c36 	bltu	r2,r4,86ba4 <_malloc_r+0x63c>
   86a34:	8808d33a 	srli	r4,r17,12
   86a38:	21001b84 	addi	r4,r4,110
   86a3c:	210b883a 	add	r5,r4,r4
   86a40:	003f1006 	br	86684 <_malloc_r+0x11c>
   86a44:	1006d27a 	srli	r3,r2,9
   86a48:	01400104 	movi	r5,4
   86a4c:	28c0432e 	bgeu	r5,r3,86b5c <_malloc_r+0x5f4>
   86a50:	01400504 	movi	r5,20
   86a54:	28c07036 	bltu	r5,r3,86c18 <_malloc_r+0x6b0>
   86a58:	194016c4 	addi	r5,r3,91
   86a5c:	294d883a 	add	r6,r5,r5
   86a60:	318d883a 	add	r6,r6,r6
   86a64:	318d883a 	add	r6,r6,r6
   86a68:	998d883a 	add	r6,r19,r6
   86a6c:	30c00217 	ldw	r3,8(r6)
   86a70:	01c00274 	movhi	r7,9
   86a74:	39fa3904 	addi	r7,r7,-5916
   86a78:	19805726 	beq	r3,r6,86bd8 <_malloc_r+0x670>
   86a7c:	01ffff04 	movi	r7,-4
   86a80:	19400117 	ldw	r5,4(r3)
   86a84:	29ca703a 	and	r5,r5,r7
   86a88:	1140022e 	bgeu	r2,r5,86a94 <_malloc_r+0x52c>
   86a8c:	18c00217 	ldw	r3,8(r3)
   86a90:	30fffb1e 	bne	r6,r3,86a80 <_malloc_r+0x518>
   86a94:	19400317 	ldw	r5,12(r3)
   86a98:	98800117 	ldw	r2,4(r19)
   86a9c:	81400315 	stw	r5,12(r16)
   86aa0:	80c00215 	stw	r3,8(r16)
   86aa4:	2c000215 	stw	r16,8(r5)
   86aa8:	1c000315 	stw	r16,12(r3)
   86aac:	003f2b06 	br	8675c <_malloc_r+0x1f4>
   86ab0:	8445883a 	add	r2,r16,r17
   86ab4:	8c400054 	ori	r17,r17,1
   86ab8:	18800515 	stw	r2,20(r3)
   86abc:	18800415 	stw	r2,16(r3)
   86ac0:	29000054 	ori	r4,r5,1
   86ac4:	1147883a 	add	r3,r2,r5
   86ac8:	84400115 	stw	r17,4(r16)
   86acc:	11000115 	stw	r4,4(r2)
   86ad0:	12400315 	stw	r9,12(r2)
   86ad4:	12400215 	stw	r9,8(r2)
   86ad8:	19400015 	stw	r5,0(r3)
   86adc:	9009883a 	mov	r4,r18
   86ae0:	008b3f40 	call	8b3f4 <__malloc_unlock>
   86ae4:	80800204 	addi	r2,r16,8
   86ae8:	003ecd06 	br	86620 <_malloc_r+0xb8>
   86aec:	18800117 	ldw	r2,4(r3)
   86af0:	003f1a06 	br	8675c <_malloc_r+0x1f4>
   86af4:	5ac00044 	addi	r11,r11,1
   86af8:	588000cc 	andi	r2,r11,3
   86afc:	52800204 	addi	r10,r10,8
   86b00:	103f2e1e 	bne	r2,zero,867bc <_malloc_r+0x254>
   86b04:	20c000cc 	andi	r3,r4,3
   86b08:	60bffe04 	addi	r2,r12,-8
   86b0c:	18006f26 	beq	r3,zero,86ccc <_malloc_r+0x764>
   86b10:	63000017 	ldw	r12,0(r12)
   86b14:	213fffc4 	addi	r4,r4,-1
   86b18:	60bffa26 	beq	r12,r2,86b04 <_malloc_r+0x59c>
   86b1c:	98800117 	ldw	r2,4(r19)
   86b20:	294b883a 	add	r5,r5,r5
   86b24:	117f5a36 	bltu	r2,r5,86890 <_malloc_r+0x328>
   86b28:	283f5926 	beq	r5,zero,86890 <_malloc_r+0x328>
   86b2c:	1146703a 	and	r3,r2,r5
   86b30:	18001626 	beq	r3,zero,86b8c <_malloc_r+0x624>
   86b34:	5809883a 	mov	r4,r11
   86b38:	003f1a06 	br	867a4 <_malloc_r+0x23c>
   86b3c:	80800204 	addi	r2,r16,8
   86b40:	84000517 	ldw	r16,20(r16)
   86b44:	143ea81e 	bne	r2,r16,865e8 <_malloc_r+0x80>
   86b48:	21000084 	addi	r4,r4,2
   86b4c:	003ee306 	br	866dc <_malloc_r+0x174>
   86b50:	210016c4 	addi	r4,r4,91
   86b54:	210b883a 	add	r5,r4,r4
   86b58:	003eca06 	br	86684 <_malloc_r+0x11c>
   86b5c:	100ad1ba 	srli	r5,r2,6
   86b60:	29400e04 	addi	r5,r5,56
   86b64:	294d883a 	add	r6,r5,r5
   86b68:	003fbd06 	br	86a60 <_malloc_r+0x4f8>
   86b6c:	84ff6026 	beq	r16,r19,868f0 <_malloc_r+0x388>
   86b70:	00800274 	movhi	r2,9
   86b74:	10ba3904 	addi	r2,r2,-5916
   86b78:	14000217 	ldw	r16,8(r2)
   86b7c:	00bfff04 	movi	r2,-4
   86b80:	80c00117 	ldw	r3,4(r16)
   86b84:	1886703a 	and	r3,r3,r2
   86b88:	003f9406 	br	869dc <_malloc_r+0x474>
   86b8c:	294b883a 	add	r5,r5,r5
   86b90:	1146703a 	and	r3,r2,r5
   86b94:	5ac00104 	addi	r11,r11,4
   86b98:	183ffc26 	beq	r3,zero,86b8c <_malloc_r+0x624>
   86b9c:	5809883a 	mov	r4,r11
   86ba0:	003f0006 	br	867a4 <_malloc_r+0x23c>
   86ba4:	00805504 	movi	r2,340
   86ba8:	11001336 	bltu	r2,r4,86bf8 <_malloc_r+0x690>
   86bac:	8808d3fa 	srli	r4,r17,15
   86bb0:	21001dc4 	addi	r4,r4,119
   86bb4:	210b883a 	add	r5,r4,r4
   86bb8:	003eb206 	br	86684 <_malloc_r+0x11c>
   86bbc:	00840004 	movi	r2,4096
   86bc0:	003f5d06 	br	86938 <_malloc_r+0x3d0>
   86bc4:	00800044 	movi	r2,1
   86bc8:	a0800115 	stw	r2,4(r20)
   86bcc:	a021883a 	mov	r16,r20
   86bd0:	0007883a 	mov	r3,zero
   86bd4:	003f8106 	br	869dc <_malloc_r+0x474>
   86bd8:	280bd0ba 	srai	r5,r5,2
   86bdc:	01800044 	movi	r6,1
   86be0:	38800117 	ldw	r2,4(r7)
   86be4:	314c983a 	sll	r6,r6,r5
   86be8:	180b883a 	mov	r5,r3
   86bec:	3084b03a 	or	r2,r6,r2
   86bf0:	38800115 	stw	r2,4(r7)
   86bf4:	003fa906 	br	86a9c <_malloc_r+0x534>
   86bf8:	00815504 	movi	r2,1364
   86bfc:	11001836 	bltu	r2,r4,86c60 <_malloc_r+0x6f8>
   86c00:	8808d4ba 	srli	r4,r17,18
   86c04:	21001f04 	addi	r4,r4,124
   86c08:	210b883a 	add	r5,r4,r4
   86c0c:	003e9d06 	br	86684 <_malloc_r+0x11c>
   86c10:	bdc00404 	addi	r23,r23,16
   86c14:	003f2f06 	br	868d4 <_malloc_r+0x36c>
   86c18:	01401504 	movi	r5,84
   86c1c:	28c01f36 	bltu	r5,r3,86c9c <_malloc_r+0x734>
   86c20:	100ad33a 	srli	r5,r2,12
   86c24:	29401b84 	addi	r5,r5,110
   86c28:	294d883a 	add	r6,r5,r5
   86c2c:	003f8c06 	br	86a60 <_malloc_r+0x4f8>
   86c30:	9c000217 	ldw	r16,8(r19)
   86c34:	00bfff04 	movi	r2,-4
   86c38:	80c00117 	ldw	r3,4(r16)
   86c3c:	1886703a 	and	r3,r3,r2
   86c40:	003f6606 	br	869dc <_malloc_r+0x474>
   86c44:	e0c3ffcc 	andi	r3,fp,4095
   86c48:	183f2f1e 	bne	r3,zero,86908 <_malloc_r+0x3a0>
   86c4c:	98c00217 	ldw	r3,8(r19)
   86c50:	bd49883a 	add	r4,r23,r21
   86c54:	21000054 	ori	r4,r4,1
   86c58:	19000115 	stw	r4,4(r3)
   86c5c:	003f5506 	br	869b4 <_malloc_r+0x44c>
   86c60:	01403f04 	movi	r5,252
   86c64:	01001f84 	movi	r4,126
   86c68:	003e8606 	br	86684 <_malloc_r+0x11c>
   86c6c:	9009883a 	mov	r4,r18
   86c70:	81400204 	addi	r5,r16,8
   86c74:	00859d00 	call	859d0 <_free_r>
   86c78:	00800274 	movhi	r2,9
   86c7c:	1086de04 	addi	r2,r2,7032
   86c80:	10800017 	ldw	r2,0(r2)
   86c84:	003f4b06 	br	869b4 <_malloc_r+0x44c>
   86c88:	00c00044 	movi	r3,1
   86c8c:	002f883a 	mov	r23,zero
   86c90:	003f3406 	br	86964 <_malloc_r+0x3fc>
   86c94:	d5200315 	stw	r20,-32756(gp)
   86c98:	003f2106 	br	86920 <_malloc_r+0x3b8>
   86c9c:	01405504 	movi	r5,340
   86ca0:	28c00436 	bltu	r5,r3,86cb4 <_malloc_r+0x74c>
   86ca4:	100ad3fa 	srli	r5,r2,15
   86ca8:	29401dc4 	addi	r5,r5,119
   86cac:	294d883a 	add	r6,r5,r5
   86cb0:	003f6b06 	br	86a60 <_malloc_r+0x4f8>
   86cb4:	01415504 	movi	r5,1364
   86cb8:	28c00936 	bltu	r5,r3,86ce0 <_malloc_r+0x778>
   86cbc:	100ad4ba 	srli	r5,r2,18
   86cc0:	29401f04 	addi	r5,r5,124
   86cc4:	294d883a 	add	r6,r5,r5
   86cc8:	003f6506 	br	86a60 <_malloc_r+0x4f8>
   86ccc:	98800117 	ldw	r2,4(r19)
   86cd0:	0146303a 	nor	r3,zero,r5
   86cd4:	1884703a 	and	r2,r3,r2
   86cd8:	98800115 	stw	r2,4(r19)
   86cdc:	003f9006 	br	86b20 <_malloc_r+0x5b8>
   86ce0:	01803f04 	movi	r6,252
   86ce4:	01401f84 	movi	r5,126
   86ce8:	003f5d06 	br	86a60 <_malloc_r+0x4f8>

00086cec <memchr>:
   86cec:	008000c4 	movi	r2,3
   86cf0:	29403fcc 	andi	r5,r5,255
   86cf4:	1180282e 	bgeu	r2,r6,86d98 <memchr+0xac>
   86cf8:	2086703a 	and	r3,r4,r2
   86cfc:	1800351e 	bne	r3,zero,86dd4 <memchr+0xe8>
   86d00:	2816923a 	slli	r11,r5,8
   86d04:	2093883a 	add	r9,r4,r2
   86d08:	22000084 	addi	r8,r4,2
   86d0c:	5957883a 	add	r11,r11,r5
   86d10:	5816923a 	slli	r11,r11,8
   86d14:	20c00044 	addi	r3,r4,1
   86d18:	037fbff4 	movhi	r13,65279
   86d1c:	6b7fbfc4 	addi	r13,r13,-257
   86d20:	5957883a 	add	r11,r11,r5
   86d24:	5816923a 	slli	r11,r11,8
   86d28:	03202074 	movhi	r12,32897
   86d2c:	63202004 	addi	r12,r12,-32640
   86d30:	101d883a 	mov	r14,r2
   86d34:	5957883a 	add	r11,r11,r5
   86d38:	21c00017 	ldw	r7,0(r4)
   86d3c:	31bfff04 	addi	r6,r6,-4
   86d40:	1805883a 	mov	r2,r3
   86d44:	3acef03a 	xor	r7,r7,r11
   86d48:	3b55883a 	add	r10,r7,r13
   86d4c:	01ce303a 	nor	r7,zero,r7
   86d50:	51ce703a 	and	r7,r10,r7
   86d54:	3b0e703a 	and	r7,r7,r12
   86d58:	38000a26 	beq	r7,zero,86d84 <memchr+0x98>
   86d5c:	21c00003 	ldbu	r7,0(r4)
   86d60:	39401e26 	beq	r7,r5,86ddc <memchr+0xf0>
   86d64:	19c00003 	ldbu	r7,0(r3)
   86d68:	39401926 	beq	r7,r5,86dd0 <memchr+0xe4>
   86d6c:	41c00003 	ldbu	r7,0(r8)
   86d70:	4005883a 	mov	r2,r8
   86d74:	39401626 	beq	r7,r5,86dd0 <memchr+0xe4>
   86d78:	49c00003 	ldbu	r7,0(r9)
   86d7c:	4805883a 	mov	r2,r9
   86d80:	39401326 	beq	r7,r5,86dd0 <memchr+0xe4>
   86d84:	21000104 	addi	r4,r4,4
   86d88:	4a400104 	addi	r9,r9,4
   86d8c:	42000104 	addi	r8,r8,4
   86d90:	18c00104 	addi	r3,r3,4
   86d94:	71bfe836 	bltu	r14,r6,86d38 <memchr+0x4c>
   86d98:	2005883a 	mov	r2,r4
   86d9c:	30000a26 	beq	r6,zero,86dc8 <memchr+0xdc>
   86da0:	10c00003 	ldbu	r3,0(r2)
   86da4:	19400a26 	beq	r3,r5,86dd0 <memchr+0xe4>
   86da8:	10c00044 	addi	r3,r2,1
   86dac:	118d883a 	add	r6,r2,r6
   86db0:	00000306 	br	86dc0 <memchr+0xd4>
   86db4:	11000003 	ldbu	r4,0(r2)
   86db8:	18c00044 	addi	r3,r3,1
   86dbc:	21400426 	beq	r4,r5,86dd0 <memchr+0xe4>
   86dc0:	1805883a 	mov	r2,r3
   86dc4:	19bffb1e 	bne	r3,r6,86db4 <memchr+0xc8>
   86dc8:	0005883a 	mov	r2,zero
   86dcc:	f800283a 	ret
   86dd0:	f800283a 	ret
   86dd4:	2005883a 	mov	r2,r4
   86dd8:	003ff106 	br	86da0 <memchr+0xb4>
   86ddc:	2005883a 	mov	r2,r4
   86de0:	f800283a 	ret

00086de4 <memmove>:
   86de4:	2005883a 	mov	r2,r4
   86de8:	300f883a 	mov	r7,r6
   86dec:	29000b2e 	bgeu	r5,r4,86e1c <memmove+0x38>
   86df0:	2987883a 	add	r3,r5,r6
   86df4:	20c0092e 	bgeu	r4,r3,86e1c <memmove+0x38>
   86df8:	218b883a 	add	r5,r4,r6
   86dfc:	198fc83a 	sub	r7,r3,r6
   86e00:	30003f26 	beq	r6,zero,86f00 <memmove+0x11c>
   86e04:	18ffffc4 	addi	r3,r3,-1
   86e08:	19000003 	ldbu	r4,0(r3)
   86e0c:	297fffc4 	addi	r5,r5,-1
   86e10:	29000005 	stb	r4,0(r5)
   86e14:	19fffb1e 	bne	r3,r7,86e04 <memmove+0x20>
   86e18:	f800283a 	ret
   86e1c:	00c003c4 	movi	r3,15
   86e20:	1980382e 	bgeu	r3,r6,86f04 <memmove+0x120>
   86e24:	2886b03a 	or	r3,r5,r2
   86e28:	18c000cc 	andi	r3,r3,3
   86e2c:	1800351e 	bne	r3,zero,86f04 <memmove+0x120>
   86e30:	327ffc04 	addi	r9,r6,-16
   86e34:	4812d13a 	srli	r9,r9,4
   86e38:	12000404 	addi	r8,r2,16
   86e3c:	1007883a 	mov	r3,r2
   86e40:	4808913a 	slli	r4,r9,4
   86e44:	280f883a 	mov	r7,r5
   86e48:	4111883a 	add	r8,r8,r4
   86e4c:	39000017 	ldw	r4,0(r7)
   86e50:	18c00404 	addi	r3,r3,16
   86e54:	39c00404 	addi	r7,r7,16
   86e58:	193ffc15 	stw	r4,-16(r3)
   86e5c:	393ffd17 	ldw	r4,-12(r7)
   86e60:	193ffd15 	stw	r4,-12(r3)
   86e64:	393ffe17 	ldw	r4,-8(r7)
   86e68:	193ffe15 	stw	r4,-8(r3)
   86e6c:	393fff17 	ldw	r4,-4(r7)
   86e70:	193fff15 	stw	r4,-4(r3)
   86e74:	1a3ff51e 	bne	r3,r8,86e4c <memmove+0x68>
   86e78:	49000044 	addi	r4,r9,1
   86e7c:	2008913a 	slli	r4,r4,4
   86e80:	31c003cc 	andi	r7,r6,15
   86e84:	1107883a 	add	r3,r2,r4
   86e88:	290b883a 	add	r5,r5,r4
   86e8c:	010000c4 	movi	r4,3
   86e90:	21c0142e 	bgeu	r4,r7,86ee4 <memmove+0x100>
   86e94:	39ffff04 	addi	r7,r7,-4
   86e98:	3814d0ba 	srli	r10,r7,2
   86e9c:	1a400104 	addi	r9,r3,4
   86ea0:	180d883a 	mov	r6,r3
   86ea4:	5289883a 	add	r4,r10,r10
   86ea8:	2109883a 	add	r4,r4,r4
   86eac:	4913883a 	add	r9,r9,r4
   86eb0:	2809883a 	mov	r4,r5
   86eb4:	22000017 	ldw	r8,0(r4)
   86eb8:	31800104 	addi	r6,r6,4
   86ebc:	21000104 	addi	r4,r4,4
   86ec0:	323fff15 	stw	r8,-4(r6)
   86ec4:	327ffb1e 	bne	r6,r9,86eb4 <memmove+0xd0>
   86ec8:	51000044 	addi	r4,r10,1
   86ecc:	52bfff24 	muli	r10,r10,-4
   86ed0:	2109883a 	add	r4,r4,r4
   86ed4:	2109883a 	add	r4,r4,r4
   86ed8:	51cf883a 	add	r7,r10,r7
   86edc:	290b883a 	add	r5,r5,r4
   86ee0:	1907883a 	add	r3,r3,r4
   86ee4:	38000626 	beq	r7,zero,86f00 <memmove+0x11c>
   86ee8:	19cf883a 	add	r7,r3,r7
   86eec:	29800003 	ldbu	r6,0(r5)
   86ef0:	18c00044 	addi	r3,r3,1
   86ef4:	29400044 	addi	r5,r5,1
   86ef8:	19bfffc5 	stb	r6,-1(r3)
   86efc:	19fffb1e 	bne	r3,r7,86eec <memmove+0x108>
   86f00:	f800283a 	ret
   86f04:	1007883a 	mov	r3,r2
   86f08:	003ff606 	br	86ee4 <memmove+0x100>

00086f0c <memset>:
   86f0c:	00c000c4 	movi	r3,3
   86f10:	2005883a 	mov	r2,r4
   86f14:	29403fcc 	andi	r5,r5,255
   86f18:	19802d2e 	bgeu	r3,r6,86fd0 <memset+0xc4>
   86f1c:	20c6703a 	and	r3,r4,r3
   86f20:	18002e1e 	bne	r3,zero,86fdc <memset+0xd0>
   86f24:	2806923a 	slli	r3,r5,8
   86f28:	010003c4 	movi	r4,15
   86f2c:	3011883a 	mov	r8,r6
   86f30:	1946b03a 	or	r3,r3,r5
   86f34:	180e943a 	slli	r7,r3,16
   86f38:	38ceb03a 	or	r7,r7,r3
   86f3c:	1007883a 	mov	r3,r2
   86f40:	21800f2e 	bgeu	r4,r6,86f80 <memset+0x74>
   86f44:	19c00015 	stw	r7,0(r3)
   86f48:	19c00115 	stw	r7,4(r3)
   86f4c:	19c00215 	stw	r7,8(r3)
   86f50:	19c00315 	stw	r7,12(r3)
   86f54:	423ffc04 	addi	r8,r8,-16
   86f58:	18c00404 	addi	r3,r3,16
   86f5c:	223ff936 	bltu	r4,r8,86f44 <memset+0x38>
   86f60:	30fffc04 	addi	r3,r6,-16
   86f64:	1806d13a 	srli	r3,r3,4
   86f68:	318003cc 	andi	r6,r6,15
   86f6c:	010000c4 	movi	r4,3
   86f70:	18c00044 	addi	r3,r3,1
   86f74:	1806913a 	slli	r3,r3,4
   86f78:	10c7883a 	add	r3,r2,r3
   86f7c:	21800e2e 	bgeu	r4,r6,86fb8 <memset+0xac>
   86f80:	1813883a 	mov	r9,r3
   86f84:	3011883a 	mov	r8,r6
   86f88:	010000c4 	movi	r4,3
   86f8c:	49c00015 	stw	r7,0(r9)
   86f90:	423fff04 	addi	r8,r8,-4
   86f94:	4a400104 	addi	r9,r9,4
   86f98:	223ffc36 	bltu	r4,r8,86f8c <memset+0x80>
   86f9c:	313fff04 	addi	r4,r6,-4
   86fa0:	2008d0ba 	srli	r4,r4,2
   86fa4:	318000cc 	andi	r6,r6,3
   86fa8:	21000044 	addi	r4,r4,1
   86fac:	2109883a 	add	r4,r4,r4
   86fb0:	2109883a 	add	r4,r4,r4
   86fb4:	1907883a 	add	r3,r3,r4
   86fb8:	30000a26 	beq	r6,zero,86fe4 <memset+0xd8>
   86fbc:	198d883a 	add	r6,r3,r6
   86fc0:	19400005 	stb	r5,0(r3)
   86fc4:	18c00044 	addi	r3,r3,1
   86fc8:	19bffd1e 	bne	r3,r6,86fc0 <memset+0xb4>
   86fcc:	f800283a 	ret
   86fd0:	2007883a 	mov	r3,r4
   86fd4:	303ff91e 	bne	r6,zero,86fbc <memset+0xb0>
   86fd8:	00000206 	br	86fe4 <memset+0xd8>
   86fdc:	2007883a 	mov	r3,r4
   86fe0:	003ff606 	br	86fbc <memset+0xb0>
   86fe4:	f800283a 	ret

00086fe8 <_Balloc>:
   86fe8:	20801317 	ldw	r2,76(r4)
   86fec:	defffc04 	addi	sp,sp,-16
   86ff0:	dc400115 	stw	r17,4(sp)
   86ff4:	dc000015 	stw	r16,0(sp)
   86ff8:	dfc00315 	stw	ra,12(sp)
   86ffc:	dc800215 	stw	r18,8(sp)
   87000:	2023883a 	mov	r17,r4
   87004:	2821883a 	mov	r16,r5
   87008:	10000f26 	beq	r2,zero,87048 <_Balloc+0x60>
   8700c:	8407883a 	add	r3,r16,r16
   87010:	18c7883a 	add	r3,r3,r3
   87014:	10c7883a 	add	r3,r2,r3
   87018:	18800017 	ldw	r2,0(r3)
   8701c:	10001126 	beq	r2,zero,87064 <_Balloc+0x7c>
   87020:	11000017 	ldw	r4,0(r2)
   87024:	19000015 	stw	r4,0(r3)
   87028:	10000415 	stw	zero,16(r2)
   8702c:	10000315 	stw	zero,12(r2)
   87030:	dfc00317 	ldw	ra,12(sp)
   87034:	dc800217 	ldw	r18,8(sp)
   87038:	dc400117 	ldw	r17,4(sp)
   8703c:	dc000017 	ldw	r16,0(sp)
   87040:	dec00404 	addi	sp,sp,16
   87044:	f800283a 	ret
   87048:	01400104 	movi	r5,4
   8704c:	01800404 	movi	r6,16
   87050:	0088ba80 	call	88ba8 <_calloc_r>
   87054:	88801315 	stw	r2,76(r17)
   87058:	103fec1e 	bne	r2,zero,8700c <_Balloc+0x24>
   8705c:	0005883a 	mov	r2,zero
   87060:	003ff306 	br	87030 <_Balloc+0x48>
   87064:	01400044 	movi	r5,1
   87068:	2c24983a 	sll	r18,r5,r16
   8706c:	8809883a 	mov	r4,r17
   87070:	91800144 	addi	r6,r18,5
   87074:	318d883a 	add	r6,r6,r6
   87078:	318d883a 	add	r6,r6,r6
   8707c:	0088ba80 	call	88ba8 <_calloc_r>
   87080:	103ff626 	beq	r2,zero,8705c <_Balloc+0x74>
   87084:	14000115 	stw	r16,4(r2)
   87088:	14800215 	stw	r18,8(r2)
   8708c:	003fe606 	br	87028 <_Balloc+0x40>

00087090 <_Bfree>:
   87090:	28000826 	beq	r5,zero,870b4 <_Bfree+0x24>
   87094:	28c00117 	ldw	r3,4(r5)
   87098:	20801317 	ldw	r2,76(r4)
   8709c:	18c7883a 	add	r3,r3,r3
   870a0:	18c7883a 	add	r3,r3,r3
   870a4:	10c5883a 	add	r2,r2,r3
   870a8:	10c00017 	ldw	r3,0(r2)
   870ac:	28c00015 	stw	r3,0(r5)
   870b0:	11400015 	stw	r5,0(r2)
   870b4:	f800283a 	ret

000870b8 <__multadd>:
   870b8:	defffa04 	addi	sp,sp,-24
   870bc:	dc000115 	stw	r16,4(sp)
   870c0:	2c000417 	ldw	r16,16(r5)
   870c4:	dc800315 	stw	r18,12(sp)
   870c8:	dc400215 	stw	r17,8(sp)
   870cc:	dfc00515 	stw	ra,20(sp)
   870d0:	dcc00415 	stw	r19,16(sp)
   870d4:	2823883a 	mov	r17,r5
   870d8:	2025883a 	mov	r18,r4
   870dc:	28c00504 	addi	r3,r5,20
   870e0:	0011883a 	mov	r8,zero
   870e4:	1a800017 	ldw	r10,0(r3)
   870e8:	18c00104 	addi	r3,r3,4
   870ec:	42000044 	addi	r8,r8,1
   870f0:	527fffcc 	andi	r9,r10,65535
   870f4:	4993383a 	mul	r9,r9,r6
   870f8:	5014d43a 	srli	r10,r10,16
   870fc:	49d3883a 	add	r9,r9,r7
   87100:	480ed43a 	srli	r7,r9,16
   87104:	5195383a 	mul	r10,r10,r6
   87108:	4a7fffcc 	andi	r9,r9,65535
   8710c:	3a8f883a 	add	r7,r7,r10
   87110:	3814943a 	slli	r10,r7,16
   87114:	380ed43a 	srli	r7,r7,16
   87118:	5253883a 	add	r9,r10,r9
   8711c:	1a7fff15 	stw	r9,-4(r3)
   87120:	443ff016 	blt	r8,r16,870e4 <__multadd+0x2c>
   87124:	38000926 	beq	r7,zero,8714c <__multadd+0x94>
   87128:	88800217 	ldw	r2,8(r17)
   8712c:	80800f0e 	bge	r16,r2,8716c <__multadd+0xb4>
   87130:	80800144 	addi	r2,r16,5
   87134:	1085883a 	add	r2,r2,r2
   87138:	1085883a 	add	r2,r2,r2
   8713c:	8885883a 	add	r2,r17,r2
   87140:	84000044 	addi	r16,r16,1
   87144:	11c00015 	stw	r7,0(r2)
   87148:	8c000415 	stw	r16,16(r17)
   8714c:	8805883a 	mov	r2,r17
   87150:	dfc00517 	ldw	ra,20(sp)
   87154:	dcc00417 	ldw	r19,16(sp)
   87158:	dc800317 	ldw	r18,12(sp)
   8715c:	dc400217 	ldw	r17,8(sp)
   87160:	dc000117 	ldw	r16,4(sp)
   87164:	dec00604 	addi	sp,sp,24
   87168:	f800283a 	ret
   8716c:	89400117 	ldw	r5,4(r17)
   87170:	9009883a 	mov	r4,r18
   87174:	d9c00015 	stw	r7,0(sp)
   87178:	29400044 	addi	r5,r5,1
   8717c:	0086fe80 	call	86fe8 <_Balloc>
   87180:	89800417 	ldw	r6,16(r17)
   87184:	89400304 	addi	r5,r17,12
   87188:	11000304 	addi	r4,r2,12
   8718c:	31800084 	addi	r6,r6,2
   87190:	318d883a 	add	r6,r6,r6
   87194:	318d883a 	add	r6,r6,r6
   87198:	1027883a 	mov	r19,r2
   8719c:	00818980 	call	81898 <memcpy>
   871a0:	88c00117 	ldw	r3,4(r17)
   871a4:	90801317 	ldw	r2,76(r18)
   871a8:	d9c00017 	ldw	r7,0(sp)
   871ac:	18c7883a 	add	r3,r3,r3
   871b0:	18c7883a 	add	r3,r3,r3
   871b4:	10c5883a 	add	r2,r2,r3
   871b8:	10c00017 	ldw	r3,0(r2)
   871bc:	88c00015 	stw	r3,0(r17)
   871c0:	14400015 	stw	r17,0(r2)
   871c4:	9823883a 	mov	r17,r19
   871c8:	003fd906 	br	87130 <__multadd+0x78>

000871cc <__s2b>:
   871cc:	defff904 	addi	sp,sp,-28
   871d0:	dd000415 	stw	r20,16(sp)
   871d4:	dc400115 	stw	r17,4(sp)
   871d8:	2829883a 	mov	r20,r5
   871dc:	2023883a 	mov	r17,r4
   871e0:	01400244 	movi	r5,9
   871e4:	39000204 	addi	r4,r7,8
   871e8:	dcc00315 	stw	r19,12(sp)
   871ec:	dc800215 	stw	r18,8(sp)
   871f0:	dfc00615 	stw	ra,24(sp)
   871f4:	dd400515 	stw	r21,20(sp)
   871f8:	dc000015 	stw	r16,0(sp)
   871fc:	3825883a 	mov	r18,r7
   87200:	3027883a 	mov	r19,r6
   87204:	00817dc0 	call	817dc <__divsi3>
   87208:	00c00044 	movi	r3,1
   8720c:	000b883a 	mov	r5,zero
   87210:	1880030e 	bge	r3,r2,87220 <__s2b+0x54>
   87214:	18c7883a 	add	r3,r3,r3
   87218:	29400044 	addi	r5,r5,1
   8721c:	18bffd16 	blt	r3,r2,87214 <__s2b+0x48>
   87220:	8809883a 	mov	r4,r17
   87224:	0086fe80 	call	86fe8 <_Balloc>
   87228:	d8c00717 	ldw	r3,28(sp)
   8722c:	10c00515 	stw	r3,20(r2)
   87230:	00c00044 	movi	r3,1
   87234:	10c00415 	stw	r3,16(r2)
   87238:	00c00244 	movi	r3,9
   8723c:	1cc0210e 	bge	r3,r19,872c4 <__s2b+0xf8>
   87240:	a0eb883a 	add	r21,r20,r3
   87244:	a821883a 	mov	r16,r21
   87248:	a4e9883a 	add	r20,r20,r19
   8724c:	81c00007 	ldb	r7,0(r16)
   87250:	8809883a 	mov	r4,r17
   87254:	84000044 	addi	r16,r16,1
   87258:	100b883a 	mov	r5,r2
   8725c:	01800284 	movi	r6,10
   87260:	39fff404 	addi	r7,r7,-48
   87264:	00870b80 	call	870b8 <__multadd>
   87268:	853ff81e 	bne	r16,r20,8724c <__s2b+0x80>
   8726c:	ace1883a 	add	r16,r21,r19
   87270:	843ffe04 	addi	r16,r16,-8
   87274:	9c800a0e 	bge	r19,r18,872a0 <__s2b+0xd4>
   87278:	94e5c83a 	sub	r18,r18,r19
   8727c:	84a5883a 	add	r18,r16,r18
   87280:	81c00007 	ldb	r7,0(r16)
   87284:	8809883a 	mov	r4,r17
   87288:	84000044 	addi	r16,r16,1
   8728c:	100b883a 	mov	r5,r2
   87290:	01800284 	movi	r6,10
   87294:	39fff404 	addi	r7,r7,-48
   87298:	00870b80 	call	870b8 <__multadd>
   8729c:	84bff81e 	bne	r16,r18,87280 <__s2b+0xb4>
   872a0:	dfc00617 	ldw	ra,24(sp)
   872a4:	dd400517 	ldw	r21,20(sp)
   872a8:	dd000417 	ldw	r20,16(sp)
   872ac:	dcc00317 	ldw	r19,12(sp)
   872b0:	dc800217 	ldw	r18,8(sp)
   872b4:	dc400117 	ldw	r17,4(sp)
   872b8:	dc000017 	ldw	r16,0(sp)
   872bc:	dec00704 	addi	sp,sp,28
   872c0:	f800283a 	ret
   872c4:	a4000284 	addi	r16,r20,10
   872c8:	1827883a 	mov	r19,r3
   872cc:	003fe906 	br	87274 <__s2b+0xa8>

000872d0 <__hi0bits>:
   872d0:	20bfffec 	andhi	r2,r4,65535
   872d4:	1000141e 	bne	r2,zero,87328 <__hi0bits+0x58>
   872d8:	2008943a 	slli	r4,r4,16
   872dc:	00800404 	movi	r2,16
   872e0:	20ffc02c 	andhi	r3,r4,65280
   872e4:	1800021e 	bne	r3,zero,872f0 <__hi0bits+0x20>
   872e8:	2008923a 	slli	r4,r4,8
   872ec:	10800204 	addi	r2,r2,8
   872f0:	20fc002c 	andhi	r3,r4,61440
   872f4:	1800021e 	bne	r3,zero,87300 <__hi0bits+0x30>
   872f8:	2008913a 	slli	r4,r4,4
   872fc:	10800104 	addi	r2,r2,4
   87300:	20f0002c 	andhi	r3,r4,49152
   87304:	1800031e 	bne	r3,zero,87314 <__hi0bits+0x44>
   87308:	2109883a 	add	r4,r4,r4
   8730c:	10800084 	addi	r2,r2,2
   87310:	2109883a 	add	r4,r4,r4
   87314:	20000316 	blt	r4,zero,87324 <__hi0bits+0x54>
   87318:	2110002c 	andhi	r4,r4,16384
   8731c:	2000041e 	bne	r4,zero,87330 <__hi0bits+0x60>
   87320:	00800804 	movi	r2,32
   87324:	f800283a 	ret
   87328:	0005883a 	mov	r2,zero
   8732c:	003fec06 	br	872e0 <__hi0bits+0x10>
   87330:	10800044 	addi	r2,r2,1
   87334:	f800283a 	ret

00087338 <__lo0bits>:
   87338:	20c00017 	ldw	r3,0(r4)
   8733c:	188001cc 	andi	r2,r3,7
   87340:	10000826 	beq	r2,zero,87364 <__lo0bits+0x2c>
   87344:	1880004c 	andi	r2,r3,1
   87348:	1000211e 	bne	r2,zero,873d0 <__lo0bits+0x98>
   8734c:	1880008c 	andi	r2,r3,2
   87350:	1000211e 	bne	r2,zero,873d8 <__lo0bits+0xa0>
   87354:	1806d0ba 	srli	r3,r3,2
   87358:	00800084 	movi	r2,2
   8735c:	20c00015 	stw	r3,0(r4)
   87360:	f800283a 	ret
   87364:	18bfffcc 	andi	r2,r3,65535
   87368:	10001326 	beq	r2,zero,873b8 <__lo0bits+0x80>
   8736c:	0005883a 	mov	r2,zero
   87370:	19403fcc 	andi	r5,r3,255
   87374:	2800021e 	bne	r5,zero,87380 <__lo0bits+0x48>
   87378:	1806d23a 	srli	r3,r3,8
   8737c:	10800204 	addi	r2,r2,8
   87380:	194003cc 	andi	r5,r3,15
   87384:	2800021e 	bne	r5,zero,87390 <__lo0bits+0x58>
   87388:	1806d13a 	srli	r3,r3,4
   8738c:	10800104 	addi	r2,r2,4
   87390:	194000cc 	andi	r5,r3,3
   87394:	2800021e 	bne	r5,zero,873a0 <__lo0bits+0x68>
   87398:	1806d0ba 	srli	r3,r3,2
   8739c:	10800084 	addi	r2,r2,2
   873a0:	1940004c 	andi	r5,r3,1
   873a4:	2800081e 	bne	r5,zero,873c8 <__lo0bits+0x90>
   873a8:	1806d07a 	srli	r3,r3,1
   873ac:	1800051e 	bne	r3,zero,873c4 <__lo0bits+0x8c>
   873b0:	00800804 	movi	r2,32
   873b4:	f800283a 	ret
   873b8:	1806d43a 	srli	r3,r3,16
   873bc:	00800404 	movi	r2,16
   873c0:	003feb06 	br	87370 <__lo0bits+0x38>
   873c4:	10800044 	addi	r2,r2,1
   873c8:	20c00015 	stw	r3,0(r4)
   873cc:	f800283a 	ret
   873d0:	0005883a 	mov	r2,zero
   873d4:	f800283a 	ret
   873d8:	1806d07a 	srli	r3,r3,1
   873dc:	00800044 	movi	r2,1
   873e0:	20c00015 	stw	r3,0(r4)
   873e4:	f800283a 	ret

000873e8 <__i2b>:
   873e8:	defffd04 	addi	sp,sp,-12
   873ec:	dc000015 	stw	r16,0(sp)
   873f0:	04000044 	movi	r16,1
   873f4:	dc400115 	stw	r17,4(sp)
   873f8:	2823883a 	mov	r17,r5
   873fc:	800b883a 	mov	r5,r16
   87400:	dfc00215 	stw	ra,8(sp)
   87404:	0086fe80 	call	86fe8 <_Balloc>
   87408:	14400515 	stw	r17,20(r2)
   8740c:	14000415 	stw	r16,16(r2)
   87410:	dfc00217 	ldw	ra,8(sp)
   87414:	dc400117 	ldw	r17,4(sp)
   87418:	dc000017 	ldw	r16,0(sp)
   8741c:	dec00304 	addi	sp,sp,12
   87420:	f800283a 	ret

00087424 <__multiply>:
   87424:	defffa04 	addi	sp,sp,-24
   87428:	dcc00315 	stw	r19,12(sp)
   8742c:	dc400115 	stw	r17,4(sp)
   87430:	34c00417 	ldw	r19,16(r6)
   87434:	2c400417 	ldw	r17,16(r5)
   87438:	dd000415 	stw	r20,16(sp)
   8743c:	dc800215 	stw	r18,8(sp)
   87440:	dfc00515 	stw	ra,20(sp)
   87444:	dc000015 	stw	r16,0(sp)
   87448:	2825883a 	mov	r18,r5
   8744c:	3029883a 	mov	r20,r6
   87450:	8cc0050e 	bge	r17,r19,87468 <__multiply+0x44>
   87454:	8807883a 	mov	r3,r17
   87458:	3025883a 	mov	r18,r6
   8745c:	9823883a 	mov	r17,r19
   87460:	2829883a 	mov	r20,r5
   87464:	1827883a 	mov	r19,r3
   87468:	90800217 	ldw	r2,8(r18)
   8746c:	8ce1883a 	add	r16,r17,r19
   87470:	91400117 	ldw	r5,4(r18)
   87474:	1400010e 	bge	r2,r16,8747c <__multiply+0x58>
   87478:	29400044 	addi	r5,r5,1
   8747c:	0086fe80 	call	86fe8 <_Balloc>
   87480:	83c00144 	addi	r15,r16,5
   87484:	7bdf883a 	add	r15,r15,r15
   87488:	7bdf883a 	add	r15,r15,r15
   8748c:	13800504 	addi	r14,r2,20
   87490:	13df883a 	add	r15,r2,r15
   87494:	7007883a 	mov	r3,r14
   87498:	73c0032e 	bgeu	r14,r15,874a8 <__multiply+0x84>
   8749c:	18000015 	stw	zero,0(r3)
   874a0:	18c00104 	addi	r3,r3,4
   874a4:	1bfffd36 	bltu	r3,r15,8749c <__multiply+0x78>
   874a8:	99800144 	addi	r6,r19,5
   874ac:	8b000144 	addi	r12,r17,5
   874b0:	318d883a 	add	r6,r6,r6
   874b4:	6319883a 	add	r12,r12,r12
   874b8:	318d883a 	add	r6,r6,r6
   874bc:	6319883a 	add	r12,r12,r12
   874c0:	a3400504 	addi	r13,r20,20
   874c4:	a18d883a 	add	r6,r20,r6
   874c8:	94400504 	addi	r17,r18,20
   874cc:	9319883a 	add	r12,r18,r12
   874d0:	6980392e 	bgeu	r13,r6,875b8 <__multiply+0x194>
   874d4:	6a800017 	ldw	r10,0(r13)
   874d8:	52ffffcc 	andi	r11,r10,65535
   874dc:	58001826 	beq	r11,zero,87540 <__multiply+0x11c>
   874e0:	7007883a 	mov	r3,r14
   874e4:	8809883a 	mov	r4,r17
   874e8:	000b883a 	mov	r5,zero
   874ec:	22400017 	ldw	r9,0(r4)
   874f0:	1a000017 	ldw	r8,0(r3)
   874f4:	21000104 	addi	r4,r4,4
   874f8:	49ffffcc 	andi	r7,r9,65535
   874fc:	3acf383a 	mul	r7,r7,r11
   87500:	4812d43a 	srli	r9,r9,16
   87504:	42bfffcc 	andi	r10,r8,65535
   87508:	3a8f883a 	add	r7,r7,r10
   8750c:	394f883a 	add	r7,r7,r5
   87510:	4010d43a 	srli	r8,r8,16
   87514:	4acb383a 	mul	r5,r9,r11
   87518:	3814d43a 	srli	r10,r7,16
   8751c:	19c0000d 	sth	r7,0(r3)
   87520:	2a0b883a 	add	r5,r5,r8
   87524:	2a8b883a 	add	r5,r5,r10
   87528:	1940008d 	sth	r5,2(r3)
   8752c:	280ad43a 	srli	r5,r5,16
   87530:	18c00104 	addi	r3,r3,4
   87534:	233fed36 	bltu	r4,r12,874ec <__multiply+0xc8>
   87538:	19400015 	stw	r5,0(r3)
   8753c:	6a800017 	ldw	r10,0(r13)
   87540:	5014d43a 	srli	r10,r10,16
   87544:	50001926 	beq	r10,zero,875ac <__multiply+0x188>
   87548:	71400017 	ldw	r5,0(r14)
   8754c:	7007883a 	mov	r3,r14
   87550:	8809883a 	mov	r4,r17
   87554:	280f883a 	mov	r7,r5
   87558:	0017883a 	mov	r11,zero
   8755c:	22400017 	ldw	r9,0(r4)
   87560:	380ed43a 	srli	r7,r7,16
   87564:	1940000d 	sth	r5,0(r3)
   87568:	4a3fffcc 	andi	r8,r9,65535
   8756c:	4291383a 	mul	r8,r8,r10
   87570:	4812d43a 	srli	r9,r9,16
   87574:	18c00104 	addi	r3,r3,4
   87578:	41d1883a 	add	r8,r8,r7
   8757c:	19c00017 	ldw	r7,0(r3)
   87580:	42d1883a 	add	r8,r8,r11
   87584:	4a93383a 	mul	r9,r9,r10
   87588:	1a3fff8d 	sth	r8,-2(r3)
   8758c:	4010d43a 	srli	r8,r8,16
   87590:	397fffcc 	andi	r5,r7,65535
   87594:	2a4b883a 	add	r5,r5,r9
   87598:	2a0b883a 	add	r5,r5,r8
   8759c:	21000104 	addi	r4,r4,4
   875a0:	2816d43a 	srli	r11,r5,16
   875a4:	233fed36 	bltu	r4,r12,8755c <__multiply+0x138>
   875a8:	19400015 	stw	r5,0(r3)
   875ac:	6b400104 	addi	r13,r13,4
   875b0:	73800104 	addi	r14,r14,4
   875b4:	69bfc736 	bltu	r13,r6,874d4 <__multiply+0xb0>
   875b8:	0400090e 	bge	zero,r16,875e0 <__multiply+0x1bc>
   875bc:	78ffff17 	ldw	r3,-4(r15)
   875c0:	7bffff04 	addi	r15,r15,-4
   875c4:	18000326 	beq	r3,zero,875d4 <__multiply+0x1b0>
   875c8:	00000506 	br	875e0 <__multiply+0x1bc>
   875cc:	78c00017 	ldw	r3,0(r15)
   875d0:	1800031e 	bne	r3,zero,875e0 <__multiply+0x1bc>
   875d4:	843fffc4 	addi	r16,r16,-1
   875d8:	7bffff04 	addi	r15,r15,-4
   875dc:	803ffb1e 	bne	r16,zero,875cc <__multiply+0x1a8>
   875e0:	14000415 	stw	r16,16(r2)
   875e4:	dfc00517 	ldw	ra,20(sp)
   875e8:	dd000417 	ldw	r20,16(sp)
   875ec:	dcc00317 	ldw	r19,12(sp)
   875f0:	dc800217 	ldw	r18,8(sp)
   875f4:	dc400117 	ldw	r17,4(sp)
   875f8:	dc000017 	ldw	r16,0(sp)
   875fc:	dec00604 	addi	sp,sp,24
   87600:	f800283a 	ret

00087604 <__pow5mult>:
   87604:	defffb04 	addi	sp,sp,-20
   87608:	dcc00315 	stw	r19,12(sp)
   8760c:	dc800215 	stw	r18,8(sp)
   87610:	dc000015 	stw	r16,0(sp)
   87614:	dfc00415 	stw	ra,16(sp)
   87618:	dc400115 	stw	r17,4(sp)
   8761c:	308000cc 	andi	r2,r6,3
   87620:	3021883a 	mov	r16,r6
   87624:	2027883a 	mov	r19,r4
   87628:	2825883a 	mov	r18,r5
   8762c:	10002e1e 	bne	r2,zero,876e8 <__pow5mult+0xe4>
   87630:	8021d0ba 	srai	r16,r16,2
   87634:	80001a26 	beq	r16,zero,876a0 <__pow5mult+0x9c>
   87638:	9c401217 	ldw	r17,72(r19)
   8763c:	8800061e 	bne	r17,zero,87658 <__pow5mult+0x54>
   87640:	00003406 	br	87714 <__pow5mult+0x110>
   87644:	8021d07a 	srai	r16,r16,1
   87648:	80001526 	beq	r16,zero,876a0 <__pow5mult+0x9c>
   8764c:	88c00017 	ldw	r3,0(r17)
   87650:	18001b26 	beq	r3,zero,876c0 <__pow5mult+0xbc>
   87654:	1823883a 	mov	r17,r3
   87658:	80c0004c 	andi	r3,r16,1
   8765c:	183ff926 	beq	r3,zero,87644 <__pow5mult+0x40>
   87660:	900b883a 	mov	r5,r18
   87664:	880d883a 	mov	r6,r17
   87668:	9809883a 	mov	r4,r19
   8766c:	00874240 	call	87424 <__multiply>
   87670:	90001b26 	beq	r18,zero,876e0 <__pow5mult+0xdc>
   87674:	91000117 	ldw	r4,4(r18)
   87678:	98c01317 	ldw	r3,76(r19)
   8767c:	8021d07a 	srai	r16,r16,1
   87680:	2109883a 	add	r4,r4,r4
   87684:	2109883a 	add	r4,r4,r4
   87688:	1907883a 	add	r3,r3,r4
   8768c:	19000017 	ldw	r4,0(r3)
   87690:	91000015 	stw	r4,0(r18)
   87694:	1c800015 	stw	r18,0(r3)
   87698:	1025883a 	mov	r18,r2
   8769c:	803feb1e 	bne	r16,zero,8764c <__pow5mult+0x48>
   876a0:	9005883a 	mov	r2,r18
   876a4:	dfc00417 	ldw	ra,16(sp)
   876a8:	dcc00317 	ldw	r19,12(sp)
   876ac:	dc800217 	ldw	r18,8(sp)
   876b0:	dc400117 	ldw	r17,4(sp)
   876b4:	dc000017 	ldw	r16,0(sp)
   876b8:	dec00504 	addi	sp,sp,20
   876bc:	f800283a 	ret
   876c0:	880b883a 	mov	r5,r17
   876c4:	880d883a 	mov	r6,r17
   876c8:	9809883a 	mov	r4,r19
   876cc:	00874240 	call	87424 <__multiply>
   876d0:	88800015 	stw	r2,0(r17)
   876d4:	10000015 	stw	zero,0(r2)
   876d8:	1023883a 	mov	r17,r2
   876dc:	003fde06 	br	87658 <__pow5mult+0x54>
   876e0:	1025883a 	mov	r18,r2
   876e4:	003fd706 	br	87644 <__pow5mult+0x40>
   876e8:	10bfffc4 	addi	r2,r2,-1
   876ec:	1085883a 	add	r2,r2,r2
   876f0:	00c00274 	movhi	r3,9
   876f4:	18f8d504 	addi	r3,r3,-7340
   876f8:	1085883a 	add	r2,r2,r2
   876fc:	1885883a 	add	r2,r3,r2
   87700:	11800017 	ldw	r6,0(r2)
   87704:	000f883a 	mov	r7,zero
   87708:	00870b80 	call	870b8 <__multadd>
   8770c:	1025883a 	mov	r18,r2
   87710:	003fc706 	br	87630 <__pow5mult+0x2c>
   87714:	9809883a 	mov	r4,r19
   87718:	01409c44 	movi	r5,625
   8771c:	00873e80 	call	873e8 <__i2b>
   87720:	98801215 	stw	r2,72(r19)
   87724:	1023883a 	mov	r17,r2
   87728:	10000015 	stw	zero,0(r2)
   8772c:	003fca06 	br	87658 <__pow5mult+0x54>

00087730 <__lshift>:
   87730:	defff904 	addi	sp,sp,-28
   87734:	dd400515 	stw	r21,20(sp)
   87738:	dc400115 	stw	r17,4(sp)
   8773c:	2d400417 	ldw	r21,16(r5)
   87740:	3023d17a 	srai	r17,r6,5
   87744:	28800217 	ldw	r2,8(r5)
   87748:	dd000415 	stw	r20,16(sp)
   8774c:	8d6b883a 	add	r21,r17,r21
   87750:	dcc00315 	stw	r19,12(sp)
   87754:	dc800215 	stw	r18,8(sp)
   87758:	dc000015 	stw	r16,0(sp)
   8775c:	dfc00615 	stw	ra,24(sp)
   87760:	ac000044 	addi	r16,r21,1
   87764:	2825883a 	mov	r18,r5
   87768:	3029883a 	mov	r20,r6
   8776c:	2027883a 	mov	r19,r4
   87770:	29400117 	ldw	r5,4(r5)
   87774:	1400030e 	bge	r2,r16,87784 <__lshift+0x54>
   87778:	1085883a 	add	r2,r2,r2
   8777c:	29400044 	addi	r5,r5,1
   87780:	143ffd16 	blt	r2,r16,87778 <__lshift+0x48>
   87784:	9809883a 	mov	r4,r19
   87788:	0086fe80 	call	86fe8 <_Balloc>
   8778c:	10c00504 	addi	r3,r2,20
   87790:	0440090e 	bge	zero,r17,877b8 <__lshift+0x88>
   87794:	000f883a 	mov	r7,zero
   87798:	18000015 	stw	zero,0(r3)
   8779c:	39c00044 	addi	r7,r7,1
   877a0:	18c00104 	addi	r3,r3,4
   877a4:	3c7ffc1e 	bne	r7,r17,87798 <__lshift+0x68>
   877a8:	38c00144 	addi	r3,r7,5
   877ac:	18c7883a 	add	r3,r3,r3
   877b0:	18c7883a 	add	r3,r3,r3
   877b4:	10c7883a 	add	r3,r2,r3
   877b8:	92000417 	ldw	r8,16(r18)
   877bc:	a18007cc 	andi	r6,r20,31
   877c0:	91c00504 	addi	r7,r18,20
   877c4:	42000144 	addi	r8,r8,5
   877c8:	4211883a 	add	r8,r8,r8
   877cc:	4211883a 	add	r8,r8,r8
   877d0:	9211883a 	add	r8,r18,r8
   877d4:	30002226 	beq	r6,zero,87860 <__lshift+0x130>
   877d8:	02800804 	movi	r10,32
   877dc:	5195c83a 	sub	r10,r10,r6
   877e0:	000b883a 	mov	r5,zero
   877e4:	3a400017 	ldw	r9,0(r7)
   877e8:	18c00104 	addi	r3,r3,4
   877ec:	39c00104 	addi	r7,r7,4
   877f0:	4992983a 	sll	r9,r9,r6
   877f4:	2a4ab03a 	or	r5,r5,r9
   877f8:	197fff15 	stw	r5,-4(r3)
   877fc:	397fff17 	ldw	r5,-4(r7)
   87800:	2a8ad83a 	srl	r5,r5,r10
   87804:	3a3ff736 	bltu	r7,r8,877e4 <__lshift+0xb4>
   87808:	19400015 	stw	r5,0(r3)
   8780c:	28000126 	beq	r5,zero,87814 <__lshift+0xe4>
   87810:	ac000084 	addi	r16,r21,2
   87814:	91000117 	ldw	r4,4(r18)
   87818:	98c01317 	ldw	r3,76(r19)
   8781c:	843fffc4 	addi	r16,r16,-1
   87820:	2109883a 	add	r4,r4,r4
   87824:	2109883a 	add	r4,r4,r4
   87828:	1907883a 	add	r3,r3,r4
   8782c:	19000017 	ldw	r4,0(r3)
   87830:	14000415 	stw	r16,16(r2)
   87834:	91000015 	stw	r4,0(r18)
   87838:	1c800015 	stw	r18,0(r3)
   8783c:	dfc00617 	ldw	ra,24(sp)
   87840:	dd400517 	ldw	r21,20(sp)
   87844:	dd000417 	ldw	r20,16(sp)
   87848:	dcc00317 	ldw	r19,12(sp)
   8784c:	dc800217 	ldw	r18,8(sp)
   87850:	dc400117 	ldw	r17,4(sp)
   87854:	dc000017 	ldw	r16,0(sp)
   87858:	dec00704 	addi	sp,sp,28
   8785c:	f800283a 	ret
   87860:	39400017 	ldw	r5,0(r7)
   87864:	18c00104 	addi	r3,r3,4
   87868:	39c00104 	addi	r7,r7,4
   8786c:	197fff15 	stw	r5,-4(r3)
   87870:	3a3fe82e 	bgeu	r7,r8,87814 <__lshift+0xe4>
   87874:	39400017 	ldw	r5,0(r7)
   87878:	18c00104 	addi	r3,r3,4
   8787c:	39c00104 	addi	r7,r7,4
   87880:	197fff15 	stw	r5,-4(r3)
   87884:	3a3ff636 	bltu	r7,r8,87860 <__lshift+0x130>
   87888:	003fe206 	br	87814 <__lshift+0xe4>

0008788c <__mcmp>:
   8788c:	20800417 	ldw	r2,16(r4)
   87890:	28c00417 	ldw	r3,16(r5)
   87894:	10c5c83a 	sub	r2,r2,r3
   87898:	10000f1e 	bne	r2,zero,878d8 <__mcmp+0x4c>
   8789c:	18c00144 	addi	r3,r3,5
   878a0:	18c7883a 	add	r3,r3,r3
   878a4:	18c7883a 	add	r3,r3,r3
   878a8:	21c00504 	addi	r7,r4,20
   878ac:	28cb883a 	add	r5,r5,r3
   878b0:	20c9883a 	add	r4,r4,r3
   878b4:	213fff04 	addi	r4,r4,-4
   878b8:	297fff04 	addi	r5,r5,-4
   878bc:	21800017 	ldw	r6,0(r4)
   878c0:	28c00017 	ldw	r3,0(r5)
   878c4:	30c0021e 	bne	r6,r3,878d0 <__mcmp+0x44>
   878c8:	393ffa36 	bltu	r7,r4,878b4 <__mcmp+0x28>
   878cc:	f800283a 	ret
   878d0:	30c00236 	bltu	r6,r3,878dc <__mcmp+0x50>
   878d4:	00800044 	movi	r2,1
   878d8:	f800283a 	ret
   878dc:	00bfffc4 	movi	r2,-1
   878e0:	f800283a 	ret

000878e4 <__mdiff>:
   878e4:	defffb04 	addi	sp,sp,-20
   878e8:	dc000015 	stw	r16,0(sp)
   878ec:	2821883a 	mov	r16,r5
   878f0:	dc800215 	stw	r18,8(sp)
   878f4:	300b883a 	mov	r5,r6
   878f8:	2025883a 	mov	r18,r4
   878fc:	8009883a 	mov	r4,r16
   87900:	dc400115 	stw	r17,4(sp)
   87904:	dfc00415 	stw	ra,16(sp)
   87908:	dcc00315 	stw	r19,12(sp)
   8790c:	3023883a 	mov	r17,r6
   87910:	008788c0 	call	8788c <__mcmp>
   87914:	10005026 	beq	r2,zero,87a58 <__mdiff+0x174>
   87918:	10004a16 	blt	r2,zero,87a44 <__mdiff+0x160>
   8791c:	0027883a 	mov	r19,zero
   87920:	81400117 	ldw	r5,4(r16)
   87924:	9009883a 	mov	r4,r18
   87928:	0086fe80 	call	86fe8 <_Balloc>
   8792c:	82400417 	ldw	r9,16(r16)
   87930:	89800417 	ldw	r6,16(r17)
   87934:	14c00315 	stw	r19,12(r2)
   87938:	4b800144 	addi	r14,r9,5
   8793c:	31800144 	addi	r6,r6,5
   87940:	739d883a 	add	r14,r14,r14
   87944:	318d883a 	add	r6,r6,r6
   87948:	739d883a 	add	r14,r14,r14
   8794c:	318d883a 	add	r6,r6,r6
   87950:	81c00504 	addi	r7,r16,20
   87954:	839d883a 	add	r14,r16,r14
   87958:	8a000504 	addi	r8,r17,20
   8795c:	898d883a 	add	r6,r17,r6
   87960:	10c00504 	addi	r3,r2,20
   87964:	0009883a 	mov	r4,zero
   87968:	3b000017 	ldw	r12,0(r7)
   8796c:	42c00017 	ldw	r11,0(r8)
   87970:	42000104 	addi	r8,r8,4
   87974:	62bfffcc 	andi	r10,r12,65535
   87978:	5b7fffcc 	andi	r13,r11,65535
   8797c:	5109883a 	add	r4,r10,r4
   87980:	2355c83a 	sub	r10,r4,r13
   87984:	5816d43a 	srli	r11,r11,16
   87988:	6008d43a 	srli	r4,r12,16
   8798c:	501bd43a 	srai	r13,r10,16
   87990:	1a80000d 	sth	r10,0(r3)
   87994:	22c9c83a 	sub	r4,r4,r11
   87998:	2349883a 	add	r4,r4,r13
   8799c:	1900008d 	sth	r4,2(r3)
   879a0:	39c00104 	addi	r7,r7,4
   879a4:	2009d43a 	srai	r4,r4,16
   879a8:	18c00104 	addi	r3,r3,4
   879ac:	41bfee36 	bltu	r8,r6,87968 <__mdiff+0x84>
   879b0:	180b883a 	mov	r5,r3
   879b4:	3815883a 	mov	r10,r7
   879b8:	3b80132e 	bgeu	r7,r14,87a08 <__mdiff+0x124>
   879bc:	3a000017 	ldw	r8,0(r7)
   879c0:	18c00104 	addi	r3,r3,4
   879c4:	39c00104 	addi	r7,r7,4
   879c8:	41bfffcc 	andi	r6,r8,65535
   879cc:	310d883a 	add	r6,r6,r4
   879d0:	3009d43a 	srai	r4,r6,16
   879d4:	4010d43a 	srli	r8,r8,16
   879d8:	19bfff0d 	sth	r6,-4(r3)
   879dc:	2209883a 	add	r4,r4,r8
   879e0:	193fff8d 	sth	r4,-2(r3)
   879e4:	2009d43a 	srai	r4,r4,16
   879e8:	3bbff436 	bltu	r7,r14,879bc <__mdiff+0xd8>
   879ec:	0286303a 	nor	r3,zero,r10
   879f0:	1b87883a 	add	r3,r3,r14
   879f4:	1806d0ba 	srli	r3,r3,2
   879f8:	18c00044 	addi	r3,r3,1
   879fc:	18c7883a 	add	r3,r3,r3
   87a00:	18c7883a 	add	r3,r3,r3
   87a04:	28c7883a 	add	r3,r5,r3
   87a08:	193fff17 	ldw	r4,-4(r3)
   87a0c:	18ffff04 	addi	r3,r3,-4
   87a10:	2000041e 	bne	r4,zero,87a24 <__mdiff+0x140>
   87a14:	18ffff04 	addi	r3,r3,-4
   87a18:	19000017 	ldw	r4,0(r3)
   87a1c:	4a7fffc4 	addi	r9,r9,-1
   87a20:	203ffc26 	beq	r4,zero,87a14 <__mdiff+0x130>
   87a24:	12400415 	stw	r9,16(r2)
   87a28:	dfc00417 	ldw	ra,16(sp)
   87a2c:	dcc00317 	ldw	r19,12(sp)
   87a30:	dc800217 	ldw	r18,8(sp)
   87a34:	dc400117 	ldw	r17,4(sp)
   87a38:	dc000017 	ldw	r16,0(sp)
   87a3c:	dec00504 	addi	sp,sp,20
   87a40:	f800283a 	ret
   87a44:	8005883a 	mov	r2,r16
   87a48:	04c00044 	movi	r19,1
   87a4c:	8821883a 	mov	r16,r17
   87a50:	1023883a 	mov	r17,r2
   87a54:	003fb206 	br	87920 <__mdiff+0x3c>
   87a58:	9009883a 	mov	r4,r18
   87a5c:	000b883a 	mov	r5,zero
   87a60:	0086fe80 	call	86fe8 <_Balloc>
   87a64:	00c00044 	movi	r3,1
   87a68:	10c00415 	stw	r3,16(r2)
   87a6c:	10000515 	stw	zero,20(r2)
   87a70:	dfc00417 	ldw	ra,16(sp)
   87a74:	dcc00317 	ldw	r19,12(sp)
   87a78:	dc800217 	ldw	r18,8(sp)
   87a7c:	dc400117 	ldw	r17,4(sp)
   87a80:	dc000017 	ldw	r16,0(sp)
   87a84:	dec00504 	addi	sp,sp,20
   87a88:	f800283a 	ret

00087a8c <__ulp>:
   87a8c:	295ffc2c 	andhi	r5,r5,32752
   87a90:	00bf3034 	movhi	r2,64704
   87a94:	2887883a 	add	r3,r5,r2
   87a98:	00c0020e 	bge	zero,r3,87aa4 <__ulp+0x18>
   87a9c:	0005883a 	mov	r2,zero
   87aa0:	f800283a 	ret
   87aa4:	00c7c83a 	sub	r3,zero,r3
   87aa8:	1805d53a 	srai	r2,r3,20
   87aac:	00c004c4 	movi	r3,19
   87ab0:	18800a0e 	bge	r3,r2,87adc <__ulp+0x50>
   87ab4:	01000c84 	movi	r4,50
   87ab8:	0007883a 	mov	r3,zero
   87abc:	20800516 	blt	r4,r2,87ad4 <__ulp+0x48>
   87ac0:	01000cc4 	movi	r4,51
   87ac4:	2085c83a 	sub	r2,r4,r2
   87ac8:	01000044 	movi	r4,1
   87acc:	2084983a 	sll	r2,r4,r2
   87ad0:	f800283a 	ret
   87ad4:	00800044 	movi	r2,1
   87ad8:	f800283a 	ret
   87adc:	00c00234 	movhi	r3,8
   87ae0:	1887d83a 	sra	r3,r3,r2
   87ae4:	0005883a 	mov	r2,zero
   87ae8:	f800283a 	ret

00087aec <__b2d>:
   87aec:	defffa04 	addi	sp,sp,-24
   87af0:	dc000015 	stw	r16,0(sp)
   87af4:	24000417 	ldw	r16,16(r4)
   87af8:	dc400115 	stw	r17,4(sp)
   87afc:	dcc00315 	stw	r19,12(sp)
   87b00:	84000144 	addi	r16,r16,5
   87b04:	8421883a 	add	r16,r16,r16
   87b08:	8421883a 	add	r16,r16,r16
   87b0c:	2421883a 	add	r16,r4,r16
   87b10:	847fff17 	ldw	r17,-4(r16)
   87b14:	24c00504 	addi	r19,r4,20
   87b18:	dd000415 	stw	r20,16(sp)
   87b1c:	8809883a 	mov	r4,r17
   87b20:	dc800215 	stw	r18,8(sp)
   87b24:	2829883a 	mov	r20,r5
   87b28:	dfc00515 	stw	ra,20(sp)
   87b2c:	00872d00 	call	872d0 <__hi0bits>
   87b30:	00c00804 	movi	r3,32
   87b34:	1887c83a 	sub	r3,r3,r2
   87b38:	a0c00015 	stw	r3,0(r20)
   87b3c:	00c00284 	movi	r3,10
   87b40:	84bfff04 	addi	r18,r16,-4
   87b44:	18801216 	blt	r3,r2,87b90 <__b2d+0xa4>
   87b48:	010002c4 	movi	r4,11
   87b4c:	2089c83a 	sub	r4,r4,r2
   87b50:	8906d83a 	srl	r3,r17,r4
   87b54:	18cffc34 	orhi	r3,r3,16368
   87b58:	9c80322e 	bgeu	r19,r18,87c24 <__b2d+0x138>
   87b5c:	817ffe17 	ldw	r5,-8(r16)
   87b60:	2908d83a 	srl	r4,r5,r4
   87b64:	10800544 	addi	r2,r2,21
   87b68:	88a2983a 	sll	r17,r17,r2
   87b6c:	2444b03a 	or	r2,r4,r17
   87b70:	dfc00517 	ldw	ra,20(sp)
   87b74:	dd000417 	ldw	r20,16(sp)
   87b78:	dcc00317 	ldw	r19,12(sp)
   87b7c:	dc800217 	ldw	r18,8(sp)
   87b80:	dc400117 	ldw	r17,4(sp)
   87b84:	dc000017 	ldw	r16,0(sp)
   87b88:	dec00604 	addi	sp,sp,24
   87b8c:	f800283a 	ret
   87b90:	9c801636 	bltu	r19,r18,87bec <__b2d+0x100>
   87b94:	113ffd44 	addi	r4,r2,-11
   87b98:	000b883a 	mov	r5,zero
   87b9c:	20001726 	beq	r4,zero,87bfc <__b2d+0x110>
   87ba0:	00c00ac4 	movi	r3,43
   87ba4:	1885c83a 	sub	r2,r3,r2
   87ba8:	8906983a 	sll	r3,r17,r4
   87bac:	288cd83a 	srl	r6,r5,r2
   87bb0:	18cffc34 	orhi	r3,r3,16368
   87bb4:	1986b03a 	or	r3,r3,r6
   87bb8:	9c801c2e 	bgeu	r19,r18,87c2c <__b2d+0x140>
   87bbc:	91bfff17 	ldw	r6,-4(r18)
   87bc0:	3084d83a 	srl	r2,r6,r2
   87bc4:	2908983a 	sll	r4,r5,r4
   87bc8:	1104b03a 	or	r2,r2,r4
   87bcc:	dfc00517 	ldw	ra,20(sp)
   87bd0:	dd000417 	ldw	r20,16(sp)
   87bd4:	dcc00317 	ldw	r19,12(sp)
   87bd8:	dc800217 	ldw	r18,8(sp)
   87bdc:	dc400117 	ldw	r17,4(sp)
   87be0:	dc000017 	ldw	r16,0(sp)
   87be4:	dec00604 	addi	sp,sp,24
   87be8:	f800283a 	ret
   87bec:	113ffd44 	addi	r4,r2,-11
   87bf0:	84bffe04 	addi	r18,r16,-8
   87bf4:	817ffe17 	ldw	r5,-8(r16)
   87bf8:	203fe91e 	bne	r4,zero,87ba0 <__b2d+0xb4>
   87bfc:	88cffc34 	orhi	r3,r17,16368
   87c00:	2805883a 	mov	r2,r5
   87c04:	dfc00517 	ldw	ra,20(sp)
   87c08:	dd000417 	ldw	r20,16(sp)
   87c0c:	dcc00317 	ldw	r19,12(sp)
   87c10:	dc800217 	ldw	r18,8(sp)
   87c14:	dc400117 	ldw	r17,4(sp)
   87c18:	dc000017 	ldw	r16,0(sp)
   87c1c:	dec00604 	addi	sp,sp,24
   87c20:	f800283a 	ret
   87c24:	0009883a 	mov	r4,zero
   87c28:	003fce06 	br	87b64 <__b2d+0x78>
   87c2c:	0005883a 	mov	r2,zero
   87c30:	003fe406 	br	87bc4 <__b2d+0xd8>

00087c34 <__d2b>:
   87c34:	defff804 	addi	sp,sp,-32
   87c38:	dc400315 	stw	r17,12(sp)
   87c3c:	3023883a 	mov	r17,r6
   87c40:	dc800415 	stw	r18,16(sp)
   87c44:	8824907a 	slli	r18,r17,1
   87c48:	dcc00515 	stw	r19,20(sp)
   87c4c:	2827883a 	mov	r19,r5
   87c50:	9024d57a 	srli	r18,r18,21
   87c54:	01400044 	movi	r5,1
   87c58:	dd000615 	stw	r20,24(sp)
   87c5c:	dc000215 	stw	r16,8(sp)
   87c60:	dfc00715 	stw	ra,28(sp)
   87c64:	3829883a 	mov	r20,r7
   87c68:	0086fe80 	call	86fe8 <_Balloc>
   87c6c:	1021883a 	mov	r16,r2
   87c70:	00800434 	movhi	r2,16
   87c74:	10bfffc4 	addi	r2,r2,-1
   87c78:	88a2703a 	and	r17,r17,r2
   87c7c:	90000126 	beq	r18,zero,87c84 <__d2b+0x50>
   87c80:	8c400434 	orhi	r17,r17,16
   87c84:	dc400015 	stw	r17,0(sp)
   87c88:	98002226 	beq	r19,zero,87d14 <__d2b+0xe0>
   87c8c:	d9000104 	addi	r4,sp,4
   87c90:	dcc00115 	stw	r19,4(sp)
   87c94:	00873380 	call	87338 <__lo0bits>
   87c98:	d8c00017 	ldw	r3,0(sp)
   87c9c:	10002d1e 	bne	r2,zero,87d54 <__d2b+0x120>
   87ca0:	d9000117 	ldw	r4,4(sp)
   87ca4:	81000515 	stw	r4,20(r16)
   87ca8:	1823003a 	cmpeq	r17,r3,zero
   87cac:	01000084 	movi	r4,2
   87cb0:	2463c83a 	sub	r17,r4,r17
   87cb4:	80c00615 	stw	r3,24(r16)
   87cb8:	84400415 	stw	r17,16(r16)
   87cbc:	90001d1e 	bne	r18,zero,87d34 <__d2b+0x100>
   87cc0:	88c00104 	addi	r3,r17,4
   87cc4:	18c7883a 	add	r3,r3,r3
   87cc8:	18c7883a 	add	r3,r3,r3
   87ccc:	80c7883a 	add	r3,r16,r3
   87cd0:	19000017 	ldw	r4,0(r3)
   87cd4:	10bef384 	addi	r2,r2,-1074
   87cd8:	a0800015 	stw	r2,0(r20)
   87cdc:	00872d00 	call	872d0 <__hi0bits>
   87ce0:	8822917a 	slli	r17,r17,5
   87ce4:	d8c00817 	ldw	r3,32(sp)
   87ce8:	8885c83a 	sub	r2,r17,r2
   87cec:	18800015 	stw	r2,0(r3)
   87cf0:	8005883a 	mov	r2,r16
   87cf4:	dfc00717 	ldw	ra,28(sp)
   87cf8:	dd000617 	ldw	r20,24(sp)
   87cfc:	dcc00517 	ldw	r19,20(sp)
   87d00:	dc800417 	ldw	r18,16(sp)
   87d04:	dc400317 	ldw	r17,12(sp)
   87d08:	dc000217 	ldw	r16,8(sp)
   87d0c:	dec00804 	addi	sp,sp,32
   87d10:	f800283a 	ret
   87d14:	d809883a 	mov	r4,sp
   87d18:	00873380 	call	87338 <__lo0bits>
   87d1c:	d8c00017 	ldw	r3,0(sp)
   87d20:	04400044 	movi	r17,1
   87d24:	84400415 	stw	r17,16(r16)
   87d28:	80c00515 	stw	r3,20(r16)
   87d2c:	10800804 	addi	r2,r2,32
   87d30:	903fe326 	beq	r18,zero,87cc0 <__d2b+0x8c>
   87d34:	00c00d44 	movi	r3,53
   87d38:	94bef344 	addi	r18,r18,-1075
   87d3c:	90a5883a 	add	r18,r18,r2
   87d40:	1885c83a 	sub	r2,r3,r2
   87d44:	d8c00817 	ldw	r3,32(sp)
   87d48:	a4800015 	stw	r18,0(r20)
   87d4c:	18800015 	stw	r2,0(r3)
   87d50:	003fe706 	br	87cf0 <__d2b+0xbc>
   87d54:	01000804 	movi	r4,32
   87d58:	2089c83a 	sub	r4,r4,r2
   87d5c:	1908983a 	sll	r4,r3,r4
   87d60:	d9400117 	ldw	r5,4(sp)
   87d64:	1886d83a 	srl	r3,r3,r2
   87d68:	2148b03a 	or	r4,r4,r5
   87d6c:	81000515 	stw	r4,20(r16)
   87d70:	d8c00015 	stw	r3,0(sp)
   87d74:	003fcc06 	br	87ca8 <__d2b+0x74>

00087d78 <__ratio>:
   87d78:	defff904 	addi	sp,sp,-28
   87d7c:	dc400315 	stw	r17,12(sp)
   87d80:	2823883a 	mov	r17,r5
   87d84:	d9400104 	addi	r5,sp,4
   87d88:	dfc00615 	stw	ra,24(sp)
   87d8c:	dcc00515 	stw	r19,20(sp)
   87d90:	dc800415 	stw	r18,16(sp)
   87d94:	2027883a 	mov	r19,r4
   87d98:	dc000215 	stw	r16,8(sp)
   87d9c:	0087aec0 	call	87aec <__b2d>
   87da0:	8809883a 	mov	r4,r17
   87da4:	d80b883a 	mov	r5,sp
   87da8:	1025883a 	mov	r18,r2
   87dac:	1821883a 	mov	r16,r3
   87db0:	0087aec0 	call	87aec <__b2d>
   87db4:	99400417 	ldw	r5,16(r19)
   87db8:	89000417 	ldw	r4,16(r17)
   87dbc:	d9800117 	ldw	r6,4(sp)
   87dc0:	2909c83a 	sub	r4,r5,r4
   87dc4:	d9400017 	ldw	r5,0(sp)
   87dc8:	2008917a 	slli	r4,r4,5
   87dcc:	314bc83a 	sub	r5,r6,r5
   87dd0:	290b883a 	add	r5,r5,r4
   87dd4:	01400e0e 	bge	zero,r5,87e10 <__ratio+0x98>
   87dd8:	280a953a 	slli	r5,r5,20
   87ddc:	2c21883a 	add	r16,r5,r16
   87de0:	9009883a 	mov	r4,r18
   87de4:	800b883a 	mov	r5,r16
   87de8:	100d883a 	mov	r6,r2
   87dec:	180f883a 	mov	r7,r3
   87df0:	008a25c0 	call	8a25c <__divdf3>
   87df4:	dfc00617 	ldw	ra,24(sp)
   87df8:	dcc00517 	ldw	r19,20(sp)
   87dfc:	dc800417 	ldw	r18,16(sp)
   87e00:	dc400317 	ldw	r17,12(sp)
   87e04:	dc000217 	ldw	r16,8(sp)
   87e08:	dec00704 	addi	sp,sp,28
   87e0c:	f800283a 	ret
   87e10:	280a953a 	slli	r5,r5,20
   87e14:	1947c83a 	sub	r3,r3,r5
   87e18:	003ff106 	br	87de0 <__ratio+0x68>

00087e1c <_mprec_log10>:
   87e1c:	defffe04 	addi	sp,sp,-8
   87e20:	dc000015 	stw	r16,0(sp)
   87e24:	dfc00115 	stw	ra,4(sp)
   87e28:	008005c4 	movi	r2,23
   87e2c:	2021883a 	mov	r16,r4
   87e30:	11000d0e 	bge	r2,r4,87e68 <_mprec_log10+0x4c>
   87e34:	0005883a 	mov	r2,zero
   87e38:	00cffc34 	movhi	r3,16368
   87e3c:	843fffc4 	addi	r16,r16,-1
   87e40:	1009883a 	mov	r4,r2
   87e44:	180b883a 	mov	r5,r3
   87e48:	000d883a 	mov	r6,zero
   87e4c:	01d00934 	movhi	r7,16420
   87e50:	0089f780 	call	89f78 <__muldf3>
   87e54:	803ff91e 	bne	r16,zero,87e3c <_mprec_log10+0x20>
   87e58:	dfc00117 	ldw	ra,4(sp)
   87e5c:	dc000017 	ldw	r16,0(sp)
   87e60:	dec00204 	addi	sp,sp,8
   87e64:	f800283a 	ret
   87e68:	202090fa 	slli	r16,r4,3
   87e6c:	00800274 	movhi	r2,9
   87e70:	10b8a304 	addi	r2,r2,-7540
   87e74:	1421883a 	add	r16,r2,r16
   87e78:	80800017 	ldw	r2,0(r16)
   87e7c:	80c00117 	ldw	r3,4(r16)
   87e80:	dfc00117 	ldw	ra,4(sp)
   87e84:	dc000017 	ldw	r16,0(sp)
   87e88:	dec00204 	addi	sp,sp,8
   87e8c:	f800283a 	ret

00087e90 <__copybits>:
   87e90:	297fffc4 	addi	r5,r5,-1
   87e94:	31c00417 	ldw	r7,16(r6)
   87e98:	2811d17a 	srai	r8,r5,5
   87e9c:	30800504 	addi	r2,r6,20
   87ea0:	39c00144 	addi	r7,r7,5
   87ea4:	42000044 	addi	r8,r8,1
   87ea8:	39cf883a 	add	r7,r7,r7
   87eac:	4211883a 	add	r8,r8,r8
   87eb0:	39cf883a 	add	r7,r7,r7
   87eb4:	4211883a 	add	r8,r8,r8
   87eb8:	31cf883a 	add	r7,r6,r7
   87ebc:	2211883a 	add	r8,r4,r8
   87ec0:	11c00d2e 	bgeu	r2,r7,87ef8 <__copybits+0x68>
   87ec4:	2007883a 	mov	r3,r4
   87ec8:	11400017 	ldw	r5,0(r2)
   87ecc:	18c00104 	addi	r3,r3,4
   87ed0:	10800104 	addi	r2,r2,4
   87ed4:	197fff15 	stw	r5,-4(r3)
   87ed8:	11fffb36 	bltu	r2,r7,87ec8 <__copybits+0x38>
   87edc:	3985c83a 	sub	r2,r7,r6
   87ee0:	10bffac4 	addi	r2,r2,-21
   87ee4:	1004d0ba 	srli	r2,r2,2
   87ee8:	10800044 	addi	r2,r2,1
   87eec:	1085883a 	add	r2,r2,r2
   87ef0:	1085883a 	add	r2,r2,r2
   87ef4:	2089883a 	add	r4,r4,r2
   87ef8:	2200032e 	bgeu	r4,r8,87f08 <__copybits+0x78>
   87efc:	20000015 	stw	zero,0(r4)
   87f00:	21000104 	addi	r4,r4,4
   87f04:	223ffd36 	bltu	r4,r8,87efc <__copybits+0x6c>
   87f08:	f800283a 	ret

00087f0c <__any_on>:
   87f0c:	21800417 	ldw	r6,16(r4)
   87f10:	2805d17a 	srai	r2,r5,5
   87f14:	20c00504 	addi	r3,r4,20
   87f18:	30800f0e 	bge	r6,r2,87f58 <__any_on+0x4c>
   87f1c:	3005883a 	mov	r2,r6
   87f20:	10800144 	addi	r2,r2,5
   87f24:	1085883a 	add	r2,r2,r2
   87f28:	1085883a 	add	r2,r2,r2
   87f2c:	2089883a 	add	r4,r4,r2
   87f30:	1900152e 	bgeu	r3,r4,87f88 <__any_on+0x7c>
   87f34:	20bfff17 	ldw	r2,-4(r4)
   87f38:	213fff04 	addi	r4,r4,-4
   87f3c:	1000041e 	bne	r2,zero,87f50 <__any_on+0x44>
   87f40:	1900112e 	bgeu	r3,r4,87f88 <__any_on+0x7c>
   87f44:	213fff04 	addi	r4,r4,-4
   87f48:	20800017 	ldw	r2,0(r4)
   87f4c:	103ffc26 	beq	r2,zero,87f40 <__any_on+0x34>
   87f50:	00800044 	movi	r2,1
   87f54:	f800283a 	ret
   87f58:	11bff10e 	bge	r2,r6,87f20 <__any_on+0x14>
   87f5c:	294007cc 	andi	r5,r5,31
   87f60:	283fef26 	beq	r5,zero,87f20 <__any_on+0x14>
   87f64:	11800144 	addi	r6,r2,5
   87f68:	318d883a 	add	r6,r6,r6
   87f6c:	318d883a 	add	r6,r6,r6
   87f70:	218d883a 	add	r6,r4,r6
   87f74:	31800017 	ldw	r6,0(r6)
   87f78:	314ed83a 	srl	r7,r6,r5
   87f7c:	394a983a 	sll	r5,r7,r5
   87f80:	29bff31e 	bne	r5,r6,87f50 <__any_on+0x44>
   87f84:	003fe606 	br	87f20 <__any_on+0x14>
   87f88:	0005883a 	mov	r2,zero
   87f8c:	f800283a 	ret

00087f90 <_putc_r>:
   87f90:	defffc04 	addi	sp,sp,-16
   87f94:	dc000215 	stw	r16,8(sp)
   87f98:	dfc00315 	stw	ra,12(sp)
   87f9c:	2021883a 	mov	r16,r4
   87fa0:	20000226 	beq	r4,zero,87fac <_putc_r+0x1c>
   87fa4:	20800e17 	ldw	r2,56(r4)
   87fa8:	10001d26 	beq	r2,zero,88020 <_putc_r+0x90>
   87fac:	30800217 	ldw	r2,8(r6)
   87fb0:	10bfffc4 	addi	r2,r2,-1
   87fb4:	30800215 	stw	r2,8(r6)
   87fb8:	10000a16 	blt	r2,zero,87fe4 <_putc_r+0x54>
   87fbc:	30800017 	ldw	r2,0(r6)
   87fc0:	11400005 	stb	r5,0(r2)
   87fc4:	30800017 	ldw	r2,0(r6)
   87fc8:	10c00044 	addi	r3,r2,1
   87fcc:	10800003 	ldbu	r2,0(r2)
   87fd0:	30c00015 	stw	r3,0(r6)
   87fd4:	dfc00317 	ldw	ra,12(sp)
   87fd8:	dc000217 	ldw	r16,8(sp)
   87fdc:	dec00404 	addi	sp,sp,16
   87fe0:	f800283a 	ret
   87fe4:	30c00617 	ldw	r3,24(r6)
   87fe8:	10c01316 	blt	r2,r3,88038 <_putc_r+0xa8>
   87fec:	30800017 	ldw	r2,0(r6)
   87ff0:	01000284 	movi	r4,10
   87ff4:	11400005 	stb	r5,0(r2)
   87ff8:	30c00017 	ldw	r3,0(r6)
   87ffc:	19400003 	ldbu	r5,0(r3)
   88000:	29000d26 	beq	r5,r4,88038 <_putc_r+0xa8>
   88004:	18c00044 	addi	r3,r3,1
   88008:	2805883a 	mov	r2,r5
   8800c:	30c00015 	stw	r3,0(r6)
   88010:	dfc00317 	ldw	ra,12(sp)
   88014:	dc000217 	ldw	r16,8(sp)
   88018:	dec00404 	addi	sp,sp,16
   8801c:	f800283a 	ret
   88020:	d9400015 	stw	r5,0(sp)
   88024:	d9800115 	stw	r6,4(sp)
   88028:	008564c0 	call	8564c <__sinit>
   8802c:	d9800117 	ldw	r6,4(sp)
   88030:	d9400017 	ldw	r5,0(sp)
   88034:	003fdd06 	br	87fac <_putc_r+0x1c>
   88038:	8009883a 	mov	r4,r16
   8803c:	dfc00317 	ldw	ra,12(sp)
   88040:	dc000217 	ldw	r16,8(sp)
   88044:	dec00404 	addi	sp,sp,16
   88048:	00889e41 	jmpi	889e4 <__swbuf_r>

0008804c <putc>:
   8804c:	defffc04 	addi	sp,sp,-16
   88050:	dc400115 	stw	r17,4(sp)
   88054:	04400274 	movhi	r17,9
   88058:	8c7fef04 	addi	r17,r17,-68
   8805c:	88800017 	ldw	r2,0(r17)
   88060:	dc800215 	stw	r18,8(sp)
   88064:	dc000015 	stw	r16,0(sp)
   88068:	dfc00315 	stw	ra,12(sp)
   8806c:	2025883a 	mov	r18,r4
   88070:	2821883a 	mov	r16,r5
   88074:	10000226 	beq	r2,zero,88080 <putc+0x34>
   88078:	10c00e17 	ldw	r3,56(r2)
   8807c:	18002126 	beq	r3,zero,88104 <putc+0xb8>
   88080:	80800217 	ldw	r2,8(r16)
   88084:	10bfffc4 	addi	r2,r2,-1
   88088:	80800215 	stw	r2,8(r16)
   8808c:	10000c16 	blt	r2,zero,880c0 <putc+0x74>
   88090:	80800017 	ldw	r2,0(r16)
   88094:	14800005 	stb	r18,0(r2)
   88098:	80800017 	ldw	r2,0(r16)
   8809c:	10c00044 	addi	r3,r2,1
   880a0:	10800003 	ldbu	r2,0(r2)
   880a4:	80c00015 	stw	r3,0(r16)
   880a8:	dfc00317 	ldw	ra,12(sp)
   880ac:	dc800217 	ldw	r18,8(sp)
   880b0:	dc400117 	ldw	r17,4(sp)
   880b4:	dc000017 	ldw	r16,0(sp)
   880b8:	dec00404 	addi	sp,sp,16
   880bc:	f800283a 	ret
   880c0:	80c00617 	ldw	r3,24(r16)
   880c4:	10c01216 	blt	r2,r3,88110 <putc+0xc4>
   880c8:	80800017 	ldw	r2,0(r16)
   880cc:	01000284 	movi	r4,10
   880d0:	14800005 	stb	r18,0(r2)
   880d4:	80c00017 	ldw	r3,0(r16)
   880d8:	19400003 	ldbu	r5,0(r3)
   880dc:	29001526 	beq	r5,r4,88134 <putc+0xe8>
   880e0:	18c00044 	addi	r3,r3,1
   880e4:	2805883a 	mov	r2,r5
   880e8:	80c00015 	stw	r3,0(r16)
   880ec:	dfc00317 	ldw	ra,12(sp)
   880f0:	dc800217 	ldw	r18,8(sp)
   880f4:	dc400117 	ldw	r17,4(sp)
   880f8:	dc000017 	ldw	r16,0(sp)
   880fc:	dec00404 	addi	sp,sp,16
   88100:	f800283a 	ret
   88104:	1009883a 	mov	r4,r2
   88108:	008564c0 	call	8564c <__sinit>
   8810c:	003fdc06 	br	88080 <putc+0x34>
   88110:	89000017 	ldw	r4,0(r17)
   88114:	900b883a 	mov	r5,r18
   88118:	800d883a 	mov	r6,r16
   8811c:	dfc00317 	ldw	ra,12(sp)
   88120:	dc800217 	ldw	r18,8(sp)
   88124:	dc400117 	ldw	r17,4(sp)
   88128:	dc000017 	ldw	r16,0(sp)
   8812c:	dec00404 	addi	sp,sp,16
   88130:	00889e41 	jmpi	889e4 <__swbuf_r>
   88134:	89000017 	ldw	r4,0(r17)
   88138:	003ff706 	br	88118 <putc+0xcc>

0008813c <_realloc_r>:
   8813c:	defff504 	addi	sp,sp,-44
   88140:	dd400615 	stw	r21,24(sp)
   88144:	dc800315 	stw	r18,12(sp)
   88148:	dc000115 	stw	r16,4(sp)
   8814c:	dfc00a15 	stw	ra,40(sp)
   88150:	df000915 	stw	fp,36(sp)
   88154:	ddc00815 	stw	r23,32(sp)
   88158:	dd800715 	stw	r22,28(sp)
   8815c:	dd000515 	stw	r20,20(sp)
   88160:	dcc00415 	stw	r19,16(sp)
   88164:	dc400215 	stw	r17,8(sp)
   88168:	2821883a 	mov	r16,r5
   8816c:	202b883a 	mov	r21,r4
   88170:	3025883a 	mov	r18,r6
   88174:	28009626 	beq	r5,zero,883d0 <_realloc_r+0x294>
   88178:	008b3d40 	call	8b3d4 <__malloc_lock>
   8817c:	80bfff17 	ldw	r2,-4(r16)
   88180:	04ffff04 	movi	r19,-4
   88184:	90c002c4 	addi	r3,r18,11
   88188:	01000584 	movi	r4,22
   8818c:	85bffe04 	addi	r22,r16,-8
   88190:	14e6703a 	and	r19,r2,r19
   88194:	20c0372e 	bgeu	r4,r3,88274 <_realloc_r+0x138>
   88198:	047ffe04 	movi	r17,-8
   8819c:	1c62703a 	and	r17,r3,r17
   881a0:	8807883a 	mov	r3,r17
   881a4:	88005a16 	blt	r17,zero,88310 <_realloc_r+0x1d4>
   881a8:	8c805936 	bltu	r17,r18,88310 <_realloc_r+0x1d4>
   881ac:	98c0340e 	bge	r19,r3,88280 <_realloc_r+0x144>
   881b0:	07000274 	movhi	fp,9
   881b4:	e73a3904 	addi	fp,fp,-5916
   881b8:	e1400217 	ldw	r5,8(fp)
   881bc:	b4c9883a 	add	r4,r22,r19
   881c0:	29009026 	beq	r5,r4,88404 <_realloc_r+0x2c8>
   881c4:	21800117 	ldw	r6,4(r4)
   881c8:	01ffff84 	movi	r7,-2
   881cc:	31ce703a 	and	r7,r6,r7
   881d0:	21cf883a 	add	r7,r4,r7
   881d4:	39c00117 	ldw	r7,4(r7)
   881d8:	39c0004c 	andi	r7,r7,1
   881dc:	38004326 	beq	r7,zero,882ec <_realloc_r+0x1b0>
   881e0:	000d883a 	mov	r6,zero
   881e4:	0009883a 	mov	r4,zero
   881e8:	1080004c 	andi	r2,r2,1
   881ec:	10005a1e 	bne	r2,zero,88358 <_realloc_r+0x21c>
   881f0:	85fffe17 	ldw	r23,-8(r16)
   881f4:	00bfff04 	movi	r2,-4
   881f8:	b5efc83a 	sub	r23,r22,r23
   881fc:	b9c00117 	ldw	r7,4(r23)
   88200:	388e703a 	and	r7,r7,r2
   88204:	3ccf883a 	add	r7,r7,r19
   88208:	20005226 	beq	r4,zero,88354 <_realloc_r+0x218>
   8820c:	31e9883a 	add	r20,r6,r7
   88210:	2140c726 	beq	r4,r5,88530 <_realloc_r+0x3f4>
   88214:	a0c04f16 	blt	r20,r3,88354 <_realloc_r+0x218>
   88218:	20800317 	ldw	r2,12(r4)
   8821c:	20c00217 	ldw	r3,8(r4)
   88220:	99bfff04 	addi	r6,r19,-4
   88224:	01000904 	movi	r4,36
   88228:	18800315 	stw	r2,12(r3)
   8822c:	10c00215 	stw	r3,8(r2)
   88230:	b8c00217 	ldw	r3,8(r23)
   88234:	b8800317 	ldw	r2,12(r23)
   88238:	bc800204 	addi	r18,r23,8
   8823c:	18800315 	stw	r2,12(r3)
   88240:	10c00215 	stw	r3,8(r2)
   88244:	2180ed36 	bltu	r4,r6,885fc <_realloc_r+0x4c0>
   88248:	008004c4 	movi	r2,19
   8824c:	11809b2e 	bgeu	r2,r6,884bc <_realloc_r+0x380>
   88250:	80800017 	ldw	r2,0(r16)
   88254:	b8800215 	stw	r2,8(r23)
   88258:	80800117 	ldw	r2,4(r16)
   8825c:	b8800315 	stw	r2,12(r23)
   88260:	008006c4 	movi	r2,27
   88264:	1180f936 	bltu	r2,r6,8864c <_realloc_r+0x510>
   88268:	b8800404 	addi	r2,r23,16
   8826c:	80c00204 	addi	r3,r16,8
   88270:	00009406 	br	884c4 <_realloc_r+0x388>
   88274:	00c00404 	movi	r3,16
   88278:	1823883a 	mov	r17,r3
   8827c:	003fca06 	br	881a8 <_realloc_r+0x6c>
   88280:	9829883a 	mov	r20,r19
   88284:	a447c83a 	sub	r3,r20,r17
   88288:	010003c4 	movi	r4,15
   8828c:	1080004c 	andi	r2,r2,1
   88290:	20c02336 	bltu	r4,r3,88320 <_realloc_r+0x1e4>
   88294:	1504b03a 	or	r2,r2,r20
   88298:	b0800115 	stw	r2,4(r22)
   8829c:	b52d883a 	add	r22,r22,r20
   882a0:	b0800117 	ldw	r2,4(r22)
   882a4:	10800054 	ori	r2,r2,1
   882a8:	b0800115 	stw	r2,4(r22)
   882ac:	a809883a 	mov	r4,r21
   882b0:	008b3f40 	call	8b3f4 <__malloc_unlock>
   882b4:	8025883a 	mov	r18,r16
   882b8:	9005883a 	mov	r2,r18
   882bc:	dfc00a17 	ldw	ra,40(sp)
   882c0:	df000917 	ldw	fp,36(sp)
   882c4:	ddc00817 	ldw	r23,32(sp)
   882c8:	dd800717 	ldw	r22,28(sp)
   882cc:	dd400617 	ldw	r21,24(sp)
   882d0:	dd000517 	ldw	r20,20(sp)
   882d4:	dcc00417 	ldw	r19,16(sp)
   882d8:	dc800317 	ldw	r18,12(sp)
   882dc:	dc400217 	ldw	r17,8(sp)
   882e0:	dc000117 	ldw	r16,4(sp)
   882e4:	dec00b04 	addi	sp,sp,44
   882e8:	f800283a 	ret
   882ec:	01ffff04 	movi	r7,-4
   882f0:	31cc703a 	and	r6,r6,r7
   882f4:	34e9883a 	add	r20,r6,r19
   882f8:	a0ffbb16 	blt	r20,r3,881e8 <_realloc_r+0xac>
   882fc:	20c00317 	ldw	r3,12(r4)
   88300:	21000217 	ldw	r4,8(r4)
   88304:	20c00315 	stw	r3,12(r4)
   88308:	19000215 	stw	r4,8(r3)
   8830c:	003fdd06 	br	88284 <_realloc_r+0x148>
   88310:	00800304 	movi	r2,12
   88314:	a8800015 	stw	r2,0(r21)
   88318:	0025883a 	mov	r18,zero
   8831c:	003fe606 	br	882b8 <_realloc_r+0x17c>
   88320:	1444b03a 	or	r2,r2,r17
   88324:	b0800115 	stw	r2,4(r22)
   88328:	b44b883a 	add	r5,r22,r17
   8832c:	18800054 	ori	r2,r3,1
   88330:	28800115 	stw	r2,4(r5)
   88334:	28c7883a 	add	r3,r5,r3
   88338:	18800117 	ldw	r2,4(r3)
   8833c:	a809883a 	mov	r4,r21
   88340:	29400204 	addi	r5,r5,8
   88344:	10800054 	ori	r2,r2,1
   88348:	18800115 	stw	r2,4(r3)
   8834c:	00859d00 	call	859d0 <_free_r>
   88350:	003fd606 	br	882ac <_realloc_r+0x170>
   88354:	38c0330e 	bge	r7,r3,88424 <_realloc_r+0x2e8>
   88358:	900b883a 	mov	r5,r18
   8835c:	a809883a 	mov	r4,r21
   88360:	00865680 	call	86568 <_malloc_r>
   88364:	1025883a 	mov	r18,r2
   88368:	10001626 	beq	r2,zero,883c4 <_realloc_r+0x288>
   8836c:	80bfff17 	ldw	r2,-4(r16)
   88370:	00ffff84 	movi	r3,-2
   88374:	913ffe04 	addi	r4,r18,-8
   88378:	10c6703a 	and	r3,r2,r3
   8837c:	b0c7883a 	add	r3,r22,r3
   88380:	20c09926 	beq	r4,r3,885e8 <_realloc_r+0x4ac>
   88384:	99bfff04 	addi	r6,r19,-4
   88388:	00800904 	movi	r2,36
   8838c:	11806436 	bltu	r2,r6,88520 <_realloc_r+0x3e4>
   88390:	00c004c4 	movi	r3,19
   88394:	19804036 	bltu	r3,r6,88498 <_realloc_r+0x35c>
   88398:	9005883a 	mov	r2,r18
   8839c:	8007883a 	mov	r3,r16
   883a0:	19000017 	ldw	r4,0(r3)
   883a4:	11000015 	stw	r4,0(r2)
   883a8:	19000117 	ldw	r4,4(r3)
   883ac:	11000115 	stw	r4,4(r2)
   883b0:	18c00217 	ldw	r3,8(r3)
   883b4:	10c00215 	stw	r3,8(r2)
   883b8:	a809883a 	mov	r4,r21
   883bc:	800b883a 	mov	r5,r16
   883c0:	00859d00 	call	859d0 <_free_r>
   883c4:	a809883a 	mov	r4,r21
   883c8:	008b3f40 	call	8b3f4 <__malloc_unlock>
   883cc:	003fba06 	br	882b8 <_realloc_r+0x17c>
   883d0:	300b883a 	mov	r5,r6
   883d4:	dfc00a17 	ldw	ra,40(sp)
   883d8:	df000917 	ldw	fp,36(sp)
   883dc:	ddc00817 	ldw	r23,32(sp)
   883e0:	dd800717 	ldw	r22,28(sp)
   883e4:	dd400617 	ldw	r21,24(sp)
   883e8:	dd000517 	ldw	r20,20(sp)
   883ec:	dcc00417 	ldw	r19,16(sp)
   883f0:	dc800317 	ldw	r18,12(sp)
   883f4:	dc400217 	ldw	r17,8(sp)
   883f8:	dc000117 	ldw	r16,4(sp)
   883fc:	dec00b04 	addi	sp,sp,44
   88400:	00865681 	jmpi	86568 <_malloc_r>
   88404:	29800117 	ldw	r6,4(r5)
   88408:	013fff04 	movi	r4,-4
   8840c:	89c00404 	addi	r7,r17,16
   88410:	310c703a 	and	r6,r6,r4
   88414:	34c9883a 	add	r4,r6,r19
   88418:	21c0340e 	bge	r4,r7,884ec <_realloc_r+0x3b0>
   8841c:	2809883a 	mov	r4,r5
   88420:	003f7106 	br	881e8 <_realloc_r+0xac>
   88424:	b8800317 	ldw	r2,12(r23)
   88428:	b8c00217 	ldw	r3,8(r23)
   8842c:	99bfff04 	addi	r6,r19,-4
   88430:	01000904 	movi	r4,36
   88434:	18800315 	stw	r2,12(r3)
   88438:	10c00215 	stw	r3,8(r2)
   8843c:	bc800204 	addi	r18,r23,8
   88440:	21807836 	bltu	r4,r6,88624 <_realloc_r+0x4e8>
   88444:	008004c4 	movi	r2,19
   88448:	1180732e 	bgeu	r2,r6,88618 <_realloc_r+0x4dc>
   8844c:	80800017 	ldw	r2,0(r16)
   88450:	b8800215 	stw	r2,8(r23)
   88454:	80800117 	ldw	r2,4(r16)
   88458:	b8800315 	stw	r2,12(r23)
   8845c:	008006c4 	movi	r2,27
   88460:	11808936 	bltu	r2,r6,88688 <_realloc_r+0x54c>
   88464:	b8800404 	addi	r2,r23,16
   88468:	80c00204 	addi	r3,r16,8
   8846c:	19000017 	ldw	r4,0(r3)
   88470:	9021883a 	mov	r16,r18
   88474:	3829883a 	mov	r20,r7
   88478:	11000015 	stw	r4,0(r2)
   8847c:	19000117 	ldw	r4,4(r3)
   88480:	b82d883a 	mov	r22,r23
   88484:	11000115 	stw	r4,4(r2)
   88488:	18c00217 	ldw	r3,8(r3)
   8848c:	10c00215 	stw	r3,8(r2)
   88490:	b8800117 	ldw	r2,4(r23)
   88494:	003f7b06 	br	88284 <_realloc_r+0x148>
   88498:	80c00017 	ldw	r3,0(r16)
   8849c:	90c00015 	stw	r3,0(r18)
   884a0:	80c00117 	ldw	r3,4(r16)
   884a4:	90c00115 	stw	r3,4(r18)
   884a8:	00c006c4 	movi	r3,27
   884ac:	19804636 	bltu	r3,r6,885c8 <_realloc_r+0x48c>
   884b0:	90800204 	addi	r2,r18,8
   884b4:	80c00204 	addi	r3,r16,8
   884b8:	003fb906 	br	883a0 <_realloc_r+0x264>
   884bc:	9005883a 	mov	r2,r18
   884c0:	8007883a 	mov	r3,r16
   884c4:	19000017 	ldw	r4,0(r3)
   884c8:	9021883a 	mov	r16,r18
   884cc:	b82d883a 	mov	r22,r23
   884d0:	11000015 	stw	r4,0(r2)
   884d4:	19000117 	ldw	r4,4(r3)
   884d8:	11000115 	stw	r4,4(r2)
   884dc:	18c00217 	ldw	r3,8(r3)
   884e0:	10c00215 	stw	r3,8(r2)
   884e4:	b8800117 	ldw	r2,4(r23)
   884e8:	003f6606 	br	88284 <_realloc_r+0x148>
   884ec:	2445c83a 	sub	r2,r4,r17
   884f0:	b46d883a 	add	r22,r22,r17
   884f4:	10800054 	ori	r2,r2,1
   884f8:	b0800115 	stw	r2,4(r22)
   884fc:	80bfff17 	ldw	r2,-4(r16)
   88500:	a809883a 	mov	r4,r21
   88504:	e5800215 	stw	r22,8(fp)
   88508:	1080004c 	andi	r2,r2,1
   8850c:	88a2b03a 	or	r17,r17,r2
   88510:	847fff15 	stw	r17,-4(r16)
   88514:	008b3f40 	call	8b3f4 <__malloc_unlock>
   88518:	8025883a 	mov	r18,r16
   8851c:	003f6606 	br	882b8 <_realloc_r+0x17c>
   88520:	9009883a 	mov	r4,r18
   88524:	800b883a 	mov	r5,r16
   88528:	0086de40 	call	86de4 <memmove>
   8852c:	003fa206 	br	883b8 <_realloc_r+0x27c>
   88530:	88800404 	addi	r2,r17,16
   88534:	a0bf8716 	blt	r20,r2,88354 <_realloc_r+0x218>
   88538:	b8800317 	ldw	r2,12(r23)
   8853c:	b8c00217 	ldw	r3,8(r23)
   88540:	99bfff04 	addi	r6,r19,-4
   88544:	01000904 	movi	r4,36
   88548:	18800315 	stw	r2,12(r3)
   8854c:	10c00215 	stw	r3,8(r2)
   88550:	bc800204 	addi	r18,r23,8
   88554:	21806536 	bltu	r4,r6,886ec <_realloc_r+0x5b0>
   88558:	008004c4 	movi	r2,19
   8855c:	1180592e 	bgeu	r2,r6,886c4 <_realloc_r+0x588>
   88560:	80800017 	ldw	r2,0(r16)
   88564:	b8800215 	stw	r2,8(r23)
   88568:	80800117 	ldw	r2,4(r16)
   8856c:	b8800315 	stw	r2,12(r23)
   88570:	008006c4 	movi	r2,27
   88574:	11806136 	bltu	r2,r6,886fc <_realloc_r+0x5c0>
   88578:	b8800404 	addi	r2,r23,16
   8857c:	80c00204 	addi	r3,r16,8
   88580:	19000017 	ldw	r4,0(r3)
   88584:	11000015 	stw	r4,0(r2)
   88588:	19000117 	ldw	r4,4(r3)
   8858c:	11000115 	stw	r4,4(r2)
   88590:	18c00217 	ldw	r3,8(r3)
   88594:	10c00215 	stw	r3,8(r2)
   88598:	a447c83a 	sub	r3,r20,r17
   8859c:	bc45883a 	add	r2,r23,r17
   885a0:	18c00054 	ori	r3,r3,1
   885a4:	10c00115 	stw	r3,4(r2)
   885a8:	b8c00117 	ldw	r3,4(r23)
   885ac:	e0800215 	stw	r2,8(fp)
   885b0:	a809883a 	mov	r4,r21
   885b4:	1880004c 	andi	r2,r3,1
   885b8:	88a2b03a 	or	r17,r17,r2
   885bc:	bc400115 	stw	r17,4(r23)
   885c0:	008b3f40 	call	8b3f4 <__malloc_unlock>
   885c4:	003f3c06 	br	882b8 <_realloc_r+0x17c>
   885c8:	80c00217 	ldw	r3,8(r16)
   885cc:	90c00215 	stw	r3,8(r18)
   885d0:	80c00317 	ldw	r3,12(r16)
   885d4:	90c00315 	stw	r3,12(r18)
   885d8:	30802426 	beq	r6,r2,8866c <_realloc_r+0x530>
   885dc:	90800404 	addi	r2,r18,16
   885e0:	80c00404 	addi	r3,r16,16
   885e4:	003f6e06 	br	883a0 <_realloc_r+0x264>
   885e8:	953fff17 	ldw	r20,-4(r18)
   885ec:	00ffff04 	movi	r3,-4
   885f0:	a0e8703a 	and	r20,r20,r3
   885f4:	a4e9883a 	add	r20,r20,r19
   885f8:	003f2206 	br	88284 <_realloc_r+0x148>
   885fc:	800b883a 	mov	r5,r16
   88600:	9009883a 	mov	r4,r18
   88604:	0086de40 	call	86de4 <memmove>
   88608:	9021883a 	mov	r16,r18
   8860c:	b8800117 	ldw	r2,4(r23)
   88610:	b82d883a 	mov	r22,r23
   88614:	003f1b06 	br	88284 <_realloc_r+0x148>
   88618:	9005883a 	mov	r2,r18
   8861c:	8007883a 	mov	r3,r16
   88620:	003f9206 	br	8846c <_realloc_r+0x330>
   88624:	800b883a 	mov	r5,r16
   88628:	9009883a 	mov	r4,r18
   8862c:	d9c00015 	stw	r7,0(sp)
   88630:	0086de40 	call	86de4 <memmove>
   88634:	d9c00017 	ldw	r7,0(sp)
   88638:	9021883a 	mov	r16,r18
   8863c:	b8800117 	ldw	r2,4(r23)
   88640:	3829883a 	mov	r20,r7
   88644:	b82d883a 	mov	r22,r23
   88648:	003f0e06 	br	88284 <_realloc_r+0x148>
   8864c:	80800217 	ldw	r2,8(r16)
   88650:	b8800415 	stw	r2,16(r23)
   88654:	80800317 	ldw	r2,12(r16)
   88658:	b8800515 	stw	r2,20(r23)
   8865c:	31001226 	beq	r6,r4,886a8 <_realloc_r+0x56c>
   88660:	b8800604 	addi	r2,r23,24
   88664:	80c00404 	addi	r3,r16,16
   88668:	003f9606 	br	884c4 <_realloc_r+0x388>
   8866c:	81000417 	ldw	r4,16(r16)
   88670:	90800604 	addi	r2,r18,24
   88674:	80c00604 	addi	r3,r16,24
   88678:	91000415 	stw	r4,16(r18)
   8867c:	81000517 	ldw	r4,20(r16)
   88680:	91000515 	stw	r4,20(r18)
   88684:	003f4606 	br	883a0 <_realloc_r+0x264>
   88688:	80800217 	ldw	r2,8(r16)
   8868c:	b8800415 	stw	r2,16(r23)
   88690:	80800317 	ldw	r2,12(r16)
   88694:	b8800515 	stw	r2,20(r23)
   88698:	31000d26 	beq	r6,r4,886d0 <_realloc_r+0x594>
   8869c:	b8800604 	addi	r2,r23,24
   886a0:	80c00404 	addi	r3,r16,16
   886a4:	003f7106 	br	8846c <_realloc_r+0x330>
   886a8:	81000417 	ldw	r4,16(r16)
   886ac:	b8800804 	addi	r2,r23,32
   886b0:	80c00604 	addi	r3,r16,24
   886b4:	b9000615 	stw	r4,24(r23)
   886b8:	81000517 	ldw	r4,20(r16)
   886bc:	b9000715 	stw	r4,28(r23)
   886c0:	003f8006 	br	884c4 <_realloc_r+0x388>
   886c4:	9005883a 	mov	r2,r18
   886c8:	8007883a 	mov	r3,r16
   886cc:	003fac06 	br	88580 <_realloc_r+0x444>
   886d0:	81000417 	ldw	r4,16(r16)
   886d4:	b8800804 	addi	r2,r23,32
   886d8:	80c00604 	addi	r3,r16,24
   886dc:	b9000615 	stw	r4,24(r23)
   886e0:	81000517 	ldw	r4,20(r16)
   886e4:	b9000715 	stw	r4,28(r23)
   886e8:	003f6006 	br	8846c <_realloc_r+0x330>
   886ec:	9009883a 	mov	r4,r18
   886f0:	800b883a 	mov	r5,r16
   886f4:	0086de40 	call	86de4 <memmove>
   886f8:	003fa706 	br	88598 <_realloc_r+0x45c>
   886fc:	80800217 	ldw	r2,8(r16)
   88700:	b8800415 	stw	r2,16(r23)
   88704:	80800317 	ldw	r2,12(r16)
   88708:	b8800515 	stw	r2,20(r23)
   8870c:	31000326 	beq	r6,r4,8871c <_realloc_r+0x5e0>
   88710:	b8800604 	addi	r2,r23,24
   88714:	80c00404 	addi	r3,r16,16
   88718:	003f9906 	br	88580 <_realloc_r+0x444>
   8871c:	81000417 	ldw	r4,16(r16)
   88720:	b8800804 	addi	r2,r23,32
   88724:	80c00604 	addi	r3,r16,24
   88728:	b9000615 	stw	r4,24(r23)
   8872c:	81000517 	ldw	r4,20(r16)
   88730:	b9000715 	stw	r4,28(r23)
   88734:	003f9206 	br	88580 <_realloc_r+0x444>

00088738 <__isinfd>:
   88738:	0105c83a 	sub	r2,zero,r4
   8873c:	1108b03a 	or	r4,r2,r4
   88740:	2004d7fa 	srli	r2,r4,31
   88744:	00e00034 	movhi	r3,32768
   88748:	18ffffc4 	addi	r3,r3,-1
   8874c:	28ca703a 	and	r5,r5,r3
   88750:	1144b03a 	or	r2,r2,r5
   88754:	00dffc34 	movhi	r3,32752
   88758:	1885c83a 	sub	r2,r3,r2
   8875c:	0087c83a 	sub	r3,zero,r2
   88760:	1884b03a 	or	r2,r3,r2
   88764:	1005d7fa 	srai	r2,r2,31
   88768:	10800044 	addi	r2,r2,1
   8876c:	f800283a 	ret

00088770 <__isnand>:
   88770:	0105c83a 	sub	r2,zero,r4
   88774:	1108b03a 	or	r4,r2,r4
   88778:	2004d7fa 	srli	r2,r4,31
   8877c:	00e00034 	movhi	r3,32768
   88780:	18ffffc4 	addi	r3,r3,-1
   88784:	28ca703a 	and	r5,r5,r3
   88788:	1144b03a 	or	r2,r2,r5
   8878c:	00dffc34 	movhi	r3,32752
   88790:	1885c83a 	sub	r2,r3,r2
   88794:	1004d7fa 	srli	r2,r2,31
   88798:	f800283a 	ret

0008879c <_sbrk_r>:
   8879c:	defffd04 	addi	sp,sp,-12
   887a0:	dc400115 	stw	r17,4(sp)
   887a4:	dc000015 	stw	r16,0(sp)
   887a8:	2023883a 	mov	r17,r4
   887ac:	04000274 	movhi	r16,9
   887b0:	8406d504 	addi	r16,r16,6996
   887b4:	2809883a 	mov	r4,r5
   887b8:	dfc00215 	stw	ra,8(sp)
   887bc:	80000015 	stw	zero,0(r16)
   887c0:	008b5b40 	call	8b5b4 <sbrk>
   887c4:	00ffffc4 	movi	r3,-1
   887c8:	10c00526 	beq	r2,r3,887e0 <_sbrk_r+0x44>
   887cc:	dfc00217 	ldw	ra,8(sp)
   887d0:	dc400117 	ldw	r17,4(sp)
   887d4:	dc000017 	ldw	r16,0(sp)
   887d8:	dec00304 	addi	sp,sp,12
   887dc:	f800283a 	ret
   887e0:	80c00017 	ldw	r3,0(r16)
   887e4:	183ff926 	beq	r3,zero,887cc <_sbrk_r+0x30>
   887e8:	88c00015 	stw	r3,0(r17)
   887ec:	dfc00217 	ldw	ra,8(sp)
   887f0:	dc400117 	ldw	r17,4(sp)
   887f4:	dc000017 	ldw	r16,0(sp)
   887f8:	dec00304 	addi	sp,sp,12
   887fc:	f800283a 	ret

00088800 <__sread>:
   88800:	defffe04 	addi	sp,sp,-8
   88804:	dc000015 	stw	r16,0(sp)
   88808:	2821883a 	mov	r16,r5
   8880c:	2940038f 	ldh	r5,14(r5)
   88810:	dfc00115 	stw	ra,4(sp)
   88814:	0088f500 	call	88f50 <_read_r>
   88818:	10000716 	blt	r2,zero,88838 <__sread+0x38>
   8881c:	80c01417 	ldw	r3,80(r16)
   88820:	1887883a 	add	r3,r3,r2
   88824:	80c01415 	stw	r3,80(r16)
   88828:	dfc00117 	ldw	ra,4(sp)
   8882c:	dc000017 	ldw	r16,0(sp)
   88830:	dec00204 	addi	sp,sp,8
   88834:	f800283a 	ret
   88838:	80c0030b 	ldhu	r3,12(r16)
   8883c:	18fbffcc 	andi	r3,r3,61439
   88840:	80c0030d 	sth	r3,12(r16)
   88844:	dfc00117 	ldw	ra,4(sp)
   88848:	dc000017 	ldw	r16,0(sp)
   8884c:	dec00204 	addi	sp,sp,8
   88850:	f800283a 	ret

00088854 <__swrite>:
   88854:	2880030b 	ldhu	r2,12(r5)
   88858:	defffb04 	addi	sp,sp,-20
   8885c:	dcc00315 	stw	r19,12(sp)
   88860:	10c0400c 	andi	r3,r2,256
   88864:	18ffffcc 	andi	r3,r3,65535
   88868:	18e0001c 	xori	r3,r3,32768
   8886c:	dc800215 	stw	r18,8(sp)
   88870:	dc400115 	stw	r17,4(sp)
   88874:	dc000015 	stw	r16,0(sp)
   88878:	dfc00415 	stw	ra,16(sp)
   8887c:	18e00004 	addi	r3,r3,-32768
   88880:	2821883a 	mov	r16,r5
   88884:	2027883a 	mov	r19,r4
   88888:	3025883a 	mov	r18,r6
   8888c:	3823883a 	mov	r17,r7
   88890:	18000526 	beq	r3,zero,888a8 <__swrite+0x54>
   88894:	2940038f 	ldh	r5,14(r5)
   88898:	000d883a 	mov	r6,zero
   8889c:	01c00084 	movi	r7,2
   888a0:	0088ee40 	call	88ee4 <_lseek_r>
   888a4:	8080030b 	ldhu	r2,12(r16)
   888a8:	8140038f 	ldh	r5,14(r16)
   888ac:	10bbffcc 	andi	r2,r2,61439
   888b0:	9809883a 	mov	r4,r19
   888b4:	900d883a 	mov	r6,r18
   888b8:	880f883a 	mov	r7,r17
   888bc:	8080030d 	sth	r2,12(r16)
   888c0:	dfc00417 	ldw	ra,16(sp)
   888c4:	dcc00317 	ldw	r19,12(sp)
   888c8:	dc800217 	ldw	r18,8(sp)
   888cc:	dc400117 	ldw	r17,4(sp)
   888d0:	dc000017 	ldw	r16,0(sp)
   888d4:	dec00504 	addi	sp,sp,20
   888d8:	0088b3c1 	jmpi	88b3c <_write_r>

000888dc <__sseek>:
   888dc:	defffe04 	addi	sp,sp,-8
   888e0:	dc000015 	stw	r16,0(sp)
   888e4:	2821883a 	mov	r16,r5
   888e8:	2940038f 	ldh	r5,14(r5)
   888ec:	dfc00115 	stw	ra,4(sp)
   888f0:	0088ee40 	call	88ee4 <_lseek_r>
   888f4:	00ffffc4 	movi	r3,-1
   888f8:	10c00826 	beq	r2,r3,8891c <__sseek+0x40>
   888fc:	80c0030b 	ldhu	r3,12(r16)
   88900:	80801415 	stw	r2,80(r16)
   88904:	18c40014 	ori	r3,r3,4096
   88908:	80c0030d 	sth	r3,12(r16)
   8890c:	dfc00117 	ldw	ra,4(sp)
   88910:	dc000017 	ldw	r16,0(sp)
   88914:	dec00204 	addi	sp,sp,8
   88918:	f800283a 	ret
   8891c:	80c0030b 	ldhu	r3,12(r16)
   88920:	18fbffcc 	andi	r3,r3,61439
   88924:	80c0030d 	sth	r3,12(r16)
   88928:	dfc00117 	ldw	ra,4(sp)
   8892c:	dc000017 	ldw	r16,0(sp)
   88930:	dec00204 	addi	sp,sp,8
   88934:	f800283a 	ret

00088938 <__sclose>:
   88938:	2940038f 	ldh	r5,14(r5)
   8893c:	0088c641 	jmpi	88c64 <_close_r>

00088940 <strcmp>:
   88940:	2904b03a 	or	r2,r5,r4
   88944:	108000cc 	andi	r2,r2,3
   88948:	1000171e 	bne	r2,zero,889a8 <strcmp+0x68>
   8894c:	20800017 	ldw	r2,0(r4)
   88950:	28c00017 	ldw	r3,0(r5)
   88954:	10c0141e 	bne	r2,r3,889a8 <strcmp+0x68>
   88958:	027fbff4 	movhi	r9,65279
   8895c:	4a7fbfc4 	addi	r9,r9,-257
   88960:	1247883a 	add	r3,r2,r9
   88964:	0084303a 	nor	r2,zero,r2
   88968:	1884703a 	and	r2,r3,r2
   8896c:	02202074 	movhi	r8,32897
   88970:	42202004 	addi	r8,r8,-32640
   88974:	1204703a 	and	r2,r2,r8
   88978:	10000226 	beq	r2,zero,88984 <strcmp+0x44>
   8897c:	00001706 	br	889dc <strcmp+0x9c>
   88980:	3000161e 	bne	r6,zero,889dc <strcmp+0x9c>
   88984:	21000104 	addi	r4,r4,4
   88988:	20800017 	ldw	r2,0(r4)
   8898c:	29400104 	addi	r5,r5,4
   88990:	28c00017 	ldw	r3,0(r5)
   88994:	124f883a 	add	r7,r2,r9
   88998:	008c303a 	nor	r6,zero,r2
   8899c:	398c703a 	and	r6,r7,r6
   889a0:	320c703a 	and	r6,r6,r8
   889a4:	10fff626 	beq	r2,r3,88980 <strcmp+0x40>
   889a8:	20800007 	ldb	r2,0(r4)
   889ac:	1000051e 	bne	r2,zero,889c4 <strcmp+0x84>
   889b0:	00000606 	br	889cc <strcmp+0x8c>
   889b4:	21000044 	addi	r4,r4,1
   889b8:	20800007 	ldb	r2,0(r4)
   889bc:	29400044 	addi	r5,r5,1
   889c0:	10000226 	beq	r2,zero,889cc <strcmp+0x8c>
   889c4:	28c00007 	ldb	r3,0(r5)
   889c8:	10fffa26 	beq	r2,r3,889b4 <strcmp+0x74>
   889cc:	20c00003 	ldbu	r3,0(r4)
   889d0:	28800003 	ldbu	r2,0(r5)
   889d4:	1885c83a 	sub	r2,r3,r2
   889d8:	f800283a 	ret
   889dc:	0005883a 	mov	r2,zero
   889e0:	f800283a 	ret

000889e4 <__swbuf_r>:
   889e4:	defffc04 	addi	sp,sp,-16
   889e8:	dc800215 	stw	r18,8(sp)
   889ec:	dc400115 	stw	r17,4(sp)
   889f0:	dc000015 	stw	r16,0(sp)
   889f4:	dfc00315 	stw	ra,12(sp)
   889f8:	2023883a 	mov	r17,r4
   889fc:	2825883a 	mov	r18,r5
   88a00:	3021883a 	mov	r16,r6
   88a04:	20000226 	beq	r4,zero,88a10 <__swbuf_r+0x2c>
   88a08:	20800e17 	ldw	r2,56(r4)
   88a0c:	10003b26 	beq	r2,zero,88afc <__swbuf_r+0x118>
   88a10:	8080030b 	ldhu	r2,12(r16)
   88a14:	80c00617 	ldw	r3,24(r16)
   88a18:	1080020c 	andi	r2,r2,8
   88a1c:	10bfffcc 	andi	r2,r2,65535
   88a20:	10a0001c 	xori	r2,r2,32768
   88a24:	80c00215 	stw	r3,8(r16)
   88a28:	10a00004 	addi	r2,r2,-32768
   88a2c:	10002226 	beq	r2,zero,88ab8 <__swbuf_r+0xd4>
   88a30:	80800417 	ldw	r2,16(r16)
   88a34:	10002026 	beq	r2,zero,88ab8 <__swbuf_r+0xd4>
   88a38:	80c00017 	ldw	r3,0(r16)
   88a3c:	81000517 	ldw	r4,20(r16)
   88a40:	94803fcc 	andi	r18,r18,255
   88a44:	1885c83a 	sub	r2,r3,r2
   88a48:	1100250e 	bge	r2,r4,88ae0 <__swbuf_r+0xfc>
   88a4c:	10800044 	addi	r2,r2,1
   88a50:	81400217 	ldw	r5,8(r16)
   88a54:	19000044 	addi	r4,r3,1
   88a58:	297fffc4 	addi	r5,r5,-1
   88a5c:	81400215 	stw	r5,8(r16)
   88a60:	1c800005 	stb	r18,0(r3)
   88a64:	80c00517 	ldw	r3,20(r16)
   88a68:	81000015 	stw	r4,0(r16)
   88a6c:	18800c26 	beq	r3,r2,88aa0 <__swbuf_r+0xbc>
   88a70:	8080030b 	ldhu	r2,12(r16)
   88a74:	1080004c 	andi	r2,r2,1
   88a78:	10000226 	beq	r2,zero,88a84 <__swbuf_r+0xa0>
   88a7c:	00800284 	movi	r2,10
   88a80:	90800726 	beq	r18,r2,88aa0 <__swbuf_r+0xbc>
   88a84:	9005883a 	mov	r2,r18
   88a88:	dfc00317 	ldw	ra,12(sp)
   88a8c:	dc800217 	ldw	r18,8(sp)
   88a90:	dc400117 	ldw	r17,4(sp)
   88a94:	dc000017 	ldw	r16,0(sp)
   88a98:	dec00404 	addi	sp,sp,16
   88a9c:	f800283a 	ret
   88aa0:	8809883a 	mov	r4,r17
   88aa4:	800b883a 	mov	r5,r16
   88aa8:	00853a40 	call	853a4 <_fflush_r>
   88aac:	103ff526 	beq	r2,zero,88a84 <__swbuf_r+0xa0>
   88ab0:	04bfffc4 	movi	r18,-1
   88ab4:	003ff306 	br	88a84 <__swbuf_r+0xa0>
   88ab8:	8809883a 	mov	r4,r17
   88abc:	800b883a 	mov	r5,r16
   88ac0:	0083a0c0 	call	83a0c <__swsetup_r>
   88ac4:	10000f1e 	bne	r2,zero,88b04 <__swbuf_r+0x120>
   88ac8:	80800417 	ldw	r2,16(r16)
   88acc:	80c00017 	ldw	r3,0(r16)
   88ad0:	81000517 	ldw	r4,20(r16)
   88ad4:	94803fcc 	andi	r18,r18,255
   88ad8:	1885c83a 	sub	r2,r3,r2
   88adc:	113fdb16 	blt	r2,r4,88a4c <__swbuf_r+0x68>
   88ae0:	8809883a 	mov	r4,r17
   88ae4:	800b883a 	mov	r5,r16
   88ae8:	00853a40 	call	853a4 <_fflush_r>
   88aec:	103ff01e 	bne	r2,zero,88ab0 <__swbuf_r+0xcc>
   88af0:	80c00017 	ldw	r3,0(r16)
   88af4:	00800044 	movi	r2,1
   88af8:	003fd506 	br	88a50 <__swbuf_r+0x6c>
   88afc:	008564c0 	call	8564c <__sinit>
   88b00:	003fc306 	br	88a10 <__swbuf_r+0x2c>
   88b04:	8080030b 	ldhu	r2,12(r16)
   88b08:	04bfffc4 	movi	r18,-1
   88b0c:	10801014 	ori	r2,r2,64
   88b10:	8080030d 	sth	r2,12(r16)
   88b14:	00800244 	movi	r2,9
   88b18:	88800015 	stw	r2,0(r17)
   88b1c:	003fd906 	br	88a84 <__swbuf_r+0xa0>

00088b20 <__swbuf>:
   88b20:	00c00274 	movhi	r3,9
   88b24:	18ffef04 	addi	r3,r3,-68
   88b28:	2005883a 	mov	r2,r4
   88b2c:	19000017 	ldw	r4,0(r3)
   88b30:	280d883a 	mov	r6,r5
   88b34:	100b883a 	mov	r5,r2
   88b38:	00889e41 	jmpi	889e4 <__swbuf_r>

00088b3c <_write_r>:
   88b3c:	defffd04 	addi	sp,sp,-12
   88b40:	dc400115 	stw	r17,4(sp)
   88b44:	dc000015 	stw	r16,0(sp)
   88b48:	2023883a 	mov	r17,r4
   88b4c:	04000274 	movhi	r16,9
   88b50:	8406d504 	addi	r16,r16,6996
   88b54:	2809883a 	mov	r4,r5
   88b58:	300b883a 	mov	r5,r6
   88b5c:	380d883a 	mov	r6,r7
   88b60:	dfc00215 	stw	ra,8(sp)
   88b64:	80000015 	stw	zero,0(r16)
   88b68:	008b8800 	call	8b880 <write>
   88b6c:	00ffffc4 	movi	r3,-1
   88b70:	10c00526 	beq	r2,r3,88b88 <_write_r+0x4c>
   88b74:	dfc00217 	ldw	ra,8(sp)
   88b78:	dc400117 	ldw	r17,4(sp)
   88b7c:	dc000017 	ldw	r16,0(sp)
   88b80:	dec00304 	addi	sp,sp,12
   88b84:	f800283a 	ret
   88b88:	80c00017 	ldw	r3,0(r16)
   88b8c:	183ff926 	beq	r3,zero,88b74 <_write_r+0x38>
   88b90:	88c00015 	stw	r3,0(r17)
   88b94:	dfc00217 	ldw	ra,8(sp)
   88b98:	dc400117 	ldw	r17,4(sp)
   88b9c:	dc000017 	ldw	r16,0(sp)
   88ba0:	dec00304 	addi	sp,sp,12
   88ba4:	f800283a 	ret

00088ba8 <_calloc_r>:
   88ba8:	314b383a 	mul	r5,r6,r5
   88bac:	defffe04 	addi	sp,sp,-8
   88bb0:	dc000015 	stw	r16,0(sp)
   88bb4:	dfc00115 	stw	ra,4(sp)
   88bb8:	00865680 	call	86568 <_malloc_r>
   88bbc:	1021883a 	mov	r16,r2
   88bc0:	10000c26 	beq	r2,zero,88bf4 <_calloc_r+0x4c>
   88bc4:	11bfff17 	ldw	r6,-4(r2)
   88bc8:	00ffff04 	movi	r3,-4
   88bcc:	00800904 	movi	r2,36
   88bd0:	30cc703a 	and	r6,r6,r3
   88bd4:	30cd883a 	add	r6,r6,r3
   88bd8:	11801436 	bltu	r2,r6,88c2c <_calloc_r+0x84>
   88bdc:	00c004c4 	movi	r3,19
   88be0:	19800936 	bltu	r3,r6,88c08 <_calloc_r+0x60>
   88be4:	8005883a 	mov	r2,r16
   88be8:	10000015 	stw	zero,0(r2)
   88bec:	10000115 	stw	zero,4(r2)
   88bf0:	10000215 	stw	zero,8(r2)
   88bf4:	8005883a 	mov	r2,r16
   88bf8:	dfc00117 	ldw	ra,4(sp)
   88bfc:	dc000017 	ldw	r16,0(sp)
   88c00:	dec00204 	addi	sp,sp,8
   88c04:	f800283a 	ret
   88c08:	80000015 	stw	zero,0(r16)
   88c0c:	80000115 	stw	zero,4(r16)
   88c10:	00c006c4 	movi	r3,27
   88c14:	19800d2e 	bgeu	r3,r6,88c4c <_calloc_r+0xa4>
   88c18:	80000215 	stw	zero,8(r16)
   88c1c:	80000315 	stw	zero,12(r16)
   88c20:	30800c26 	beq	r6,r2,88c54 <_calloc_r+0xac>
   88c24:	80800404 	addi	r2,r16,16
   88c28:	003fef06 	br	88be8 <_calloc_r+0x40>
   88c2c:	8009883a 	mov	r4,r16
   88c30:	000b883a 	mov	r5,zero
   88c34:	0086f0c0 	call	86f0c <memset>
   88c38:	8005883a 	mov	r2,r16
   88c3c:	dfc00117 	ldw	ra,4(sp)
   88c40:	dc000017 	ldw	r16,0(sp)
   88c44:	dec00204 	addi	sp,sp,8
   88c48:	f800283a 	ret
   88c4c:	80800204 	addi	r2,r16,8
   88c50:	003fe506 	br	88be8 <_calloc_r+0x40>
   88c54:	80000415 	stw	zero,16(r16)
   88c58:	80000515 	stw	zero,20(r16)
   88c5c:	80800604 	addi	r2,r16,24
   88c60:	003fe106 	br	88be8 <_calloc_r+0x40>

00088c64 <_close_r>:
   88c64:	defffd04 	addi	sp,sp,-12
   88c68:	dc400115 	stw	r17,4(sp)
   88c6c:	dc000015 	stw	r16,0(sp)
   88c70:	2023883a 	mov	r17,r4
   88c74:	04000274 	movhi	r16,9
   88c78:	8406d504 	addi	r16,r16,6996
   88c7c:	2809883a 	mov	r4,r5
   88c80:	dfc00215 	stw	ra,8(sp)
   88c84:	80000015 	stw	zero,0(r16)
   88c88:	008ae2c0 	call	8ae2c <close>
   88c8c:	00ffffc4 	movi	r3,-1
   88c90:	10c00526 	beq	r2,r3,88ca8 <_close_r+0x44>
   88c94:	dfc00217 	ldw	ra,8(sp)
   88c98:	dc400117 	ldw	r17,4(sp)
   88c9c:	dc000017 	ldw	r16,0(sp)
   88ca0:	dec00304 	addi	sp,sp,12
   88ca4:	f800283a 	ret
   88ca8:	80c00017 	ldw	r3,0(r16)
   88cac:	183ff926 	beq	r3,zero,88c94 <_close_r+0x30>
   88cb0:	88c00015 	stw	r3,0(r17)
   88cb4:	dfc00217 	ldw	ra,8(sp)
   88cb8:	dc400117 	ldw	r17,4(sp)
   88cbc:	dc000017 	ldw	r16,0(sp)
   88cc0:	dec00304 	addi	sp,sp,12
   88cc4:	f800283a 	ret

00088cc8 <_fclose_r>:
   88cc8:	defffc04 	addi	sp,sp,-16
   88ccc:	dc400115 	stw	r17,4(sp)
   88cd0:	dc000015 	stw	r16,0(sp)
   88cd4:	dfc00315 	stw	ra,12(sp)
   88cd8:	dc800215 	stw	r18,8(sp)
   88cdc:	2821883a 	mov	r16,r5
   88ce0:	2023883a 	mov	r17,r4
   88ce4:	28003426 	beq	r5,zero,88db8 <_fclose_r+0xf0>
   88ce8:	00858540 	call	85854 <__sfp_lock_acquire>
   88cec:	88000226 	beq	r17,zero,88cf8 <_fclose_r+0x30>
   88cf0:	88800e17 	ldw	r2,56(r17)
   88cf4:	10003826 	beq	r2,zero,88dd8 <_fclose_r+0x110>
   88cf8:	8080030f 	ldh	r2,12(r16)
   88cfc:	10002526 	beq	r2,zero,88d94 <_fclose_r+0xcc>
   88d00:	8809883a 	mov	r4,r17
   88d04:	800b883a 	mov	r5,r16
   88d08:	00853a40 	call	853a4 <_fflush_r>
   88d0c:	1025883a 	mov	r18,r2
   88d10:	80800b17 	ldw	r2,44(r16)
   88d14:	10000426 	beq	r2,zero,88d28 <_fclose_r+0x60>
   88d18:	81400717 	ldw	r5,28(r16)
   88d1c:	8809883a 	mov	r4,r17
   88d20:	103ee83a 	callr	r2
   88d24:	10003516 	blt	r2,zero,88dfc <_fclose_r+0x134>
   88d28:	8080030b 	ldhu	r2,12(r16)
   88d2c:	1080200c 	andi	r2,r2,128
   88d30:	10bfffcc 	andi	r2,r2,65535
   88d34:	10a0001c 	xori	r2,r2,32768
   88d38:	10a00004 	addi	r2,r2,-32768
   88d3c:	10002b1e 	bne	r2,zero,88dec <_fclose_r+0x124>
   88d40:	81400c17 	ldw	r5,48(r16)
   88d44:	28000526 	beq	r5,zero,88d5c <_fclose_r+0x94>
   88d48:	80801004 	addi	r2,r16,64
   88d4c:	28800226 	beq	r5,r2,88d58 <_fclose_r+0x90>
   88d50:	8809883a 	mov	r4,r17
   88d54:	00859d00 	call	859d0 <_free_r>
   88d58:	80000c15 	stw	zero,48(r16)
   88d5c:	81401117 	ldw	r5,68(r16)
   88d60:	28000326 	beq	r5,zero,88d70 <_fclose_r+0xa8>
   88d64:	8809883a 	mov	r4,r17
   88d68:	00859d00 	call	859d0 <_free_r>
   88d6c:	80001115 	stw	zero,68(r16)
   88d70:	8000030d 	sth	zero,12(r16)
   88d74:	00858580 	call	85858 <__sfp_lock_release>
   88d78:	9005883a 	mov	r2,r18
   88d7c:	dfc00317 	ldw	ra,12(sp)
   88d80:	dc800217 	ldw	r18,8(sp)
   88d84:	dc400117 	ldw	r17,4(sp)
   88d88:	dc000017 	ldw	r16,0(sp)
   88d8c:	dec00404 	addi	sp,sp,16
   88d90:	f800283a 	ret
   88d94:	00858580 	call	85858 <__sfp_lock_release>
   88d98:	0025883a 	mov	r18,zero
   88d9c:	9005883a 	mov	r2,r18
   88da0:	dfc00317 	ldw	ra,12(sp)
   88da4:	dc800217 	ldw	r18,8(sp)
   88da8:	dc400117 	ldw	r17,4(sp)
   88dac:	dc000017 	ldw	r16,0(sp)
   88db0:	dec00404 	addi	sp,sp,16
   88db4:	f800283a 	ret
   88db8:	0025883a 	mov	r18,zero
   88dbc:	9005883a 	mov	r2,r18
   88dc0:	dfc00317 	ldw	ra,12(sp)
   88dc4:	dc800217 	ldw	r18,8(sp)
   88dc8:	dc400117 	ldw	r17,4(sp)
   88dcc:	dc000017 	ldw	r16,0(sp)
   88dd0:	dec00404 	addi	sp,sp,16
   88dd4:	f800283a 	ret
   88dd8:	8809883a 	mov	r4,r17
   88ddc:	008564c0 	call	8564c <__sinit>
   88de0:	8080030f 	ldh	r2,12(r16)
   88de4:	103fc61e 	bne	r2,zero,88d00 <_fclose_r+0x38>
   88de8:	003fea06 	br	88d94 <_fclose_r+0xcc>
   88dec:	81400417 	ldw	r5,16(r16)
   88df0:	8809883a 	mov	r4,r17
   88df4:	00859d00 	call	859d0 <_free_r>
   88df8:	003fd106 	br	88d40 <_fclose_r+0x78>
   88dfc:	04bfffc4 	movi	r18,-1
   88e00:	003fc906 	br	88d28 <_fclose_r+0x60>

00088e04 <fclose>:
   88e04:	00800274 	movhi	r2,9
   88e08:	10bfef04 	addi	r2,r2,-68
   88e0c:	200b883a 	mov	r5,r4
   88e10:	11000017 	ldw	r4,0(r2)
   88e14:	0088cc81 	jmpi	88cc8 <_fclose_r>

00088e18 <_fstat_r>:
   88e18:	defffd04 	addi	sp,sp,-12
   88e1c:	dc400115 	stw	r17,4(sp)
   88e20:	dc000015 	stw	r16,0(sp)
   88e24:	2023883a 	mov	r17,r4
   88e28:	04000274 	movhi	r16,9
   88e2c:	8406d504 	addi	r16,r16,6996
   88e30:	2809883a 	mov	r4,r5
   88e34:	300b883a 	mov	r5,r6
   88e38:	dfc00215 	stw	ra,8(sp)
   88e3c:	80000015 	stw	zero,0(r16)
   88e40:	008afb40 	call	8afb4 <fstat>
   88e44:	00ffffc4 	movi	r3,-1
   88e48:	10c00526 	beq	r2,r3,88e60 <_fstat_r+0x48>
   88e4c:	dfc00217 	ldw	ra,8(sp)
   88e50:	dc400117 	ldw	r17,4(sp)
   88e54:	dc000017 	ldw	r16,0(sp)
   88e58:	dec00304 	addi	sp,sp,12
   88e5c:	f800283a 	ret
   88e60:	80c00017 	ldw	r3,0(r16)
   88e64:	183ff926 	beq	r3,zero,88e4c <_fstat_r+0x34>
   88e68:	88c00015 	stw	r3,0(r17)
   88e6c:	dfc00217 	ldw	ra,8(sp)
   88e70:	dc400117 	ldw	r17,4(sp)
   88e74:	dc000017 	ldw	r16,0(sp)
   88e78:	dec00304 	addi	sp,sp,12
   88e7c:	f800283a 	ret

00088e80 <_isatty_r>:
   88e80:	defffd04 	addi	sp,sp,-12
   88e84:	dc400115 	stw	r17,4(sp)
   88e88:	dc000015 	stw	r16,0(sp)
   88e8c:	2023883a 	mov	r17,r4
   88e90:	04000274 	movhi	r16,9
   88e94:	8406d504 	addi	r16,r16,6996
   88e98:	2809883a 	mov	r4,r5
   88e9c:	dfc00215 	stw	ra,8(sp)
   88ea0:	80000015 	stw	zero,0(r16)
   88ea4:	008b0b00 	call	8b0b0 <isatty>
   88ea8:	00ffffc4 	movi	r3,-1
   88eac:	10c00526 	beq	r2,r3,88ec4 <_isatty_r+0x44>
   88eb0:	dfc00217 	ldw	ra,8(sp)
   88eb4:	dc400117 	ldw	r17,4(sp)
   88eb8:	dc000017 	ldw	r16,0(sp)
   88ebc:	dec00304 	addi	sp,sp,12
   88ec0:	f800283a 	ret
   88ec4:	80c00017 	ldw	r3,0(r16)
   88ec8:	183ff926 	beq	r3,zero,88eb0 <_isatty_r+0x30>
   88ecc:	88c00015 	stw	r3,0(r17)
   88ed0:	dfc00217 	ldw	ra,8(sp)
   88ed4:	dc400117 	ldw	r17,4(sp)
   88ed8:	dc000017 	ldw	r16,0(sp)
   88edc:	dec00304 	addi	sp,sp,12
   88ee0:	f800283a 	ret

00088ee4 <_lseek_r>:
   88ee4:	defffd04 	addi	sp,sp,-12
   88ee8:	dc400115 	stw	r17,4(sp)
   88eec:	dc000015 	stw	r16,0(sp)
   88ef0:	2023883a 	mov	r17,r4
   88ef4:	04000274 	movhi	r16,9
   88ef8:	8406d504 	addi	r16,r16,6996
   88efc:	2809883a 	mov	r4,r5
   88f00:	300b883a 	mov	r5,r6
   88f04:	380d883a 	mov	r6,r7
   88f08:	dfc00215 	stw	ra,8(sp)
   88f0c:	80000015 	stw	zero,0(r16)
   88f10:	008b28c0 	call	8b28c <lseek>
   88f14:	00ffffc4 	movi	r3,-1
   88f18:	10c00526 	beq	r2,r3,88f30 <_lseek_r+0x4c>
   88f1c:	dfc00217 	ldw	ra,8(sp)
   88f20:	dc400117 	ldw	r17,4(sp)
   88f24:	dc000017 	ldw	r16,0(sp)
   88f28:	dec00304 	addi	sp,sp,12
   88f2c:	f800283a 	ret
   88f30:	80c00017 	ldw	r3,0(r16)
   88f34:	183ff926 	beq	r3,zero,88f1c <_lseek_r+0x38>
   88f38:	88c00015 	stw	r3,0(r17)
   88f3c:	dfc00217 	ldw	ra,8(sp)
   88f40:	dc400117 	ldw	r17,4(sp)
   88f44:	dc000017 	ldw	r16,0(sp)
   88f48:	dec00304 	addi	sp,sp,12
   88f4c:	f800283a 	ret

00088f50 <_read_r>:
   88f50:	defffd04 	addi	sp,sp,-12
   88f54:	dc400115 	stw	r17,4(sp)
   88f58:	dc000015 	stw	r16,0(sp)
   88f5c:	2023883a 	mov	r17,r4
   88f60:	04000274 	movhi	r16,9
   88f64:	8406d504 	addi	r16,r16,6996
   88f68:	2809883a 	mov	r4,r5
   88f6c:	300b883a 	mov	r5,r6
   88f70:	380d883a 	mov	r6,r7
   88f74:	dfc00215 	stw	ra,8(sp)
   88f78:	80000015 	stw	zero,0(r16)
   88f7c:	008b4640 	call	8b464 <read>
   88f80:	00ffffc4 	movi	r3,-1
   88f84:	10c00526 	beq	r2,r3,88f9c <_read_r+0x4c>
   88f88:	dfc00217 	ldw	ra,8(sp)
   88f8c:	dc400117 	ldw	r17,4(sp)
   88f90:	dc000017 	ldw	r16,0(sp)
   88f94:	dec00304 	addi	sp,sp,12
   88f98:	f800283a 	ret
   88f9c:	80c00017 	ldw	r3,0(r16)
   88fa0:	183ff926 	beq	r3,zero,88f88 <_read_r+0x38>
   88fa4:	88c00015 	stw	r3,0(r17)
   88fa8:	dfc00217 	ldw	ra,8(sp)
   88fac:	dc400117 	ldw	r17,4(sp)
   88fb0:	dc000017 	ldw	r16,0(sp)
   88fb4:	dec00304 	addi	sp,sp,12
   88fb8:	f800283a 	ret

00088fbc <__muldi3>:
   88fbc:	20bfffcc 	andi	r2,r4,65535
   88fc0:	2010d43a 	srli	r8,r4,16
   88fc4:	30ffffcc 	andi	r3,r6,65535
   88fc8:	3014d43a 	srli	r10,r6,16
   88fcc:	1893383a 	mul	r9,r3,r2
   88fd0:	1a07383a 	mul	r3,r3,r8
   88fd4:	5085383a 	mul	r2,r10,r2
   88fd8:	4816d43a 	srli	r11,r9,16
   88fdc:	5211383a 	mul	r8,r10,r8
   88fe0:	1885883a 	add	r2,r3,r2
   88fe4:	12c5883a 	add	r2,r2,r11
   88fe8:	10c0022e 	bgeu	r2,r3,88ff4 <__muldi3+0x38>
   88fec:	00c00074 	movhi	r3,1
   88ff0:	40d1883a 	add	r8,r8,r3
   88ff4:	1014d43a 	srli	r10,r2,16
   88ff8:	21c9383a 	mul	r4,r4,r7
   88ffc:	314d383a 	mul	r6,r6,r5
   89000:	1004943a 	slli	r2,r2,16
   89004:	4291883a 	add	r8,r8,r10
   89008:	4a7fffcc 	andi	r9,r9,65535
   8900c:	2187883a 	add	r3,r4,r6
   89010:	1245883a 	add	r2,r2,r9
   89014:	1a07883a 	add	r3,r3,r8
   89018:	f800283a 	ret

0008901c <__udivdi3>:
   8901c:	defff504 	addi	sp,sp,-44
   89020:	dd000515 	stw	r20,20(sp)
   89024:	dcc00415 	stw	r19,16(sp)
   89028:	dc800315 	stw	r18,12(sp)
   8902c:	dc400215 	stw	r17,8(sp)
   89030:	dc000115 	stw	r16,4(sp)
   89034:	dfc00a15 	stw	ra,40(sp)
   89038:	df000915 	stw	fp,36(sp)
   8903c:	ddc00815 	stw	r23,32(sp)
   89040:	dd800715 	stw	r22,28(sp)
   89044:	dd400615 	stw	r21,24(sp)
   89048:	2025883a 	mov	r18,r4
   8904c:	2823883a 	mov	r17,r5
   89050:	3021883a 	mov	r16,r6
   89054:	2027883a 	mov	r19,r4
   89058:	2829883a 	mov	r20,r5
   8905c:	3800401e 	bne	r7,zero,89160 <__udivdi3+0x144>
   89060:	2980602e 	bgeu	r5,r6,891e4 <__udivdi3+0x1c8>
   89064:	00bfffd4 	movui	r2,65535
   89068:	1180aa36 	bltu	r2,r6,89314 <__udivdi3+0x2f8>
   8906c:	00803fc4 	movi	r2,255
   89070:	11814436 	bltu	r2,r6,89584 <__udivdi3+0x568>
   89074:	0005883a 	mov	r2,zero
   89078:	0007883a 	mov	r3,zero
   8907c:	3084d83a 	srl	r2,r6,r2
   89080:	01000274 	movhi	r4,9
   89084:	2138dd04 	addi	r4,r4,-7308
   89088:	2085883a 	add	r2,r4,r2
   8908c:	10800003 	ldbu	r2,0(r2)
   89090:	10c7883a 	add	r3,r2,r3
   89094:	00800804 	movi	r2,32
   89098:	10c5c83a 	sub	r2,r2,r3
   8909c:	10000526 	beq	r2,zero,890b4 <__udivdi3+0x98>
   890a0:	88a2983a 	sll	r17,r17,r2
   890a4:	90c6d83a 	srl	r3,r18,r3
   890a8:	30a0983a 	sll	r16,r6,r2
   890ac:	90a6983a 	sll	r19,r18,r2
   890b0:	88e8b03a 	or	r20,r17,r3
   890b4:	8022d43a 	srli	r17,r16,16
   890b8:	a009883a 	mov	r4,r20
   890bc:	857fffcc 	andi	r21,r16,65535
   890c0:	880b883a 	mov	r5,r17
   890c4:	00818900 	call	81890 <__umodsi3>
   890c8:	a009883a 	mov	r4,r20
   890cc:	880b883a 	mov	r5,r17
   890d0:	102d883a 	mov	r22,r2
   890d4:	00818880 	call	81888 <__udivsi3>
   890d8:	b02c943a 	slli	r22,r22,16
   890dc:	9806d43a 	srli	r3,r19,16
   890e0:	1549383a 	mul	r4,r2,r21
   890e4:	1025883a 	mov	r18,r2
   890e8:	b0c6b03a 	or	r3,r22,r3
   890ec:	1900052e 	bgeu	r3,r4,89104 <__udivdi3+0xe8>
   890f0:	1c07883a 	add	r3,r3,r16
   890f4:	10bfffc4 	addi	r2,r2,-1
   890f8:	1c000136 	bltu	r3,r16,89100 <__udivdi3+0xe4>
   890fc:	19013636 	bltu	r3,r4,895d8 <__udivdi3+0x5bc>
   89100:	1025883a 	mov	r18,r2
   89104:	1929c83a 	sub	r20,r3,r4
   89108:	a009883a 	mov	r4,r20
   8910c:	880b883a 	mov	r5,r17
   89110:	00818900 	call	81890 <__umodsi3>
   89114:	102d883a 	mov	r22,r2
   89118:	a009883a 	mov	r4,r20
   8911c:	880b883a 	mov	r5,r17
   89120:	00818880 	call	81888 <__udivsi3>
   89124:	b02c943a 	slli	r22,r22,16
   89128:	156b383a 	mul	r21,r2,r21
   8912c:	9cffffcc 	andi	r19,r19,65535
   89130:	b4e6b03a 	or	r19,r22,r19
   89134:	1009883a 	mov	r4,r2
   89138:	9d40052e 	bgeu	r19,r21,89150 <__udivdi3+0x134>
   8913c:	9c27883a 	add	r19,r19,r16
   89140:	10bfffc4 	addi	r2,r2,-1
   89144:	9c00f736 	bltu	r19,r16,89524 <__udivdi3+0x508>
   89148:	9d40f62e 	bgeu	r19,r21,89524 <__udivdi3+0x508>
   8914c:	213fff84 	addi	r4,r4,-2
   89150:	9004943a 	slli	r2,r18,16
   89154:	0007883a 	mov	r3,zero
   89158:	2084b03a 	or	r2,r4,r2
   8915c:	00001506 	br	891b4 <__udivdi3+0x198>
   89160:	29c06536 	bltu	r5,r7,892f8 <__udivdi3+0x2dc>
   89164:	00bfffd4 	movui	r2,65535
   89168:	11c0652e 	bgeu	r2,r7,89300 <__udivdi3+0x2e4>
   8916c:	00804034 	movhi	r2,256
   89170:	10bfffc4 	addi	r2,r2,-1
   89174:	11c0f736 	bltu	r2,r7,89554 <__udivdi3+0x538>
   89178:	00c00404 	movi	r3,16
   8917c:	180b883a 	mov	r5,r3
   89180:	38c6d83a 	srl	r3,r7,r3
   89184:	01000274 	movhi	r4,9
   89188:	2138dd04 	addi	r4,r4,-7308
   8918c:	04000804 	movi	r16,32
   89190:	20c7883a 	add	r3,r4,r3
   89194:	18800003 	ldbu	r2,0(r3)
   89198:	1145883a 	add	r2,r2,r5
   8919c:	80a1c83a 	sub	r16,r16,r2
   891a0:	8000691e 	bne	r16,zero,89348 <__udivdi3+0x32c>
   891a4:	0007883a 	mov	r3,zero
   891a8:	3c406536 	bltu	r7,r17,89340 <__udivdi3+0x324>
   891ac:	9180642e 	bgeu	r18,r6,89340 <__udivdi3+0x324>
   891b0:	0005883a 	mov	r2,zero
   891b4:	dfc00a17 	ldw	ra,40(sp)
   891b8:	df000917 	ldw	fp,36(sp)
   891bc:	ddc00817 	ldw	r23,32(sp)
   891c0:	dd800717 	ldw	r22,28(sp)
   891c4:	dd400617 	ldw	r21,24(sp)
   891c8:	dd000517 	ldw	r20,20(sp)
   891cc:	dcc00417 	ldw	r19,16(sp)
   891d0:	dc800317 	ldw	r18,12(sp)
   891d4:	dc400217 	ldw	r17,8(sp)
   891d8:	dc000117 	ldw	r16,4(sp)
   891dc:	dec00b04 	addi	sp,sp,44
   891e0:	f800283a 	ret
   891e4:	3000041e 	bne	r6,zero,891f8 <__udivdi3+0x1dc>
   891e8:	01000044 	movi	r4,1
   891ec:	000b883a 	mov	r5,zero
   891f0:	00818880 	call	81888 <__udivsi3>
   891f4:	1021883a 	mov	r16,r2
   891f8:	00bfffd4 	movui	r2,65535
   891fc:	14004b2e 	bgeu	r2,r16,8932c <__udivdi3+0x310>
   89200:	00804034 	movhi	r2,256
   89204:	10bfffc4 	addi	r2,r2,-1
   89208:	1400d836 	bltu	r2,r16,8956c <__udivdi3+0x550>
   8920c:	00800404 	movi	r2,16
   89210:	1007883a 	mov	r3,r2
   89214:	8084d83a 	srl	r2,r16,r2
   89218:	01000274 	movhi	r4,9
   8921c:	2138dd04 	addi	r4,r4,-7308
   89220:	2085883a 	add	r2,r4,r2
   89224:	10800003 	ldbu	r2,0(r2)
   89228:	10c7883a 	add	r3,r2,r3
   8922c:	00800804 	movi	r2,32
   89230:	10c5c83a 	sub	r2,r2,r3
   89234:	1000891e 	bne	r2,zero,8945c <__udivdi3+0x440>
   89238:	8028d43a 	srli	r20,r16,16
   8923c:	8c23c83a 	sub	r17,r17,r16
   89240:	84bfffcc 	andi	r18,r16,65535
   89244:	00c00044 	movi	r3,1
   89248:	8809883a 	mov	r4,r17
   8924c:	a00b883a 	mov	r5,r20
   89250:	d8c00015 	stw	r3,0(sp)
   89254:	00818900 	call	81890 <__umodsi3>
   89258:	8809883a 	mov	r4,r17
   8925c:	a00b883a 	mov	r5,r20
   89260:	102b883a 	mov	r21,r2
   89264:	00818880 	call	81888 <__udivsi3>
   89268:	a82a943a 	slli	r21,r21,16
   8926c:	9808d43a 	srli	r4,r19,16
   89270:	148b383a 	mul	r5,r2,r18
   89274:	1023883a 	mov	r17,r2
   89278:	a908b03a 	or	r4,r21,r4
   8927c:	d8c00017 	ldw	r3,0(sp)
   89280:	2140052e 	bgeu	r4,r5,89298 <__udivdi3+0x27c>
   89284:	2409883a 	add	r4,r4,r16
   89288:	10bfffc4 	addi	r2,r2,-1
   8928c:	24000136 	bltu	r4,r16,89294 <__udivdi3+0x278>
   89290:	2140ce36 	bltu	r4,r5,895cc <__udivdi3+0x5b0>
   89294:	1023883a 	mov	r17,r2
   89298:	216bc83a 	sub	r21,r4,r5
   8929c:	a809883a 	mov	r4,r21
   892a0:	a00b883a 	mov	r5,r20
   892a4:	d8c00015 	stw	r3,0(sp)
   892a8:	00818900 	call	81890 <__umodsi3>
   892ac:	102d883a 	mov	r22,r2
   892b0:	a809883a 	mov	r4,r21
   892b4:	a00b883a 	mov	r5,r20
   892b8:	00818880 	call	81888 <__udivsi3>
   892bc:	b02c943a 	slli	r22,r22,16
   892c0:	14a5383a 	mul	r18,r2,r18
   892c4:	9cffffcc 	andi	r19,r19,65535
   892c8:	b4e6b03a 	or	r19,r22,r19
   892cc:	1009883a 	mov	r4,r2
   892d0:	d8c00017 	ldw	r3,0(sp)
   892d4:	9c80052e 	bgeu	r19,r18,892ec <__udivdi3+0x2d0>
   892d8:	9c27883a 	add	r19,r19,r16
   892dc:	10bfffc4 	addi	r2,r2,-1
   892e0:	9c009236 	bltu	r19,r16,8952c <__udivdi3+0x510>
   892e4:	9c80912e 	bgeu	r19,r18,8952c <__udivdi3+0x510>
   892e8:	213fff84 	addi	r4,r4,-2
   892ec:	8804943a 	slli	r2,r17,16
   892f0:	2084b03a 	or	r2,r4,r2
   892f4:	003faf06 	br	891b4 <__udivdi3+0x198>
   892f8:	0007883a 	mov	r3,zero
   892fc:	003fac06 	br	891b0 <__udivdi3+0x194>
   89300:	00803fc4 	movi	r2,255
   89304:	11c09636 	bltu	r2,r7,89560 <__udivdi3+0x544>
   89308:	0007883a 	mov	r3,zero
   8930c:	000b883a 	mov	r5,zero
   89310:	003f9b06 	br	89180 <__udivdi3+0x164>
   89314:	00804034 	movhi	r2,256
   89318:	10bfffc4 	addi	r2,r2,-1
   8931c:	11809636 	bltu	r2,r6,89578 <__udivdi3+0x55c>
   89320:	00800404 	movi	r2,16
   89324:	1007883a 	mov	r3,r2
   89328:	003f5406 	br	8907c <__udivdi3+0x60>
   8932c:	00803fc4 	movi	r2,255
   89330:	14009736 	bltu	r2,r16,89590 <__udivdi3+0x574>
   89334:	0005883a 	mov	r2,zero
   89338:	0007883a 	mov	r3,zero
   8933c:	003fb506 	br	89214 <__udivdi3+0x1f8>
   89340:	00800044 	movi	r2,1
   89344:	003f9b06 	br	891b4 <__udivdi3+0x198>
   89348:	3086d83a 	srl	r3,r6,r2
   8934c:	3c0e983a 	sll	r7,r7,r16
   89350:	88aad83a 	srl	r21,r17,r2
   89354:	9084d83a 	srl	r2,r18,r2
   89358:	38e6b03a 	or	r19,r7,r3
   8935c:	9828d43a 	srli	r20,r19,16
   89360:	8c22983a 	sll	r17,r17,r16
   89364:	a809883a 	mov	r4,r21
   89368:	a00b883a 	mov	r5,r20
   8936c:	342c983a 	sll	r22,r6,r16
   89370:	88a2b03a 	or	r17,r17,r2
   89374:	00818900 	call	81890 <__umodsi3>
   89378:	a809883a 	mov	r4,r21
   8937c:	a00b883a 	mov	r5,r20
   89380:	1039883a 	mov	fp,r2
   89384:	00818880 	call	81888 <__udivsi3>
   89388:	102b883a 	mov	r21,r2
   8938c:	9dffffcc 	andi	r23,r19,65535
   89390:	e008943a 	slli	r4,fp,16
   89394:	8804d43a 	srli	r2,r17,16
   89398:	adcd383a 	mul	r6,r21,r23
   8939c:	2088b03a 	or	r4,r4,r2
   893a0:	2180042e 	bgeu	r4,r6,893b4 <__udivdi3+0x398>
   893a4:	24c9883a 	add	r4,r4,r19
   893a8:	a8bfffc4 	addi	r2,r21,-1
   893ac:	24c07f2e 	bgeu	r4,r19,895ac <__udivdi3+0x590>
   893b0:	102b883a 	mov	r21,r2
   893b4:	21b9c83a 	sub	fp,r4,r6
   893b8:	e009883a 	mov	r4,fp
   893bc:	a00b883a 	mov	r5,r20
   893c0:	00818900 	call	81890 <__umodsi3>
   893c4:	e009883a 	mov	r4,fp
   893c8:	a00b883a 	mov	r5,r20
   893cc:	d8800015 	stw	r2,0(sp)
   893d0:	00818880 	call	81888 <__udivsi3>
   893d4:	d8c00017 	ldw	r3,0(sp)
   893d8:	15cb383a 	mul	r5,r2,r23
   893dc:	8c7fffcc 	andi	r17,r17,65535
   893e0:	1806943a 	slli	r3,r3,16
   893e4:	1009883a 	mov	r4,r2
   893e8:	1c46b03a 	or	r3,r3,r17
   893ec:	1940042e 	bgeu	r3,r5,89400 <__udivdi3+0x3e4>
   893f0:	1cc7883a 	add	r3,r3,r19
   893f4:	10bfffc4 	addi	r2,r2,-1
   893f8:	1cc0682e 	bgeu	r3,r19,8959c <__udivdi3+0x580>
   893fc:	1009883a 	mov	r4,r2
   89400:	a804943a 	slli	r2,r21,16
   89404:	b1ffffcc 	andi	r7,r22,65535
   89408:	b02cd43a 	srli	r22,r22,16
   8940c:	2084b03a 	or	r2,r4,r2
   89410:	113fffcc 	andi	r4,r2,65535
   89414:	100cd43a 	srli	r6,r2,16
   89418:	21d1383a 	mul	r8,r4,r7
   8941c:	2589383a 	mul	r4,r4,r22
   89420:	31cf383a 	mul	r7,r6,r7
   89424:	4012d43a 	srli	r9,r8,16
   89428:	1947c83a 	sub	r3,r3,r5
   8942c:	3909883a 	add	r4,r7,r4
   89430:	2249883a 	add	r4,r4,r9
   89434:	35ad383a 	mul	r22,r6,r22
   89438:	21c0022e 	bgeu	r4,r7,89444 <__udivdi3+0x428>
   8943c:	01400074 	movhi	r5,1
   89440:	b16d883a 	add	r22,r22,r5
   89444:	200ad43a 	srli	r5,r4,16
   89448:	b16d883a 	add	r22,r22,r5
   8944c:	1d803e36 	bltu	r3,r22,89548 <__udivdi3+0x52c>
   89450:	1d803826 	beq	r3,r22,89534 <__udivdi3+0x518>
   89454:	0007883a 	mov	r3,zero
   89458:	003f5606 	br	891b4 <__udivdi3+0x198>
   8945c:	80a0983a 	sll	r16,r16,r2
   89460:	88ead83a 	srl	r21,r17,r3
   89464:	90c6d83a 	srl	r3,r18,r3
   89468:	8028d43a 	srli	r20,r16,16
   8946c:	88a2983a 	sll	r17,r17,r2
   89470:	a809883a 	mov	r4,r21
   89474:	a00b883a 	mov	r5,r20
   89478:	88ecb03a 	or	r22,r17,r3
   8947c:	90a6983a 	sll	r19,r18,r2
   89480:	00818900 	call	81890 <__umodsi3>
   89484:	a809883a 	mov	r4,r21
   89488:	a00b883a 	mov	r5,r20
   8948c:	1023883a 	mov	r17,r2
   89490:	00818880 	call	81888 <__udivsi3>
   89494:	102b883a 	mov	r21,r2
   89498:	84bfffcc 	andi	r18,r16,65535
   8949c:	8808943a 	slli	r4,r17,16
   894a0:	b004d43a 	srli	r2,r22,16
   894a4:	ac87383a 	mul	r3,r21,r18
   894a8:	2088b03a 	or	r4,r4,r2
   894ac:	20c0062e 	bgeu	r4,r3,894c8 <__udivdi3+0x4ac>
   894b0:	2409883a 	add	r4,r4,r16
   894b4:	a8bfffc4 	addi	r2,r21,-1
   894b8:	24004236 	bltu	r4,r16,895c4 <__udivdi3+0x5a8>
   894bc:	20c0412e 	bgeu	r4,r3,895c4 <__udivdi3+0x5a8>
   894c0:	ad7fff84 	addi	r21,r21,-2
   894c4:	2409883a 	add	r4,r4,r16
   894c8:	20efc83a 	sub	r23,r4,r3
   894cc:	b809883a 	mov	r4,r23
   894d0:	a00b883a 	mov	r5,r20
   894d4:	00818900 	call	81890 <__umodsi3>
   894d8:	1023883a 	mov	r17,r2
   894dc:	a00b883a 	mov	r5,r20
   894e0:	b809883a 	mov	r4,r23
   894e4:	00818880 	call	81888 <__udivsi3>
   894e8:	8822943a 	slli	r17,r17,16
   894ec:	148b383a 	mul	r5,r2,r18
   894f0:	b5bfffcc 	andi	r22,r22,65535
   894f4:	8da2b03a 	or	r17,r17,r22
   894f8:	8940062e 	bgeu	r17,r5,89514 <__udivdi3+0x4f8>
   894fc:	8c23883a 	add	r17,r17,r16
   89500:	10ffffc4 	addi	r3,r2,-1
   89504:	8c002d36 	bltu	r17,r16,895bc <__udivdi3+0x5a0>
   89508:	89402c2e 	bgeu	r17,r5,895bc <__udivdi3+0x5a0>
   8950c:	10bfff84 	addi	r2,r2,-2
   89510:	8c23883a 	add	r17,r17,r16
   89514:	a806943a 	slli	r3,r21,16
   89518:	8963c83a 	sub	r17,r17,r5
   8951c:	10c6b03a 	or	r3,r2,r3
   89520:	003f4906 	br	89248 <__udivdi3+0x22c>
   89524:	1009883a 	mov	r4,r2
   89528:	003f0906 	br	89150 <__udivdi3+0x134>
   8952c:	1009883a 	mov	r4,r2
   89530:	003f6e06 	br	892ec <__udivdi3+0x2d0>
   89534:	2008943a 	slli	r4,r4,16
   89538:	9420983a 	sll	r16,r18,r16
   8953c:	423fffcc 	andi	r8,r8,65535
   89540:	2209883a 	add	r4,r4,r8
   89544:	813fc32e 	bgeu	r16,r4,89454 <__udivdi3+0x438>
   89548:	10bfffc4 	addi	r2,r2,-1
   8954c:	0007883a 	mov	r3,zero
   89550:	003f1806 	br	891b4 <__udivdi3+0x198>
   89554:	00c00604 	movi	r3,24
   89558:	180b883a 	mov	r5,r3
   8955c:	003f0806 	br	89180 <__udivdi3+0x164>
   89560:	00c00204 	movi	r3,8
   89564:	180b883a 	mov	r5,r3
   89568:	003f0506 	br	89180 <__udivdi3+0x164>
   8956c:	00800604 	movi	r2,24
   89570:	1007883a 	mov	r3,r2
   89574:	003f2706 	br	89214 <__udivdi3+0x1f8>
   89578:	00800604 	movi	r2,24
   8957c:	1007883a 	mov	r3,r2
   89580:	003ebe06 	br	8907c <__udivdi3+0x60>
   89584:	00800204 	movi	r2,8
   89588:	1007883a 	mov	r3,r2
   8958c:	003ebb06 	br	8907c <__udivdi3+0x60>
   89590:	00800204 	movi	r2,8
   89594:	1007883a 	mov	r3,r2
   89598:	003f1e06 	br	89214 <__udivdi3+0x1f8>
   8959c:	197f972e 	bgeu	r3,r5,893fc <__udivdi3+0x3e0>
   895a0:	213fff84 	addi	r4,r4,-2
   895a4:	1cc7883a 	add	r3,r3,r19
   895a8:	003f9506 	br	89400 <__udivdi3+0x3e4>
   895ac:	21bf802e 	bgeu	r4,r6,893b0 <__udivdi3+0x394>
   895b0:	ad7fff84 	addi	r21,r21,-2
   895b4:	24c9883a 	add	r4,r4,r19
   895b8:	003f7e06 	br	893b4 <__udivdi3+0x398>
   895bc:	1805883a 	mov	r2,r3
   895c0:	003fd406 	br	89514 <__udivdi3+0x4f8>
   895c4:	102b883a 	mov	r21,r2
   895c8:	003fbf06 	br	894c8 <__udivdi3+0x4ac>
   895cc:	8c7fff84 	addi	r17,r17,-2
   895d0:	2409883a 	add	r4,r4,r16
   895d4:	003f3006 	br	89298 <__udivdi3+0x27c>
   895d8:	94bfff84 	addi	r18,r18,-2
   895dc:	1c07883a 	add	r3,r3,r16
   895e0:	003ec806 	br	89104 <__udivdi3+0xe8>

000895e4 <__umoddi3>:
   895e4:	defff504 	addi	sp,sp,-44
   895e8:	dd000515 	stw	r20,20(sp)
   895ec:	dcc00415 	stw	r19,16(sp)
   895f0:	dc800315 	stw	r18,12(sp)
   895f4:	dc400215 	stw	r17,8(sp)
   895f8:	dc000115 	stw	r16,4(sp)
   895fc:	dfc00a15 	stw	ra,40(sp)
   89600:	df000915 	stw	fp,36(sp)
   89604:	ddc00815 	stw	r23,32(sp)
   89608:	dd800715 	stw	r22,28(sp)
   8960c:	dd400615 	stw	r21,24(sp)
   89610:	2025883a 	mov	r18,r4
   89614:	2823883a 	mov	r17,r5
   89618:	3021883a 	mov	r16,r6
   8961c:	2027883a 	mov	r19,r4
   89620:	2829883a 	mov	r20,r5
   89624:	3800351e 	bne	r7,zero,896fc <__umoddi3+0x118>
   89628:	29804d2e 	bgeu	r5,r6,89760 <__umoddi3+0x17c>
   8962c:	00bfffd4 	movui	r2,65535
   89630:	11809a36 	bltu	r2,r6,8989c <__umoddi3+0x2b8>
   89634:	00803fc4 	movi	r2,255
   89638:	11813936 	bltu	r2,r6,89b20 <__umoddi3+0x53c>
   8963c:	0005883a 	mov	r2,zero
   89640:	0009883a 	mov	r4,zero
   89644:	3084d83a 	srl	r2,r6,r2
   89648:	00c00274 	movhi	r3,9
   8964c:	18f8dd04 	addi	r3,r3,-7308
   89650:	05400804 	movi	r21,32
   89654:	1885883a 	add	r2,r3,r2
   89658:	10800003 	ldbu	r2,0(r2)
   8965c:	1109883a 	add	r4,r2,r4
   89660:	a92bc83a 	sub	r21,r21,r4
   89664:	a800ec26 	beq	r21,zero,89a18 <__umoddi3+0x434>
   89668:	8d62983a 	sll	r17,r17,r21
   8966c:	9108d83a 	srl	r4,r18,r4
   89670:	3560983a 	sll	r16,r6,r21
   89674:	9566983a 	sll	r19,r18,r21
   89678:	8928b03a 	or	r20,r17,r4
   8967c:	8022d43a 	srli	r17,r16,16
   89680:	a009883a 	mov	r4,r20
   89684:	84bfffcc 	andi	r18,r16,65535
   89688:	880b883a 	mov	r5,r17
   8968c:	00818900 	call	81890 <__umodsi3>
   89690:	a009883a 	mov	r4,r20
   89694:	880b883a 	mov	r5,r17
   89698:	102d883a 	mov	r22,r2
   8969c:	00818880 	call	81888 <__udivsi3>
   896a0:	b02c943a 	slli	r22,r22,16
   896a4:	9806d43a 	srli	r3,r19,16
   896a8:	1485383a 	mul	r2,r2,r18
   896ac:	b0c6b03a 	or	r3,r22,r3
   896b0:	1880042e 	bgeu	r3,r2,896c4 <__umoddi3+0xe0>
   896b4:	1c07883a 	add	r3,r3,r16
   896b8:	1c000236 	bltu	r3,r16,896c4 <__umoddi3+0xe0>
   896bc:	1880012e 	bgeu	r3,r2,896c4 <__umoddi3+0xe0>
   896c0:	1c07883a 	add	r3,r3,r16
   896c4:	18a9c83a 	sub	r20,r3,r2
   896c8:	a009883a 	mov	r4,r20
   896cc:	880b883a 	mov	r5,r17
   896d0:	00818900 	call	81890 <__umodsi3>
   896d4:	102d883a 	mov	r22,r2
   896d8:	a009883a 	mov	r4,r20
   896dc:	880b883a 	mov	r5,r17
   896e0:	00818880 	call	81888 <__udivsi3>
   896e4:	b02c943a 	slli	r22,r22,16
   896e8:	1485383a 	mul	r2,r2,r18
   896ec:	9cffffcc 	andi	r19,r19,65535
   896f0:	b4e6b03a 	or	r19,r22,r19
   896f4:	9880522e 	bgeu	r19,r2,89840 <__umoddi3+0x25c>
   896f8:	00004d06 	br	89830 <__umoddi3+0x24c>
   896fc:	29c05436 	bltu	r5,r7,89850 <__umoddi3+0x26c>
   89700:	00bfffd4 	movui	r2,65535
   89704:	11c0602e 	bgeu	r2,r7,89888 <__umoddi3+0x2a4>
   89708:	00804034 	movhi	r2,256
   8970c:	10bfffc4 	addi	r2,r2,-1
   89710:	11c0f736 	bltu	r2,r7,89af0 <__umoddi3+0x50c>
   89714:	00c00404 	movi	r3,16
   89718:	1827883a 	mov	r19,r3
   8971c:	38c6d83a 	srl	r3,r7,r3
   89720:	01000274 	movhi	r4,9
   89724:	2138dd04 	addi	r4,r4,-7308
   89728:	04000804 	movi	r16,32
   8972c:	20c7883a 	add	r3,r4,r3
   89730:	18800003 	ldbu	r2,0(r3)
   89734:	14e7883a 	add	r19,r2,r19
   89738:	84e1c83a 	sub	r16,r16,r19
   8973c:	8000621e 	bne	r16,zero,898c8 <__umoddi3+0x2e4>
   89740:	3c400136 	bltu	r7,r17,89748 <__umoddi3+0x164>
   89744:	91810336 	bltu	r18,r6,89b54 <__umoddi3+0x570>
   89748:	9185c83a 	sub	r2,r18,r6
   8974c:	89e3c83a 	sub	r17,r17,r7
   89750:	90a5803a 	cmpltu	r18,r18,r2
   89754:	8ca9c83a 	sub	r20,r17,r18
   89758:	a007883a 	mov	r3,r20
   8975c:	00003e06 	br	89858 <__umoddi3+0x274>
   89760:	3000041e 	bne	r6,zero,89774 <__umoddi3+0x190>
   89764:	01000044 	movi	r4,1
   89768:	000b883a 	mov	r5,zero
   8976c:	00818880 	call	81888 <__udivsi3>
   89770:	1021883a 	mov	r16,r2
   89774:	00bfffd4 	movui	r2,65535
   89778:	14004e2e 	bgeu	r2,r16,898b4 <__umoddi3+0x2d0>
   8977c:	00804034 	movhi	r2,256
   89780:	10bfffc4 	addi	r2,r2,-1
   89784:	1400e336 	bltu	r2,r16,89b14 <__umoddi3+0x530>
   89788:	00800404 	movi	r2,16
   8978c:	1007883a 	mov	r3,r2
   89790:	8084d83a 	srl	r2,r16,r2
   89794:	01000274 	movhi	r4,9
   89798:	2138dd04 	addi	r4,r4,-7308
   8979c:	05400804 	movi	r21,32
   897a0:	2085883a 	add	r2,r4,r2
   897a4:	10800003 	ldbu	r2,0(r2)
   897a8:	10c7883a 	add	r3,r2,r3
   897ac:	a8ebc83a 	sub	r21,r21,r3
   897b0:	a8009b1e 	bne	r21,zero,89a20 <__umoddi3+0x43c>
   897b4:	8028d43a 	srli	r20,r16,16
   897b8:	8c23c83a 	sub	r17,r17,r16
   897bc:	85bfffcc 	andi	r22,r16,65535
   897c0:	8809883a 	mov	r4,r17
   897c4:	a00b883a 	mov	r5,r20
   897c8:	00818900 	call	81890 <__umodsi3>
   897cc:	8809883a 	mov	r4,r17
   897d0:	a00b883a 	mov	r5,r20
   897d4:	1025883a 	mov	r18,r2
   897d8:	00818880 	call	81888 <__udivsi3>
   897dc:	9024943a 	slli	r18,r18,16
   897e0:	9806d43a 	srli	r3,r19,16
   897e4:	1585383a 	mul	r2,r2,r22
   897e8:	90c6b03a 	or	r3,r18,r3
   897ec:	1880032e 	bgeu	r3,r2,897fc <__umoddi3+0x218>
   897f0:	1c07883a 	add	r3,r3,r16
   897f4:	1c000136 	bltu	r3,r16,897fc <__umoddi3+0x218>
   897f8:	1880d436 	bltu	r3,r2,89b4c <__umoddi3+0x568>
   897fc:	18a3c83a 	sub	r17,r3,r2
   89800:	8809883a 	mov	r4,r17
   89804:	a00b883a 	mov	r5,r20
   89808:	00818900 	call	81890 <__umodsi3>
   8980c:	1025883a 	mov	r18,r2
   89810:	8809883a 	mov	r4,r17
   89814:	a00b883a 	mov	r5,r20
   89818:	00818880 	call	81888 <__udivsi3>
   8981c:	9024943a 	slli	r18,r18,16
   89820:	1585383a 	mul	r2,r2,r22
   89824:	9cffffcc 	andi	r19,r19,65535
   89828:	94e6b03a 	or	r19,r18,r19
   8982c:	9880042e 	bgeu	r19,r2,89840 <__umoddi3+0x25c>
   89830:	9c27883a 	add	r19,r19,r16
   89834:	9c000236 	bltu	r19,r16,89840 <__umoddi3+0x25c>
   89838:	9880012e 	bgeu	r19,r2,89840 <__umoddi3+0x25c>
   8983c:	9c27883a 	add	r19,r19,r16
   89840:	98a7c83a 	sub	r19,r19,r2
   89844:	9d44d83a 	srl	r2,r19,r21
   89848:	0007883a 	mov	r3,zero
   8984c:	00000206 	br	89858 <__umoddi3+0x274>
   89850:	2005883a 	mov	r2,r4
   89854:	2807883a 	mov	r3,r5
   89858:	dfc00a17 	ldw	ra,40(sp)
   8985c:	df000917 	ldw	fp,36(sp)
   89860:	ddc00817 	ldw	r23,32(sp)
   89864:	dd800717 	ldw	r22,28(sp)
   89868:	dd400617 	ldw	r21,24(sp)
   8986c:	dd000517 	ldw	r20,20(sp)
   89870:	dcc00417 	ldw	r19,16(sp)
   89874:	dc800317 	ldw	r18,12(sp)
   89878:	dc400217 	ldw	r17,8(sp)
   8987c:	dc000117 	ldw	r16,4(sp)
   89880:	dec00b04 	addi	sp,sp,44
   89884:	f800283a 	ret
   89888:	00803fc4 	movi	r2,255
   8988c:	11c09536 	bltu	r2,r7,89ae4 <__umoddi3+0x500>
   89890:	0007883a 	mov	r3,zero
   89894:	0027883a 	mov	r19,zero
   89898:	003fa006 	br	8971c <__umoddi3+0x138>
   8989c:	00804034 	movhi	r2,256
   898a0:	10bfffc4 	addi	r2,r2,-1
   898a4:	11809536 	bltu	r2,r6,89afc <__umoddi3+0x518>
   898a8:	00800404 	movi	r2,16
   898ac:	1009883a 	mov	r4,r2
   898b0:	003f6406 	br	89644 <__umoddi3+0x60>
   898b4:	00803fc4 	movi	r2,255
   898b8:	14009336 	bltu	r2,r16,89b08 <__umoddi3+0x524>
   898bc:	0005883a 	mov	r2,zero
   898c0:	0007883a 	mov	r3,zero
   898c4:	003fb206 	br	89790 <__umoddi3+0x1ac>
   898c8:	34c4d83a 	srl	r2,r6,r19
   898cc:	3c0e983a 	sll	r7,r7,r16
   898d0:	8ceed83a 	srl	r23,r17,r19
   898d4:	8c22983a 	sll	r17,r17,r16
   898d8:	38a8b03a 	or	r20,r7,r2
   898dc:	a02ad43a 	srli	r21,r20,16
   898e0:	94c4d83a 	srl	r2,r18,r19
   898e4:	b809883a 	mov	r4,r23
   898e8:	a80b883a 	mov	r5,r21
   898ec:	88a2b03a 	or	r17,r17,r2
   898f0:	342c983a 	sll	r22,r6,r16
   898f4:	00818900 	call	81890 <__umodsi3>
   898f8:	b809883a 	mov	r4,r23
   898fc:	a80b883a 	mov	r5,r21
   89900:	d8800015 	stw	r2,0(sp)
   89904:	00818880 	call	81888 <__udivsi3>
   89908:	d8c00017 	ldw	r3,0(sp)
   8990c:	102f883a 	mov	r23,r2
   89910:	a73fffcc 	andi	fp,r20,65535
   89914:	180a943a 	slli	r5,r3,16
   89918:	8804d43a 	srli	r2,r17,16
   8991c:	bf09383a 	mul	r4,r23,fp
   89920:	9424983a 	sll	r18,r18,r16
   89924:	288ab03a 	or	r5,r5,r2
   89928:	2900042e 	bgeu	r5,r4,8993c <__umoddi3+0x358>
   8992c:	2d0b883a 	add	r5,r5,r20
   89930:	b8bfffc4 	addi	r2,r23,-1
   89934:	2d00812e 	bgeu	r5,r20,89b3c <__umoddi3+0x558>
   89938:	102f883a 	mov	r23,r2
   8993c:	2907c83a 	sub	r3,r5,r4
   89940:	1809883a 	mov	r4,r3
   89944:	a80b883a 	mov	r5,r21
   89948:	d8c00015 	stw	r3,0(sp)
   8994c:	00818900 	call	81890 <__umodsi3>
   89950:	d8c00017 	ldw	r3,0(sp)
   89954:	a80b883a 	mov	r5,r21
   89958:	d8800015 	stw	r2,0(sp)
   8995c:	1809883a 	mov	r4,r3
   89960:	00818880 	call	81888 <__udivsi3>
   89964:	d9800017 	ldw	r6,0(sp)
   89968:	8c7fffcc 	andi	r17,r17,65535
   8996c:	3008943a 	slli	r4,r6,16
   89970:	170d383a 	mul	r6,r2,fp
   89974:	2448b03a 	or	r4,r4,r17
   89978:	2180042e 	bgeu	r4,r6,8998c <__umoddi3+0x3a8>
   8997c:	2509883a 	add	r4,r4,r20
   89980:	10ffffc4 	addi	r3,r2,-1
   89984:	2500692e 	bgeu	r4,r20,89b2c <__umoddi3+0x548>
   89988:	1805883a 	mov	r2,r3
   8998c:	b82e943a 	slli	r23,r23,16
   89990:	b010d43a 	srli	r8,r22,16
   89994:	b1ffffcc 	andi	r7,r22,65535
   89998:	15eeb03a 	or	r23,r2,r23
   8999c:	b8bfffcc 	andi	r2,r23,65535
   899a0:	b82ed43a 	srli	r23,r23,16
   899a4:	11c7383a 	mul	r3,r2,r7
   899a8:	1205383a 	mul	r2,r2,r8
   899ac:	b9cf383a 	mul	r7,r23,r7
   899b0:	400b883a 	mov	r5,r8
   899b4:	1810d43a 	srli	r8,r3,16
   899b8:	3885883a 	add	r2,r7,r2
   899bc:	2189c83a 	sub	r4,r4,r6
   899c0:	1205883a 	add	r2,r2,r8
   899c4:	b94b383a 	mul	r5,r23,r5
   899c8:	11c0022e 	bgeu	r2,r7,899d4 <__umoddi3+0x3f0>
   899cc:	01800074 	movhi	r6,1
   899d0:	298b883a 	add	r5,r5,r6
   899d4:	100cd43a 	srli	r6,r2,16
   899d8:	1004943a 	slli	r2,r2,16
   899dc:	18ffffcc 	andi	r3,r3,65535
   899e0:	298b883a 	add	r5,r5,r6
   899e4:	10c5883a 	add	r2,r2,r3
   899e8:	21403836 	bltu	r4,r5,89acc <__umoddi3+0x4e8>
   899ec:	21405c26 	beq	r4,r5,89b60 <__umoddi3+0x57c>
   899f0:	2147c83a 	sub	r3,r4,r5
   899f4:	102d883a 	mov	r22,r2
   899f8:	95adc83a 	sub	r22,r18,r22
   899fc:	95a5803a 	cmpltu	r18,r18,r22
   89a00:	1c87c83a 	sub	r3,r3,r18
   89a04:	1cc4983a 	sll	r2,r3,r19
   89a08:	b42cd83a 	srl	r22,r22,r16
   89a0c:	1c06d83a 	srl	r3,r3,r16
   89a10:	1584b03a 	or	r2,r2,r22
   89a14:	003f9006 	br	89858 <__umoddi3+0x274>
   89a18:	002b883a 	mov	r21,zero
   89a1c:	003f1706 	br	8967c <__umoddi3+0x98>
   89a20:	8560983a 	sll	r16,r16,r21
   89a24:	88e6d83a 	srl	r19,r17,r3
   89a28:	90c6d83a 	srl	r3,r18,r3
   89a2c:	8028d43a 	srli	r20,r16,16
   89a30:	8d62983a 	sll	r17,r17,r21
   89a34:	9809883a 	mov	r4,r19
   89a38:	a00b883a 	mov	r5,r20
   89a3c:	88eeb03a 	or	r23,r17,r3
   89a40:	00818900 	call	81890 <__umodsi3>
   89a44:	9809883a 	mov	r4,r19
   89a48:	a00b883a 	mov	r5,r20
   89a4c:	1023883a 	mov	r17,r2
   89a50:	00818880 	call	81888 <__udivsi3>
   89a54:	85bfffcc 	andi	r22,r16,65535
   89a58:	880a943a 	slli	r5,r17,16
   89a5c:	b806d43a 	srli	r3,r23,16
   89a60:	1585383a 	mul	r2,r2,r22
   89a64:	9566983a 	sll	r19,r18,r21
   89a68:	28cab03a 	or	r5,r5,r3
   89a6c:	2880042e 	bgeu	r5,r2,89a80 <__umoddi3+0x49c>
   89a70:	2c0b883a 	add	r5,r5,r16
   89a74:	2c000236 	bltu	r5,r16,89a80 <__umoddi3+0x49c>
   89a78:	2880012e 	bgeu	r5,r2,89a80 <__umoddi3+0x49c>
   89a7c:	2c0b883a 	add	r5,r5,r16
   89a80:	28a5c83a 	sub	r18,r5,r2
   89a84:	9009883a 	mov	r4,r18
   89a88:	a00b883a 	mov	r5,r20
   89a8c:	00818900 	call	81890 <__umodsi3>
   89a90:	1023883a 	mov	r17,r2
   89a94:	9009883a 	mov	r4,r18
   89a98:	a00b883a 	mov	r5,r20
   89a9c:	00818880 	call	81888 <__udivsi3>
   89aa0:	8822943a 	slli	r17,r17,16
   89aa4:	1585383a 	mul	r2,r2,r22
   89aa8:	bdffffcc 	andi	r23,r23,65535
   89aac:	8de2b03a 	or	r17,r17,r23
   89ab0:	8880042e 	bgeu	r17,r2,89ac4 <__umoddi3+0x4e0>
   89ab4:	8c23883a 	add	r17,r17,r16
   89ab8:	8c000236 	bltu	r17,r16,89ac4 <__umoddi3+0x4e0>
   89abc:	8880012e 	bgeu	r17,r2,89ac4 <__umoddi3+0x4e0>
   89ac0:	8c23883a 	add	r17,r17,r16
   89ac4:	88a3c83a 	sub	r17,r17,r2
   89ac8:	003f3d06 	br	897c0 <__umoddi3+0x1dc>
   89acc:	15adc83a 	sub	r22,r2,r22
   89ad0:	2d07c83a 	sub	r3,r5,r20
   89ad4:	1585803a 	cmpltu	r2,r2,r22
   89ad8:	1887c83a 	sub	r3,r3,r2
   89adc:	20c7c83a 	sub	r3,r4,r3
   89ae0:	003fc506 	br	899f8 <__umoddi3+0x414>
   89ae4:	00c00204 	movi	r3,8
   89ae8:	1827883a 	mov	r19,r3
   89aec:	003f0b06 	br	8971c <__umoddi3+0x138>
   89af0:	00c00604 	movi	r3,24
   89af4:	1827883a 	mov	r19,r3
   89af8:	003f0806 	br	8971c <__umoddi3+0x138>
   89afc:	00800604 	movi	r2,24
   89b00:	1009883a 	mov	r4,r2
   89b04:	003ecf06 	br	89644 <__umoddi3+0x60>
   89b08:	00800204 	movi	r2,8
   89b0c:	1007883a 	mov	r3,r2
   89b10:	003f1f06 	br	89790 <__umoddi3+0x1ac>
   89b14:	00800604 	movi	r2,24
   89b18:	1007883a 	mov	r3,r2
   89b1c:	003f1c06 	br	89790 <__umoddi3+0x1ac>
   89b20:	00800204 	movi	r2,8
   89b24:	1009883a 	mov	r4,r2
   89b28:	003ec606 	br	89644 <__umoddi3+0x60>
   89b2c:	21bf962e 	bgeu	r4,r6,89988 <__umoddi3+0x3a4>
   89b30:	10bfff84 	addi	r2,r2,-2
   89b34:	2509883a 	add	r4,r4,r20
   89b38:	003f9406 	br	8998c <__umoddi3+0x3a8>
   89b3c:	293f7e2e 	bgeu	r5,r4,89938 <__umoddi3+0x354>
   89b40:	bdffff84 	addi	r23,r23,-2
   89b44:	2d0b883a 	add	r5,r5,r20
   89b48:	003f7c06 	br	8993c <__umoddi3+0x358>
   89b4c:	1c07883a 	add	r3,r3,r16
   89b50:	003f2a06 	br	897fc <__umoddi3+0x218>
   89b54:	9005883a 	mov	r2,r18
   89b58:	a007883a 	mov	r3,r20
   89b5c:	003f3e06 	br	89858 <__umoddi3+0x274>
   89b60:	90bfda36 	bltu	r18,r2,89acc <__umoddi3+0x4e8>
   89b64:	102d883a 	mov	r22,r2
   89b68:	0007883a 	mov	r3,zero
   89b6c:	003fa206 	br	899f8 <__umoddi3+0x414>

00089b70 <_fpadd_parts>:
   89b70:	2005883a 	mov	r2,r4
   89b74:	21000017 	ldw	r4,0(r4)
   89b78:	01c00044 	movi	r7,1
   89b7c:	3900622e 	bgeu	r7,r4,89d08 <_fpadd_parts+0x198>
   89b80:	28c00017 	ldw	r3,0(r5)
   89b84:	38c05f2e 	bgeu	r7,r3,89d04 <_fpadd_parts+0x194>
   89b88:	01c00104 	movi	r7,4
   89b8c:	21c0c626 	beq	r4,r7,89ea8 <_fpadd_parts+0x338>
   89b90:	19c05c26 	beq	r3,r7,89d04 <_fpadd_parts+0x194>
   89b94:	01c00084 	movi	r7,2
   89b98:	19c06b26 	beq	r3,r7,89d48 <_fpadd_parts+0x1d8>
   89b9c:	21c05926 	beq	r4,r7,89d04 <_fpadd_parts+0x194>
   89ba0:	11c00217 	ldw	r7,8(r2)
   89ba4:	2ac00217 	ldw	r11,8(r5)
   89ba8:	13000317 	ldw	r12,12(r2)
   89bac:	13400417 	ldw	r13,16(r2)
   89bb0:	3ac9c83a 	sub	r4,r7,r11
   89bb4:	2a000317 	ldw	r8,12(r5)
   89bb8:	2a400417 	ldw	r9,16(r5)
   89bbc:	2015883a 	mov	r10,r4
   89bc0:	20007516 	blt	r4,zero,89d98 <_fpadd_parts+0x228>
   89bc4:	00c00fc4 	movi	r3,63
   89bc8:	1a805016 	blt	r3,r10,89d0c <_fpadd_parts+0x19c>
   89bcc:	0100870e 	bge	zero,r4,89dec <_fpadd_parts+0x27c>
   89bd0:	50fff804 	addi	r3,r10,-32
   89bd4:	18009916 	blt	r3,zero,89e3c <_fpadd_parts+0x2cc>
   89bd8:	48d6d83a 	srl	r11,r9,r3
   89bdc:	001d883a 	mov	r14,zero
   89be0:	18009e16 	blt	r3,zero,89e5c <_fpadd_parts+0x2ec>
   89be4:	01000044 	movi	r4,1
   89be8:	20c6983a 	sll	r3,r4,r3
   89bec:	0015883a 	mov	r10,zero
   89bf0:	513fffc4 	addi	r4,r10,-1
   89bf4:	2295403a 	cmpgeu	r10,r4,r10
   89bf8:	1a87c83a 	sub	r3,r3,r10
   89bfc:	1a52703a 	and	r9,r3,r9
   89c00:	2210703a 	and	r8,r4,r8
   89c04:	4250b03a 	or	r8,r8,r9
   89c08:	4010c03a 	cmpne	r8,r8,zero
   89c0c:	42d0b03a 	or	r8,r8,r11
   89c10:	7013883a 	mov	r9,r14
   89c14:	11000117 	ldw	r4,4(r2)
   89c18:	28800117 	ldw	r2,4(r5)
   89c1c:	20804126 	beq	r4,r2,89d24 <_fpadd_parts+0x1b4>
   89c20:	20006326 	beq	r4,zero,89db0 <_fpadd_parts+0x240>
   89c24:	4305c83a 	sub	r2,r8,r12
   89c28:	4091803a 	cmpltu	r8,r8,r2
   89c2c:	4b47c83a 	sub	r3,r9,r13
   89c30:	1a07c83a 	sub	r3,r3,r8
   89c34:	18006316 	blt	r3,zero,89dc4 <_fpadd_parts+0x254>
   89c38:	30000115 	stw	zero,4(r6)
   89c3c:	31c00215 	stw	r7,8(r6)
   89c40:	30800315 	stw	r2,12(r6)
   89c44:	30c00415 	stw	r3,16(r6)
   89c48:	11ffffc4 	addi	r7,r2,-1
   89c4c:	388b403a 	cmpgeu	r5,r7,r2
   89c50:	194bc83a 	sub	r5,r3,r5
   89c54:	01040034 	movhi	r4,4096
   89c58:	213fffc4 	addi	r4,r4,-1
   89c5c:	21401736 	bltu	r4,r5,89cbc <_fpadd_parts+0x14c>
   89c60:	29008226 	beq	r5,r4,89e6c <_fpadd_parts+0x2fc>
   89c64:	31400217 	ldw	r5,8(r6)
   89c68:	02840034 	movhi	r10,4096
   89c6c:	52bfffc4 	addi	r10,r10,-1
   89c70:	033fff84 	movi	r12,-2
   89c74:	297fffc4 	addi	r5,r5,-1
   89c78:	00000106 	br	89c80 <_fpadd_parts+0x110>
   89c7c:	3a804a26 	beq	r7,r10,89da8 <_fpadd_parts+0x238>
   89c80:	1089883a 	add	r4,r2,r2
   89c84:	2091803a 	cmpltu	r8,r4,r2
   89c88:	18c7883a 	add	r3,r3,r3
   89c8c:	227fffc4 	addi	r9,r4,-1
   89c90:	40d1883a 	add	r8,r8,r3
   89c94:	490f403a 	cmpgeu	r7,r9,r4
   89c98:	41cfc83a 	sub	r7,r8,r7
   89c9c:	2817883a 	mov	r11,r5
   89ca0:	2005883a 	mov	r2,r4
   89ca4:	4007883a 	mov	r3,r8
   89ca8:	297fffc4 	addi	r5,r5,-1
   89cac:	51fff32e 	bgeu	r10,r7,89c7c <_fpadd_parts+0x10c>
   89cb0:	31000315 	stw	r4,12(r6)
   89cb4:	32000415 	stw	r8,16(r6)
   89cb8:	32c00215 	stw	r11,8(r6)
   89cbc:	010000c4 	movi	r4,3
   89cc0:	31000015 	stw	r4,0(r6)
   89cc4:	01080034 	movhi	r4,8192
   89cc8:	213fffc4 	addi	r4,r4,-1
   89ccc:	20c00b2e 	bgeu	r4,r3,89cfc <_fpadd_parts+0x18c>
   89cd0:	180e97fa 	slli	r7,r3,31
   89cd4:	1008d07a 	srli	r4,r2,1
   89cd8:	31400217 	ldw	r5,8(r6)
   89cdc:	1806d07a 	srli	r3,r3,1
   89ce0:	1080004c 	andi	r2,r2,1
   89ce4:	3908b03a 	or	r4,r7,r4
   89ce8:	1108b03a 	or	r4,r2,r4
   89cec:	29400044 	addi	r5,r5,1
   89cf0:	31000315 	stw	r4,12(r6)
   89cf4:	30c00415 	stw	r3,16(r6)
   89cf8:	31400215 	stw	r5,8(r6)
   89cfc:	3005883a 	mov	r2,r6
   89d00:	f800283a 	ret
   89d04:	2805883a 	mov	r2,r5
   89d08:	f800283a 	ret
   89d0c:	59c01e0e 	bge	r11,r7,89d88 <_fpadd_parts+0x218>
   89d10:	11000117 	ldw	r4,4(r2)
   89d14:	28800117 	ldw	r2,4(r5)
   89d18:	0011883a 	mov	r8,zero
   89d1c:	0013883a 	mov	r9,zero
   89d20:	20bfbf1e 	bne	r4,r2,89c20 <_fpadd_parts+0xb0>
   89d24:	4305883a 	add	r2,r8,r12
   89d28:	1207803a 	cmpltu	r3,r2,r8
   89d2c:	4b53883a 	add	r9,r9,r13
   89d30:	1a47883a 	add	r3,r3,r9
   89d34:	31000115 	stw	r4,4(r6)
   89d38:	31c00215 	stw	r7,8(r6)
   89d3c:	30800315 	stw	r2,12(r6)
   89d40:	30c00415 	stw	r3,16(r6)
   89d44:	003fdd06 	br	89cbc <_fpadd_parts+0x14c>
   89d48:	20ffef1e 	bne	r4,r3,89d08 <_fpadd_parts+0x198>
   89d4c:	31000015 	stw	r4,0(r6)
   89d50:	10c00117 	ldw	r3,4(r2)
   89d54:	30c00115 	stw	r3,4(r6)
   89d58:	10c00217 	ldw	r3,8(r2)
   89d5c:	11000117 	ldw	r4,4(r2)
   89d60:	29400117 	ldw	r5,4(r5)
   89d64:	30c00215 	stw	r3,8(r6)
   89d68:	10c00317 	ldw	r3,12(r2)
   89d6c:	2908703a 	and	r4,r5,r4
   89d70:	30c00315 	stw	r3,12(r6)
   89d74:	10c00417 	ldw	r3,16(r2)
   89d78:	31000115 	stw	r4,4(r6)
   89d7c:	3005883a 	mov	r2,r6
   89d80:	30c00415 	stw	r3,16(r6)
   89d84:	f800283a 	ret
   89d88:	580f883a 	mov	r7,r11
   89d8c:	0019883a 	mov	r12,zero
   89d90:	001b883a 	mov	r13,zero
   89d94:	003f9f06 	br	89c14 <_fpadd_parts+0xa4>
   89d98:	0115c83a 	sub	r10,zero,r4
   89d9c:	00c00fc4 	movi	r3,63
   89da0:	1abfda16 	blt	r3,r10,89d0c <_fpadd_parts+0x19c>
   89da4:	003f8906 	br	89bcc <_fpadd_parts+0x5c>
   89da8:	627fb52e 	bgeu	r12,r9,89c80 <_fpadd_parts+0x110>
   89dac:	003fc006 	br	89cb0 <_fpadd_parts+0x140>
   89db0:	6205c83a 	sub	r2,r12,r8
   89db4:	6099803a 	cmpltu	r12,r12,r2
   89db8:	6a47c83a 	sub	r3,r13,r9
   89dbc:	1b07c83a 	sub	r3,r3,r12
   89dc0:	183f9d0e 	bge	r3,zero,89c38 <_fpadd_parts+0xc8>
   89dc4:	0085c83a 	sub	r2,zero,r2
   89dc8:	1008c03a 	cmpne	r4,r2,zero
   89dcc:	00c7c83a 	sub	r3,zero,r3
   89dd0:	1907c83a 	sub	r3,r3,r4
   89dd4:	01000044 	movi	r4,1
   89dd8:	31000115 	stw	r4,4(r6)
   89ddc:	31c00215 	stw	r7,8(r6)
   89de0:	30800315 	stw	r2,12(r6)
   89de4:	30c00415 	stw	r3,16(r6)
   89de8:	003f9706 	br	89c48 <_fpadd_parts+0xd8>
   89dec:	203f8926 	beq	r4,zero,89c14 <_fpadd_parts+0xa4>
   89df0:	50fff804 	addi	r3,r10,-32
   89df4:	3a8f883a 	add	r7,r7,r10
   89df8:	18002316 	blt	r3,zero,89e88 <_fpadd_parts+0x318>
   89dfc:	68d6d83a 	srl	r11,r13,r3
   89e00:	001d883a 	mov	r14,zero
   89e04:	18001c16 	blt	r3,zero,89e78 <_fpadd_parts+0x308>
   89e08:	01000044 	movi	r4,1
   89e0c:	20c6983a 	sll	r3,r4,r3
   89e10:	0015883a 	mov	r10,zero
   89e14:	513fffc4 	addi	r4,r10,-1
   89e18:	2295403a 	cmpgeu	r10,r4,r10
   89e1c:	1a87c83a 	sub	r3,r3,r10
   89e20:	1b5a703a 	and	r13,r3,r13
   89e24:	2318703a 	and	r12,r4,r12
   89e28:	6358b03a 	or	r12,r12,r13
   89e2c:	6018c03a 	cmpne	r12,r12,zero
   89e30:	62d8b03a 	or	r12,r12,r11
   89e34:	701b883a 	mov	r13,r14
   89e38:	003f7606 	br	89c14 <_fpadd_parts+0xa4>
   89e3c:	4808907a 	slli	r4,r9,1
   89e40:	02c007c4 	movi	r11,31
   89e44:	5a97c83a 	sub	r11,r11,r10
   89e48:	22c8983a 	sll	r4,r4,r11
   89e4c:	4296d83a 	srl	r11,r8,r10
   89e50:	4a9cd83a 	srl	r14,r9,r10
   89e54:	22d6b03a 	or	r11,r4,r11
   89e58:	003f6106 	br	89be0 <_fpadd_parts+0x70>
   89e5c:	00c00044 	movi	r3,1
   89e60:	1a94983a 	sll	r10,r3,r10
   89e64:	0007883a 	mov	r3,zero
   89e68:	003f6106 	br	89bf0 <_fpadd_parts+0x80>
   89e6c:	013fff84 	movi	r4,-2
   89e70:	21ff7c2e 	bgeu	r4,r7,89c64 <_fpadd_parts+0xf4>
   89e74:	003f9106 	br	89cbc <_fpadd_parts+0x14c>
   89e78:	00c00044 	movi	r3,1
   89e7c:	1a94983a 	sll	r10,r3,r10
   89e80:	0007883a 	mov	r3,zero
   89e84:	003fe306 	br	89e14 <_fpadd_parts+0x2a4>
   89e88:	6816907a 	slli	r11,r13,1
   89e8c:	010007c4 	movi	r4,31
   89e90:	2289c83a 	sub	r4,r4,r10
   89e94:	5908983a 	sll	r4,r11,r4
   89e98:	6296d83a 	srl	r11,r12,r10
   89e9c:	6a9cd83a 	srl	r14,r13,r10
   89ea0:	22d6b03a 	or	r11,r4,r11
   89ea4:	003fd706 	br	89e04 <_fpadd_parts+0x294>
   89ea8:	193f971e 	bne	r3,r4,89d08 <_fpadd_parts+0x198>
   89eac:	11000117 	ldw	r4,4(r2)
   89eb0:	28c00117 	ldw	r3,4(r5)
   89eb4:	20ff9426 	beq	r4,r3,89d08 <_fpadd_parts+0x198>
   89eb8:	00800274 	movhi	r2,9
   89ebc:	10b8d804 	addi	r2,r2,-7328
   89ec0:	f800283a 	ret

00089ec4 <__adddf3>:
   89ec4:	deffec04 	addi	sp,sp,-80
   89ec8:	d9001115 	stw	r4,68(sp)
   89ecc:	d9401215 	stw	r5,72(sp)
   89ed0:	d9001104 	addi	r4,sp,68
   89ed4:	d9400a04 	addi	r5,sp,40
   89ed8:	dfc01315 	stw	ra,76(sp)
   89edc:	d9c01015 	stw	r7,64(sp)
   89ee0:	d9800f15 	stw	r6,60(sp)
   89ee4:	008ab800 	call	8ab80 <__unpack_d>
   89ee8:	d9000f04 	addi	r4,sp,60
   89eec:	d9400504 	addi	r5,sp,20
   89ef0:	008ab800 	call	8ab80 <__unpack_d>
   89ef4:	d9000a04 	addi	r4,sp,40
   89ef8:	d9400504 	addi	r5,sp,20
   89efc:	d80d883a 	mov	r6,sp
   89f00:	0089b700 	call	89b70 <_fpadd_parts>
   89f04:	1009883a 	mov	r4,r2
   89f08:	008a95c0 	call	8a95c <__pack_d>
   89f0c:	dfc01317 	ldw	ra,76(sp)
   89f10:	dec01404 	addi	sp,sp,80
   89f14:	f800283a 	ret

00089f18 <__subdf3>:
   89f18:	deffec04 	addi	sp,sp,-80
   89f1c:	d9001115 	stw	r4,68(sp)
   89f20:	d9401215 	stw	r5,72(sp)
   89f24:	d9001104 	addi	r4,sp,68
   89f28:	d9400a04 	addi	r5,sp,40
   89f2c:	dfc01315 	stw	ra,76(sp)
   89f30:	d9c01015 	stw	r7,64(sp)
   89f34:	d9800f15 	stw	r6,60(sp)
   89f38:	008ab800 	call	8ab80 <__unpack_d>
   89f3c:	d9000f04 	addi	r4,sp,60
   89f40:	d9400504 	addi	r5,sp,20
   89f44:	008ab800 	call	8ab80 <__unpack_d>
   89f48:	d8800617 	ldw	r2,24(sp)
   89f4c:	d9000a04 	addi	r4,sp,40
   89f50:	d9400504 	addi	r5,sp,20
   89f54:	d80d883a 	mov	r6,sp
   89f58:	1080005c 	xori	r2,r2,1
   89f5c:	d8800615 	stw	r2,24(sp)
   89f60:	0089b700 	call	89b70 <_fpadd_parts>
   89f64:	1009883a 	mov	r4,r2
   89f68:	008a95c0 	call	8a95c <__pack_d>
   89f6c:	dfc01317 	ldw	ra,76(sp)
   89f70:	dec01404 	addi	sp,sp,80
   89f74:	f800283a 	ret

00089f78 <__muldf3>:
   89f78:	deffe404 	addi	sp,sp,-112
   89f7c:	d9001115 	stw	r4,68(sp)
   89f80:	d9401215 	stw	r5,72(sp)
   89f84:	d9001104 	addi	r4,sp,68
   89f88:	d9400a04 	addi	r5,sp,40
   89f8c:	dfc01b15 	stw	ra,108(sp)
   89f90:	d9800f15 	stw	r6,60(sp)
   89f94:	d9c01015 	stw	r7,64(sp)
   89f98:	ddc01a15 	stw	r23,104(sp)
   89f9c:	dd801915 	stw	r22,100(sp)
   89fa0:	dd401815 	stw	r21,96(sp)
   89fa4:	dd001715 	stw	r20,92(sp)
   89fa8:	dcc01615 	stw	r19,88(sp)
   89fac:	dc801515 	stw	r18,84(sp)
   89fb0:	dc401415 	stw	r17,80(sp)
   89fb4:	dc001315 	stw	r16,76(sp)
   89fb8:	008ab800 	call	8ab80 <__unpack_d>
   89fbc:	d9000f04 	addi	r4,sp,60
   89fc0:	d9400504 	addi	r5,sp,20
   89fc4:	008ab800 	call	8ab80 <__unpack_d>
   89fc8:	d8c00a17 	ldw	r3,40(sp)
   89fcc:	00800044 	movi	r2,1
   89fd0:	10c01136 	bltu	r2,r3,8a018 <__muldf3+0xa0>
   89fd4:	d8c00b17 	ldw	r3,44(sp)
   89fd8:	d8800617 	ldw	r2,24(sp)
   89fdc:	d9000a04 	addi	r4,sp,40
   89fe0:	1884c03a 	cmpne	r2,r3,r2
   89fe4:	d8800b15 	stw	r2,44(sp)
   89fe8:	008a95c0 	call	8a95c <__pack_d>
   89fec:	dfc01b17 	ldw	ra,108(sp)
   89ff0:	ddc01a17 	ldw	r23,104(sp)
   89ff4:	dd801917 	ldw	r22,100(sp)
   89ff8:	dd401817 	ldw	r21,96(sp)
   89ffc:	dd001717 	ldw	r20,92(sp)
   8a000:	dcc01617 	ldw	r19,88(sp)
   8a004:	dc801517 	ldw	r18,84(sp)
   8a008:	dc401417 	ldw	r17,80(sp)
   8a00c:	dc001317 	ldw	r16,76(sp)
   8a010:	dec01c04 	addi	sp,sp,112
   8a014:	f800283a 	ret
   8a018:	d9000517 	ldw	r4,20(sp)
   8a01c:	11000636 	bltu	r2,r4,8a038 <__muldf3+0xc0>
   8a020:	d8800617 	ldw	r2,24(sp)
   8a024:	d8c00b17 	ldw	r3,44(sp)
   8a028:	d9000504 	addi	r4,sp,20
   8a02c:	1884c03a 	cmpne	r2,r3,r2
   8a030:	d8800615 	stw	r2,24(sp)
   8a034:	003fec06 	br	89fe8 <__muldf3+0x70>
   8a038:	00800104 	movi	r2,4
   8a03c:	1880051e 	bne	r3,r2,8a054 <__muldf3+0xdc>
   8a040:	00800084 	movi	r2,2
   8a044:	20bfe31e 	bne	r4,r2,89fd4 <__muldf3+0x5c>
   8a048:	01000274 	movhi	r4,9
   8a04c:	2138d804 	addi	r4,r4,-7328
   8a050:	003fe506 	br	89fe8 <__muldf3+0x70>
   8a054:	2080031e 	bne	r4,r2,8a064 <__muldf3+0xec>
   8a058:	00800084 	movi	r2,2
   8a05c:	18bffa26 	beq	r3,r2,8a048 <__muldf3+0xd0>
   8a060:	003fef06 	br	8a020 <__muldf3+0xa8>
   8a064:	00800084 	movi	r2,2
   8a068:	18bfda26 	beq	r3,r2,89fd4 <__muldf3+0x5c>
   8a06c:	20bfec26 	beq	r4,r2,8a020 <__muldf3+0xa8>
   8a070:	dc000d17 	ldw	r16,52(sp)
   8a074:	dd000817 	ldw	r20,32(sp)
   8a078:	dc800917 	ldw	r18,36(sp)
   8a07c:	8009883a 	mov	r4,r16
   8a080:	000b883a 	mov	r5,zero
   8a084:	a00d883a 	mov	r6,r20
   8a088:	000f883a 	mov	r7,zero
   8a08c:	0088fbc0 	call	88fbc <__muldi3>
   8a090:	dc400e17 	ldw	r17,56(sp)
   8a094:	9009883a 	mov	r4,r18
   8a098:	800d883a 	mov	r6,r16
   8a09c:	000b883a 	mov	r5,zero
   8a0a0:	000f883a 	mov	r7,zero
   8a0a4:	102f883a 	mov	r23,r2
   8a0a8:	1827883a 	mov	r19,r3
   8a0ac:	0088fbc0 	call	88fbc <__muldi3>
   8a0b0:	900d883a 	mov	r6,r18
   8a0b4:	8809883a 	mov	r4,r17
   8a0b8:	000b883a 	mov	r5,zero
   8a0bc:	000f883a 	mov	r7,zero
   8a0c0:	102b883a 	mov	r21,r2
   8a0c4:	1821883a 	mov	r16,r3
   8a0c8:	0088fbc0 	call	88fbc <__muldi3>
   8a0cc:	8809883a 	mov	r4,r17
   8a0d0:	000b883a 	mov	r5,zero
   8a0d4:	a00d883a 	mov	r6,r20
   8a0d8:	000f883a 	mov	r7,zero
   8a0dc:	102d883a 	mov	r22,r2
   8a0e0:	1825883a 	mov	r18,r3
   8a0e4:	0088fbc0 	call	88fbc <__muldi3>
   8a0e8:	154b883a 	add	r5,r2,r21
   8a0ec:	2889803a 	cmpltu	r4,r5,r2
   8a0f0:	1c07883a 	add	r3,r3,r16
   8a0f4:	20c9883a 	add	r4,r4,r3
   8a0f8:	24004b36 	bltu	r4,r16,8a228 <__muldf3+0x2b0>
   8a0fc:	8100011e 	bne	r16,r4,8a104 <__muldf3+0x18c>
   8a100:	2d404936 	bltu	r5,r21,8a228 <__muldf3+0x2b0>
   8a104:	0011883a 	mov	r8,zero
   8a108:	0007883a 	mov	r3,zero
   8a10c:	2ccb883a 	add	r5,r5,r19
   8a110:	b80d883a 	mov	r6,r23
   8a114:	2cc0012e 	bgeu	r5,r19,8a11c <__muldf3+0x1a4>
   8a118:	02000044 	movi	r8,1
   8a11c:	258f883a 	add	r7,r4,r22
   8a120:	3909803a 	cmpltu	r4,r7,r4
   8a124:	da400c17 	ldw	r9,48(sp)
   8a128:	2489883a 	add	r4,r4,r18
   8a12c:	d8800717 	ldw	r2,28(sp)
   8a130:	20c9883a 	add	r4,r4,r3
   8a134:	da800b17 	ldw	r10,44(sp)
   8a138:	d8c00617 	ldw	r3,24(sp)
   8a13c:	3a11883a 	add	r8,r7,r8
   8a140:	4885883a 	add	r2,r9,r2
   8a144:	50c6c03a 	cmpne	r3,r10,r3
   8a148:	41cf803a 	cmpltu	r7,r8,r7
   8a14c:	12400104 	addi	r9,r2,4
   8a150:	d8c00115 	stw	r3,4(sp)
   8a154:	3909883a 	add	r4,r7,r4
   8a158:	da400215 	stw	r9,8(sp)
   8a15c:	03480034 	movhi	r13,8192
   8a160:	6b7fffc4 	addi	r13,r13,-1
   8a164:	4007883a 	mov	r3,r8
   8a168:	6900102e 	bgeu	r13,r4,8a1ac <__muldf3+0x234>
   8a16c:	10800144 	addi	r2,r2,5
   8a170:	180ed07a 	srli	r7,r3,1
   8a174:	18c0004c 	andi	r3,r3,1
   8a178:	201097fa 	slli	r8,r4,31
   8a17c:	281697fa 	slli	r11,r5,31
   8a180:	2008d07a 	srli	r4,r4,1
   8a184:	3014d07a 	srli	r10,r6,1
   8a188:	2812d07a 	srli	r9,r5,1
   8a18c:	1019883a 	mov	r12,r2
   8a190:	18000226 	beq	r3,zero,8a19c <__muldf3+0x224>
   8a194:	5a8cb03a 	or	r6,r11,r10
   8a198:	49600034 	orhi	r5,r9,32768
   8a19c:	41c6b03a 	or	r3,r8,r7
   8a1a0:	10800044 	addi	r2,r2,1
   8a1a4:	693ff236 	bltu	r13,r4,8a170 <__muldf3+0x1f8>
   8a1a8:	db000215 	stw	r12,8(sp)
   8a1ac:	03440034 	movhi	r13,4096
   8a1b0:	6b7fffc4 	addi	r13,r13,-1
   8a1b4:	69001336 	bltu	r13,r4,8a204 <__muldf3+0x28c>
   8a1b8:	d8800217 	ldw	r2,8(sp)
   8a1bc:	10bfffc4 	addi	r2,r2,-1
   8a1c0:	18d3883a 	add	r9,r3,r3
   8a1c4:	48c7803a 	cmpltu	r3,r9,r3
   8a1c8:	2109883a 	add	r4,r4,r4
   8a1cc:	190f883a 	add	r7,r3,r4
   8a1d0:	3191883a 	add	r8,r6,r6
   8a1d4:	4197803a 	cmpltu	r11,r8,r6
   8a1d8:	2955883a 	add	r10,r5,r5
   8a1dc:	1019883a 	mov	r12,r2
   8a1e0:	4807883a 	mov	r3,r9
   8a1e4:	3809883a 	mov	r4,r7
   8a1e8:	2800010e 	bge	r5,zero,8a1f0 <__muldf3+0x278>
   8a1ec:	48c00054 	ori	r3,r9,1
   8a1f0:	400d883a 	mov	r6,r8
   8a1f4:	5a8b883a 	add	r5,r11,r10
   8a1f8:	10bfffc4 	addi	r2,r2,-1
   8a1fc:	69fff02e 	bgeu	r13,r7,8a1c0 <__muldf3+0x248>
   8a200:	db000215 	stw	r12,8(sp)
   8a204:	18803fcc 	andi	r2,r3,255
   8a208:	01c02004 	movi	r7,128
   8a20c:	11c00926 	beq	r2,r7,8a234 <__muldf3+0x2bc>
   8a210:	008000c4 	movi	r2,3
   8a214:	d9000415 	stw	r4,16(sp)
   8a218:	d8c00315 	stw	r3,12(sp)
   8a21c:	d8800015 	stw	r2,0(sp)
   8a220:	d809883a 	mov	r4,sp
   8a224:	003f7006 	br	89fe8 <__muldf3+0x70>
   8a228:	0011883a 	mov	r8,zero
   8a22c:	00c00044 	movi	r3,1
   8a230:	003fb606 	br	8a10c <__muldf3+0x194>
   8a234:	19c0400c 	andi	r7,r3,256
   8a238:	383ff51e 	bne	r7,zero,8a210 <__muldf3+0x298>
   8a23c:	314ab03a 	or	r5,r6,r5
   8a240:	283ff326 	beq	r5,zero,8a210 <__muldf3+0x298>
   8a244:	1885883a 	add	r2,r3,r2
   8a248:	10cb803a 	cmpltu	r5,r2,r3
   8a24c:	00ffc004 	movi	r3,-256
   8a250:	10c6703a 	and	r3,r2,r3
   8a254:	2909883a 	add	r4,r5,r4
   8a258:	003fed06 	br	8a210 <__muldf3+0x298>

0008a25c <__divdf3>:
   8a25c:	defff104 	addi	sp,sp,-60
   8a260:	d9000c15 	stw	r4,48(sp)
   8a264:	d9400d15 	stw	r5,52(sp)
   8a268:	d9000c04 	addi	r4,sp,48
   8a26c:	d9400504 	addi	r5,sp,20
   8a270:	dfc00e15 	stw	ra,56(sp)
   8a274:	d9800a15 	stw	r6,40(sp)
   8a278:	d9c00b15 	stw	r7,44(sp)
   8a27c:	008ab800 	call	8ab80 <__unpack_d>
   8a280:	d9000a04 	addi	r4,sp,40
   8a284:	d80b883a 	mov	r5,sp
   8a288:	008ab800 	call	8ab80 <__unpack_d>
   8a28c:	d8c00517 	ldw	r3,20(sp)
   8a290:	00800044 	movi	r2,1
   8a294:	10c00536 	bltu	r2,r3,8a2ac <__divdf3+0x50>
   8a298:	d9000504 	addi	r4,sp,20
   8a29c:	008a95c0 	call	8a95c <__pack_d>
   8a2a0:	dfc00e17 	ldw	ra,56(sp)
   8a2a4:	dec00f04 	addi	sp,sp,60
   8a2a8:	f800283a 	ret
   8a2ac:	d9000017 	ldw	r4,0(sp)
   8a2b0:	11000536 	bltu	r2,r4,8a2c8 <__divdf3+0x6c>
   8a2b4:	d809883a 	mov	r4,sp
   8a2b8:	008a95c0 	call	8a95c <__pack_d>
   8a2bc:	dfc00e17 	ldw	ra,56(sp)
   8a2c0:	dec00f04 	addi	sp,sp,60
   8a2c4:	f800283a 	ret
   8a2c8:	d9800617 	ldw	r6,24(sp)
   8a2cc:	d9400117 	ldw	r5,4(sp)
   8a2d0:	00800104 	movi	r2,4
   8a2d4:	314af03a 	xor	r5,r6,r5
   8a2d8:	d9400615 	stw	r5,24(sp)
   8a2dc:	18800226 	beq	r3,r2,8a2e8 <__divdf3+0x8c>
   8a2e0:	01400084 	movi	r5,2
   8a2e4:	1940041e 	bne	r3,r5,8a2f8 <__divdf3+0x9c>
   8a2e8:	193feb1e 	bne	r3,r4,8a298 <__divdf3+0x3c>
   8a2ec:	01000274 	movhi	r4,9
   8a2f0:	2138d804 	addi	r4,r4,-7328
   8a2f4:	003fe906 	br	8a29c <__divdf3+0x40>
   8a2f8:	20803326 	beq	r4,r2,8a3c8 <__divdf3+0x16c>
   8a2fc:	21403726 	beq	r4,r5,8a3dc <__divdf3+0x180>
   8a300:	d8800217 	ldw	r2,8(sp)
   8a304:	d9000717 	ldw	r4,28(sp)
   8a308:	d8c00917 	ldw	r3,36(sp)
   8a30c:	da000417 	ldw	r8,16(sp)
   8a310:	2089c83a 	sub	r4,r4,r2
   8a314:	d9000715 	stw	r4,28(sp)
   8a318:	d8800817 	ldw	r2,32(sp)
   8a31c:	dbc00317 	ldw	r15,12(sp)
   8a320:	1a000236 	bltu	r3,r8,8a32c <__divdf3+0xd0>
   8a324:	40c0081e 	bne	r8,r3,8a348 <__divdf3+0xec>
   8a328:	13c0072e 	bgeu	r2,r15,8a348 <__divdf3+0xec>
   8a32c:	108b883a 	add	r5,r2,r2
   8a330:	288d803a 	cmpltu	r6,r5,r2
   8a334:	18c7883a 	add	r3,r3,r3
   8a338:	213fffc4 	addi	r4,r4,-1
   8a33c:	2805883a 	mov	r2,r5
   8a340:	30c7883a 	add	r3,r6,r3
   8a344:	d9000715 	stw	r4,28(sp)
   8a348:	01400f44 	movi	r5,61
   8a34c:	000f883a 	mov	r7,zero
   8a350:	01040034 	movhi	r4,4096
   8a354:	0019883a 	mov	r12,zero
   8a358:	001b883a 	mov	r13,zero
   8a35c:	201697fa 	slli	r11,r4,31
   8a360:	3814d07a 	srli	r10,r7,1
   8a364:	297fffc4 	addi	r5,r5,-1
   8a368:	1a000936 	bltu	r3,r8,8a390 <__divdf3+0x134>
   8a36c:	13cdc83a 	sub	r6,r2,r15
   8a370:	1193803a 	cmpltu	r9,r2,r6
   8a374:	1a1dc83a 	sub	r14,r3,r8
   8a378:	40c0011e 	bne	r8,r3,8a380 <__divdf3+0x124>
   8a37c:	13c00436 	bltu	r2,r15,8a390 <__divdf3+0x134>
   8a380:	3005883a 	mov	r2,r6
   8a384:	7247c83a 	sub	r3,r14,r9
   8a388:	61d8b03a 	or	r12,r12,r7
   8a38c:	691ab03a 	or	r13,r13,r4
   8a390:	108d883a 	add	r6,r2,r2
   8a394:	3093803a 	cmpltu	r9,r6,r2
   8a398:	18c7883a 	add	r3,r3,r3
   8a39c:	5a8eb03a 	or	r7,r11,r10
   8a3a0:	2008d07a 	srli	r4,r4,1
   8a3a4:	3005883a 	mov	r2,r6
   8a3a8:	48c7883a 	add	r3,r9,r3
   8a3ac:	283feb1e 	bne	r5,zero,8a35c <__divdf3+0x100>
   8a3b0:	61003fcc 	andi	r4,r12,255
   8a3b4:	01402004 	movi	r5,128
   8a3b8:	21400b26 	beq	r4,r5,8a3e8 <__divdf3+0x18c>
   8a3bc:	db000815 	stw	r12,32(sp)
   8a3c0:	db400915 	stw	r13,36(sp)
   8a3c4:	003fb406 	br	8a298 <__divdf3+0x3c>
   8a3c8:	d8000815 	stw	zero,32(sp)
   8a3cc:	d8000915 	stw	zero,36(sp)
   8a3d0:	d8000715 	stw	zero,28(sp)
   8a3d4:	d9000504 	addi	r4,sp,20
   8a3d8:	003fb006 	br	8a29c <__divdf3+0x40>
   8a3dc:	d8800515 	stw	r2,20(sp)
   8a3e0:	d9000504 	addi	r4,sp,20
   8a3e4:	003fad06 	br	8a29c <__divdf3+0x40>
   8a3e8:	6140400c 	andi	r5,r12,256
   8a3ec:	283ff31e 	bne	r5,zero,8a3bc <__divdf3+0x160>
   8a3f0:	30c4b03a 	or	r2,r6,r3
   8a3f4:	103ff126 	beq	r2,zero,8a3bc <__divdf3+0x160>
   8a3f8:	6109883a 	add	r4,r12,r4
   8a3fc:	2305803a 	cmpltu	r2,r4,r12
   8a400:	033fc004 	movi	r12,-256
   8a404:	2318703a 	and	r12,r4,r12
   8a408:	135b883a 	add	r13,r2,r13
   8a40c:	003feb06 	br	8a3bc <__divdf3+0x160>

0008a410 <__eqdf2>:
   8a410:	defff104 	addi	sp,sp,-60
   8a414:	d9000c15 	stw	r4,48(sp)
   8a418:	d9400d15 	stw	r5,52(sp)
   8a41c:	d9000c04 	addi	r4,sp,48
   8a420:	d9400504 	addi	r5,sp,20
   8a424:	dfc00e15 	stw	ra,56(sp)
   8a428:	d9800a15 	stw	r6,40(sp)
   8a42c:	d9c00b15 	stw	r7,44(sp)
   8a430:	008ab800 	call	8ab80 <__unpack_d>
   8a434:	d9000a04 	addi	r4,sp,40
   8a438:	d80b883a 	mov	r5,sp
   8a43c:	008ab800 	call	8ab80 <__unpack_d>
   8a440:	d8c00517 	ldw	r3,20(sp)
   8a444:	00800044 	movi	r2,1
   8a448:	10c0052e 	bgeu	r2,r3,8a460 <__eqdf2+0x50>
   8a44c:	d8c00017 	ldw	r3,0(sp)
   8a450:	10c0032e 	bgeu	r2,r3,8a460 <__eqdf2+0x50>
   8a454:	d9000504 	addi	r4,sp,20
   8a458:	d80b883a 	mov	r5,sp
   8a45c:	008ac840 	call	8ac84 <__fpcmp_parts_d>
   8a460:	dfc00e17 	ldw	ra,56(sp)
   8a464:	dec00f04 	addi	sp,sp,60
   8a468:	f800283a 	ret

0008a46c <__nedf2>:
   8a46c:	defff104 	addi	sp,sp,-60
   8a470:	d9000c15 	stw	r4,48(sp)
   8a474:	d9400d15 	stw	r5,52(sp)
   8a478:	d9000c04 	addi	r4,sp,48
   8a47c:	d9400504 	addi	r5,sp,20
   8a480:	dfc00e15 	stw	ra,56(sp)
   8a484:	d9800a15 	stw	r6,40(sp)
   8a488:	d9c00b15 	stw	r7,44(sp)
   8a48c:	008ab800 	call	8ab80 <__unpack_d>
   8a490:	d9000a04 	addi	r4,sp,40
   8a494:	d80b883a 	mov	r5,sp
   8a498:	008ab800 	call	8ab80 <__unpack_d>
   8a49c:	d8c00517 	ldw	r3,20(sp)
   8a4a0:	00800044 	movi	r2,1
   8a4a4:	10c0052e 	bgeu	r2,r3,8a4bc <__nedf2+0x50>
   8a4a8:	d8c00017 	ldw	r3,0(sp)
   8a4ac:	10c0032e 	bgeu	r2,r3,8a4bc <__nedf2+0x50>
   8a4b0:	d9000504 	addi	r4,sp,20
   8a4b4:	d80b883a 	mov	r5,sp
   8a4b8:	008ac840 	call	8ac84 <__fpcmp_parts_d>
   8a4bc:	dfc00e17 	ldw	ra,56(sp)
   8a4c0:	dec00f04 	addi	sp,sp,60
   8a4c4:	f800283a 	ret

0008a4c8 <__gtdf2>:
   8a4c8:	defff104 	addi	sp,sp,-60
   8a4cc:	d9000c15 	stw	r4,48(sp)
   8a4d0:	d9400d15 	stw	r5,52(sp)
   8a4d4:	d9000c04 	addi	r4,sp,48
   8a4d8:	d9400504 	addi	r5,sp,20
   8a4dc:	dfc00e15 	stw	ra,56(sp)
   8a4e0:	d9800a15 	stw	r6,40(sp)
   8a4e4:	d9c00b15 	stw	r7,44(sp)
   8a4e8:	008ab800 	call	8ab80 <__unpack_d>
   8a4ec:	d9000a04 	addi	r4,sp,40
   8a4f0:	d80b883a 	mov	r5,sp
   8a4f4:	008ab800 	call	8ab80 <__unpack_d>
   8a4f8:	d8c00517 	ldw	r3,20(sp)
   8a4fc:	00800044 	movi	r2,1
   8a500:	10c0082e 	bgeu	r2,r3,8a524 <__gtdf2+0x5c>
   8a504:	d8c00017 	ldw	r3,0(sp)
   8a508:	10c0062e 	bgeu	r2,r3,8a524 <__gtdf2+0x5c>
   8a50c:	d9000504 	addi	r4,sp,20
   8a510:	d80b883a 	mov	r5,sp
   8a514:	008ac840 	call	8ac84 <__fpcmp_parts_d>
   8a518:	dfc00e17 	ldw	ra,56(sp)
   8a51c:	dec00f04 	addi	sp,sp,60
   8a520:	f800283a 	ret
   8a524:	00bfffc4 	movi	r2,-1
   8a528:	003ffb06 	br	8a518 <__gtdf2+0x50>

0008a52c <__gedf2>:
   8a52c:	defff104 	addi	sp,sp,-60
   8a530:	d9000c15 	stw	r4,48(sp)
   8a534:	d9400d15 	stw	r5,52(sp)
   8a538:	d9000c04 	addi	r4,sp,48
   8a53c:	d9400504 	addi	r5,sp,20
   8a540:	dfc00e15 	stw	ra,56(sp)
   8a544:	d9800a15 	stw	r6,40(sp)
   8a548:	d9c00b15 	stw	r7,44(sp)
   8a54c:	008ab800 	call	8ab80 <__unpack_d>
   8a550:	d9000a04 	addi	r4,sp,40
   8a554:	d80b883a 	mov	r5,sp
   8a558:	008ab800 	call	8ab80 <__unpack_d>
   8a55c:	d8c00517 	ldw	r3,20(sp)
   8a560:	00800044 	movi	r2,1
   8a564:	10c0082e 	bgeu	r2,r3,8a588 <__gedf2+0x5c>
   8a568:	d8c00017 	ldw	r3,0(sp)
   8a56c:	10c0062e 	bgeu	r2,r3,8a588 <__gedf2+0x5c>
   8a570:	d9000504 	addi	r4,sp,20
   8a574:	d80b883a 	mov	r5,sp
   8a578:	008ac840 	call	8ac84 <__fpcmp_parts_d>
   8a57c:	dfc00e17 	ldw	ra,56(sp)
   8a580:	dec00f04 	addi	sp,sp,60
   8a584:	f800283a 	ret
   8a588:	00bfffc4 	movi	r2,-1
   8a58c:	003ffb06 	br	8a57c <__gedf2+0x50>

0008a590 <__ltdf2>:
   8a590:	defff104 	addi	sp,sp,-60
   8a594:	d9000c15 	stw	r4,48(sp)
   8a598:	d9400d15 	stw	r5,52(sp)
   8a59c:	d9000c04 	addi	r4,sp,48
   8a5a0:	d9400504 	addi	r5,sp,20
   8a5a4:	dfc00e15 	stw	ra,56(sp)
   8a5a8:	d9800a15 	stw	r6,40(sp)
   8a5ac:	d9c00b15 	stw	r7,44(sp)
   8a5b0:	008ab800 	call	8ab80 <__unpack_d>
   8a5b4:	d9000a04 	addi	r4,sp,40
   8a5b8:	d80b883a 	mov	r5,sp
   8a5bc:	008ab800 	call	8ab80 <__unpack_d>
   8a5c0:	d8c00517 	ldw	r3,20(sp)
   8a5c4:	00800044 	movi	r2,1
   8a5c8:	10c0052e 	bgeu	r2,r3,8a5e0 <__ltdf2+0x50>
   8a5cc:	d8c00017 	ldw	r3,0(sp)
   8a5d0:	10c0032e 	bgeu	r2,r3,8a5e0 <__ltdf2+0x50>
   8a5d4:	d9000504 	addi	r4,sp,20
   8a5d8:	d80b883a 	mov	r5,sp
   8a5dc:	008ac840 	call	8ac84 <__fpcmp_parts_d>
   8a5e0:	dfc00e17 	ldw	ra,56(sp)
   8a5e4:	dec00f04 	addi	sp,sp,60
   8a5e8:	f800283a 	ret

0008a5ec <__floatsidf>:
   8a5ec:	2004d7fa 	srli	r2,r4,31
   8a5f0:	defff904 	addi	sp,sp,-28
   8a5f4:	00c000c4 	movi	r3,3
   8a5f8:	dfc00615 	stw	ra,24(sp)
   8a5fc:	dc000515 	stw	r16,20(sp)
   8a600:	d8c00015 	stw	r3,0(sp)
   8a604:	d8800115 	stw	r2,4(sp)
   8a608:	2000081e 	bne	r4,zero,8a62c <__floatsidf+0x40>
   8a60c:	00800084 	movi	r2,2
   8a610:	d8800015 	stw	r2,0(sp)
   8a614:	d809883a 	mov	r4,sp
   8a618:	008a95c0 	call	8a95c <__pack_d>
   8a61c:	dfc00617 	ldw	ra,24(sp)
   8a620:	dc000517 	ldw	r16,20(sp)
   8a624:	dec00704 	addi	sp,sp,28
   8a628:	f800283a 	ret
   8a62c:	00c00f04 	movi	r3,60
   8a630:	d8c00215 	stw	r3,8(sp)
   8a634:	10000f1e 	bne	r2,zero,8a674 <__floatsidf+0x88>
   8a638:	2021883a 	mov	r16,r4
   8a63c:	8009883a 	mov	r4,r16
   8a640:	008a8b00 	call	8a8b0 <__clzsi2>
   8a644:	11000744 	addi	r4,r2,29
   8a648:	0100110e 	bge	zero,r4,8a690 <__floatsidf+0xa4>
   8a64c:	10ffff44 	addi	r3,r2,-3
   8a650:	18001216 	blt	r3,zero,8a69c <__floatsidf+0xb0>
   8a654:	80c6983a 	sll	r3,r16,r3
   8a658:	0009883a 	mov	r4,zero
   8a65c:	014007c4 	movi	r5,31
   8a660:	2885c83a 	sub	r2,r5,r2
   8a664:	d9000315 	stw	r4,12(sp)
   8a668:	d8c00415 	stw	r3,16(sp)
   8a66c:	d8800215 	stw	r2,8(sp)
   8a670:	003fe806 	br	8a614 <__floatsidf+0x28>
   8a674:	00a00034 	movhi	r2,32768
   8a678:	20800e26 	beq	r4,r2,8a6b4 <__floatsidf+0xc8>
   8a67c:	0121c83a 	sub	r16,zero,r4
   8a680:	8009883a 	mov	r4,r16
   8a684:	008a8b00 	call	8a8b0 <__clzsi2>
   8a688:	11000744 	addi	r4,r2,29
   8a68c:	013fef16 	blt	zero,r4,8a64c <__floatsidf+0x60>
   8a690:	dc000315 	stw	r16,12(sp)
   8a694:	d8000415 	stw	zero,16(sp)
   8a698:	003fde06 	br	8a614 <__floatsidf+0x28>
   8a69c:	800ad07a 	srli	r5,r16,1
   8a6a0:	00c007c4 	movi	r3,31
   8a6a4:	1907c83a 	sub	r3,r3,r4
   8a6a8:	28c6d83a 	srl	r3,r5,r3
   8a6ac:	8108983a 	sll	r4,r16,r4
   8a6b0:	003fea06 	br	8a65c <__floatsidf+0x70>
   8a6b4:	0005883a 	mov	r2,zero
   8a6b8:	00f07834 	movhi	r3,49632
   8a6bc:	003fd706 	br	8a61c <__floatsidf+0x30>

0008a6c0 <__fixdfsi>:
   8a6c0:	defff804 	addi	sp,sp,-32
   8a6c4:	d9000515 	stw	r4,20(sp)
   8a6c8:	d9400615 	stw	r5,24(sp)
   8a6cc:	d9000504 	addi	r4,sp,20
   8a6d0:	d80b883a 	mov	r5,sp
   8a6d4:	dfc00715 	stw	ra,28(sp)
   8a6d8:	008ab800 	call	8ab80 <__unpack_d>
   8a6dc:	d8800017 	ldw	r2,0(sp)
   8a6e0:	00c00084 	movi	r3,2
   8a6e4:	10c01c26 	beq	r2,r3,8a758 <__fixdfsi+0x98>
   8a6e8:	00c00044 	movi	r3,1
   8a6ec:	18801a2e 	bgeu	r3,r2,8a758 <__fixdfsi+0x98>
   8a6f0:	00c00104 	movi	r3,4
   8a6f4:	10c01126 	beq	r2,r3,8a73c <__fixdfsi+0x7c>
   8a6f8:	d8800217 	ldw	r2,8(sp)
   8a6fc:	10001616 	blt	r2,zero,8a758 <__fixdfsi+0x98>
   8a700:	00c00784 	movi	r3,30
   8a704:	18800d16 	blt	r3,r2,8a73c <__fixdfsi+0x7c>
   8a708:	00c00f04 	movi	r3,60
   8a70c:	1885c83a 	sub	r2,r3,r2
   8a710:	10fff804 	addi	r3,r2,-32
   8a714:	d9400317 	ldw	r5,12(sp)
   8a718:	d9000417 	ldw	r4,16(sp)
   8a71c:	18001616 	blt	r3,zero,8a778 <__fixdfsi+0xb8>
   8a720:	20c4d83a 	srl	r2,r4,r3
   8a724:	d8c00117 	ldw	r3,4(sp)
   8a728:	18000126 	beq	r3,zero,8a730 <__fixdfsi+0x70>
   8a72c:	0085c83a 	sub	r2,zero,r2
   8a730:	dfc00717 	ldw	ra,28(sp)
   8a734:	dec00804 	addi	sp,sp,32
   8a738:	f800283a 	ret
   8a73c:	d8800117 	ldw	r2,4(sp)
   8a740:	1000091e 	bne	r2,zero,8a768 <__fixdfsi+0xa8>
   8a744:	00a00034 	movhi	r2,32768
   8a748:	10bfffc4 	addi	r2,r2,-1
   8a74c:	dfc00717 	ldw	ra,28(sp)
   8a750:	dec00804 	addi	sp,sp,32
   8a754:	f800283a 	ret
   8a758:	0005883a 	mov	r2,zero
   8a75c:	dfc00717 	ldw	ra,28(sp)
   8a760:	dec00804 	addi	sp,sp,32
   8a764:	f800283a 	ret
   8a768:	00a00034 	movhi	r2,32768
   8a76c:	dfc00717 	ldw	ra,28(sp)
   8a770:	dec00804 	addi	sp,sp,32
   8a774:	f800283a 	ret
   8a778:	2008907a 	slli	r4,r4,1
   8a77c:	018007c4 	movi	r6,31
   8a780:	308dc83a 	sub	r6,r6,r2
   8a784:	2188983a 	sll	r4,r4,r6
   8a788:	2884d83a 	srl	r2,r5,r2
   8a78c:	2084b03a 	or	r2,r4,r2
   8a790:	003fe406 	br	8a724 <__fixdfsi+0x64>

0008a794 <__floatunsidf>:
   8a794:	defff904 	addi	sp,sp,-28
   8a798:	dc000515 	stw	r16,20(sp)
   8a79c:	dfc00615 	stw	ra,24(sp)
   8a7a0:	d8000115 	stw	zero,4(sp)
   8a7a4:	2021883a 	mov	r16,r4
   8a7a8:	20001726 	beq	r4,zero,8a808 <__floatunsidf+0x74>
   8a7ac:	008000c4 	movi	r2,3
   8a7b0:	d8800015 	stw	r2,0(sp)
   8a7b4:	00800f04 	movi	r2,60
   8a7b8:	d8800215 	stw	r2,8(sp)
   8a7bc:	008a8b00 	call	8a8b0 <__clzsi2>
   8a7c0:	10c00744 	addi	r3,r2,29
   8a7c4:	18001816 	blt	r3,zero,8a828 <__floatunsidf+0x94>
   8a7c8:	18002d26 	beq	r3,zero,8a880 <__floatunsidf+0xec>
   8a7cc:	113fff44 	addi	r4,r2,-3
   8a7d0:	20002e16 	blt	r4,zero,8a88c <__floatunsidf+0xf8>
   8a7d4:	8108983a 	sll	r4,r16,r4
   8a7d8:	0021883a 	mov	r16,zero
   8a7dc:	014007c4 	movi	r5,31
   8a7e0:	2885c83a 	sub	r2,r5,r2
   8a7e4:	dc000315 	stw	r16,12(sp)
   8a7e8:	d9000415 	stw	r4,16(sp)
   8a7ec:	d8800215 	stw	r2,8(sp)
   8a7f0:	d809883a 	mov	r4,sp
   8a7f4:	008a95c0 	call	8a95c <__pack_d>
   8a7f8:	dfc00617 	ldw	ra,24(sp)
   8a7fc:	dc000517 	ldw	r16,20(sp)
   8a800:	dec00704 	addi	sp,sp,28
   8a804:	f800283a 	ret
   8a808:	00800084 	movi	r2,2
   8a80c:	d809883a 	mov	r4,sp
   8a810:	d8800015 	stw	r2,0(sp)
   8a814:	008a95c0 	call	8a95c <__pack_d>
   8a818:	dfc00617 	ldw	ra,24(sp)
   8a81c:	dc000517 	ldw	r16,20(sp)
   8a820:	dec00704 	addi	sp,sp,28
   8a824:	f800283a 	ret
   8a828:	00c7c83a 	sub	r3,zero,r3
   8a82c:	193ff804 	addi	r4,r3,-32
   8a830:	20001c16 	blt	r4,zero,8a8a4 <__floatunsidf+0x110>
   8a834:	000b883a 	mov	r5,zero
   8a838:	2009d7fa 	srai	r4,r4,31
   8a83c:	80c6d83a 	srl	r3,r16,r3
   8a840:	297fffc4 	addi	r5,r5,-1
   8a844:	2c20703a 	and	r16,r5,r16
   8a848:	8020c03a 	cmpne	r16,r16,zero
   8a84c:	1906703a 	and	r3,r3,r4
   8a850:	010007c4 	movi	r4,31
   8a854:	80c6b03a 	or	r3,r16,r3
   8a858:	2085c83a 	sub	r2,r4,r2
   8a85c:	d809883a 	mov	r4,sp
   8a860:	d8c00315 	stw	r3,12(sp)
   8a864:	d8000415 	stw	zero,16(sp)
   8a868:	d8800215 	stw	r2,8(sp)
   8a86c:	008a95c0 	call	8a95c <__pack_d>
   8a870:	dfc00617 	ldw	ra,24(sp)
   8a874:	dc000517 	ldw	r16,20(sp)
   8a878:	dec00704 	addi	sp,sp,28
   8a87c:	f800283a 	ret
   8a880:	dc000315 	stw	r16,12(sp)
   8a884:	d8000415 	stw	zero,16(sp)
   8a888:	003fd906 	br	8a7f0 <__floatunsidf+0x5c>
   8a88c:	800ad07a 	srli	r5,r16,1
   8a890:	010007c4 	movi	r4,31
   8a894:	20c9c83a 	sub	r4,r4,r3
   8a898:	2908d83a 	srl	r4,r5,r4
   8a89c:	80e0983a 	sll	r16,r16,r3
   8a8a0:	003fce06 	br	8a7dc <__floatunsidf+0x48>
   8a8a4:	01400044 	movi	r5,1
   8a8a8:	28ca983a 	sll	r5,r5,r3
   8a8ac:	003fe206 	br	8a838 <__floatunsidf+0xa4>

0008a8b0 <__clzsi2>:
   8a8b0:	00bfffd4 	movui	r2,65535
   8a8b4:	11000b36 	bltu	r2,r4,8a8e4 <__clzsi2+0x34>
   8a8b8:	00803fc4 	movi	r2,255
   8a8bc:	11001e2e 	bgeu	r2,r4,8a938 <__clzsi2+0x88>
   8a8c0:	00c00204 	movi	r3,8
   8a8c4:	20c8d83a 	srl	r4,r4,r3
   8a8c8:	00c00274 	movhi	r3,9
   8a8cc:	18f8dd04 	addi	r3,r3,-7308
   8a8d0:	00800604 	movi	r2,24
   8a8d4:	1909883a 	add	r4,r3,r4
   8a8d8:	20c00003 	ldbu	r3,0(r4)
   8a8dc:	10c5c83a 	sub	r2,r2,r3
   8a8e0:	f800283a 	ret
   8a8e4:	00804034 	movhi	r2,256
   8a8e8:	10bfffc4 	addi	r2,r2,-1
   8a8ec:	11000936 	bltu	r2,r4,8a914 <__clzsi2+0x64>
   8a8f0:	00800404 	movi	r2,16
   8a8f4:	1007883a 	mov	r3,r2
   8a8f8:	20c8d83a 	srl	r4,r4,r3
   8a8fc:	00c00274 	movhi	r3,9
   8a900:	18f8dd04 	addi	r3,r3,-7308
   8a904:	1909883a 	add	r4,r3,r4
   8a908:	20c00003 	ldbu	r3,0(r4)
   8a90c:	10c5c83a 	sub	r2,r2,r3
   8a910:	f800283a 	ret
   8a914:	00c00604 	movi	r3,24
   8a918:	20c8d83a 	srl	r4,r4,r3
   8a91c:	00c00274 	movhi	r3,9
   8a920:	18f8dd04 	addi	r3,r3,-7308
   8a924:	00800204 	movi	r2,8
   8a928:	1909883a 	add	r4,r3,r4
   8a92c:	20c00003 	ldbu	r3,0(r4)
   8a930:	10c5c83a 	sub	r2,r2,r3
   8a934:	f800283a 	ret
   8a938:	0007883a 	mov	r3,zero
   8a93c:	20c8d83a 	srl	r4,r4,r3
   8a940:	00c00274 	movhi	r3,9
   8a944:	18f8dd04 	addi	r3,r3,-7308
   8a948:	00800804 	movi	r2,32
   8a94c:	1909883a 	add	r4,r3,r4
   8a950:	20c00003 	ldbu	r3,0(r4)
   8a954:	10c5c83a 	sub	r2,r2,r3
   8a958:	f800283a 	ret

0008a95c <__pack_d>:
   8a95c:	20800017 	ldw	r2,0(r4)
   8a960:	defff804 	addi	sp,sp,-32
   8a964:	dcc00315 	stw	r19,12(sp)
   8a968:	dc800215 	stw	r18,8(sp)
   8a96c:	dfc00715 	stw	ra,28(sp)
   8a970:	dd800615 	stw	r22,24(sp)
   8a974:	dd400515 	stw	r21,20(sp)
   8a978:	dd000415 	stw	r20,16(sp)
   8a97c:	dc400115 	stw	r17,4(sp)
   8a980:	dc000015 	stw	r16,0(sp)
   8a984:	04800044 	movi	r18,1
   8a988:	24400317 	ldw	r17,12(r4)
   8a98c:	24000417 	ldw	r16,16(r4)
   8a990:	24c00117 	ldw	r19,4(r4)
   8a994:	9080422e 	bgeu	r18,r2,8aaa0 <__pack_d+0x144>
   8a998:	00c00104 	movi	r3,4
   8a99c:	10c03c26 	beq	r2,r3,8aa90 <__pack_d+0x134>
   8a9a0:	00c00084 	movi	r3,2
   8a9a4:	10c01926 	beq	r2,r3,8aa0c <__pack_d+0xb0>
   8a9a8:	8c04b03a 	or	r2,r17,r16
   8a9ac:	10001726 	beq	r2,zero,8aa0c <__pack_d+0xb0>
   8a9b0:	21000217 	ldw	r4,8(r4)
   8a9b4:	00bf0084 	movi	r2,-1022
   8a9b8:	20804016 	blt	r4,r2,8aabc <__pack_d+0x160>
   8a9bc:	0080ffc4 	movi	r2,1023
   8a9c0:	11003316 	blt	r2,r4,8aa90 <__pack_d+0x134>
   8a9c4:	88803fcc 	andi	r2,r17,255
   8a9c8:	00c02004 	movi	r3,128
   8a9cc:	10c02926 	beq	r2,r3,8aa74 <__pack_d+0x118>
   8a9d0:	88801fc4 	addi	r2,r17,127
   8a9d4:	1463803a 	cmpltu	r17,r2,r17
   8a9d8:	8c21883a 	add	r16,r17,r16
   8a9dc:	1023883a 	mov	r17,r2
   8a9e0:	00880034 	movhi	r2,8192
   8a9e4:	10bfffc4 	addi	r2,r2,-1
   8a9e8:	14001c36 	bltu	r2,r16,8aa5c <__pack_d+0x100>
   8a9ec:	2100ffc4 	addi	r4,r4,1023
   8a9f0:	8006963a 	slli	r3,r16,24
   8a9f4:	8804d23a 	srli	r2,r17,8
   8a9f8:	8020913a 	slli	r16,r16,4
   8a9fc:	2101ffcc 	andi	r4,r4,2047
   8aa00:	1884b03a 	or	r2,r3,r2
   8aa04:	8020d33a 	srli	r16,r16,12
   8aa08:	00000306 	br	8aa18 <__pack_d+0xbc>
   8aa0c:	0009883a 	mov	r4,zero
   8aa10:	0005883a 	mov	r2,zero
   8aa14:	0021883a 	mov	r16,zero
   8aa18:	2008953a 	slli	r4,r4,20
   8aa1c:	982697fa 	slli	r19,r19,31
   8aa20:	00c00434 	movhi	r3,16
   8aa24:	18ffffc4 	addi	r3,r3,-1
   8aa28:	80e0703a 	and	r16,r16,r3
   8aa2c:	8106b03a 	or	r3,r16,r4
   8aa30:	1cc6b03a 	or	r3,r3,r19
   8aa34:	dfc00717 	ldw	ra,28(sp)
   8aa38:	dd800617 	ldw	r22,24(sp)
   8aa3c:	dd400517 	ldw	r21,20(sp)
   8aa40:	dd000417 	ldw	r20,16(sp)
   8aa44:	dcc00317 	ldw	r19,12(sp)
   8aa48:	dc800217 	ldw	r18,8(sp)
   8aa4c:	dc400117 	ldw	r17,4(sp)
   8aa50:	dc000017 	ldw	r16,0(sp)
   8aa54:	dec00804 	addi	sp,sp,32
   8aa58:	f800283a 	ret
   8aa5c:	800697fa 	slli	r3,r16,31
   8aa60:	8804d07a 	srli	r2,r17,1
   8aa64:	21010004 	addi	r4,r4,1024
   8aa68:	8020d07a 	srli	r16,r16,1
   8aa6c:	18a2b03a 	or	r17,r3,r2
   8aa70:	003fdf06 	br	8a9f0 <__pack_d+0x94>
   8aa74:	88c0400c 	andi	r3,r17,256
   8aa78:	183fd926 	beq	r3,zero,8a9e0 <__pack_d+0x84>
   8aa7c:	8885883a 	add	r2,r17,r2
   8aa80:	1463803a 	cmpltu	r17,r2,r17
   8aa84:	8c21883a 	add	r16,r17,r16
   8aa88:	1023883a 	mov	r17,r2
   8aa8c:	003fd406 	br	8a9e0 <__pack_d+0x84>
   8aa90:	0101ffc4 	movi	r4,2047
   8aa94:	0005883a 	mov	r2,zero
   8aa98:	0021883a 	mov	r16,zero
   8aa9c:	003fde06 	br	8aa18 <__pack_d+0xbc>
   8aaa0:	84000234 	orhi	r16,r16,8
   8aaa4:	00c00434 	movhi	r3,16
   8aaa8:	18ffffc4 	addi	r3,r3,-1
   8aaac:	8805883a 	mov	r2,r17
   8aab0:	80e0703a 	and	r16,r16,r3
   8aab4:	0101ffc4 	movi	r4,2047
   8aab8:	003fd706 	br	8aa18 <__pack_d+0xbc>
   8aabc:	1129c83a 	sub	r20,r2,r4
   8aac0:	00800e04 	movi	r2,56
   8aac4:	15002716 	blt	r2,r20,8ab64 <__pack_d+0x208>
   8aac8:	800b883a 	mov	r5,r16
   8aacc:	a00d883a 	mov	r6,r20
   8aad0:	8809883a 	mov	r4,r17
   8aad4:	008ad540 	call	8ad54 <__lshrdi3>
   8aad8:	9009883a 	mov	r4,r18
   8aadc:	000b883a 	mov	r5,zero
   8aae0:	a00d883a 	mov	r6,r20
   8aae4:	102d883a 	mov	r22,r2
   8aae8:	182b883a 	mov	r21,r3
   8aaec:	008ad980 	call	8ad98 <__ashldi3>
   8aaf0:	1009003a 	cmpeq	r4,r2,zero
   8aaf4:	1907c83a 	sub	r3,r3,r4
   8aaf8:	10bfffc4 	addi	r2,r2,-1
   8aafc:	1c20703a 	and	r16,r3,r16
   8ab00:	1444703a 	and	r2,r2,r17
   8ab04:	1404b03a 	or	r2,r2,r16
   8ab08:	1004c03a 	cmpne	r2,r2,zero
   8ab0c:	1584b03a 	or	r2,r2,r22
   8ab10:	11003fcc 	andi	r4,r2,255
   8ab14:	01402004 	movi	r5,128
   8ab18:	a807883a 	mov	r3,r21
   8ab1c:	2140131e 	bne	r4,r5,8ab6c <__pack_d+0x210>
   8ab20:	1140400c 	andi	r5,r2,256
   8ab24:	28000426 	beq	r5,zero,8ab38 <__pack_d+0x1dc>
   8ab28:	1109883a 	add	r4,r2,r4
   8ab2c:	2085803a 	cmpltu	r2,r4,r2
   8ab30:	1547883a 	add	r3,r2,r21
   8ab34:	2005883a 	mov	r2,r4
   8ab38:	1808963a 	slli	r4,r3,24
   8ab3c:	1004d23a 	srli	r2,r2,8
   8ab40:	1820913a 	slli	r16,r3,4
   8ab44:	01440034 	movhi	r5,4096
   8ab48:	297fffc4 	addi	r5,r5,-1
   8ab4c:	2084b03a 	or	r2,r4,r2
   8ab50:	8020d33a 	srli	r16,r16,12
   8ab54:	01000044 	movi	r4,1
   8ab58:	28ffaf36 	bltu	r5,r3,8aa18 <__pack_d+0xbc>
   8ab5c:	0009883a 	mov	r4,zero
   8ab60:	003fad06 	br	8aa18 <__pack_d+0xbc>
   8ab64:	0005883a 	mov	r2,zero
   8ab68:	0007883a 	mov	r3,zero
   8ab6c:	11001fc4 	addi	r4,r2,127
   8ab70:	2085803a 	cmpltu	r2,r4,r2
   8ab74:	10c7883a 	add	r3,r2,r3
   8ab78:	2005883a 	mov	r2,r4
   8ab7c:	003fee06 	br	8ab38 <__pack_d+0x1dc>

0008ab80 <__unpack_d>:
   8ab80:	21800117 	ldw	r6,4(r4)
   8ab84:	20c00017 	ldw	r3,0(r4)
   8ab88:	3004d7fa 	srli	r2,r6,31
   8ab8c:	3008d53a 	srli	r4,r6,20
   8ab90:	28800115 	stw	r2,4(r5)
   8ab94:	2101ffcc 	andi	r4,r4,2047
   8ab98:	00800434 	movhi	r2,16
   8ab9c:	10bfffc4 	addi	r2,r2,-1
   8aba0:	3084703a 	and	r2,r6,r2
   8aba4:	20001a1e 	bne	r4,zero,8ac10 <__unpack_d+0x90>
   8aba8:	1888b03a 	or	r4,r3,r2
   8abac:	20002626 	beq	r4,zero,8ac48 <__unpack_d+0xc8>
   8abb0:	1808d63a 	srli	r4,r3,24
   8abb4:	1004923a 	slli	r2,r2,8
   8abb8:	01bf0084 	movi	r6,-1022
   8abbc:	29800215 	stw	r6,8(r5)
   8abc0:	2084b03a 	or	r2,r4,r2
   8abc4:	010000c4 	movi	r4,3
   8abc8:	29000015 	stw	r4,0(r5)
   8abcc:	02040034 	movhi	r8,4096
   8abd0:	423fffc4 	addi	r8,r8,-1
   8abd4:	1806923a 	slli	r3,r3,8
   8abd8:	40801836 	bltu	r8,r2,8ac3c <__unpack_d+0xbc>
   8abdc:	013f0044 	movi	r4,-1023
   8abe0:	18cd883a 	add	r6,r3,r3
   8abe4:	30c7803a 	cmpltu	r3,r6,r3
   8abe8:	1085883a 	add	r2,r2,r2
   8abec:	1885883a 	add	r2,r3,r2
   8abf0:	200f883a 	mov	r7,r4
   8abf4:	3007883a 	mov	r3,r6
   8abf8:	213fffc4 	addi	r4,r4,-1
   8abfc:	40bff82e 	bgeu	r8,r2,8abe0 <__unpack_d+0x60>
   8ac00:	29c00215 	stw	r7,8(r5)
   8ac04:	28c00315 	stw	r3,12(r5)
   8ac08:	28800415 	stw	r2,16(r5)
   8ac0c:	f800283a 	ret
   8ac10:	01c1ffc4 	movi	r7,2047
   8ac14:	21c00f26 	beq	r4,r7,8ac54 <__unpack_d+0xd4>
   8ac18:	180cd63a 	srli	r6,r3,24
   8ac1c:	1004923a 	slli	r2,r2,8
   8ac20:	213f0044 	addi	r4,r4,-1023
   8ac24:	1806923a 	slli	r3,r3,8
   8ac28:	3084b03a 	or	r2,r6,r2
   8ac2c:	29000215 	stw	r4,8(r5)
   8ac30:	010000c4 	movi	r4,3
   8ac34:	10840034 	orhi	r2,r2,4096
   8ac38:	29000015 	stw	r4,0(r5)
   8ac3c:	28c00315 	stw	r3,12(r5)
   8ac40:	28800415 	stw	r2,16(r5)
   8ac44:	f800283a 	ret
   8ac48:	00800084 	movi	r2,2
   8ac4c:	28800015 	stw	r2,0(r5)
   8ac50:	f800283a 	ret
   8ac54:	1888b03a 	or	r4,r3,r2
   8ac58:	20000526 	beq	r4,zero,8ac70 <__unpack_d+0xf0>
   8ac5c:	3180022c 	andhi	r6,r6,8
   8ac60:	30000626 	beq	r6,zero,8ac7c <__unpack_d+0xfc>
   8ac64:	01000044 	movi	r4,1
   8ac68:	29000015 	stw	r4,0(r5)
   8ac6c:	003ff306 	br	8ac3c <__unpack_d+0xbc>
   8ac70:	00800104 	movi	r2,4
   8ac74:	28800015 	stw	r2,0(r5)
   8ac78:	f800283a 	ret
   8ac7c:	28000015 	stw	zero,0(r5)
   8ac80:	003fee06 	br	8ac3c <__unpack_d+0xbc>

0008ac84 <__fpcmp_parts_d>:
   8ac84:	20c00017 	ldw	r3,0(r4)
   8ac88:	00800044 	movi	r2,1
   8ac8c:	10c0142e 	bgeu	r2,r3,8ace0 <__fpcmp_parts_d+0x5c>
   8ac90:	29800017 	ldw	r6,0(r5)
   8ac94:	1180122e 	bgeu	r2,r6,8ace0 <__fpcmp_parts_d+0x5c>
   8ac98:	01c00104 	movi	r7,4
   8ac9c:	19c02826 	beq	r3,r7,8ad40 <__fpcmp_parts_d+0xbc>
   8aca0:	31c00926 	beq	r6,r7,8acc8 <__fpcmp_parts_d+0x44>
   8aca4:	01c00084 	movi	r7,2
   8aca8:	19c00626 	beq	r3,r7,8acc4 <__fpcmp_parts_d+0x40>
   8acac:	31c00a26 	beq	r6,r7,8acd8 <__fpcmp_parts_d+0x54>
   8acb0:	20c00117 	ldw	r3,4(r4)
   8acb4:	29800117 	ldw	r6,4(r5)
   8acb8:	19800b26 	beq	r3,r6,8ace8 <__fpcmp_parts_d+0x64>
   8acbc:	1800041e 	bne	r3,zero,8acd0 <__fpcmp_parts_d+0x4c>
   8acc0:	f800283a 	ret
   8acc4:	30c01a26 	beq	r6,r3,8ad30 <__fpcmp_parts_d+0xac>
   8acc8:	28800117 	ldw	r2,4(r5)
   8accc:	1000041e 	bne	r2,zero,8ace0 <__fpcmp_parts_d+0x5c>
   8acd0:	00bfffc4 	movi	r2,-1
   8acd4:	f800283a 	ret
   8acd8:	20800117 	ldw	r2,4(r4)
   8acdc:	103ffc1e 	bne	r2,zero,8acd0 <__fpcmp_parts_d+0x4c>
   8ace0:	00800044 	movi	r2,1
   8ace4:	f800283a 	ret
   8ace8:	21c00217 	ldw	r7,8(r4)
   8acec:	29800217 	ldw	r6,8(r5)
   8acf0:	31c0020e 	bge	r6,r7,8acfc <__fpcmp_parts_d+0x78>
   8acf4:	183ff61e 	bne	r3,zero,8acd0 <__fpcmp_parts_d+0x4c>
   8acf8:	f800283a 	ret
   8acfc:	39800a16 	blt	r7,r6,8ad28 <__fpcmp_parts_d+0xa4>
   8ad00:	20800417 	ldw	r2,16(r4)
   8ad04:	29800417 	ldw	r6,16(r5)
   8ad08:	21c00317 	ldw	r7,12(r4)
   8ad0c:	29000317 	ldw	r4,12(r5)
   8ad10:	30800936 	bltu	r6,r2,8ad38 <__fpcmp_parts_d+0xb4>
   8ad14:	1180011e 	bne	r2,r6,8ad1c <__fpcmp_parts_d+0x98>
   8ad18:	21c00736 	bltu	r4,r7,8ad38 <__fpcmp_parts_d+0xb4>
   8ad1c:	11800236 	bltu	r2,r6,8ad28 <__fpcmp_parts_d+0xa4>
   8ad20:	3080031e 	bne	r6,r2,8ad30 <__fpcmp_parts_d+0xac>
   8ad24:	3900022e 	bgeu	r7,r4,8ad30 <__fpcmp_parts_d+0xac>
   8ad28:	183fe926 	beq	r3,zero,8acd0 <__fpcmp_parts_d+0x4c>
   8ad2c:	003fec06 	br	8ace0 <__fpcmp_parts_d+0x5c>
   8ad30:	0005883a 	mov	r2,zero
   8ad34:	f800283a 	ret
   8ad38:	183fe926 	beq	r3,zero,8ace0 <__fpcmp_parts_d+0x5c>
   8ad3c:	003fe406 	br	8acd0 <__fpcmp_parts_d+0x4c>
   8ad40:	30ffe51e 	bne	r6,r3,8acd8 <__fpcmp_parts_d+0x54>
   8ad44:	28c00117 	ldw	r3,4(r5)
   8ad48:	20800117 	ldw	r2,4(r4)
   8ad4c:	1885c83a 	sub	r2,r3,r2
   8ad50:	f800283a 	ret

0008ad54 <__lshrdi3>:
   8ad54:	2005883a 	mov	r2,r4
   8ad58:	2807883a 	mov	r3,r5
   8ad5c:	30000826 	beq	r6,zero,8ad80 <__lshrdi3+0x2c>
   8ad60:	01000804 	movi	r4,32
   8ad64:	2189c83a 	sub	r4,r4,r6
   8ad68:	0100060e 	bge	zero,r4,8ad84 <__lshrdi3+0x30>
   8ad6c:	1184d83a 	srl	r2,r2,r6
   8ad70:	2908983a 	sll	r4,r5,r4
   8ad74:	298cd83a 	srl	r6,r5,r6
   8ad78:	2084b03a 	or	r2,r4,r2
   8ad7c:	3007883a 	mov	r3,r6
   8ad80:	f800283a 	ret
   8ad84:	0105c83a 	sub	r2,zero,r4
   8ad88:	000d883a 	mov	r6,zero
   8ad8c:	2884d83a 	srl	r2,r5,r2
   8ad90:	3007883a 	mov	r3,r6
   8ad94:	003ffa06 	br	8ad80 <__lshrdi3+0x2c>

0008ad98 <__ashldi3>:
   8ad98:	2005883a 	mov	r2,r4
   8ad9c:	2807883a 	mov	r3,r5
   8ada0:	30000826 	beq	r6,zero,8adc4 <__ashldi3+0x2c>
   8ada4:	01000804 	movi	r4,32
   8ada8:	2189c83a 	sub	r4,r4,r6
   8adac:	0100060e 	bge	zero,r4,8adc8 <__ashldi3+0x30>
   8adb0:	1108d83a 	srl	r4,r2,r4
   8adb4:	2986983a 	sll	r3,r5,r6
   8adb8:	118c983a 	sll	r6,r2,r6
   8adbc:	20c6b03a 	or	r3,r4,r3
   8adc0:	3005883a 	mov	r2,r6
   8adc4:	f800283a 	ret
   8adc8:	0107c83a 	sub	r3,zero,r4
   8adcc:	000d883a 	mov	r6,zero
   8add0:	10c6983a 	sll	r3,r2,r3
   8add4:	3005883a 	mov	r2,r6
   8add8:	003ffa06 	br	8adc4 <__ashldi3+0x2c>

0008addc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8addc:	defffe04 	addi	sp,sp,-8
   8ade0:	dfc00115 	stw	ra,4(sp)
   8ade4:	df000015 	stw	fp,0(sp)
   8ade8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8adec:	00800274 	movhi	r2,9
   8adf0:	10bff804 	addi	r2,r2,-32
   8adf4:	10800017 	ldw	r2,0(r2)
   8adf8:	10000526 	beq	r2,zero,8ae10 <alt_get_errno+0x34>
   8adfc:	00800274 	movhi	r2,9
   8ae00:	10bff804 	addi	r2,r2,-32
   8ae04:	10800017 	ldw	r2,0(r2)
   8ae08:	103ee83a 	callr	r2
   8ae0c:	00000206 	br	8ae18 <alt_get_errno+0x3c>
   8ae10:	00800274 	movhi	r2,9
   8ae14:	1086d504 	addi	r2,r2,6996
}
   8ae18:	e037883a 	mov	sp,fp
   8ae1c:	dfc00117 	ldw	ra,4(sp)
   8ae20:	df000017 	ldw	fp,0(sp)
   8ae24:	dec00204 	addi	sp,sp,8
   8ae28:	f800283a 	ret

0008ae2c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   8ae2c:	defffb04 	addi	sp,sp,-20
   8ae30:	dfc00415 	stw	ra,16(sp)
   8ae34:	df000315 	stw	fp,12(sp)
   8ae38:	df000304 	addi	fp,sp,12
   8ae3c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   8ae40:	e0bfff17 	ldw	r2,-4(fp)
   8ae44:	10000616 	blt	r2,zero,8ae60 <close+0x34>
   8ae48:	e0bfff17 	ldw	r2,-4(fp)
   8ae4c:	10c00324 	muli	r3,r2,12
   8ae50:	00800274 	movhi	r2,9
   8ae54:	10bb4504 	addi	r2,r2,-4844
   8ae58:	1885883a 	add	r2,r3,r2
   8ae5c:	00000106 	br	8ae64 <close+0x38>
   8ae60:	0005883a 	mov	r2,zero
   8ae64:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   8ae68:	e0bffd17 	ldw	r2,-12(fp)
   8ae6c:	10001826 	beq	r2,zero,8aed0 <close+0xa4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   8ae70:	e0bffd17 	ldw	r2,-12(fp)
   8ae74:	10800017 	ldw	r2,0(r2)
   8ae78:	10800417 	ldw	r2,16(r2)
   8ae7c:	10000626 	beq	r2,zero,8ae98 <close+0x6c>
   8ae80:	e0bffd17 	ldw	r2,-12(fp)
   8ae84:	10800017 	ldw	r2,0(r2)
   8ae88:	10800417 	ldw	r2,16(r2)
   8ae8c:	e13ffd17 	ldw	r4,-12(fp)
   8ae90:	103ee83a 	callr	r2
   8ae94:	00000106 	br	8ae9c <close+0x70>
   8ae98:	0005883a 	mov	r2,zero
   8ae9c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   8aea0:	e13fff17 	ldw	r4,-4(fp)
   8aea4:	008b5540 	call	8b554 <alt_release_fd>
    if (rval < 0)
   8aea8:	e0bffe17 	ldw	r2,-8(fp)
   8aeac:	1000060e 	bge	r2,zero,8aec8 <close+0x9c>
    {
      ALT_ERRNO = -rval;
   8aeb0:	008addc0 	call	8addc <alt_get_errno>
   8aeb4:	e0fffe17 	ldw	r3,-8(fp)
   8aeb8:	00c7c83a 	sub	r3,zero,r3
   8aebc:	10c00015 	stw	r3,0(r2)
      return -1;
   8aec0:	00bfffc4 	movi	r2,-1
   8aec4:	00000606 	br	8aee0 <close+0xb4>
    }
    return 0;
   8aec8:	0005883a 	mov	r2,zero
   8aecc:	00000406 	br	8aee0 <close+0xb4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8aed0:	008addc0 	call	8addc <alt_get_errno>
   8aed4:	00c01444 	movi	r3,81
   8aed8:	10c00015 	stw	r3,0(r2)
    return -1;
   8aedc:	00bfffc4 	movi	r2,-1
  }
}
   8aee0:	e037883a 	mov	sp,fp
   8aee4:	dfc00117 	ldw	ra,4(sp)
   8aee8:	df000017 	ldw	fp,0(sp)
   8aeec:	dec00204 	addi	sp,sp,8
   8aef0:	f800283a 	ret

0008aef4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   8aef4:	defffe04 	addi	sp,sp,-8
   8aef8:	df000115 	stw	fp,4(sp)
   8aefc:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   8af00:	e03fff15 	stw	zero,-4(fp)
   8af04:	00000506 	br	8af1c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   8af08:	e0bfff17 	ldw	r2,-4(fp)
   8af0c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   8af10:	e0bfff17 	ldw	r2,-4(fp)
   8af14:	10800804 	addi	r2,r2,32
   8af18:	e0bfff15 	stw	r2,-4(fp)
   8af1c:	e0bfff17 	ldw	r2,-4(fp)
   8af20:	10820030 	cmpltui	r2,r2,2048
   8af24:	103ff81e 	bne	r2,zero,8af08 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   8af28:	e037883a 	mov	sp,fp
   8af2c:	df000017 	ldw	fp,0(sp)
   8af30:	dec00104 	addi	sp,sp,4
   8af34:	f800283a 	ret

0008af38 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   8af38:	defffc04 	addi	sp,sp,-16
   8af3c:	df000315 	stw	fp,12(sp)
   8af40:	df000304 	addi	fp,sp,12
   8af44:	e13ffd15 	stw	r4,-12(fp)
   8af48:	e17ffe15 	stw	r5,-8(fp)
   8af4c:	e1bfff15 	stw	r6,-4(fp)
  return len;
   8af50:	e0bfff17 	ldw	r2,-4(fp)
}
   8af54:	e037883a 	mov	sp,fp
   8af58:	df000017 	ldw	fp,0(sp)
   8af5c:	dec00104 	addi	sp,sp,4
   8af60:	f800283a 	ret

0008af64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8af64:	defffe04 	addi	sp,sp,-8
   8af68:	dfc00115 	stw	ra,4(sp)
   8af6c:	df000015 	stw	fp,0(sp)
   8af70:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8af74:	00800274 	movhi	r2,9
   8af78:	10bff804 	addi	r2,r2,-32
   8af7c:	10800017 	ldw	r2,0(r2)
   8af80:	10000526 	beq	r2,zero,8af98 <alt_get_errno+0x34>
   8af84:	00800274 	movhi	r2,9
   8af88:	10bff804 	addi	r2,r2,-32
   8af8c:	10800017 	ldw	r2,0(r2)
   8af90:	103ee83a 	callr	r2
   8af94:	00000206 	br	8afa0 <alt_get_errno+0x3c>
   8af98:	00800274 	movhi	r2,9
   8af9c:	1086d504 	addi	r2,r2,6996
}
   8afa0:	e037883a 	mov	sp,fp
   8afa4:	dfc00117 	ldw	ra,4(sp)
   8afa8:	df000017 	ldw	fp,0(sp)
   8afac:	dec00204 	addi	sp,sp,8
   8afb0:	f800283a 	ret

0008afb4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   8afb4:	defffb04 	addi	sp,sp,-20
   8afb8:	dfc00415 	stw	ra,16(sp)
   8afbc:	df000315 	stw	fp,12(sp)
   8afc0:	df000304 	addi	fp,sp,12
   8afc4:	e13ffe15 	stw	r4,-8(fp)
   8afc8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8afcc:	e0bffe17 	ldw	r2,-8(fp)
   8afd0:	10000616 	blt	r2,zero,8afec <fstat+0x38>
   8afd4:	e0bffe17 	ldw	r2,-8(fp)
   8afd8:	10c00324 	muli	r3,r2,12
   8afdc:	00800274 	movhi	r2,9
   8afe0:	10bb4504 	addi	r2,r2,-4844
   8afe4:	1885883a 	add	r2,r3,r2
   8afe8:	00000106 	br	8aff0 <fstat+0x3c>
   8afec:	0005883a 	mov	r2,zero
   8aff0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   8aff4:	e0bffd17 	ldw	r2,-12(fp)
   8aff8:	10001026 	beq	r2,zero,8b03c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   8affc:	e0bffd17 	ldw	r2,-12(fp)
   8b000:	10800017 	ldw	r2,0(r2)
   8b004:	10800817 	ldw	r2,32(r2)
   8b008:	10000726 	beq	r2,zero,8b028 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   8b00c:	e0bffd17 	ldw	r2,-12(fp)
   8b010:	10800017 	ldw	r2,0(r2)
   8b014:	10800817 	ldw	r2,32(r2)
   8b018:	e13ffd17 	ldw	r4,-12(fp)
   8b01c:	e17fff17 	ldw	r5,-4(fp)
   8b020:	103ee83a 	callr	r2
   8b024:	00000906 	br	8b04c <fstat+0x98>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   8b028:	e0bfff17 	ldw	r2,-4(fp)
   8b02c:	00c80004 	movi	r3,8192
   8b030:	10c00115 	stw	r3,4(r2)
      return 0;
   8b034:	0005883a 	mov	r2,zero
   8b038:	00000406 	br	8b04c <fstat+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8b03c:	008af640 	call	8af64 <alt_get_errno>
   8b040:	00c01444 	movi	r3,81
   8b044:	10c00015 	stw	r3,0(r2)
    return -1;
   8b048:	00bfffc4 	movi	r2,-1
  }
}
   8b04c:	e037883a 	mov	sp,fp
   8b050:	dfc00117 	ldw	ra,4(sp)
   8b054:	df000017 	ldw	fp,0(sp)
   8b058:	dec00204 	addi	sp,sp,8
   8b05c:	f800283a 	ret

0008b060 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8b060:	defffe04 	addi	sp,sp,-8
   8b064:	dfc00115 	stw	ra,4(sp)
   8b068:	df000015 	stw	fp,0(sp)
   8b06c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8b070:	00800274 	movhi	r2,9
   8b074:	10bff804 	addi	r2,r2,-32
   8b078:	10800017 	ldw	r2,0(r2)
   8b07c:	10000526 	beq	r2,zero,8b094 <alt_get_errno+0x34>
   8b080:	00800274 	movhi	r2,9
   8b084:	10bff804 	addi	r2,r2,-32
   8b088:	10800017 	ldw	r2,0(r2)
   8b08c:	103ee83a 	callr	r2
   8b090:	00000206 	br	8b09c <alt_get_errno+0x3c>
   8b094:	00800274 	movhi	r2,9
   8b098:	1086d504 	addi	r2,r2,6996
}
   8b09c:	e037883a 	mov	sp,fp
   8b0a0:	dfc00117 	ldw	ra,4(sp)
   8b0a4:	df000017 	ldw	fp,0(sp)
   8b0a8:	dec00204 	addi	sp,sp,8
   8b0ac:	f800283a 	ret

0008b0b0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   8b0b0:	deffed04 	addi	sp,sp,-76
   8b0b4:	dfc01215 	stw	ra,72(sp)
   8b0b8:	df001115 	stw	fp,68(sp)
   8b0bc:	df001104 	addi	fp,sp,68
   8b0c0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8b0c4:	e0bfff17 	ldw	r2,-4(fp)
   8b0c8:	10000616 	blt	r2,zero,8b0e4 <isatty+0x34>
   8b0cc:	e0bfff17 	ldw	r2,-4(fp)
   8b0d0:	10c00324 	muli	r3,r2,12
   8b0d4:	00800274 	movhi	r2,9
   8b0d8:	10bb4504 	addi	r2,r2,-4844
   8b0dc:	1885883a 	add	r2,r3,r2
   8b0e0:	00000106 	br	8b0e8 <isatty+0x38>
   8b0e4:	0005883a 	mov	r2,zero
   8b0e8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   8b0ec:	e0bfef17 	ldw	r2,-68(fp)
   8b0f0:	10000e26 	beq	r2,zero,8b12c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   8b0f4:	e0bfef17 	ldw	r2,-68(fp)
   8b0f8:	10800017 	ldw	r2,0(r2)
   8b0fc:	10800817 	ldw	r2,32(r2)
   8b100:	1000021e 	bne	r2,zero,8b10c <isatty+0x5c>
    {
      return 1;
   8b104:	00800044 	movi	r2,1
   8b108:	00000c06 	br	8b13c <isatty+0x8c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   8b10c:	e0bff004 	addi	r2,fp,-64
   8b110:	e13fff17 	ldw	r4,-4(fp)
   8b114:	100b883a 	mov	r5,r2
   8b118:	008afb40 	call	8afb4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   8b11c:	e0bff117 	ldw	r2,-60(fp)
   8b120:	10880020 	cmpeqi	r2,r2,8192
   8b124:	10803fcc 	andi	r2,r2,255
   8b128:	00000406 	br	8b13c <isatty+0x8c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8b12c:	008b0600 	call	8b060 <alt_get_errno>
   8b130:	00c01444 	movi	r3,81
   8b134:	10c00015 	stw	r3,0(r2)
    return 0;
   8b138:	0005883a 	mov	r2,zero
  }
}
   8b13c:	e037883a 	mov	sp,fp
   8b140:	dfc00117 	ldw	ra,4(sp)
   8b144:	df000017 	ldw	fp,0(sp)
   8b148:	dec00204 	addi	sp,sp,8
   8b14c:	f800283a 	ret

0008b150 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   8b150:	defffc04 	addi	sp,sp,-16
   8b154:	df000315 	stw	fp,12(sp)
   8b158:	df000304 	addi	fp,sp,12
   8b15c:	e13ffd15 	stw	r4,-12(fp)
   8b160:	e17ffe15 	stw	r5,-8(fp)
   8b164:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   8b168:	e0fffe17 	ldw	r3,-8(fp)
   8b16c:	e0bffd17 	ldw	r2,-12(fp)
   8b170:	18800e26 	beq	r3,r2,8b1ac <alt_load_section+0x5c>
  {
    while( to != end )
   8b174:	00000a06 	br	8b1a0 <alt_load_section+0x50>
    {
      *to++ = *from++;
   8b178:	e0bffd17 	ldw	r2,-12(fp)
   8b17c:	10c00017 	ldw	r3,0(r2)
   8b180:	e0bffe17 	ldw	r2,-8(fp)
   8b184:	10c00015 	stw	r3,0(r2)
   8b188:	e0bffe17 	ldw	r2,-8(fp)
   8b18c:	10800104 	addi	r2,r2,4
   8b190:	e0bffe15 	stw	r2,-8(fp)
   8b194:	e0bffd17 	ldw	r2,-12(fp)
   8b198:	10800104 	addi	r2,r2,4
   8b19c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   8b1a0:	e0fffe17 	ldw	r3,-8(fp)
   8b1a4:	e0bfff17 	ldw	r2,-4(fp)
   8b1a8:	18bff31e 	bne	r3,r2,8b178 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   8b1ac:	e037883a 	mov	sp,fp
   8b1b0:	df000017 	ldw	fp,0(sp)
   8b1b4:	dec00104 	addi	sp,sp,4
   8b1b8:	f800283a 	ret

0008b1bc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   8b1bc:	defffe04 	addi	sp,sp,-8
   8b1c0:	dfc00115 	stw	ra,4(sp)
   8b1c4:	df000015 	stw	fp,0(sp)
   8b1c8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   8b1cc:	01000274 	movhi	r4,9
   8b1d0:	213ffd04 	addi	r4,r4,-12
   8b1d4:	01400274 	movhi	r5,9
   8b1d8:	29792b04 	addi	r5,r5,-6996
   8b1dc:	01800274 	movhi	r6,9
   8b1e0:	31bffd04 	addi	r6,r6,-12
   8b1e4:	008b1500 	call	8b150 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   8b1e8:	01000234 	movhi	r4,8
   8b1ec:	21000804 	addi	r4,r4,32
   8b1f0:	01400234 	movhi	r5,8
   8b1f4:	29400804 	addi	r5,r5,32
   8b1f8:	01800234 	movhi	r6,8
   8b1fc:	31806e04 	addi	r6,r6,440
   8b200:	008b1500 	call	8b150 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   8b204:	01000274 	movhi	r4,9
   8b208:	21382404 	addi	r4,r4,-8048
   8b20c:	01400274 	movhi	r5,9
   8b210:	29782404 	addi	r5,r5,-8048
   8b214:	01800274 	movhi	r6,9
   8b218:	31b92b04 	addi	r6,r6,-6996
   8b21c:	008b1500 	call	8b150 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   8b220:	008aef40 	call	8aef4 <alt_dcache_flush_all>
  alt_icache_flush_all();
   8b224:	008d3180 	call	8d318 <alt_icache_flush_all>
}
   8b228:	e037883a 	mov	sp,fp
   8b22c:	dfc00117 	ldw	ra,4(sp)
   8b230:	df000017 	ldw	fp,0(sp)
   8b234:	dec00204 	addi	sp,sp,8
   8b238:	f800283a 	ret

0008b23c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8b23c:	defffe04 	addi	sp,sp,-8
   8b240:	dfc00115 	stw	ra,4(sp)
   8b244:	df000015 	stw	fp,0(sp)
   8b248:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8b24c:	00800274 	movhi	r2,9
   8b250:	10bff804 	addi	r2,r2,-32
   8b254:	10800017 	ldw	r2,0(r2)
   8b258:	10000526 	beq	r2,zero,8b270 <alt_get_errno+0x34>
   8b25c:	00800274 	movhi	r2,9
   8b260:	10bff804 	addi	r2,r2,-32
   8b264:	10800017 	ldw	r2,0(r2)
   8b268:	103ee83a 	callr	r2
   8b26c:	00000206 	br	8b278 <alt_get_errno+0x3c>
   8b270:	00800274 	movhi	r2,9
   8b274:	1086d504 	addi	r2,r2,6996
}
   8b278:	e037883a 	mov	sp,fp
   8b27c:	dfc00117 	ldw	ra,4(sp)
   8b280:	df000017 	ldw	fp,0(sp)
   8b284:	dec00204 	addi	sp,sp,8
   8b288:	f800283a 	ret

0008b28c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   8b28c:	defff904 	addi	sp,sp,-28
   8b290:	dfc00615 	stw	ra,24(sp)
   8b294:	df000515 	stw	fp,20(sp)
   8b298:	df000504 	addi	fp,sp,20
   8b29c:	e13ffd15 	stw	r4,-12(fp)
   8b2a0:	e17ffe15 	stw	r5,-8(fp)
   8b2a4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   8b2a8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8b2ac:	e0bffd17 	ldw	r2,-12(fp)
   8b2b0:	10000616 	blt	r2,zero,8b2cc <lseek+0x40>
   8b2b4:	e0bffd17 	ldw	r2,-12(fp)
   8b2b8:	10c00324 	muli	r3,r2,12
   8b2bc:	00800274 	movhi	r2,9
   8b2c0:	10bb4504 	addi	r2,r2,-4844
   8b2c4:	1885883a 	add	r2,r3,r2
   8b2c8:	00000106 	br	8b2d0 <lseek+0x44>
   8b2cc:	0005883a 	mov	r2,zero
   8b2d0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   8b2d4:	e0bffc17 	ldw	r2,-16(fp)
   8b2d8:	10001026 	beq	r2,zero,8b31c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   8b2dc:	e0bffc17 	ldw	r2,-16(fp)
   8b2e0:	10800017 	ldw	r2,0(r2)
   8b2e4:	10800717 	ldw	r2,28(r2)
   8b2e8:	10000926 	beq	r2,zero,8b310 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   8b2ec:	e0bffc17 	ldw	r2,-16(fp)
   8b2f0:	10800017 	ldw	r2,0(r2)
   8b2f4:	10800717 	ldw	r2,28(r2)
   8b2f8:	e13ffc17 	ldw	r4,-16(fp)
   8b2fc:	e17ffe17 	ldw	r5,-8(fp)
   8b300:	e1bfff17 	ldw	r6,-4(fp)
   8b304:	103ee83a 	callr	r2
   8b308:	e0bffb15 	stw	r2,-20(fp)
   8b30c:	00000506 	br	8b324 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   8b310:	00bfde84 	movi	r2,-134
   8b314:	e0bffb15 	stw	r2,-20(fp)
   8b318:	00000206 	br	8b324 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   8b31c:	00bfebc4 	movi	r2,-81
   8b320:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   8b324:	e0bffb17 	ldw	r2,-20(fp)
   8b328:	1000060e 	bge	r2,zero,8b344 <lseek+0xb8>
  {
    ALT_ERRNO = -rc;
   8b32c:	008b23c0 	call	8b23c <alt_get_errno>
   8b330:	e0fffb17 	ldw	r3,-20(fp)
   8b334:	00c7c83a 	sub	r3,zero,r3
   8b338:	10c00015 	stw	r3,0(r2)
    rc = -1;
   8b33c:	00bfffc4 	movi	r2,-1
   8b340:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   8b344:	e0bffb17 	ldw	r2,-20(fp)
}
   8b348:	e037883a 	mov	sp,fp
   8b34c:	dfc00117 	ldw	ra,4(sp)
   8b350:	df000017 	ldw	fp,0(sp)
   8b354:	dec00204 	addi	sp,sp,8
   8b358:	f800283a 	ret

0008b35c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   8b35c:	defffd04 	addi	sp,sp,-12
   8b360:	dfc00215 	stw	ra,8(sp)
   8b364:	df000115 	stw	fp,4(sp)
   8b368:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   8b36c:	0009883a 	mov	r4,zero
   8b370:	008b9a40 	call	8b9a4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   8b374:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   8b378:	008b9d80 	call	8b9d8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   8b37c:	01000274 	movhi	r4,9
   8b380:	21392004 	addi	r4,r4,-7040
   8b384:	01400274 	movhi	r5,9
   8b388:	29792004 	addi	r5,r5,-7040
   8b38c:	01800274 	movhi	r6,9
   8b390:	31b92004 	addi	r6,r6,-7040
   8b394:	008d6d00 	call	8d6d0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   8b398:	008d2600 	call	8d260 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   8b39c:	01000274 	movhi	r4,9
   8b3a0:	2134af04 	addi	r4,r4,-11588
   8b3a4:	008dcbc0 	call	8dcbc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   8b3a8:	d126e817 	ldw	r4,-25696(gp)
   8b3ac:	d0e6e917 	ldw	r3,-25692(gp)
   8b3b0:	d0a6ea17 	ldw	r2,-25688(gp)
   8b3b4:	180b883a 	mov	r5,r3
   8b3b8:	100d883a 	mov	r6,r2
   8b3bc:	0080d400 	call	80d40 <main>
   8b3c0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   8b3c4:	01000044 	movi	r4,1
   8b3c8:	008ae2c0 	call	8ae2c <close>
  exit (result);
   8b3cc:	e13fff17 	ldw	r4,-4(fp)
   8b3d0:	008dcd00 	call	8dcd0 <exit>

0008b3d4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   8b3d4:	defffe04 	addi	sp,sp,-8
   8b3d8:	df000115 	stw	fp,4(sp)
   8b3dc:	df000104 	addi	fp,sp,4
   8b3e0:	e13fff15 	stw	r4,-4(fp)
}
   8b3e4:	e037883a 	mov	sp,fp
   8b3e8:	df000017 	ldw	fp,0(sp)
   8b3ec:	dec00104 	addi	sp,sp,4
   8b3f0:	f800283a 	ret

0008b3f4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   8b3f4:	defffe04 	addi	sp,sp,-8
   8b3f8:	df000115 	stw	fp,4(sp)
   8b3fc:	df000104 	addi	fp,sp,4
   8b400:	e13fff15 	stw	r4,-4(fp)
}
   8b404:	e037883a 	mov	sp,fp
   8b408:	df000017 	ldw	fp,0(sp)
   8b40c:	dec00104 	addi	sp,sp,4
   8b410:	f800283a 	ret

0008b414 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8b414:	defffe04 	addi	sp,sp,-8
   8b418:	dfc00115 	stw	ra,4(sp)
   8b41c:	df000015 	stw	fp,0(sp)
   8b420:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8b424:	00800274 	movhi	r2,9
   8b428:	10bff804 	addi	r2,r2,-32
   8b42c:	10800017 	ldw	r2,0(r2)
   8b430:	10000526 	beq	r2,zero,8b448 <alt_get_errno+0x34>
   8b434:	00800274 	movhi	r2,9
   8b438:	10bff804 	addi	r2,r2,-32
   8b43c:	10800017 	ldw	r2,0(r2)
   8b440:	103ee83a 	callr	r2
   8b444:	00000206 	br	8b450 <alt_get_errno+0x3c>
   8b448:	00800274 	movhi	r2,9
   8b44c:	1086d504 	addi	r2,r2,6996
}
   8b450:	e037883a 	mov	sp,fp
   8b454:	dfc00117 	ldw	ra,4(sp)
   8b458:	df000017 	ldw	fp,0(sp)
   8b45c:	dec00204 	addi	sp,sp,8
   8b460:	f800283a 	ret

0008b464 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   8b464:	defff904 	addi	sp,sp,-28
   8b468:	dfc00615 	stw	ra,24(sp)
   8b46c:	df000515 	stw	fp,20(sp)
   8b470:	df000504 	addi	fp,sp,20
   8b474:	e13ffd15 	stw	r4,-12(fp)
   8b478:	e17ffe15 	stw	r5,-8(fp)
   8b47c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8b480:	e0bffd17 	ldw	r2,-12(fp)
   8b484:	10000616 	blt	r2,zero,8b4a0 <read+0x3c>
   8b488:	e0bffd17 	ldw	r2,-12(fp)
   8b48c:	10c00324 	muli	r3,r2,12
   8b490:	00800274 	movhi	r2,9
   8b494:	10bb4504 	addi	r2,r2,-4844
   8b498:	1885883a 	add	r2,r3,r2
   8b49c:	00000106 	br	8b4a4 <read+0x40>
   8b4a0:	0005883a 	mov	r2,zero
   8b4a4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   8b4a8:	e0bffb17 	ldw	r2,-20(fp)
   8b4ac:	10002026 	beq	r2,zero,8b530 <read+0xcc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   8b4b0:	e0bffb17 	ldw	r2,-20(fp)
   8b4b4:	10800217 	ldw	r2,8(r2)
   8b4b8:	108000cc 	andi	r2,r2,3
   8b4bc:	10800060 	cmpeqi	r2,r2,1
   8b4c0:	1000171e 	bne	r2,zero,8b520 <read+0xbc>
        (fd->dev->read))
   8b4c4:	e0bffb17 	ldw	r2,-20(fp)
   8b4c8:	10800017 	ldw	r2,0(r2)
   8b4cc:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   8b4d0:	10001326 	beq	r2,zero,8b520 <read+0xbc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   8b4d4:	e0bffb17 	ldw	r2,-20(fp)
   8b4d8:	10800017 	ldw	r2,0(r2)
   8b4dc:	10c00517 	ldw	r3,20(r2)
   8b4e0:	e0bfff17 	ldw	r2,-4(fp)
   8b4e4:	e13ffb17 	ldw	r4,-20(fp)
   8b4e8:	e17ffe17 	ldw	r5,-8(fp)
   8b4ec:	100d883a 	mov	r6,r2
   8b4f0:	183ee83a 	callr	r3
   8b4f4:	e0bffc15 	stw	r2,-16(fp)
   8b4f8:	e0bffc17 	ldw	r2,-16(fp)
   8b4fc:	1000060e 	bge	r2,zero,8b518 <read+0xb4>
        {
          ALT_ERRNO = -rval;
   8b500:	008b4140 	call	8b414 <alt_get_errno>
   8b504:	e0fffc17 	ldw	r3,-16(fp)
   8b508:	00c7c83a 	sub	r3,zero,r3
   8b50c:	10c00015 	stw	r3,0(r2)
          return -1;
   8b510:	00bfffc4 	movi	r2,-1
   8b514:	00000a06 	br	8b540 <read+0xdc>
        }
        return rval;
   8b518:	e0bffc17 	ldw	r2,-16(fp)
   8b51c:	00000806 	br	8b540 <read+0xdc>
      }
      else
      {
        ALT_ERRNO = EACCES;
   8b520:	008b4140 	call	8b414 <alt_get_errno>
   8b524:	00c00344 	movi	r3,13
   8b528:	10c00015 	stw	r3,0(r2)
   8b52c:	00000306 	br	8b53c <read+0xd8>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   8b530:	008b4140 	call	8b414 <alt_get_errno>
   8b534:	00c01444 	movi	r3,81
   8b538:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   8b53c:	00bfffc4 	movi	r2,-1
}
   8b540:	e037883a 	mov	sp,fp
   8b544:	dfc00117 	ldw	ra,4(sp)
   8b548:	df000017 	ldw	fp,0(sp)
   8b54c:	dec00204 	addi	sp,sp,8
   8b550:	f800283a 	ret

0008b554 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   8b554:	defffe04 	addi	sp,sp,-8
   8b558:	df000115 	stw	fp,4(sp)
   8b55c:	df000104 	addi	fp,sp,4
   8b560:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   8b564:	e0bfff17 	ldw	r2,-4(fp)
   8b568:	108000d0 	cmplti	r2,r2,3
   8b56c:	10000d1e 	bne	r2,zero,8b5a4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   8b570:	00c00274 	movhi	r3,9
   8b574:	18fb4504 	addi	r3,r3,-4844
   8b578:	e0bfff17 	ldw	r2,-4(fp)
   8b57c:	10800324 	muli	r2,r2,12
   8b580:	1885883a 	add	r2,r3,r2
   8b584:	10800204 	addi	r2,r2,8
   8b588:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   8b58c:	00c00274 	movhi	r3,9
   8b590:	18fb4504 	addi	r3,r3,-4844
   8b594:	e0bfff17 	ldw	r2,-4(fp)
   8b598:	10800324 	muli	r2,r2,12
   8b59c:	1885883a 	add	r2,r3,r2
   8b5a0:	10000015 	stw	zero,0(r2)
  }
}
   8b5a4:	e037883a 	mov	sp,fp
   8b5a8:	df000017 	ldw	fp,0(sp)
   8b5ac:	dec00104 	addi	sp,sp,4
   8b5b0:	f800283a 	ret

0008b5b4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   8b5b4:	defff904 	addi	sp,sp,-28
   8b5b8:	df000615 	stw	fp,24(sp)
   8b5bc:	df000604 	addi	fp,sp,24
   8b5c0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8b5c4:	0005303a 	rdctl	r2,status
   8b5c8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8b5cc:	e0fffc17 	ldw	r3,-16(fp)
   8b5d0:	00bfff84 	movi	r2,-2
   8b5d4:	1884703a 	and	r2,r3,r2
   8b5d8:	1001703a 	wrctl	status,r2
  
  return context;
   8b5dc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   8b5e0:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   8b5e4:	d0a00b17 	ldw	r2,-32724(gp)
   8b5e8:	10c000c4 	addi	r3,r2,3
   8b5ec:	00bfff04 	movi	r2,-4
   8b5f0:	1884703a 	and	r2,r3,r2
   8b5f4:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   8b5f8:	d0e00b17 	ldw	r3,-32724(gp)
   8b5fc:	e0bfff17 	ldw	r2,-4(fp)
   8b600:	1885883a 	add	r2,r3,r2
   8b604:	00c002b4 	movhi	r3,10
   8b608:	18dc4004 	addi	r3,r3,28928
   8b60c:	1880062e 	bgeu	r3,r2,8b628 <sbrk+0x74>
   8b610:	e0bffa17 	ldw	r2,-24(fp)
   8b614:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8b618:	e0bffd17 	ldw	r2,-12(fp)
   8b61c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   8b620:	00bfffc4 	movi	r2,-1
   8b624:	00000b06 	br	8b654 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   8b628:	d0a00b17 	ldw	r2,-32724(gp)
   8b62c:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   8b630:	d0e00b17 	ldw	r3,-32724(gp)
   8b634:	e0bfff17 	ldw	r2,-4(fp)
   8b638:	1885883a 	add	r2,r3,r2
   8b63c:	d0a00b15 	stw	r2,-32724(gp)
   8b640:	e0bffa17 	ldw	r2,-24(fp)
   8b644:	e0bffe15 	stw	r2,-8(fp)
   8b648:	e0bffe17 	ldw	r2,-8(fp)
   8b64c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   8b650:	e0bffb17 	ldw	r2,-20(fp)
} 
   8b654:	e037883a 	mov	sp,fp
   8b658:	df000017 	ldw	fp,0(sp)
   8b65c:	dec00104 	addi	sp,sp,4
   8b660:	f800283a 	ret

0008b664 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   8b664:	defffa04 	addi	sp,sp,-24
   8b668:	df000515 	stw	fp,20(sp)
   8b66c:	df000504 	addi	fp,sp,20
   8b670:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8b674:	0005303a 	rdctl	r2,status
   8b678:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8b67c:	e0fffc17 	ldw	r3,-16(fp)
   8b680:	00bfff84 	movi	r2,-2
   8b684:	1884703a 	and	r2,r3,r2
   8b688:	1001703a 	wrctl	status,r2
  
  return context;
   8b68c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   8b690:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   8b694:	e0bfff17 	ldw	r2,-4(fp)
   8b698:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   8b69c:	e0bffd17 	ldw	r2,-12(fp)
   8b6a0:	10800017 	ldw	r2,0(r2)
   8b6a4:	e0fffd17 	ldw	r3,-12(fp)
   8b6a8:	18c00117 	ldw	r3,4(r3)
   8b6ac:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   8b6b0:	e0bffd17 	ldw	r2,-12(fp)
   8b6b4:	10800117 	ldw	r2,4(r2)
   8b6b8:	e0fffd17 	ldw	r3,-12(fp)
   8b6bc:	18c00017 	ldw	r3,0(r3)
   8b6c0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   8b6c4:	e0bffd17 	ldw	r2,-12(fp)
   8b6c8:	e0fffd17 	ldw	r3,-12(fp)
   8b6cc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   8b6d0:	e0bffd17 	ldw	r2,-12(fp)
   8b6d4:	e0fffd17 	ldw	r3,-12(fp)
   8b6d8:	10c00015 	stw	r3,0(r2)
   8b6dc:	e0bffb17 	ldw	r2,-20(fp)
   8b6e0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8b6e4:	e0bffe17 	ldw	r2,-8(fp)
   8b6e8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   8b6ec:	e037883a 	mov	sp,fp
   8b6f0:	df000017 	ldw	fp,0(sp)
   8b6f4:	dec00104 	addi	sp,sp,4
   8b6f8:	f800283a 	ret

0008b6fc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   8b6fc:	defffb04 	addi	sp,sp,-20
   8b700:	dfc00415 	stw	ra,16(sp)
   8b704:	df000315 	stw	fp,12(sp)
   8b708:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   8b70c:	d0a00c17 	ldw	r2,-32720(gp)
   8b710:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   8b714:	d0a6ec17 	ldw	r2,-25680(gp)
   8b718:	10800044 	addi	r2,r2,1
   8b71c:	d0a6ec15 	stw	r2,-25680(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   8b720:	00002e06 	br	8b7dc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   8b724:	e0bffd17 	ldw	r2,-12(fp)
   8b728:	10800017 	ldw	r2,0(r2)
   8b72c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   8b730:	e0bffd17 	ldw	r2,-12(fp)
   8b734:	10800403 	ldbu	r2,16(r2)
   8b738:	10803fcc 	andi	r2,r2,255
   8b73c:	10000426 	beq	r2,zero,8b750 <alt_tick+0x54>
   8b740:	d0a6ec17 	ldw	r2,-25680(gp)
   8b744:	1000021e 	bne	r2,zero,8b750 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   8b748:	e0bffd17 	ldw	r2,-12(fp)
   8b74c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   8b750:	e0bffd17 	ldw	r2,-12(fp)
   8b754:	10800217 	ldw	r2,8(r2)
   8b758:	d0e6ec17 	ldw	r3,-25680(gp)
   8b75c:	18801d36 	bltu	r3,r2,8b7d4 <alt_tick+0xd8>
   8b760:	e0bffd17 	ldw	r2,-12(fp)
   8b764:	10800403 	ldbu	r2,16(r2)
   8b768:	10803fcc 	andi	r2,r2,255
   8b76c:	1000191e 	bne	r2,zero,8b7d4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   8b770:	e0bffd17 	ldw	r2,-12(fp)
   8b774:	10c00317 	ldw	r3,12(r2)
   8b778:	e0bffd17 	ldw	r2,-12(fp)
   8b77c:	10800517 	ldw	r2,20(r2)
   8b780:	1009883a 	mov	r4,r2
   8b784:	183ee83a 	callr	r3
   8b788:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   8b78c:	e0bfff17 	ldw	r2,-4(fp)
   8b790:	1000031e 	bne	r2,zero,8b7a0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   8b794:	e13ffd17 	ldw	r4,-12(fp)
   8b798:	008b6640 	call	8b664 <alt_alarm_stop>
   8b79c:	00000d06 	br	8b7d4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   8b7a0:	e0bffd17 	ldw	r2,-12(fp)
   8b7a4:	10c00217 	ldw	r3,8(r2)
   8b7a8:	e0bfff17 	ldw	r2,-4(fp)
   8b7ac:	1887883a 	add	r3,r3,r2
   8b7b0:	e0bffd17 	ldw	r2,-12(fp)
   8b7b4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   8b7b8:	e0bffd17 	ldw	r2,-12(fp)
   8b7bc:	10c00217 	ldw	r3,8(r2)
   8b7c0:	d0a6ec17 	ldw	r2,-25680(gp)
   8b7c4:	1880032e 	bgeu	r3,r2,8b7d4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   8b7c8:	e0bffd17 	ldw	r2,-12(fp)
   8b7cc:	00c00044 	movi	r3,1
   8b7d0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   8b7d4:	e0bffe17 	ldw	r2,-8(fp)
   8b7d8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   8b7dc:	e0fffd17 	ldw	r3,-12(fp)
   8b7e0:	d0a00c04 	addi	r2,gp,-32720
   8b7e4:	18bfcf1e 	bne	r3,r2,8b724 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   8b7e8:	0001883a 	nop
}
   8b7ec:	e037883a 	mov	sp,fp
   8b7f0:	dfc00117 	ldw	ra,4(sp)
   8b7f4:	df000017 	ldw	fp,0(sp)
   8b7f8:	dec00204 	addi	sp,sp,8
   8b7fc:	f800283a 	ret

0008b800 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   8b800:	defffd04 	addi	sp,sp,-12
   8b804:	dfc00215 	stw	ra,8(sp)
   8b808:	df000115 	stw	fp,4(sp)
   8b80c:	df000104 	addi	fp,sp,4
   8b810:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   8b814:	e13fff17 	ldw	r4,-4(fp)
   8b818:	008d01c0 	call	8d01c <alt_busy_sleep>
}
   8b81c:	e037883a 	mov	sp,fp
   8b820:	dfc00117 	ldw	ra,4(sp)
   8b824:	df000017 	ldw	fp,0(sp)
   8b828:	dec00204 	addi	sp,sp,8
   8b82c:	f800283a 	ret

0008b830 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8b830:	defffe04 	addi	sp,sp,-8
   8b834:	dfc00115 	stw	ra,4(sp)
   8b838:	df000015 	stw	fp,0(sp)
   8b83c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8b840:	00800274 	movhi	r2,9
   8b844:	10bff804 	addi	r2,r2,-32
   8b848:	10800017 	ldw	r2,0(r2)
   8b84c:	10000526 	beq	r2,zero,8b864 <alt_get_errno+0x34>
   8b850:	00800274 	movhi	r2,9
   8b854:	10bff804 	addi	r2,r2,-32
   8b858:	10800017 	ldw	r2,0(r2)
   8b85c:	103ee83a 	callr	r2
   8b860:	00000206 	br	8b86c <alt_get_errno+0x3c>
   8b864:	00800274 	movhi	r2,9
   8b868:	1086d504 	addi	r2,r2,6996
}
   8b86c:	e037883a 	mov	sp,fp
   8b870:	dfc00117 	ldw	ra,4(sp)
   8b874:	df000017 	ldw	fp,0(sp)
   8b878:	dec00204 	addi	sp,sp,8
   8b87c:	f800283a 	ret

0008b880 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   8b880:	defff904 	addi	sp,sp,-28
   8b884:	dfc00615 	stw	ra,24(sp)
   8b888:	df000515 	stw	fp,20(sp)
   8b88c:	df000504 	addi	fp,sp,20
   8b890:	e13ffd15 	stw	r4,-12(fp)
   8b894:	e17ffe15 	stw	r5,-8(fp)
   8b898:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8b89c:	e0bffd17 	ldw	r2,-12(fp)
   8b8a0:	10000616 	blt	r2,zero,8b8bc <write+0x3c>
   8b8a4:	e0bffd17 	ldw	r2,-12(fp)
   8b8a8:	10c00324 	muli	r3,r2,12
   8b8ac:	00800274 	movhi	r2,9
   8b8b0:	10bb4504 	addi	r2,r2,-4844
   8b8b4:	1885883a 	add	r2,r3,r2
   8b8b8:	00000106 	br	8b8c0 <write+0x40>
   8b8bc:	0005883a 	mov	r2,zero
   8b8c0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   8b8c4:	e0bffb17 	ldw	r2,-20(fp)
   8b8c8:	10001f26 	beq	r2,zero,8b948 <write+0xc8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   8b8cc:	e0bffb17 	ldw	r2,-20(fp)
   8b8d0:	10800217 	ldw	r2,8(r2)
   8b8d4:	108000cc 	andi	r2,r2,3
   8b8d8:	10001726 	beq	r2,zero,8b938 <write+0xb8>
   8b8dc:	e0bffb17 	ldw	r2,-20(fp)
   8b8e0:	10800017 	ldw	r2,0(r2)
   8b8e4:	10800617 	ldw	r2,24(r2)
   8b8e8:	10001326 	beq	r2,zero,8b938 <write+0xb8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   8b8ec:	e0bffb17 	ldw	r2,-20(fp)
   8b8f0:	10800017 	ldw	r2,0(r2)
   8b8f4:	10c00617 	ldw	r3,24(r2)
   8b8f8:	e0bfff17 	ldw	r2,-4(fp)
   8b8fc:	e13ffb17 	ldw	r4,-20(fp)
   8b900:	e17ffe17 	ldw	r5,-8(fp)
   8b904:	100d883a 	mov	r6,r2
   8b908:	183ee83a 	callr	r3
   8b90c:	e0bffc15 	stw	r2,-16(fp)
   8b910:	e0bffc17 	ldw	r2,-16(fp)
   8b914:	1000060e 	bge	r2,zero,8b930 <write+0xb0>
      {
        ALT_ERRNO = -rval;
   8b918:	008b8300 	call	8b830 <alt_get_errno>
   8b91c:	e0fffc17 	ldw	r3,-16(fp)
   8b920:	00c7c83a 	sub	r3,zero,r3
   8b924:	10c00015 	stw	r3,0(r2)
        return -1;
   8b928:	00bfffc4 	movi	r2,-1
   8b92c:	00000a06 	br	8b958 <write+0xd8>
      }
      return rval;
   8b930:	e0bffc17 	ldw	r2,-16(fp)
   8b934:	00000806 	br	8b958 <write+0xd8>
    }
    else
    {
      ALT_ERRNO = EACCES;
   8b938:	008b8300 	call	8b830 <alt_get_errno>
   8b93c:	00c00344 	movi	r3,13
   8b940:	10c00015 	stw	r3,0(r2)
   8b944:	00000306 	br	8b954 <write+0xd4>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   8b948:	008b8300 	call	8b830 <alt_get_errno>
   8b94c:	00c01444 	movi	r3,81
   8b950:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   8b954:	00bfffc4 	movi	r2,-1
}
   8b958:	e037883a 	mov	sp,fp
   8b95c:	dfc00117 	ldw	ra,4(sp)
   8b960:	df000017 	ldw	fp,0(sp)
   8b964:	dec00204 	addi	sp,sp,8
   8b968:	f800283a 	ret

0008b96c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   8b96c:	defffd04 	addi	sp,sp,-12
   8b970:	dfc00215 	stw	ra,8(sp)
   8b974:	df000115 	stw	fp,4(sp)
   8b978:	df000104 	addi	fp,sp,4
   8b97c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   8b980:	e13fff17 	ldw	r4,-4(fp)
   8b984:	01400274 	movhi	r5,9
   8b988:	297ff504 	addi	r5,r5,-44
   8b98c:	008d1c00 	call	8d1c0 <alt_dev_llist_insert>
}
   8b990:	e037883a 	mov	sp,fp
   8b994:	dfc00117 	ldw	ra,4(sp)
   8b998:	df000017 	ldw	fp,0(sp)
   8b99c:	dec00204 	addi	sp,sp,8
   8b9a0:	f800283a 	ret

0008b9a4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   8b9a4:	defffd04 	addi	sp,sp,-12
   8b9a8:	dfc00215 	stw	ra,8(sp)
   8b9ac:	df000115 	stw	fp,4(sp)
   8b9b0:	df000104 	addi	fp,sp,4
   8b9b4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
   8b9b8:	008d9b80 	call	8d9b8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   8b9bc:	00800044 	movi	r2,1
   8b9c0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   8b9c4:	e037883a 	mov	sp,fp
   8b9c8:	dfc00117 	ldw	ra,4(sp)
   8b9cc:	df000017 	ldw	fp,0(sp)
   8b9d0:	dec00204 	addi	sp,sp,8
   8b9d4:	f800283a 	ret

0008b9d8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   8b9d8:	defffe04 	addi	sp,sp,-8
   8b9dc:	dfc00115 	stw	ra,4(sp)
   8b9e0:	df000015 	stw	fp,0(sp)
   8b9e4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   8b9e8:	0100c034 	movhi	r4,768
   8b9ec:	000b883a 	mov	r5,zero
   8b9f0:	01800044 	movi	r6,1
   8b9f4:	01c0fa04 	movi	r7,1000
   8b9f8:	008c5500 	call	8c550 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_STAMP, timer_stamp);
   8b9fc:	00800274 	movhi	r2,9
   8ba00:	1086db04 	addi	r2,r2,7020
   8ba04:	10000015 	stw	zero,0(r2)
   8ba08:	00800274 	movhi	r2,9
   8ba0c:	1086dc04 	addi	r2,r2,7024
   8ba10:	00c1f034 	movhi	r3,1984
   8ba14:	18e92004 	addi	r3,r3,-23424
   8ba18:	10c00015 	stw	r3,0(r2)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   8ba1c:	01000274 	movhi	r4,9
   8ba20:	213baf04 	addi	r4,r4,-4420
   8ba24:	000b883a 	mov	r5,zero
   8ba28:	000d883a 	mov	r6,zero
   8ba2c:	008bbdc0 	call	8bbdc <altera_avalon_jtag_uart_init>
   8ba30:	01000274 	movhi	r4,9
   8ba34:	213ba504 	addi	r4,r4,-4460
   8ba38:	008b96c0 	call	8b96c <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
   8ba3c:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
   8ba40:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART, uart);
   8ba44:	01000274 	movhi	r4,9
   8ba48:	213fc704 	addi	r4,r4,-228
   8ba4c:	000b883a 	mov	r5,zero
   8ba50:	01800104 	movi	r6,4
   8ba54:	008c6e80 	call	8c6e8 <altera_avalon_uart_init>
   8ba58:	01000274 	movhi	r4,9
   8ba5c:	213fbd04 	addi	r4,r4,-268
   8ba60:	008b96c0 	call	8b96c <alt_dev_reg>
}
   8ba64:	e037883a 	mov	sp,fp
   8ba68:	dfc00117 	ldw	ra,4(sp)
   8ba6c:	df000017 	ldw	fp,0(sp)
   8ba70:	dec00204 	addi	sp,sp,8
   8ba74:	f800283a 	ret

0008ba78 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   8ba78:	defffa04 	addi	sp,sp,-24
   8ba7c:	dfc00515 	stw	ra,20(sp)
   8ba80:	df000415 	stw	fp,16(sp)
   8ba84:	df000404 	addi	fp,sp,16
   8ba88:	e13ffd15 	stw	r4,-12(fp)
   8ba8c:	e17ffe15 	stw	r5,-8(fp)
   8ba90:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8ba94:	e0bffd17 	ldw	r2,-12(fp)
   8ba98:	10800017 	ldw	r2,0(r2)
   8ba9c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   8baa0:	e0bffc17 	ldw	r2,-16(fp)
   8baa4:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   8baa8:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   8baac:	10800217 	ldw	r2,8(r2)
   8bab0:	1809883a 	mov	r4,r3
   8bab4:	e17ffe17 	ldw	r5,-8(fp)
   8bab8:	e1bfff17 	ldw	r6,-4(fp)
   8babc:	100f883a 	mov	r7,r2
   8bac0:	008c0a00 	call	8c0a0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   8bac4:	e037883a 	mov	sp,fp
   8bac8:	dfc00117 	ldw	ra,4(sp)
   8bacc:	df000017 	ldw	fp,0(sp)
   8bad0:	dec00204 	addi	sp,sp,8
   8bad4:	f800283a 	ret

0008bad8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   8bad8:	defffa04 	addi	sp,sp,-24
   8badc:	dfc00515 	stw	ra,20(sp)
   8bae0:	df000415 	stw	fp,16(sp)
   8bae4:	df000404 	addi	fp,sp,16
   8bae8:	e13ffd15 	stw	r4,-12(fp)
   8baec:	e17ffe15 	stw	r5,-8(fp)
   8baf0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8baf4:	e0bffd17 	ldw	r2,-12(fp)
   8baf8:	10800017 	ldw	r2,0(r2)
   8bafc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   8bb00:	e0bffc17 	ldw	r2,-16(fp)
   8bb04:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   8bb08:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   8bb0c:	10800217 	ldw	r2,8(r2)
   8bb10:	1809883a 	mov	r4,r3
   8bb14:	e17ffe17 	ldw	r5,-8(fp)
   8bb18:	e1bfff17 	ldw	r6,-4(fp)
   8bb1c:	100f883a 	mov	r7,r2
   8bb20:	008c2b80 	call	8c2b8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   8bb24:	e037883a 	mov	sp,fp
   8bb28:	dfc00117 	ldw	ra,4(sp)
   8bb2c:	df000017 	ldw	fp,0(sp)
   8bb30:	dec00204 	addi	sp,sp,8
   8bb34:	f800283a 	ret

0008bb38 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   8bb38:	defffc04 	addi	sp,sp,-16
   8bb3c:	dfc00315 	stw	ra,12(sp)
   8bb40:	df000215 	stw	fp,8(sp)
   8bb44:	df000204 	addi	fp,sp,8
   8bb48:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8bb4c:	e0bfff17 	ldw	r2,-4(fp)
   8bb50:	10800017 	ldw	r2,0(r2)
   8bb54:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   8bb58:	e0bffe17 	ldw	r2,-8(fp)
   8bb5c:	10c00a04 	addi	r3,r2,40
   8bb60:	e0bfff17 	ldw	r2,-4(fp)
   8bb64:	10800217 	ldw	r2,8(r2)
   8bb68:	1809883a 	mov	r4,r3
   8bb6c:	100b883a 	mov	r5,r2
   8bb70:	008bf440 	call	8bf44 <altera_avalon_jtag_uart_close>
}
   8bb74:	e037883a 	mov	sp,fp
   8bb78:	dfc00117 	ldw	ra,4(sp)
   8bb7c:	df000017 	ldw	fp,0(sp)
   8bb80:	dec00204 	addi	sp,sp,8
   8bb84:	f800283a 	ret

0008bb88 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   8bb88:	defffa04 	addi	sp,sp,-24
   8bb8c:	dfc00515 	stw	ra,20(sp)
   8bb90:	df000415 	stw	fp,16(sp)
   8bb94:	df000404 	addi	fp,sp,16
   8bb98:	e13ffd15 	stw	r4,-12(fp)
   8bb9c:	e17ffe15 	stw	r5,-8(fp)
   8bba0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   8bba4:	e0bffd17 	ldw	r2,-12(fp)
   8bba8:	10800017 	ldw	r2,0(r2)
   8bbac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   8bbb0:	e0bffc17 	ldw	r2,-16(fp)
   8bbb4:	10800a04 	addi	r2,r2,40
   8bbb8:	1009883a 	mov	r4,r2
   8bbbc:	e17ffe17 	ldw	r5,-8(fp)
   8bbc0:	e1bfff17 	ldw	r6,-4(fp)
   8bbc4:	008bfac0 	call	8bfac <altera_avalon_jtag_uart_ioctl>
}
   8bbc8:	e037883a 	mov	sp,fp
   8bbcc:	dfc00117 	ldw	ra,4(sp)
   8bbd0:	df000017 	ldw	fp,0(sp)
   8bbd4:	dec00204 	addi	sp,sp,8
   8bbd8:	f800283a 	ret

0008bbdc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   8bbdc:	defffa04 	addi	sp,sp,-24
   8bbe0:	dfc00515 	stw	ra,20(sp)
   8bbe4:	df000415 	stw	fp,16(sp)
   8bbe8:	df000404 	addi	fp,sp,16
   8bbec:	e13ffd15 	stw	r4,-12(fp)
   8bbf0:	e17ffe15 	stw	r5,-8(fp)
   8bbf4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8bbf8:	e0bffd17 	ldw	r2,-12(fp)
   8bbfc:	00c00044 	movi	r3,1
   8bc00:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   8bc04:	e0bffd17 	ldw	r2,-12(fp)
   8bc08:	10800017 	ldw	r2,0(r2)
   8bc0c:	10800104 	addi	r2,r2,4
   8bc10:	e0fffd17 	ldw	r3,-12(fp)
   8bc14:	18c00817 	ldw	r3,32(r3)
   8bc18:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   8bc1c:	e0fffe17 	ldw	r3,-8(fp)
   8bc20:	e0bfff17 	ldw	r2,-4(fp)
   8bc24:	d8000015 	stw	zero,0(sp)
   8bc28:	1809883a 	mov	r4,r3
   8bc2c:	100b883a 	mov	r5,r2
   8bc30:	01800274 	movhi	r6,9
   8bc34:	31af2704 	addi	r6,r6,-17252
   8bc38:	e1fffd17 	ldw	r7,-12(fp)
   8bc3c:	008d3480 	call	8d348 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   8bc40:	e0bffd17 	ldw	r2,-12(fp)
   8bc44:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   8bc48:	e0bffd17 	ldw	r2,-12(fp)
   8bc4c:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   8bc50:	00800274 	movhi	r2,9
   8bc54:	1086d904 	addi	r2,r2,7012
   8bc58:	10800017 	ldw	r2,0(r2)
   8bc5c:	1809883a 	mov	r4,r3
   8bc60:	100b883a 	mov	r5,r2
   8bc64:	01800274 	movhi	r6,9
   8bc68:	31afa804 	addi	r6,r6,-16736
   8bc6c:	e1fffd17 	ldw	r7,-12(fp)
   8bc70:	008cedc0 	call	8cedc <alt_alarm_start>
   8bc74:	1000040e 	bge	r2,zero,8bc88 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   8bc78:	e0bffd17 	ldw	r2,-12(fp)
   8bc7c:	00e00034 	movhi	r3,32768
   8bc80:	18ffffc4 	addi	r3,r3,-1
   8bc84:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   8bc88:	e037883a 	mov	sp,fp
   8bc8c:	dfc00117 	ldw	ra,4(sp)
   8bc90:	df000017 	ldw	fp,0(sp)
   8bc94:	dec00204 	addi	sp,sp,8
   8bc98:	f800283a 	ret

0008bc9c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   8bc9c:	defff804 	addi	sp,sp,-32
   8bca0:	df000715 	stw	fp,28(sp)
   8bca4:	df000704 	addi	fp,sp,28
   8bca8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   8bcac:	e0bfff17 	ldw	r2,-4(fp)
   8bcb0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   8bcb4:	e0bffb17 	ldw	r2,-20(fp)
   8bcb8:	10800017 	ldw	r2,0(r2)
   8bcbc:	e0bffc15 	stw	r2,-16(fp)
   8bcc0:	00000106 	br	8bcc8 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
   8bcc4:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8bcc8:	e0bffc17 	ldw	r2,-16(fp)
   8bccc:	10800104 	addi	r2,r2,4
   8bcd0:	10800037 	ldwio	r2,0(r2)
   8bcd4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   8bcd8:	e0bffd17 	ldw	r2,-12(fp)
   8bcdc:	1080c00c 	andi	r2,r2,768
   8bce0:	10006a26 	beq	r2,zero,8be8c <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   8bce4:	e0bffd17 	ldw	r2,-12(fp)
   8bce8:	1080400c 	andi	r2,r2,256
   8bcec:	10003326 	beq	r2,zero,8bdbc <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   8bcf0:	00800074 	movhi	r2,1
   8bcf4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8bcf8:	e0bffb17 	ldw	r2,-20(fp)
   8bcfc:	10800a17 	ldw	r2,40(r2)
   8bd00:	10800044 	addi	r2,r2,1
   8bd04:	1081ffcc 	andi	r2,r2,2047
   8bd08:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   8bd0c:	e0bffb17 	ldw	r2,-20(fp)
   8bd10:	10c00b17 	ldw	r3,44(r2)
   8bd14:	e0bffe17 	ldw	r2,-8(fp)
   8bd18:	18801426 	beq	r3,r2,8bd6c <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   8bd1c:	e0bffc17 	ldw	r2,-16(fp)
   8bd20:	10800037 	ldwio	r2,0(r2)
   8bd24:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   8bd28:	e0bff917 	ldw	r2,-28(fp)
   8bd2c:	10a0000c 	andi	r2,r2,32768
   8bd30:	10001026 	beq	r2,zero,8bd74 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   8bd34:	e0bffb17 	ldw	r2,-20(fp)
   8bd38:	10800a17 	ldw	r2,40(r2)
   8bd3c:	e0fff917 	ldw	r3,-28(fp)
   8bd40:	e13ffb17 	ldw	r4,-20(fp)
   8bd44:	2085883a 	add	r2,r4,r2
   8bd48:	10800e04 	addi	r2,r2,56
   8bd4c:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8bd50:	e0bffb17 	ldw	r2,-20(fp)
   8bd54:	10800a17 	ldw	r2,40(r2)
   8bd58:	10800044 	addi	r2,r2,1
   8bd5c:	10c1ffcc 	andi	r3,r2,2047
   8bd60:	e0bffb17 	ldw	r2,-20(fp)
   8bd64:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   8bd68:	003fe306 	br	8bcf8 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   8bd6c:	0001883a 	nop
   8bd70:	00000106 	br	8bd78 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   8bd74:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   8bd78:	e0bff917 	ldw	r2,-28(fp)
   8bd7c:	10bfffec 	andhi	r2,r2,65535
   8bd80:	10000e26 	beq	r2,zero,8bdbc <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8bd84:	e0bffb17 	ldw	r2,-20(fp)
   8bd88:	10c00817 	ldw	r3,32(r2)
   8bd8c:	00bfff84 	movi	r2,-2
   8bd90:	1886703a 	and	r3,r3,r2
   8bd94:	e0bffb17 	ldw	r2,-20(fp)
   8bd98:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   8bd9c:	e0bffc17 	ldw	r2,-16(fp)
   8bda0:	10800104 	addi	r2,r2,4
   8bda4:	e0fffb17 	ldw	r3,-20(fp)
   8bda8:	18c00817 	ldw	r3,32(r3)
   8bdac:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8bdb0:	e0bffc17 	ldw	r2,-16(fp)
   8bdb4:	10800104 	addi	r2,r2,4
   8bdb8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   8bdbc:	e0bffd17 	ldw	r2,-12(fp)
   8bdc0:	1080800c 	andi	r2,r2,512
   8bdc4:	103fbf26 	beq	r2,zero,8bcc4 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   8bdc8:	e0bffd17 	ldw	r2,-12(fp)
   8bdcc:	1004d43a 	srli	r2,r2,16
   8bdd0:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   8bdd4:	00001406 	br	8be28 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   8bdd8:	e0bffc17 	ldw	r2,-16(fp)
   8bddc:	e0fffb17 	ldw	r3,-20(fp)
   8bde0:	18c00d17 	ldw	r3,52(r3)
   8bde4:	e13ffb17 	ldw	r4,-20(fp)
   8bde8:	20c7883a 	add	r3,r4,r3
   8bdec:	18c20e04 	addi	r3,r3,2104
   8bdf0:	18c00003 	ldbu	r3,0(r3)
   8bdf4:	18c03fcc 	andi	r3,r3,255
   8bdf8:	18c0201c 	xori	r3,r3,128
   8bdfc:	18ffe004 	addi	r3,r3,-128
   8be00:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8be04:	e0bffb17 	ldw	r2,-20(fp)
   8be08:	10800d17 	ldw	r2,52(r2)
   8be0c:	10800044 	addi	r2,r2,1
   8be10:	10c1ffcc 	andi	r3,r2,2047
   8be14:	e0bffb17 	ldw	r2,-20(fp)
   8be18:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   8be1c:	e0bffa17 	ldw	r2,-24(fp)
   8be20:	10bfffc4 	addi	r2,r2,-1
   8be24:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   8be28:	e0bffa17 	ldw	r2,-24(fp)
   8be2c:	10000526 	beq	r2,zero,8be44 <altera_avalon_jtag_uart_irq+0x1a8>
   8be30:	e0bffb17 	ldw	r2,-20(fp)
   8be34:	10c00d17 	ldw	r3,52(r2)
   8be38:	e0bffb17 	ldw	r2,-20(fp)
   8be3c:	10800c17 	ldw	r2,48(r2)
   8be40:	18bfe51e 	bne	r3,r2,8bdd8 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   8be44:	e0bffa17 	ldw	r2,-24(fp)
   8be48:	103f9e26 	beq	r2,zero,8bcc4 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8be4c:	e0bffb17 	ldw	r2,-20(fp)
   8be50:	10c00817 	ldw	r3,32(r2)
   8be54:	00bfff44 	movi	r2,-3
   8be58:	1886703a 	and	r3,r3,r2
   8be5c:	e0bffb17 	ldw	r2,-20(fp)
   8be60:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8be64:	e0bffb17 	ldw	r2,-20(fp)
   8be68:	10800017 	ldw	r2,0(r2)
   8be6c:	10800104 	addi	r2,r2,4
   8be70:	e0fffb17 	ldw	r3,-20(fp)
   8be74:	18c00817 	ldw	r3,32(r3)
   8be78:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8be7c:	e0bffc17 	ldw	r2,-16(fp)
   8be80:	10800104 	addi	r2,r2,4
   8be84:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   8be88:	003f8e06 	br	8bcc4 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   8be8c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   8be90:	e037883a 	mov	sp,fp
   8be94:	df000017 	ldw	fp,0(sp)
   8be98:	dec00104 	addi	sp,sp,4
   8be9c:	f800283a 	ret

0008bea0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   8bea0:	defffc04 	addi	sp,sp,-16
   8bea4:	df000315 	stw	fp,12(sp)
   8bea8:	df000304 	addi	fp,sp,12
   8beac:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   8beb0:	e0bfff17 	ldw	r2,-4(fp)
   8beb4:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   8beb8:	e0bffd17 	ldw	r2,-12(fp)
   8bebc:	10800017 	ldw	r2,0(r2)
   8bec0:	10800104 	addi	r2,r2,4
   8bec4:	10800037 	ldwio	r2,0(r2)
   8bec8:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   8becc:	e0bffe17 	ldw	r2,-8(fp)
   8bed0:	1081000c 	andi	r2,r2,1024
   8bed4:	10000a26 	beq	r2,zero,8bf00 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   8bed8:	e0bffd17 	ldw	r2,-12(fp)
   8bedc:	10800017 	ldw	r2,0(r2)
   8bee0:	10800104 	addi	r2,r2,4
   8bee4:	e0fffd17 	ldw	r3,-12(fp)
   8bee8:	18c00817 	ldw	r3,32(r3)
   8beec:	18c10014 	ori	r3,r3,1024
   8bef0:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   8bef4:	e0bffd17 	ldw	r2,-12(fp)
   8bef8:	10000915 	stw	zero,36(r2)
   8befc:	00000a06 	br	8bf28 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   8bf00:	e0bffd17 	ldw	r2,-12(fp)
   8bf04:	10800917 	ldw	r2,36(r2)
   8bf08:	00e00034 	movhi	r3,32768
   8bf0c:	18ffff04 	addi	r3,r3,-4
   8bf10:	18800536 	bltu	r3,r2,8bf28 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
   8bf14:	e0bffd17 	ldw	r2,-12(fp)
   8bf18:	10800917 	ldw	r2,36(r2)
   8bf1c:	10c00044 	addi	r3,r2,1
   8bf20:	e0bffd17 	ldw	r2,-12(fp)
   8bf24:	10c00915 	stw	r3,36(r2)
   8bf28:	00800274 	movhi	r2,9
   8bf2c:	1086d904 	addi	r2,r2,7012
   8bf30:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   8bf34:	e037883a 	mov	sp,fp
   8bf38:	df000017 	ldw	fp,0(sp)
   8bf3c:	dec00104 	addi	sp,sp,4
   8bf40:	f800283a 	ret

0008bf44 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   8bf44:	defffd04 	addi	sp,sp,-12
   8bf48:	df000215 	stw	fp,8(sp)
   8bf4c:	df000204 	addi	fp,sp,8
   8bf50:	e13ffe15 	stw	r4,-8(fp)
   8bf54:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   8bf58:	00000506 	br	8bf70 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   8bf5c:	e0bfff17 	ldw	r2,-4(fp)
   8bf60:	1090000c 	andi	r2,r2,16384
   8bf64:	10000226 	beq	r2,zero,8bf70 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   8bf68:	00bffd44 	movi	r2,-11
   8bf6c:	00000b06 	br	8bf9c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   8bf70:	e0bffe17 	ldw	r2,-8(fp)
   8bf74:	10c00d17 	ldw	r3,52(r2)
   8bf78:	e0bffe17 	ldw	r2,-8(fp)
   8bf7c:	10800c17 	ldw	r2,48(r2)
   8bf80:	18800526 	beq	r3,r2,8bf98 <altera_avalon_jtag_uart_close+0x54>
   8bf84:	e0bffe17 	ldw	r2,-8(fp)
   8bf88:	10c00917 	ldw	r3,36(r2)
   8bf8c:	e0bffe17 	ldw	r2,-8(fp)
   8bf90:	10800117 	ldw	r2,4(r2)
   8bf94:	18bff136 	bltu	r3,r2,8bf5c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   8bf98:	0005883a 	mov	r2,zero
}
   8bf9c:	e037883a 	mov	sp,fp
   8bfa0:	df000017 	ldw	fp,0(sp)
   8bfa4:	dec00104 	addi	sp,sp,4
   8bfa8:	f800283a 	ret

0008bfac <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   8bfac:	defffa04 	addi	sp,sp,-24
   8bfb0:	df000515 	stw	fp,20(sp)
   8bfb4:	df000504 	addi	fp,sp,20
   8bfb8:	e13ffd15 	stw	r4,-12(fp)
   8bfbc:	e17ffe15 	stw	r5,-8(fp)
   8bfc0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   8bfc4:	00bff9c4 	movi	r2,-25
   8bfc8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   8bfcc:	e0bffe17 	ldw	r2,-8(fp)
   8bfd0:	10da8060 	cmpeqi	r3,r2,27137
   8bfd4:	1800031e 	bne	r3,zero,8bfe4 <altera_avalon_jtag_uart_ioctl+0x38>
   8bfd8:	109a80a0 	cmpeqi	r2,r2,27138
   8bfdc:	1000181e 	bne	r2,zero,8c040 <altera_avalon_jtag_uart_ioctl+0x94>
   8bfe0:	00002606 	br	8c07c <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   8bfe4:	e0bffd17 	ldw	r2,-12(fp)
   8bfe8:	10c00117 	ldw	r3,4(r2)
   8bfec:	00a00034 	movhi	r2,32768
   8bff0:	10bfffc4 	addi	r2,r2,-1
   8bff4:	18802226 	beq	r3,r2,8c080 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
   8bff8:	e0bfff17 	ldw	r2,-4(fp)
   8bffc:	10800017 	ldw	r2,0(r2)
   8c000:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   8c004:	e0bffc17 	ldw	r2,-16(fp)
   8c008:	10800090 	cmplti	r2,r2,2
   8c00c:	1000061e 	bne	r2,zero,8c028 <altera_avalon_jtag_uart_ioctl+0x7c>
   8c010:	e0fffc17 	ldw	r3,-16(fp)
   8c014:	00a00034 	movhi	r2,32768
   8c018:	10bfffc4 	addi	r2,r2,-1
   8c01c:	18800226 	beq	r3,r2,8c028 <altera_avalon_jtag_uart_ioctl+0x7c>
   8c020:	e0bffc17 	ldw	r2,-16(fp)
   8c024:	00000206 	br	8c030 <altera_avalon_jtag_uart_ioctl+0x84>
   8c028:	00a00034 	movhi	r2,32768
   8c02c:	10bfff84 	addi	r2,r2,-2
   8c030:	e0fffd17 	ldw	r3,-12(fp)
   8c034:	18800115 	stw	r2,4(r3)
      rc = 0;
   8c038:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   8c03c:	00001006 	br	8c080 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   8c040:	e0bffd17 	ldw	r2,-12(fp)
   8c044:	10c00117 	ldw	r3,4(r2)
   8c048:	00a00034 	movhi	r2,32768
   8c04c:	10bfffc4 	addi	r2,r2,-1
   8c050:	18800d26 	beq	r3,r2,8c088 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   8c054:	e0bffd17 	ldw	r2,-12(fp)
   8c058:	10c00917 	ldw	r3,36(r2)
   8c05c:	e0bffd17 	ldw	r2,-12(fp)
   8c060:	10800117 	ldw	r2,4(r2)
   8c064:	1885803a 	cmpltu	r2,r3,r2
   8c068:	10c03fcc 	andi	r3,r2,255
   8c06c:	e0bfff17 	ldw	r2,-4(fp)
   8c070:	10c00015 	stw	r3,0(r2)
      rc = 0;
   8c074:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   8c078:	00000306 	br	8c088 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
   8c07c:	00000306 	br	8c08c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   8c080:	0001883a 	nop
   8c084:	00000106 	br	8c08c <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   8c088:	0001883a 	nop

  default:
    break;
  }

  return rc;
   8c08c:	e0bffb17 	ldw	r2,-20(fp)
}
   8c090:	e037883a 	mov	sp,fp
   8c094:	df000017 	ldw	fp,0(sp)
   8c098:	dec00104 	addi	sp,sp,4
   8c09c:	f800283a 	ret

0008c0a0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   8c0a0:	defff304 	addi	sp,sp,-52
   8c0a4:	dfc00c15 	stw	ra,48(sp)
   8c0a8:	df000b15 	stw	fp,44(sp)
   8c0ac:	df000b04 	addi	fp,sp,44
   8c0b0:	e13ffc15 	stw	r4,-16(fp)
   8c0b4:	e17ffd15 	stw	r5,-12(fp)
   8c0b8:	e1bffe15 	stw	r6,-8(fp)
   8c0bc:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   8c0c0:	e0bffd17 	ldw	r2,-12(fp)
   8c0c4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   8c0c8:	00004706 	br	8c1e8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   8c0cc:	e0bffc17 	ldw	r2,-16(fp)
   8c0d0:	10800a17 	ldw	r2,40(r2)
   8c0d4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   8c0d8:	e0bffc17 	ldw	r2,-16(fp)
   8c0dc:	10800b17 	ldw	r2,44(r2)
   8c0e0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   8c0e4:	e0fff717 	ldw	r3,-36(fp)
   8c0e8:	e0bff817 	ldw	r2,-32(fp)
   8c0ec:	18800536 	bltu	r3,r2,8c104 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   8c0f0:	e0fff717 	ldw	r3,-36(fp)
   8c0f4:	e0bff817 	ldw	r2,-32(fp)
   8c0f8:	1885c83a 	sub	r2,r3,r2
   8c0fc:	e0bff615 	stw	r2,-40(fp)
   8c100:	00000406 	br	8c114 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   8c104:	00c20004 	movi	r3,2048
   8c108:	e0bff817 	ldw	r2,-32(fp)
   8c10c:	1885c83a 	sub	r2,r3,r2
   8c110:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   8c114:	e0bff617 	ldw	r2,-40(fp)
   8c118:	10001e26 	beq	r2,zero,8c194 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   8c11c:	e0fffe17 	ldw	r3,-8(fp)
   8c120:	e0bff617 	ldw	r2,-40(fp)
   8c124:	1880022e 	bgeu	r3,r2,8c130 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   8c128:	e0bffe17 	ldw	r2,-8(fp)
   8c12c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   8c130:	e0bff817 	ldw	r2,-32(fp)
   8c134:	10800e04 	addi	r2,r2,56
   8c138:	e0fffc17 	ldw	r3,-16(fp)
   8c13c:	1885883a 	add	r2,r3,r2
   8c140:	e13ff517 	ldw	r4,-44(fp)
   8c144:	100b883a 	mov	r5,r2
   8c148:	e1bff617 	ldw	r6,-40(fp)
   8c14c:	00818980 	call	81898 <memcpy>
      ptr   += n;
   8c150:	e0fff517 	ldw	r3,-44(fp)
   8c154:	e0bff617 	ldw	r2,-40(fp)
   8c158:	1885883a 	add	r2,r3,r2
   8c15c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   8c160:	e0fffe17 	ldw	r3,-8(fp)
   8c164:	e0bff617 	ldw	r2,-40(fp)
   8c168:	1885c83a 	sub	r2,r3,r2
   8c16c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8c170:	e0fff817 	ldw	r3,-32(fp)
   8c174:	e0bff617 	ldw	r2,-40(fp)
   8c178:	1885883a 	add	r2,r3,r2
   8c17c:	10c1ffcc 	andi	r3,r2,2047
   8c180:	e0bffc17 	ldw	r2,-16(fp)
   8c184:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   8c188:	e0bffe17 	ldw	r2,-8(fp)
   8c18c:	00bfcf16 	blt	zero,r2,8c0cc <altera_avalon_jtag_uart_read+0x2c>
   8c190:	00000106 	br	8c198 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   8c194:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   8c198:	e0fff517 	ldw	r3,-44(fp)
   8c19c:	e0bffd17 	ldw	r2,-12(fp)
   8c1a0:	1880141e 	bne	r3,r2,8c1f4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   8c1a4:	e0bfff17 	ldw	r2,-4(fp)
   8c1a8:	1090000c 	andi	r2,r2,16384
   8c1ac:	1000131e 	bne	r2,zero,8c1fc <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   8c1b0:	0001883a 	nop
   8c1b4:	e0bffc17 	ldw	r2,-16(fp)
   8c1b8:	10c00a17 	ldw	r3,40(r2)
   8c1bc:	e0bff717 	ldw	r2,-36(fp)
   8c1c0:	1880051e 	bne	r3,r2,8c1d8 <altera_avalon_jtag_uart_read+0x138>
   8c1c4:	e0bffc17 	ldw	r2,-16(fp)
   8c1c8:	10c00917 	ldw	r3,36(r2)
   8c1cc:	e0bffc17 	ldw	r2,-16(fp)
   8c1d0:	10800117 	ldw	r2,4(r2)
   8c1d4:	18bff736 	bltu	r3,r2,8c1b4 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   8c1d8:	e0bffc17 	ldw	r2,-16(fp)
   8c1dc:	10c00a17 	ldw	r3,40(r2)
   8c1e0:	e0bff717 	ldw	r2,-36(fp)
   8c1e4:	18800726 	beq	r3,r2,8c204 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   8c1e8:	e0bffe17 	ldw	r2,-8(fp)
   8c1ec:	00bfb716 	blt	zero,r2,8c0cc <altera_avalon_jtag_uart_read+0x2c>
   8c1f0:	00000506 	br	8c208 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   8c1f4:	0001883a 	nop
   8c1f8:	00000306 	br	8c208 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   8c1fc:	0001883a 	nop
   8c200:	00000106 	br	8c208 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   8c204:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   8c208:	e0fff517 	ldw	r3,-44(fp)
   8c20c:	e0bffd17 	ldw	r2,-12(fp)
   8c210:	18801726 	beq	r3,r2,8c270 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8c214:	0005303a 	rdctl	r2,status
   8c218:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8c21c:	e0fffa17 	ldw	r3,-24(fp)
   8c220:	00bfff84 	movi	r2,-2
   8c224:	1884703a 	and	r2,r3,r2
   8c228:	1001703a 	wrctl	status,r2
  
  return context;
   8c22c:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   8c230:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8c234:	e0bffc17 	ldw	r2,-16(fp)
   8c238:	10800817 	ldw	r2,32(r2)
   8c23c:	10c00054 	ori	r3,r2,1
   8c240:	e0bffc17 	ldw	r2,-16(fp)
   8c244:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8c248:	e0bffc17 	ldw	r2,-16(fp)
   8c24c:	10800017 	ldw	r2,0(r2)
   8c250:	10800104 	addi	r2,r2,4
   8c254:	e0fffc17 	ldw	r3,-16(fp)
   8c258:	18c00817 	ldw	r3,32(r3)
   8c25c:	10c00035 	stwio	r3,0(r2)
   8c260:	e0bff917 	ldw	r2,-28(fp)
   8c264:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8c268:	e0bffb17 	ldw	r2,-20(fp)
   8c26c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   8c270:	e0fff517 	ldw	r3,-44(fp)
   8c274:	e0bffd17 	ldw	r2,-12(fp)
   8c278:	18800426 	beq	r3,r2,8c28c <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
   8c27c:	e0fff517 	ldw	r3,-44(fp)
   8c280:	e0bffd17 	ldw	r2,-12(fp)
   8c284:	1885c83a 	sub	r2,r3,r2
   8c288:	00000606 	br	8c2a4 <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
   8c28c:	e0bfff17 	ldw	r2,-4(fp)
   8c290:	1090000c 	andi	r2,r2,16384
   8c294:	10000226 	beq	r2,zero,8c2a0 <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
   8c298:	00bffd44 	movi	r2,-11
   8c29c:	00000106 	br	8c2a4 <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
   8c2a0:	00bffec4 	movi	r2,-5
}
   8c2a4:	e037883a 	mov	sp,fp
   8c2a8:	dfc00117 	ldw	ra,4(sp)
   8c2ac:	df000017 	ldw	fp,0(sp)
   8c2b0:	dec00204 	addi	sp,sp,8
   8c2b4:	f800283a 	ret

0008c2b8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   8c2b8:	defff304 	addi	sp,sp,-52
   8c2bc:	dfc00c15 	stw	ra,48(sp)
   8c2c0:	df000b15 	stw	fp,44(sp)
   8c2c4:	df000b04 	addi	fp,sp,44
   8c2c8:	e13ffc15 	stw	r4,-16(fp)
   8c2cc:	e17ffd15 	stw	r5,-12(fp)
   8c2d0:	e1bffe15 	stw	r6,-8(fp)
   8c2d4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   8c2d8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   8c2dc:	e0bffd17 	ldw	r2,-12(fp)
   8c2e0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   8c2e4:	00003706 	br	8c3c4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   8c2e8:	e0bffc17 	ldw	r2,-16(fp)
   8c2ec:	10800c17 	ldw	r2,48(r2)
   8c2f0:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   8c2f4:	e0bffc17 	ldw	r2,-16(fp)
   8c2f8:	10800d17 	ldw	r2,52(r2)
   8c2fc:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   8c300:	e0fff817 	ldw	r3,-32(fp)
   8c304:	e0bff517 	ldw	r2,-44(fp)
   8c308:	1880062e 	bgeu	r3,r2,8c324 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   8c30c:	e0fff517 	ldw	r3,-44(fp)
   8c310:	e0bff817 	ldw	r2,-32(fp)
   8c314:	1885c83a 	sub	r2,r3,r2
   8c318:	10bfffc4 	addi	r2,r2,-1
   8c31c:	e0bff615 	stw	r2,-40(fp)
   8c320:	00000b06 	br	8c350 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   8c324:	e0bff517 	ldw	r2,-44(fp)
   8c328:	10000526 	beq	r2,zero,8c340 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   8c32c:	00c20004 	movi	r3,2048
   8c330:	e0bff817 	ldw	r2,-32(fp)
   8c334:	1885c83a 	sub	r2,r3,r2
   8c338:	e0bff615 	stw	r2,-40(fp)
   8c33c:	00000406 	br	8c350 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   8c340:	00c1ffc4 	movi	r3,2047
   8c344:	e0bff817 	ldw	r2,-32(fp)
   8c348:	1885c83a 	sub	r2,r3,r2
   8c34c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   8c350:	e0bff617 	ldw	r2,-40(fp)
   8c354:	10001e26 	beq	r2,zero,8c3d0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   8c358:	e0fffe17 	ldw	r3,-8(fp)
   8c35c:	e0bff617 	ldw	r2,-40(fp)
   8c360:	1880022e 	bgeu	r3,r2,8c36c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   8c364:	e0bffe17 	ldw	r2,-8(fp)
   8c368:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   8c36c:	e0bff817 	ldw	r2,-32(fp)
   8c370:	10820e04 	addi	r2,r2,2104
   8c374:	e0fffc17 	ldw	r3,-16(fp)
   8c378:	1885883a 	add	r2,r3,r2
   8c37c:	1009883a 	mov	r4,r2
   8c380:	e17ffd17 	ldw	r5,-12(fp)
   8c384:	e1bff617 	ldw	r6,-40(fp)
   8c388:	00818980 	call	81898 <memcpy>
      ptr   += n;
   8c38c:	e0fffd17 	ldw	r3,-12(fp)
   8c390:	e0bff617 	ldw	r2,-40(fp)
   8c394:	1885883a 	add	r2,r3,r2
   8c398:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   8c39c:	e0fffe17 	ldw	r3,-8(fp)
   8c3a0:	e0bff617 	ldw	r2,-40(fp)
   8c3a4:	1885c83a 	sub	r2,r3,r2
   8c3a8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8c3ac:	e0fff817 	ldw	r3,-32(fp)
   8c3b0:	e0bff617 	ldw	r2,-40(fp)
   8c3b4:	1885883a 	add	r2,r3,r2
   8c3b8:	10c1ffcc 	andi	r3,r2,2047
   8c3bc:	e0bffc17 	ldw	r2,-16(fp)
   8c3c0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   8c3c4:	e0bffe17 	ldw	r2,-8(fp)
   8c3c8:	00bfc716 	blt	zero,r2,8c2e8 <altera_avalon_jtag_uart_write+0x30>
   8c3cc:	00000106 	br	8c3d4 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   8c3d0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8c3d4:	0005303a 	rdctl	r2,status
   8c3d8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8c3dc:	e0fffa17 	ldw	r3,-24(fp)
   8c3e0:	00bfff84 	movi	r2,-2
   8c3e4:	1884703a 	and	r2,r3,r2
   8c3e8:	1001703a 	wrctl	status,r2
  
  return context;
   8c3ec:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   8c3f0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8c3f4:	e0bffc17 	ldw	r2,-16(fp)
   8c3f8:	10800817 	ldw	r2,32(r2)
   8c3fc:	10c00094 	ori	r3,r2,2
   8c400:	e0bffc17 	ldw	r2,-16(fp)
   8c404:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8c408:	e0bffc17 	ldw	r2,-16(fp)
   8c40c:	10800017 	ldw	r2,0(r2)
   8c410:	10800104 	addi	r2,r2,4
   8c414:	e0fffc17 	ldw	r3,-16(fp)
   8c418:	18c00817 	ldw	r3,32(r3)
   8c41c:	10c00035 	stwio	r3,0(r2)
   8c420:	e0bff917 	ldw	r2,-28(fp)
   8c424:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8c428:	e0bffb17 	ldw	r2,-20(fp)
   8c42c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   8c430:	e0bffe17 	ldw	r2,-8(fp)
   8c434:	0080110e 	bge	zero,r2,8c47c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   8c438:	e0bfff17 	ldw	r2,-4(fp)
   8c43c:	1090000c 	andi	r2,r2,16384
   8c440:	1000111e 	bne	r2,zero,8c488 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   8c444:	0001883a 	nop
   8c448:	e0bffc17 	ldw	r2,-16(fp)
   8c44c:	10c00d17 	ldw	r3,52(r2)
   8c450:	e0bff517 	ldw	r2,-44(fp)
   8c454:	1880051e 	bne	r3,r2,8c46c <altera_avalon_jtag_uart_write+0x1b4>
   8c458:	e0bffc17 	ldw	r2,-16(fp)
   8c45c:	10c00917 	ldw	r3,36(r2)
   8c460:	e0bffc17 	ldw	r2,-16(fp)
   8c464:	10800117 	ldw	r2,4(r2)
   8c468:	18bff736 	bltu	r3,r2,8c448 <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   8c46c:	e0bffc17 	ldw	r2,-16(fp)
   8c470:	10c00d17 	ldw	r3,52(r2)
   8c474:	e0bff517 	ldw	r2,-44(fp)
   8c478:	18800526 	beq	r3,r2,8c490 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   8c47c:	e0bffe17 	ldw	r2,-8(fp)
   8c480:	00bfd016 	blt	zero,r2,8c3c4 <altera_avalon_jtag_uart_write+0x10c>
   8c484:	00000306 	br	8c494 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   8c488:	0001883a 	nop
   8c48c:	00000106 	br	8c494 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
   8c490:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   8c494:	e0fffd17 	ldw	r3,-12(fp)
   8c498:	e0bff717 	ldw	r2,-36(fp)
   8c49c:	18800426 	beq	r3,r2,8c4b0 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   8c4a0:	e0fffd17 	ldw	r3,-12(fp)
   8c4a4:	e0bff717 	ldw	r2,-36(fp)
   8c4a8:	1885c83a 	sub	r2,r3,r2
   8c4ac:	00000606 	br	8c4c8 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   8c4b0:	e0bfff17 	ldw	r2,-4(fp)
   8c4b4:	1090000c 	andi	r2,r2,16384
   8c4b8:	10000226 	beq	r2,zero,8c4c4 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   8c4bc:	00bffd44 	movi	r2,-11
   8c4c0:	00000106 	br	8c4c8 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   8c4c4:	00bffec4 	movi	r2,-5
}
   8c4c8:	e037883a 	mov	sp,fp
   8c4cc:	dfc00117 	ldw	ra,4(sp)
   8c4d0:	df000017 	ldw	fp,0(sp)
   8c4d4:	dec00204 	addi	sp,sp,8
   8c4d8:	f800283a 	ret

0008c4dc <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   8c4dc:	defffa04 	addi	sp,sp,-24
   8c4e0:	dfc00515 	stw	ra,20(sp)
   8c4e4:	df000415 	stw	fp,16(sp)
   8c4e8:	df000404 	addi	fp,sp,16
   8c4ec:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   8c4f0:	0007883a 	mov	r3,zero
   8c4f4:	e0bfff17 	ldw	r2,-4(fp)
   8c4f8:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   8c4fc:	e0bfff17 	ldw	r2,-4(fp)
   8c500:	10800104 	addi	r2,r2,4
   8c504:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8c508:	0005303a 	rdctl	r2,status
   8c50c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8c510:	e0fffd17 	ldw	r3,-12(fp)
   8c514:	00bfff84 	movi	r2,-2
   8c518:	1884703a 	and	r2,r3,r2
   8c51c:	1001703a 	wrctl	status,r2
  
  return context;
   8c520:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   8c524:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   8c528:	008b6fc0 	call	8b6fc <alt_tick>
   8c52c:	e0bffc17 	ldw	r2,-16(fp)
   8c530:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8c534:	e0bffe17 	ldw	r2,-8(fp)
   8c538:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   8c53c:	e037883a 	mov	sp,fp
   8c540:	dfc00117 	ldw	ra,4(sp)
   8c544:	df000017 	ldw	fp,0(sp)
   8c548:	dec00204 	addi	sp,sp,8
   8c54c:	f800283a 	ret

0008c550 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   8c550:	defff804 	addi	sp,sp,-32
   8c554:	dfc00715 	stw	ra,28(sp)
   8c558:	df000615 	stw	fp,24(sp)
   8c55c:	df000604 	addi	fp,sp,24
   8c560:	e13ffc15 	stw	r4,-16(fp)
   8c564:	e17ffd15 	stw	r5,-12(fp)
   8c568:	e1bffe15 	stw	r6,-8(fp)
   8c56c:	e1ffff15 	stw	r7,-4(fp)
   8c570:	e0bfff17 	ldw	r2,-4(fp)
   8c574:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   8c578:	00800274 	movhi	r2,9
   8c57c:	1086d904 	addi	r2,r2,7012
   8c580:	10800017 	ldw	r2,0(r2)
   8c584:	1000041e 	bne	r2,zero,8c598 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   8c588:	00800274 	movhi	r2,9
   8c58c:	1086d904 	addi	r2,r2,7012
   8c590:	e0fffb17 	ldw	r3,-20(fp)
   8c594:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   8c598:	e0bffc17 	ldw	r2,-16(fp)
   8c59c:	10800104 	addi	r2,r2,4
   8c5a0:	00c001c4 	movi	r3,7
   8c5a4:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   8c5a8:	d8000015 	stw	zero,0(sp)
   8c5ac:	e13ffd17 	ldw	r4,-12(fp)
   8c5b0:	e17ffe17 	ldw	r5,-8(fp)
   8c5b4:	01800274 	movhi	r6,9
   8c5b8:	31b13704 	addi	r6,r6,-15140
   8c5bc:	e1fffc17 	ldw	r7,-16(fp)
   8c5c0:	008d3480 	call	8d348 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   8c5c4:	e037883a 	mov	sp,fp
   8c5c8:	dfc00117 	ldw	ra,4(sp)
   8c5cc:	df000017 	ldw	fp,0(sp)
   8c5d0:	dec00204 	addi	sp,sp,8
   8c5d4:	f800283a 	ret

0008c5d8 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   8c5d8:	defffa04 	addi	sp,sp,-24
   8c5dc:	dfc00515 	stw	ra,20(sp)
   8c5e0:	df000415 	stw	fp,16(sp)
   8c5e4:	df000404 	addi	fp,sp,16
   8c5e8:	e13ffd15 	stw	r4,-12(fp)
   8c5ec:	e17ffe15 	stw	r5,-8(fp)
   8c5f0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   8c5f4:	e0bffd17 	ldw	r2,-12(fp)
   8c5f8:	10800017 	ldw	r2,0(r2)
   8c5fc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
   8c600:	e0bffc17 	ldw	r2,-16(fp)
   8c604:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   8c608:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_read(&dev->state, buffer, space,
   8c60c:	10800217 	ldw	r2,8(r2)
   8c610:	1809883a 	mov	r4,r3
   8c614:	e17ffe17 	ldw	r5,-8(fp)
   8c618:	e1bfff17 	ldw	r6,-4(fp)
   8c61c:	100f883a 	mov	r7,r2
   8c620:	008cae00 	call	8cae0 <altera_avalon_uart_read>
      fd->fd_flags);
}
   8c624:	e037883a 	mov	sp,fp
   8c628:	dfc00117 	ldw	ra,4(sp)
   8c62c:	df000017 	ldw	fp,0(sp)
   8c630:	dec00204 	addi	sp,sp,8
   8c634:	f800283a 	ret

0008c638 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   8c638:	defffa04 	addi	sp,sp,-24
   8c63c:	dfc00515 	stw	ra,20(sp)
   8c640:	df000415 	stw	fp,16(sp)
   8c644:	df000404 	addi	fp,sp,16
   8c648:	e13ffd15 	stw	r4,-12(fp)
   8c64c:	e17ffe15 	stw	r5,-8(fp)
   8c650:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   8c654:	e0bffd17 	ldw	r2,-12(fp)
   8c658:	10800017 	ldw	r2,0(r2)
   8c65c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
   8c660:	e0bffc17 	ldw	r2,-16(fp)
   8c664:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   8c668:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_write(&dev->state, buffer, space,
   8c66c:	10800217 	ldw	r2,8(r2)
   8c670:	1809883a 	mov	r4,r3
   8c674:	e17ffe17 	ldw	r5,-8(fp)
   8c678:	e1bfff17 	ldw	r6,-4(fp)
   8c67c:	100f883a 	mov	r7,r2
   8c680:	008cd340 	call	8cd34 <altera_avalon_uart_write>
      fd->fd_flags);
}
   8c684:	e037883a 	mov	sp,fp
   8c688:	dfc00117 	ldw	ra,4(sp)
   8c68c:	df000017 	ldw	fp,0(sp)
   8c690:	dec00204 	addi	sp,sp,8
   8c694:	f800283a 	ret

0008c698 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
   8c698:	defffc04 	addi	sp,sp,-16
   8c69c:	dfc00315 	stw	ra,12(sp)
   8c6a0:	df000215 	stw	fp,8(sp)
   8c6a4:	df000204 	addi	fp,sp,8
   8c6a8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   8c6ac:	e0bfff17 	ldw	r2,-4(fp)
   8c6b0:	10800017 	ldw	r2,0(r2)
   8c6b4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
   8c6b8:	e0bffe17 	ldw	r2,-8(fp)
   8c6bc:	10c00a04 	addi	r3,r2,40
   8c6c0:	e0bfff17 	ldw	r2,-4(fp)
   8c6c4:	10800217 	ldw	r2,8(r2)
   8c6c8:	1809883a 	mov	r4,r3
   8c6cc:	100b883a 	mov	r5,r2
   8c6d0:	008ca3c0 	call	8ca3c <altera_avalon_uart_close>
}
   8c6d4:	e037883a 	mov	sp,fp
   8c6d8:	dfc00117 	ldw	ra,4(sp)
   8c6dc:	df000017 	ldw	fp,0(sp)
   8c6e0:	dec00204 	addi	sp,sp,8
   8c6e4:	f800283a 	ret

0008c6e8 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
   8c6e8:	defff804 	addi	sp,sp,-32
   8c6ec:	dfc00715 	stw	ra,28(sp)
   8c6f0:	df000615 	stw	fp,24(sp)
   8c6f4:	df000604 	addi	fp,sp,24
   8c6f8:	e13ffd15 	stw	r4,-12(fp)
   8c6fc:	e17ffe15 	stw	r5,-8(fp)
   8c700:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
   8c704:	e0bffd17 	ldw	r2,-12(fp)
   8c708:	10800017 	ldw	r2,0(r2)
   8c70c:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   8c710:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   8c714:	1000041e 	bne	r2,zero,8c728 <altera_avalon_uart_init+0x40>
   8c718:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   8c71c:	1000021e 	bne	r2,zero,8c728 <altera_avalon_uart_init+0x40>
   8c720:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   8c724:	10000226 	beq	r2,zero,8c730 <altera_avalon_uart_init+0x48>
   8c728:	00800044 	movi	r2,1
   8c72c:	00000106 	br	8c734 <altera_avalon_uart_init+0x4c>
   8c730:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   8c734:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
   8c738:	e0bffc17 	ldw	r2,-16(fp)
   8c73c:	10000f1e 	bne	r2,zero,8c77c <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
   8c740:	e0bffd17 	ldw	r2,-12(fp)
   8c744:	00c32004 	movi	r3,3200
   8c748:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
   8c74c:	e0bffb17 	ldw	r2,-20(fp)
   8c750:	10800304 	addi	r2,r2,12
   8c754:	e0fffd17 	ldw	r3,-12(fp)
   8c758:	18c00117 	ldw	r3,4(r3)
   8c75c:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
   8c760:	d8000015 	stw	zero,0(sp)
   8c764:	e13ffe17 	ldw	r4,-8(fp)
   8c768:	e17fff17 	ldw	r5,-4(fp)
   8c76c:	01800274 	movhi	r6,9
   8c770:	31b1e404 	addi	r6,r6,-14448
   8c774:	e1fffd17 	ldw	r7,-12(fp)
   8c778:	008d3480 	call	8d348 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
   8c77c:	e037883a 	mov	sp,fp
   8c780:	dfc00117 	ldw	ra,4(sp)
   8c784:	df000017 	ldw	fp,0(sp)
   8c788:	dec00204 	addi	sp,sp,8
   8c78c:	f800283a 	ret

0008c790 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
   8c790:	defffa04 	addi	sp,sp,-24
   8c794:	dfc00515 	stw	ra,20(sp)
   8c798:	df000415 	stw	fp,16(sp)
   8c79c:	df000404 	addi	fp,sp,16
   8c7a0:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
   8c7a4:	e0bfff17 	ldw	r2,-4(fp)
   8c7a8:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
   8c7ac:	e0bffc17 	ldw	r2,-16(fp)
   8c7b0:	10800017 	ldw	r2,0(r2)
   8c7b4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
   8c7b8:	e0bffd17 	ldw	r2,-12(fp)
   8c7bc:	10800204 	addi	r2,r2,8
   8c7c0:	10800037 	ldwio	r2,0(r2)
   8c7c4:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
   8c7c8:	e0bffd17 	ldw	r2,-12(fp)
   8c7cc:	10800204 	addi	r2,r2,8
   8c7d0:	0007883a 	mov	r3,zero
   8c7d4:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
   8c7d8:	e0bffd17 	ldw	r2,-12(fp)
   8c7dc:	10800204 	addi	r2,r2,8
   8c7e0:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
   8c7e4:	e0bffe17 	ldw	r2,-8(fp)
   8c7e8:	1080200c 	andi	r2,r2,128
   8c7ec:	10000326 	beq	r2,zero,8c7fc <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
   8c7f0:	e13ffc17 	ldw	r4,-16(fp)
   8c7f4:	e17ffe17 	ldw	r5,-8(fp)
   8c7f8:	008c8280 	call	8c828 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
   8c7fc:	e0bffe17 	ldw	r2,-8(fp)
   8c800:	1081100c 	andi	r2,r2,1088
   8c804:	10000326 	beq	r2,zero,8c814 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
   8c808:	e13ffc17 	ldw	r4,-16(fp)
   8c80c:	e17ffe17 	ldw	r5,-8(fp)
   8c810:	008c9000 	call	8c900 <altera_avalon_uart_txirq>
  }
  

}
   8c814:	e037883a 	mov	sp,fp
   8c818:	dfc00117 	ldw	ra,4(sp)
   8c81c:	df000017 	ldw	fp,0(sp)
   8c820:	dec00204 	addi	sp,sp,8
   8c824:	f800283a 	ret

0008c828 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   8c828:	defffc04 	addi	sp,sp,-16
   8c82c:	df000315 	stw	fp,12(sp)
   8c830:	df000304 	addi	fp,sp,12
   8c834:	e13ffe15 	stw	r4,-8(fp)
   8c838:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   8c83c:	e0bfff17 	ldw	r2,-4(fp)
   8c840:	108000cc 	andi	r2,r2,3
   8c844:	1000291e 	bne	r2,zero,8c8ec <altera_avalon_uart_rxirq+0xc4>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
   8c848:	e0bffe17 	ldw	r2,-8(fp)
   8c84c:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   8c850:	e0bffe17 	ldw	r2,-8(fp)
   8c854:	10800317 	ldw	r2,12(r2)
   8c858:	10800044 	addi	r2,r2,1
   8c85c:	10800fcc 	andi	r2,r2,63
   8c860:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   8c864:	e0bffe17 	ldw	r2,-8(fp)
   8c868:	10800317 	ldw	r2,12(r2)
   8c86c:	e0fffe17 	ldw	r3,-8(fp)
   8c870:	18c00017 	ldw	r3,0(r3)
   8c874:	18c00037 	ldwio	r3,0(r3)
   8c878:	e13ffe17 	ldw	r4,-8(fp)
   8c87c:	2085883a 	add	r2,r4,r2
   8c880:	10800704 	addi	r2,r2,28
   8c884:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
   8c888:	e0bffe17 	ldw	r2,-8(fp)
   8c88c:	e0fffd17 	ldw	r3,-12(fp)
   8c890:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   8c894:	e0bffe17 	ldw	r2,-8(fp)
   8c898:	10800317 	ldw	r2,12(r2)
   8c89c:	10800044 	addi	r2,r2,1
   8c8a0:	10800fcc 	andi	r2,r2,63
   8c8a4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
   8c8a8:	e0bffe17 	ldw	r2,-8(fp)
   8c8ac:	10c00217 	ldw	r3,8(r2)
   8c8b0:	e0bffd17 	ldw	r2,-12(fp)
   8c8b4:	18800e1e 	bne	r3,r2,8c8f0 <altera_avalon_uart_rxirq+0xc8>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   8c8b8:	e0bffe17 	ldw	r2,-8(fp)
   8c8bc:	10c00117 	ldw	r3,4(r2)
   8c8c0:	00bfdfc4 	movi	r2,-129
   8c8c4:	1886703a 	and	r3,r3,r2
   8c8c8:	e0bffe17 	ldw	r2,-8(fp)
   8c8cc:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
   8c8d0:	e0bffe17 	ldw	r2,-8(fp)
   8c8d4:	10800017 	ldw	r2,0(r2)
   8c8d8:	10800304 	addi	r2,r2,12
   8c8dc:	e0fffe17 	ldw	r3,-8(fp)
   8c8e0:	18c00117 	ldw	r3,4(r3)
   8c8e4:	10c00035 	stwio	r3,0(r2)
   8c8e8:	00000106 	br	8c8f0 <altera_avalon_uart_rxirq+0xc8>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
   8c8ec:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
   8c8f0:	e037883a 	mov	sp,fp
   8c8f4:	df000017 	ldw	fp,0(sp)
   8c8f8:	dec00104 	addi	sp,sp,4
   8c8fc:	f800283a 	ret

0008c900 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   8c900:	defffd04 	addi	sp,sp,-12
   8c904:	df000215 	stw	fp,8(sp)
   8c908:	df000204 	addi	fp,sp,8
   8c90c:	e13ffe15 	stw	r4,-8(fp)
   8c910:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
   8c914:	e0bffe17 	ldw	r2,-8(fp)
   8c918:	10c00417 	ldw	r3,16(r2)
   8c91c:	e0bffe17 	ldw	r2,-8(fp)
   8c920:	10800517 	ldw	r2,20(r2)
   8c924:	18803026 	beq	r3,r2,8c9e8 <altera_avalon_uart_txirq+0xe8>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   8c928:	e0bffe17 	ldw	r2,-8(fp)
   8c92c:	10800617 	ldw	r2,24(r2)
   8c930:	1080008c 	andi	r2,r2,2
   8c934:	10000326 	beq	r2,zero,8c944 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   8c938:	e0bfff17 	ldw	r2,-4(fp)
   8c93c:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   8c940:	10001b26 	beq	r2,zero,8c9b0 <altera_avalon_uart_txirq+0xb0>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
   8c944:	e0bffe17 	ldw	r2,-8(fp)
   8c948:	10800417 	ldw	r2,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
   8c94c:	e0bffe17 	ldw	r2,-8(fp)
   8c950:	10800017 	ldw	r2,0(r2)
   8c954:	10800104 	addi	r2,r2,4
   8c958:	e0fffe17 	ldw	r3,-8(fp)
   8c95c:	18c00417 	ldw	r3,16(r3)
   8c960:	e13ffe17 	ldw	r4,-8(fp)
   8c964:	20c7883a 	add	r3,r4,r3
   8c968:	18c01704 	addi	r3,r3,92
   8c96c:	18c00003 	ldbu	r3,0(r3)
   8c970:	18c03fcc 	andi	r3,r3,255
   8c974:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
   8c978:	e0bffe17 	ldw	r2,-8(fp)
   8c97c:	10800417 	ldw	r2,16(r2)
   8c980:	10800044 	addi	r2,r2,1
   8c984:	e0fffe17 	ldw	r3,-8(fp)
   8c988:	18800415 	stw	r2,16(r3)
   8c98c:	10c00fcc 	andi	r3,r2,63
   8c990:	e0bffe17 	ldw	r2,-8(fp)
   8c994:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   8c998:	e0bffe17 	ldw	r2,-8(fp)
   8c99c:	10800117 	ldw	r2,4(r2)
   8c9a0:	10c01014 	ori	r3,r2,64
   8c9a4:	e0bffe17 	ldw	r2,-8(fp)
   8c9a8:	10c00115 	stw	r3,4(r2)
   8c9ac:	00000e06 	br	8c9e8 <altera_avalon_uart_txirq+0xe8>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
   8c9b0:	e0bffe17 	ldw	r2,-8(fp)
   8c9b4:	10800017 	ldw	r2,0(r2)
   8c9b8:	10800204 	addi	r2,r2,8
   8c9bc:	10800037 	ldwio	r2,0(r2)
   8c9c0:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   8c9c4:	e0bfff17 	ldw	r2,-4(fp)
   8c9c8:	1082000c 	andi	r2,r2,2048
   8c9cc:	1000061e 	bne	r2,zero,8c9e8 <altera_avalon_uart_txirq+0xe8>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   8c9d0:	e0bffe17 	ldw	r2,-8(fp)
   8c9d4:	10c00117 	ldw	r3,4(r2)
   8c9d8:	00bfefc4 	movi	r2,-65
   8c9dc:	1886703a 	and	r3,r3,r2
   8c9e0:	e0bffe17 	ldw	r2,-8(fp)
   8c9e4:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
   8c9e8:	e0bffe17 	ldw	r2,-8(fp)
   8c9ec:	10c00417 	ldw	r3,16(r2)
   8c9f0:	e0bffe17 	ldw	r2,-8(fp)
   8c9f4:	10800517 	ldw	r2,20(r2)
   8c9f8:	1880061e 	bne	r3,r2,8ca14 <altera_avalon_uart_txirq+0x114>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   8c9fc:	e0bffe17 	ldw	r2,-8(fp)
   8ca00:	10c00117 	ldw	r3,4(r2)
   8ca04:	00beefc4 	movi	r2,-1089
   8ca08:	1886703a 	and	r3,r3,r2
   8ca0c:	e0bffe17 	ldw	r2,-8(fp)
   8ca10:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   8ca14:	e0bffe17 	ldw	r2,-8(fp)
   8ca18:	10800017 	ldw	r2,0(r2)
   8ca1c:	10800304 	addi	r2,r2,12
   8ca20:	e0fffe17 	ldw	r3,-8(fp)
   8ca24:	18c00117 	ldw	r3,4(r3)
   8ca28:	10c00035 	stwio	r3,0(r2)
}
   8ca2c:	e037883a 	mov	sp,fp
   8ca30:	df000017 	ldw	fp,0(sp)
   8ca34:	dec00104 	addi	sp,sp,4
   8ca38:	f800283a 	ret

0008ca3c <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
   8ca3c:	defffd04 	addi	sp,sp,-12
   8ca40:	df000215 	stw	fp,8(sp)
   8ca44:	df000204 	addi	fp,sp,8
   8ca48:	e13ffe15 	stw	r4,-8(fp)
   8ca4c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   8ca50:	00000506 	br	8ca68 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   8ca54:	e0bfff17 	ldw	r2,-4(fp)
   8ca58:	1090000c 	andi	r2,r2,16384
   8ca5c:	10000226 	beq	r2,zero,8ca68 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
   8ca60:	00bffd44 	movi	r2,-11
   8ca64:	00000606 	br	8ca80 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   8ca68:	e0bffe17 	ldw	r2,-8(fp)
   8ca6c:	10c00417 	ldw	r3,16(r2)
   8ca70:	e0bffe17 	ldw	r2,-8(fp)
   8ca74:	10800517 	ldw	r2,20(r2)
   8ca78:	18bff61e 	bne	r3,r2,8ca54 <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   8ca7c:	0005883a 	mov	r2,zero
}
   8ca80:	e037883a 	mov	sp,fp
   8ca84:	df000017 	ldw	fp,0(sp)
   8ca88:	dec00104 	addi	sp,sp,4
   8ca8c:	f800283a 	ret

0008ca90 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8ca90:	defffe04 	addi	sp,sp,-8
   8ca94:	dfc00115 	stw	ra,4(sp)
   8ca98:	df000015 	stw	fp,0(sp)
   8ca9c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8caa0:	00800274 	movhi	r2,9
   8caa4:	10bff804 	addi	r2,r2,-32
   8caa8:	10800017 	ldw	r2,0(r2)
   8caac:	10000526 	beq	r2,zero,8cac4 <alt_get_errno+0x34>
   8cab0:	00800274 	movhi	r2,9
   8cab4:	10bff804 	addi	r2,r2,-32
   8cab8:	10800017 	ldw	r2,0(r2)
   8cabc:	103ee83a 	callr	r2
   8cac0:	00000206 	br	8cacc <alt_get_errno+0x3c>
   8cac4:	00800274 	movhi	r2,9
   8cac8:	1086d504 	addi	r2,r2,6996
}
   8cacc:	e037883a 	mov	sp,fp
   8cad0:	dfc00117 	ldw	ra,4(sp)
   8cad4:	df000017 	ldw	fp,0(sp)
   8cad8:	dec00204 	addi	sp,sp,8
   8cadc:	f800283a 	ret

0008cae0 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   8cae0:	defff104 	addi	sp,sp,-60
   8cae4:	dfc00e15 	stw	ra,56(sp)
   8cae8:	df000d15 	stw	fp,52(sp)
   8caec:	df000d04 	addi	fp,sp,52
   8caf0:	e13ffc15 	stw	r4,-16(fp)
   8caf4:	e17ffd15 	stw	r5,-12(fp)
   8caf8:	e1bffe15 	stw	r6,-8(fp)
   8cafc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
   8cb00:	e03ff305 	stb	zero,-52(fp)
  int             count = 0;
   8cb04:	e03ff415 	stw	zero,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
   8cb08:	e0bfff17 	ldw	r2,-4(fp)
   8cb0c:	1090000c 	andi	r2,r2,16384
   8cb10:	1005003a 	cmpeq	r2,r2,zero
   8cb14:	10803fcc 	andi	r2,r2,255
   8cb18:	e0bff515 	stw	r2,-44(fp)
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
   8cb1c:	e0bffc17 	ldw	r2,-16(fp)
   8cb20:	10800217 	ldw	r2,8(r2)
   8cb24:	10800044 	addi	r2,r2,1
   8cb28:	10800fcc 	andi	r2,r2,63
   8cb2c:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   8cb30:	00001906 	br	8cb98 <altera_avalon_uart_read+0xb8>
    {
      count++;
   8cb34:	e0bff417 	ldw	r2,-48(fp)
   8cb38:	10800044 	addi	r2,r2,1
   8cb3c:	e0bff415 	stw	r2,-48(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
   8cb40:	e0bffc17 	ldw	r2,-16(fp)
   8cb44:	10800217 	ldw	r2,8(r2)
   8cb48:	e0fffc17 	ldw	r3,-16(fp)
   8cb4c:	1885883a 	add	r2,r3,r2
   8cb50:	10800704 	addi	r2,r2,28
   8cb54:	10800003 	ldbu	r2,0(r2)
   8cb58:	1007883a 	mov	r3,r2
   8cb5c:	e0bffd17 	ldw	r2,-12(fp)
   8cb60:	10c00005 	stb	r3,0(r2)
   8cb64:	e0bffd17 	ldw	r2,-12(fp)
   8cb68:	10800044 	addi	r2,r2,1
   8cb6c:	e0bffd15 	stw	r2,-12(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
   8cb70:	e0bffc17 	ldw	r2,-16(fp)
   8cb74:	10800217 	ldw	r2,8(r2)
   8cb78:	10c00044 	addi	r3,r2,1
   8cb7c:	e0bffc17 	ldw	r2,-16(fp)
   8cb80:	10c00215 	stw	r3,8(r2)
   8cb84:	e0bffc17 	ldw	r2,-16(fp)
   8cb88:	10800217 	ldw	r2,8(r2)
   8cb8c:	10c00fcc 	andi	r3,r2,63
   8cb90:	e0bffc17 	ldw	r2,-16(fp)
   8cb94:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   8cb98:	e0fff417 	ldw	r3,-48(fp)
   8cb9c:	e0bffe17 	ldw	r2,-8(fp)
   8cba0:	1880050e 	bge	r3,r2,8cbb8 <altera_avalon_uart_read+0xd8>
   8cba4:	e0bffc17 	ldw	r2,-16(fp)
   8cba8:	10c00217 	ldw	r3,8(r2)
   8cbac:	e0bffc17 	ldw	r2,-16(fp)
   8cbb0:	10800317 	ldw	r2,12(r2)
   8cbb4:	18bfdf1e 	bne	r3,r2,8cb34 <altera_avalon_uart_read+0x54>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
   8cbb8:	e0bff417 	ldw	r2,-48(fp)
   8cbbc:	1000241e 	bne	r2,zero,8cc50 <altera_avalon_uart_read+0x170>
   8cbc0:	e0bffc17 	ldw	r2,-16(fp)
   8cbc4:	10c00217 	ldw	r3,8(r2)
   8cbc8:	e0bffc17 	ldw	r2,-16(fp)
   8cbcc:	10800317 	ldw	r2,12(r2)
   8cbd0:	18801f1e 	bne	r3,r2,8cc50 <altera_avalon_uart_read+0x170>
    {
      if (!block)
   8cbd4:	e0bff517 	ldw	r2,-44(fp)
   8cbd8:	1000061e 	bne	r2,zero,8cbf4 <altera_avalon_uart_read+0x114>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
   8cbdc:	008ca900 	call	8ca90 <alt_get_errno>
   8cbe0:	00c002c4 	movi	r3,11
   8cbe4:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
   8cbe8:	00800044 	movi	r2,1
   8cbec:	e0bff305 	stb	r2,-52(fp)
        break;
   8cbf0:	00001b06 	br	8cc60 <altera_avalon_uart_read+0x180>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8cbf4:	0005303a 	rdctl	r2,status
   8cbf8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8cbfc:	e0fff817 	ldw	r3,-32(fp)
   8cc00:	00bfff84 	movi	r2,-2
   8cc04:	1884703a 	and	r2,r3,r2
   8cc08:	1001703a 	wrctl	status,r2
  
  return context;
   8cc0c:	e0bff817 	ldw	r2,-32(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
   8cc10:	e0bff715 	stw	r2,-36(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   8cc14:	e0bffc17 	ldw	r2,-16(fp)
   8cc18:	10800117 	ldw	r2,4(r2)
   8cc1c:	10c02014 	ori	r3,r2,128
   8cc20:	e0bffc17 	ldw	r2,-16(fp)
   8cc24:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   8cc28:	e0bffc17 	ldw	r2,-16(fp)
   8cc2c:	10800017 	ldw	r2,0(r2)
   8cc30:	10800304 	addi	r2,r2,12
   8cc34:	e0fffc17 	ldw	r3,-16(fp)
   8cc38:	18c00117 	ldw	r3,4(r3)
   8cc3c:	10c00035 	stwio	r3,0(r2)
   8cc40:	e0bff717 	ldw	r2,-36(fp)
   8cc44:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8cc48:	e0bff917 	ldw	r2,-28(fp)
   8cc4c:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
   8cc50:	e0bff417 	ldw	r2,-48(fp)
   8cc54:	1000021e 	bne	r2,zero,8cc60 <altera_avalon_uart_read+0x180>
   8cc58:	e0bffe17 	ldw	r2,-8(fp)
   8cc5c:	103fce1e 	bne	r2,zero,8cb98 <altera_avalon_uart_read+0xb8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8cc60:	0005303a 	rdctl	r2,status
   8cc64:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8cc68:	e0fffa17 	ldw	r3,-24(fp)
   8cc6c:	00bfff84 	movi	r2,-2
   8cc70:	1884703a 	and	r2,r3,r2
   8cc74:	1001703a 	wrctl	status,r2
  
  return context;
   8cc78:	e0bffa17 	ldw	r2,-24(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
   8cc7c:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   8cc80:	e0bffc17 	ldw	r2,-16(fp)
   8cc84:	10800117 	ldw	r2,4(r2)
   8cc88:	10c02014 	ori	r3,r2,128
   8cc8c:	e0bffc17 	ldw	r2,-16(fp)
   8cc90:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   8cc94:	e0bffc17 	ldw	r2,-16(fp)
   8cc98:	10800017 	ldw	r2,0(r2)
   8cc9c:	10800304 	addi	r2,r2,12
   8cca0:	e0fffc17 	ldw	r3,-16(fp)
   8cca4:	18c00117 	ldw	r3,4(r3)
   8cca8:	10c00035 	stwio	r3,0(r2)
   8ccac:	e0bff717 	ldw	r2,-36(fp)
   8ccb0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8ccb4:	e0bffb17 	ldw	r2,-20(fp)
   8ccb8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
   8ccbc:	e0bff303 	ldbu	r2,-52(fp)
   8ccc0:	10000226 	beq	r2,zero,8cccc <altera_avalon_uart_read+0x1ec>
    return -EWOULDBLOCK;
   8ccc4:	00bffd44 	movi	r2,-11
   8ccc8:	00000106 	br	8ccd0 <altera_avalon_uart_read+0x1f0>
  }
  else {
    return count;
   8cccc:	e0bff417 	ldw	r2,-48(fp)
  }
}
   8ccd0:	e037883a 	mov	sp,fp
   8ccd4:	dfc00117 	ldw	ra,4(sp)
   8ccd8:	df000017 	ldw	fp,0(sp)
   8ccdc:	dec00204 	addi	sp,sp,8
   8cce0:	f800283a 	ret

0008cce4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8cce4:	defffe04 	addi	sp,sp,-8
   8cce8:	dfc00115 	stw	ra,4(sp)
   8ccec:	df000015 	stw	fp,0(sp)
   8ccf0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8ccf4:	00800274 	movhi	r2,9
   8ccf8:	10bff804 	addi	r2,r2,-32
   8ccfc:	10800017 	ldw	r2,0(r2)
   8cd00:	10000526 	beq	r2,zero,8cd18 <alt_get_errno+0x34>
   8cd04:	00800274 	movhi	r2,9
   8cd08:	10bff804 	addi	r2,r2,-32
   8cd0c:	10800017 	ldw	r2,0(r2)
   8cd10:	103ee83a 	callr	r2
   8cd14:	00000206 	br	8cd20 <alt_get_errno+0x3c>
   8cd18:	00800274 	movhi	r2,9
   8cd1c:	1086d504 	addi	r2,r2,6996
}
   8cd20:	e037883a 	mov	sp,fp
   8cd24:	dfc00117 	ldw	ra,4(sp)
   8cd28:	df000017 	ldw	fp,0(sp)
   8cd2c:	dec00204 	addi	sp,sp,8
   8cd30:	f800283a 	ret

0008cd34 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   8cd34:	defff204 	addi	sp,sp,-56
   8cd38:	dfc00d15 	stw	ra,52(sp)
   8cd3c:	df000c15 	stw	fp,48(sp)
   8cd40:	df000c04 	addi	fp,sp,48
   8cd44:	e13ffc15 	stw	r4,-16(fp)
   8cd48:	e17ffd15 	stw	r5,-12(fp)
   8cd4c:	e1bffe15 	stw	r6,-8(fp)
   8cd50:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
   8cd54:	e0bffe17 	ldw	r2,-8(fp)
   8cd58:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
   8cd5c:	e0bfff17 	ldw	r2,-4(fp)
   8cd60:	1090000c 	andi	r2,r2,16384
   8cd64:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   8cd68:	00003b06 	br	8ce58 <altera_avalon_uart_write+0x124>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   8cd6c:	e0bffc17 	ldw	r2,-16(fp)
   8cd70:	10800517 	ldw	r2,20(r2)
   8cd74:	10800044 	addi	r2,r2,1
   8cd78:	10800fcc 	andi	r2,r2,63
   8cd7c:	e0bff615 	stw	r2,-40(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
   8cd80:	e0bffc17 	ldw	r2,-16(fp)
   8cd84:	10c00417 	ldw	r3,16(r2)
   8cd88:	e0bff617 	ldw	r2,-40(fp)
   8cd8c:	1880211e 	bne	r3,r2,8ce14 <altera_avalon_uart_write+0xe0>
    {
      if (no_block)
   8cd90:	e0bff517 	ldw	r2,-44(fp)
   8cd94:	10000426 	beq	r2,zero,8cda8 <altera_avalon_uart_write+0x74>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
   8cd98:	008cce40 	call	8cce4 <alt_get_errno>
   8cd9c:	00c002c4 	movi	r3,11
   8cda0:	10c00015 	stw	r3,0(r2)
        break;
   8cda4:	00002e06 	br	8ce60 <altera_avalon_uart_write+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8cda8:	0005303a 	rdctl	r2,status
   8cdac:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8cdb0:	e0fff817 	ldw	r3,-32(fp)
   8cdb4:	00bfff84 	movi	r2,-2
   8cdb8:	1884703a 	and	r2,r3,r2
   8cdbc:	1001703a 	wrctl	status,r2
  
  return context;
   8cdc0:	e0bff817 	ldw	r2,-32(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
   8cdc4:	e0bff715 	stw	r2,-36(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   8cdc8:	e0bffc17 	ldw	r2,-16(fp)
   8cdcc:	10800117 	ldw	r2,4(r2)
   8cdd0:	10c11014 	ori	r3,r2,1088
   8cdd4:	e0bffc17 	ldw	r2,-16(fp)
   8cdd8:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   8cddc:	e0bffc17 	ldw	r2,-16(fp)
   8cde0:	10800017 	ldw	r2,0(r2)
   8cde4:	10800304 	addi	r2,r2,12
   8cde8:	e0fffc17 	ldw	r3,-16(fp)
   8cdec:	18c00117 	ldw	r3,4(r3)
   8cdf0:	10c00035 	stwio	r3,0(r2)
   8cdf4:	e0bff717 	ldw	r2,-36(fp)
   8cdf8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8cdfc:	e0bff917 	ldw	r2,-28(fp)
   8ce00:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
   8ce04:	e0bffc17 	ldw	r2,-16(fp)
   8ce08:	10c00417 	ldw	r3,16(r2)
   8ce0c:	e0bff617 	ldw	r2,-40(fp)
   8ce10:	18bffc26 	beq	r3,r2,8ce04 <altera_avalon_uart_write+0xd0>
      }
    }

    count--;
   8ce14:	e0bff417 	ldw	r2,-48(fp)
   8ce18:	10bfffc4 	addi	r2,r2,-1
   8ce1c:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
   8ce20:	e0bffc17 	ldw	r2,-16(fp)
   8ce24:	10800517 	ldw	r2,20(r2)
   8ce28:	e0fffd17 	ldw	r3,-12(fp)
   8ce2c:	18c00003 	ldbu	r3,0(r3)
   8ce30:	e13ffc17 	ldw	r4,-16(fp)
   8ce34:	2085883a 	add	r2,r4,r2
   8ce38:	10801704 	addi	r2,r2,92
   8ce3c:	10c00005 	stb	r3,0(r2)
   8ce40:	e0bffd17 	ldw	r2,-12(fp)
   8ce44:	10800044 	addi	r2,r2,1
   8ce48:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
   8ce4c:	e0bffc17 	ldw	r2,-16(fp)
   8ce50:	e0fff617 	ldw	r3,-40(fp)
   8ce54:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   8ce58:	e0bff417 	ldw	r2,-48(fp)
   8ce5c:	103fc31e 	bne	r2,zero,8cd6c <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8ce60:	0005303a 	rdctl	r2,status
   8ce64:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8ce68:	e0fffa17 	ldw	r3,-24(fp)
   8ce6c:	00bfff84 	movi	r2,-2
   8ce70:	1884703a 	and	r2,r3,r2
   8ce74:	1001703a 	wrctl	status,r2
  
  return context;
   8ce78:	e0bffa17 	ldw	r2,-24(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
   8ce7c:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   8ce80:	e0bffc17 	ldw	r2,-16(fp)
   8ce84:	10800117 	ldw	r2,4(r2)
   8ce88:	10c11014 	ori	r3,r2,1088
   8ce8c:	e0bffc17 	ldw	r2,-16(fp)
   8ce90:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   8ce94:	e0bffc17 	ldw	r2,-16(fp)
   8ce98:	10800017 	ldw	r2,0(r2)
   8ce9c:	10800304 	addi	r2,r2,12
   8cea0:	e0fffc17 	ldw	r3,-16(fp)
   8cea4:	18c00117 	ldw	r3,4(r3)
   8cea8:	10c00035 	stwio	r3,0(r2)
   8ceac:	e0bff717 	ldw	r2,-36(fp)
   8ceb0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8ceb4:	e0bffb17 	ldw	r2,-20(fp)
   8ceb8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
   8cebc:	e0fffe17 	ldw	r3,-8(fp)
   8cec0:	e0bff417 	ldw	r2,-48(fp)
   8cec4:	1885c83a 	sub	r2,r3,r2
}
   8cec8:	e037883a 	mov	sp,fp
   8cecc:	dfc00117 	ldw	ra,4(sp)
   8ced0:	df000017 	ldw	fp,0(sp)
   8ced4:	dec00204 	addi	sp,sp,8
   8ced8:	f800283a 	ret

0008cedc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   8cedc:	defff504 	addi	sp,sp,-44
   8cee0:	df000a15 	stw	fp,40(sp)
   8cee4:	df000a04 	addi	fp,sp,40
   8cee8:	e13ffc15 	stw	r4,-16(fp)
   8ceec:	e17ffd15 	stw	r5,-12(fp)
   8cef0:	e1bffe15 	stw	r6,-8(fp)
   8cef4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   8cef8:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   8cefc:	00800274 	movhi	r2,9
   8cf00:	1086d904 	addi	r2,r2,7012
   8cf04:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   8cf08:	10003f26 	beq	r2,zero,8d008 <alt_alarm_start+0x12c>
  {
    if (alarm)
   8cf0c:	e0bffc17 	ldw	r2,-16(fp)
   8cf10:	10003b26 	beq	r2,zero,8d000 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   8cf14:	e0bffc17 	ldw	r2,-16(fp)
   8cf18:	e0fffe17 	ldw	r3,-8(fp)
   8cf1c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   8cf20:	e0bffc17 	ldw	r2,-16(fp)
   8cf24:	e0ffff17 	ldw	r3,-4(fp)
   8cf28:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8cf2c:	0005303a 	rdctl	r2,status
   8cf30:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8cf34:	e0fff817 	ldw	r3,-32(fp)
   8cf38:	00bfff84 	movi	r2,-2
   8cf3c:	1884703a 	and	r2,r3,r2
   8cf40:	1001703a 	wrctl	status,r2
  
  return context;
   8cf44:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   8cf48:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   8cf4c:	00800274 	movhi	r2,9
   8cf50:	1086da04 	addi	r2,r2,7016
   8cf54:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   8cf58:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   8cf5c:	e0fffd17 	ldw	r3,-12(fp)
   8cf60:	e0bff617 	ldw	r2,-40(fp)
   8cf64:	1885883a 	add	r2,r3,r2
   8cf68:	10c00044 	addi	r3,r2,1
   8cf6c:	e0bffc17 	ldw	r2,-16(fp)
   8cf70:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   8cf74:	e0bffc17 	ldw	r2,-16(fp)
   8cf78:	10c00217 	ldw	r3,8(r2)
   8cf7c:	e0bff617 	ldw	r2,-40(fp)
   8cf80:	1880042e 	bgeu	r3,r2,8cf94 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   8cf84:	e0bffc17 	ldw	r2,-16(fp)
   8cf88:	00c00044 	movi	r3,1
   8cf8c:	10c00405 	stb	r3,16(r2)
   8cf90:	00000206 	br	8cf9c <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   8cf94:	e0bffc17 	ldw	r2,-16(fp)
   8cf98:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   8cf9c:	e0bffc17 	ldw	r2,-16(fp)
   8cfa0:	00c00274 	movhi	r3,9
   8cfa4:	18fffa04 	addi	r3,r3,-24
   8cfa8:	e0fff915 	stw	r3,-28(fp)
   8cfac:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   8cfb0:	e0bffa17 	ldw	r2,-24(fp)
   8cfb4:	e0fff917 	ldw	r3,-28(fp)
   8cfb8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   8cfbc:	e0bff917 	ldw	r2,-28(fp)
   8cfc0:	10c00017 	ldw	r3,0(r2)
   8cfc4:	e0bffa17 	ldw	r2,-24(fp)
   8cfc8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   8cfcc:	e0bff917 	ldw	r2,-28(fp)
   8cfd0:	10800017 	ldw	r2,0(r2)
   8cfd4:	e0fffa17 	ldw	r3,-24(fp)
   8cfd8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   8cfdc:	e0bff917 	ldw	r2,-28(fp)
   8cfe0:	e0fffa17 	ldw	r3,-24(fp)
   8cfe4:	10c00015 	stw	r3,0(r2)
   8cfe8:	e0bff717 	ldw	r2,-36(fp)
   8cfec:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8cff0:	e0bffb17 	ldw	r2,-20(fp)
   8cff4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   8cff8:	0005883a 	mov	r2,zero
   8cffc:	00000306 	br	8d00c <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   8d000:	00bffa84 	movi	r2,-22
   8d004:	00000106 	br	8d00c <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   8d008:	00bfde84 	movi	r2,-134
  }
}
   8d00c:	e037883a 	mov	sp,fp
   8d010:	df000017 	ldw	fp,0(sp)
   8d014:	dec00104 	addi	sp,sp,4
   8d018:	f800283a 	ret

0008d01c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   8d01c:	defffa04 	addi	sp,sp,-24
   8d020:	dfc00515 	stw	ra,20(sp)
   8d024:	df000415 	stw	fp,16(sp)
   8d028:	df000404 	addi	fp,sp,16
   8d02c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   8d030:	008000c4 	movi	r2,3
   8d034:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   8d038:	e0fffd17 	ldw	r3,-12(fp)
   8d03c:	008003f4 	movhi	r2,15
   8d040:	10909004 	addi	r2,r2,16960
   8d044:	1885383a 	mul	r2,r3,r2
   8d048:	0101f034 	movhi	r4,1984
   8d04c:	21292004 	addi	r4,r4,-23424
   8d050:	100b883a 	mov	r5,r2
   8d054:	00818880 	call	81888 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   8d058:	01200034 	movhi	r4,32768
   8d05c:	213fffc4 	addi	r4,r4,-1
   8d060:	100b883a 	mov	r5,r2
   8d064:	00818880 	call	81888 <__udivsi3>
   8d068:	e13fff17 	ldw	r4,-4(fp)
   8d06c:	100b883a 	mov	r5,r2
   8d070:	00818880 	call	81888 <__udivsi3>
   8d074:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   8d078:	e0bffe17 	ldw	r2,-8(fp)
   8d07c:	10002926 	beq	r2,zero,8d124 <alt_busy_sleep+0x108>
  {
    for(i=0;i<big_loops;i++)
   8d080:	e03ffc15 	stw	zero,-16(fp)
   8d084:	00001606 	br	8d0e0 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   8d088:	00a00034 	movhi	r2,32768
   8d08c:	10bfffc4 	addi	r2,r2,-1
   8d090:	10bfffc4 	addi	r2,r2,-1
   8d094:	103ffe1e 	bne	r2,zero,8d090 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   8d098:	e0fffd17 	ldw	r3,-12(fp)
   8d09c:	008003f4 	movhi	r2,15
   8d0a0:	10909004 	addi	r2,r2,16960
   8d0a4:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   8d0a8:	0101f034 	movhi	r4,1984
   8d0ac:	21292004 	addi	r4,r4,-23424
   8d0b0:	100b883a 	mov	r5,r2
   8d0b4:	00818880 	call	81888 <__udivsi3>
   8d0b8:	01200034 	movhi	r4,32768
   8d0bc:	213fffc4 	addi	r4,r4,-1
   8d0c0:	100b883a 	mov	r5,r2
   8d0c4:	00818880 	call	81888 <__udivsi3>
   8d0c8:	e0ffff17 	ldw	r3,-4(fp)
   8d0cc:	1885c83a 	sub	r2,r3,r2
   8d0d0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   8d0d4:	e0bffc17 	ldw	r2,-16(fp)
   8d0d8:	10800044 	addi	r2,r2,1
   8d0dc:	e0bffc15 	stw	r2,-16(fp)
   8d0e0:	e0fffc17 	ldw	r3,-16(fp)
   8d0e4:	e0bffe17 	ldw	r2,-8(fp)
   8d0e8:	18bfe716 	blt	r3,r2,8d088 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   8d0ec:	e0fffd17 	ldw	r3,-12(fp)
   8d0f0:	008003f4 	movhi	r2,15
   8d0f4:	10909004 	addi	r2,r2,16960
   8d0f8:	1885383a 	mul	r2,r3,r2
   8d0fc:	0101f034 	movhi	r4,1984
   8d100:	21292004 	addi	r4,r4,-23424
   8d104:	100b883a 	mov	r5,r2
   8d108:	00818880 	call	81888 <__udivsi3>
   8d10c:	1007883a 	mov	r3,r2
   8d110:	e0bfff17 	ldw	r2,-4(fp)
   8d114:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   8d118:	10bfffc4 	addi	r2,r2,-1
   8d11c:	103ffe1e 	bne	r2,zero,8d118 <alt_busy_sleep+0xfc>
   8d120:	00000d06 	br	8d158 <alt_busy_sleep+0x13c>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   8d124:	e0fffd17 	ldw	r3,-12(fp)
   8d128:	008003f4 	movhi	r2,15
   8d12c:	10909004 	addi	r2,r2,16960
   8d130:	1885383a 	mul	r2,r3,r2
   8d134:	0101f034 	movhi	r4,1984
   8d138:	21292004 	addi	r4,r4,-23424
   8d13c:	100b883a 	mov	r5,r2
   8d140:	00818880 	call	81888 <__udivsi3>
   8d144:	1007883a 	mov	r3,r2
   8d148:	e0bfff17 	ldw	r2,-4(fp)
   8d14c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   8d150:	10bfffc4 	addi	r2,r2,-1
   8d154:	00bffe16 	blt	zero,r2,8d150 <alt_busy_sleep+0x134>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   8d158:	0005883a 	mov	r2,zero
}
   8d15c:	e037883a 	mov	sp,fp
   8d160:	dfc00117 	ldw	ra,4(sp)
   8d164:	df000017 	ldw	fp,0(sp)
   8d168:	dec00204 	addi	sp,sp,8
   8d16c:	f800283a 	ret

0008d170 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8d170:	defffe04 	addi	sp,sp,-8
   8d174:	dfc00115 	stw	ra,4(sp)
   8d178:	df000015 	stw	fp,0(sp)
   8d17c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8d180:	00800274 	movhi	r2,9
   8d184:	10bff804 	addi	r2,r2,-32
   8d188:	10800017 	ldw	r2,0(r2)
   8d18c:	10000526 	beq	r2,zero,8d1a4 <alt_get_errno+0x34>
   8d190:	00800274 	movhi	r2,9
   8d194:	10bff804 	addi	r2,r2,-32
   8d198:	10800017 	ldw	r2,0(r2)
   8d19c:	103ee83a 	callr	r2
   8d1a0:	00000206 	br	8d1ac <alt_get_errno+0x3c>
   8d1a4:	00800274 	movhi	r2,9
   8d1a8:	1086d504 	addi	r2,r2,6996
}
   8d1ac:	e037883a 	mov	sp,fp
   8d1b0:	dfc00117 	ldw	ra,4(sp)
   8d1b4:	df000017 	ldw	fp,0(sp)
   8d1b8:	dec00204 	addi	sp,sp,8
   8d1bc:	f800283a 	ret

0008d1c0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   8d1c0:	defffa04 	addi	sp,sp,-24
   8d1c4:	dfc00515 	stw	ra,20(sp)
   8d1c8:	df000415 	stw	fp,16(sp)
   8d1cc:	df000404 	addi	fp,sp,16
   8d1d0:	e13ffe15 	stw	r4,-8(fp)
   8d1d4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   8d1d8:	e0bffe17 	ldw	r2,-8(fp)
   8d1dc:	10000326 	beq	r2,zero,8d1ec <alt_dev_llist_insert+0x2c>
   8d1e0:	e0bffe17 	ldw	r2,-8(fp)
   8d1e4:	10800217 	ldw	r2,8(r2)
   8d1e8:	1000051e 	bne	r2,zero,8d200 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
   8d1ec:	008d1700 	call	8d170 <alt_get_errno>
   8d1f0:	00c00584 	movi	r3,22
   8d1f4:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   8d1f8:	00bffa84 	movi	r2,-22
   8d1fc:	00001306 	br	8d24c <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   8d200:	e0bffe17 	ldw	r2,-8(fp)
   8d204:	e0ffff17 	ldw	r3,-4(fp)
   8d208:	e0fffc15 	stw	r3,-16(fp)
   8d20c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   8d210:	e0bffd17 	ldw	r2,-12(fp)
   8d214:	e0fffc17 	ldw	r3,-16(fp)
   8d218:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   8d21c:	e0bffc17 	ldw	r2,-16(fp)
   8d220:	10c00017 	ldw	r3,0(r2)
   8d224:	e0bffd17 	ldw	r2,-12(fp)
   8d228:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   8d22c:	e0bffc17 	ldw	r2,-16(fp)
   8d230:	10800017 	ldw	r2,0(r2)
   8d234:	e0fffd17 	ldw	r3,-12(fp)
   8d238:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   8d23c:	e0bffc17 	ldw	r2,-16(fp)
   8d240:	e0fffd17 	ldw	r3,-12(fp)
   8d244:	10c00015 	stw	r3,0(r2)

  return 0;  
   8d248:	0005883a 	mov	r2,zero
}
   8d24c:	e037883a 	mov	sp,fp
   8d250:	dfc00117 	ldw	ra,4(sp)
   8d254:	df000017 	ldw	fp,0(sp)
   8d258:	dec00204 	addi	sp,sp,8
   8d25c:	f800283a 	ret

0008d260 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   8d260:	defffd04 	addi	sp,sp,-12
   8d264:	dfc00215 	stw	ra,8(sp)
   8d268:	df000115 	stw	fp,4(sp)
   8d26c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   8d270:	00800274 	movhi	r2,9
   8d274:	10b82304 	addi	r2,r2,-8052
   8d278:	e0bfff15 	stw	r2,-4(fp)
   8d27c:	00000606 	br	8d298 <_do_ctors+0x38>
        (*ctor) (); 
   8d280:	e0bfff17 	ldw	r2,-4(fp)
   8d284:	10800017 	ldw	r2,0(r2)
   8d288:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   8d28c:	e0bfff17 	ldw	r2,-4(fp)
   8d290:	10bfff04 	addi	r2,r2,-4
   8d294:	e0bfff15 	stw	r2,-4(fp)
   8d298:	e0ffff17 	ldw	r3,-4(fp)
   8d29c:	00800274 	movhi	r2,9
   8d2a0:	10b82404 	addi	r2,r2,-8048
   8d2a4:	18bff62e 	bgeu	r3,r2,8d280 <_do_ctors+0x20>
        (*ctor) (); 
}
   8d2a8:	e037883a 	mov	sp,fp
   8d2ac:	dfc00117 	ldw	ra,4(sp)
   8d2b0:	df000017 	ldw	fp,0(sp)
   8d2b4:	dec00204 	addi	sp,sp,8
   8d2b8:	f800283a 	ret

0008d2bc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   8d2bc:	defffd04 	addi	sp,sp,-12
   8d2c0:	dfc00215 	stw	ra,8(sp)
   8d2c4:	df000115 	stw	fp,4(sp)
   8d2c8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   8d2cc:	00800274 	movhi	r2,9
   8d2d0:	10b82304 	addi	r2,r2,-8052
   8d2d4:	e0bfff15 	stw	r2,-4(fp)
   8d2d8:	00000606 	br	8d2f4 <_do_dtors+0x38>
        (*dtor) (); 
   8d2dc:	e0bfff17 	ldw	r2,-4(fp)
   8d2e0:	10800017 	ldw	r2,0(r2)
   8d2e4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   8d2e8:	e0bfff17 	ldw	r2,-4(fp)
   8d2ec:	10bfff04 	addi	r2,r2,-4
   8d2f0:	e0bfff15 	stw	r2,-4(fp)
   8d2f4:	e0ffff17 	ldw	r3,-4(fp)
   8d2f8:	00800274 	movhi	r2,9
   8d2fc:	10b82404 	addi	r2,r2,-8048
   8d300:	18bff62e 	bgeu	r3,r2,8d2dc <_do_dtors+0x20>
        (*dtor) (); 
}
   8d304:	e037883a 	mov	sp,fp
   8d308:	dfc00117 	ldw	ra,4(sp)
   8d30c:	df000017 	ldw	fp,0(sp)
   8d310:	dec00204 	addi	sp,sp,8
   8d314:	f800283a 	ret

0008d318 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   8d318:	defffe04 	addi	sp,sp,-8
   8d31c:	dfc00115 	stw	ra,4(sp)
   8d320:	df000015 	stw	fp,0(sp)
   8d324:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   8d328:	0009883a 	mov	r4,zero
   8d32c:	01440004 	movi	r5,4096
   8d330:	008dc300 	call	8dc30 <alt_icache_flush>
#endif
}
   8d334:	e037883a 	mov	sp,fp
   8d338:	dfc00117 	ldw	ra,4(sp)
   8d33c:	df000017 	ldw	fp,0(sp)
   8d340:	dec00204 	addi	sp,sp,8
   8d344:	f800283a 	ret

0008d348 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   8d348:	defff904 	addi	sp,sp,-28
   8d34c:	dfc00615 	stw	ra,24(sp)
   8d350:	df000515 	stw	fp,20(sp)
   8d354:	df000504 	addi	fp,sp,20
   8d358:	e13ffc15 	stw	r4,-16(fp)
   8d35c:	e17ffd15 	stw	r5,-12(fp)
   8d360:	e1bffe15 	stw	r6,-8(fp)
   8d364:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   8d368:	e0800217 	ldw	r2,8(fp)
   8d36c:	d8800015 	stw	r2,0(sp)
   8d370:	e13ffc17 	ldw	r4,-16(fp)
   8d374:	e17ffd17 	ldw	r5,-12(fp)
   8d378:	e1bffe17 	ldw	r6,-8(fp)
   8d37c:	e1ffff17 	ldw	r7,-4(fp)
   8d380:	008d5200 	call	8d520 <alt_iic_isr_register>
}  
   8d384:	e037883a 	mov	sp,fp
   8d388:	dfc00117 	ldw	ra,4(sp)
   8d38c:	df000017 	ldw	fp,0(sp)
   8d390:	dec00204 	addi	sp,sp,8
   8d394:	f800283a 	ret

0008d398 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   8d398:	defff904 	addi	sp,sp,-28
   8d39c:	df000615 	stw	fp,24(sp)
   8d3a0:	df000604 	addi	fp,sp,24
   8d3a4:	e13ffe15 	stw	r4,-8(fp)
   8d3a8:	e17fff15 	stw	r5,-4(fp)
   8d3ac:	e0bfff17 	ldw	r2,-4(fp)
   8d3b0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8d3b4:	0005303a 	rdctl	r2,status
   8d3b8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8d3bc:	e0fffb17 	ldw	r3,-20(fp)
   8d3c0:	00bfff84 	movi	r2,-2
   8d3c4:	1884703a 	and	r2,r3,r2
   8d3c8:	1001703a 	wrctl	status,r2
  
  return context;
   8d3cc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8d3d0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   8d3d4:	e0bffa17 	ldw	r2,-24(fp)
   8d3d8:	00c00044 	movi	r3,1
   8d3dc:	1884983a 	sll	r2,r3,r2
   8d3e0:	1007883a 	mov	r3,r2
   8d3e4:	00800274 	movhi	r2,9
   8d3e8:	1086dd04 	addi	r2,r2,7028
   8d3ec:	10800017 	ldw	r2,0(r2)
   8d3f0:	1886b03a 	or	r3,r3,r2
   8d3f4:	00800274 	movhi	r2,9
   8d3f8:	1086dd04 	addi	r2,r2,7028
   8d3fc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8d400:	00800274 	movhi	r2,9
   8d404:	1086dd04 	addi	r2,r2,7028
   8d408:	10800017 	ldw	r2,0(r2)
   8d40c:	100170fa 	wrctl	ienable,r2
   8d410:	e0bffc17 	ldw	r2,-16(fp)
   8d414:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8d418:	e0bffd17 	ldw	r2,-12(fp)
   8d41c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8d420:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   8d424:	e037883a 	mov	sp,fp
   8d428:	df000017 	ldw	fp,0(sp)
   8d42c:	dec00104 	addi	sp,sp,4
   8d430:	f800283a 	ret

0008d434 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   8d434:	defff904 	addi	sp,sp,-28
   8d438:	df000615 	stw	fp,24(sp)
   8d43c:	df000604 	addi	fp,sp,24
   8d440:	e13ffe15 	stw	r4,-8(fp)
   8d444:	e17fff15 	stw	r5,-4(fp)
   8d448:	e0bfff17 	ldw	r2,-4(fp)
   8d44c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8d450:	0005303a 	rdctl	r2,status
   8d454:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8d458:	e0fffb17 	ldw	r3,-20(fp)
   8d45c:	00bfff84 	movi	r2,-2
   8d460:	1884703a 	and	r2,r3,r2
   8d464:	1001703a 	wrctl	status,r2
  
  return context;
   8d468:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8d46c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   8d470:	e0bffa17 	ldw	r2,-24(fp)
   8d474:	00c00044 	movi	r3,1
   8d478:	1884983a 	sll	r2,r3,r2
   8d47c:	0084303a 	nor	r2,zero,r2
   8d480:	1007883a 	mov	r3,r2
   8d484:	00800274 	movhi	r2,9
   8d488:	1086dd04 	addi	r2,r2,7028
   8d48c:	10800017 	ldw	r2,0(r2)
   8d490:	1886703a 	and	r3,r3,r2
   8d494:	00800274 	movhi	r2,9
   8d498:	1086dd04 	addi	r2,r2,7028
   8d49c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8d4a0:	00800274 	movhi	r2,9
   8d4a4:	1086dd04 	addi	r2,r2,7028
   8d4a8:	10800017 	ldw	r2,0(r2)
   8d4ac:	100170fa 	wrctl	ienable,r2
   8d4b0:	e0bffc17 	ldw	r2,-16(fp)
   8d4b4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8d4b8:	e0bffd17 	ldw	r2,-12(fp)
   8d4bc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8d4c0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   8d4c4:	e037883a 	mov	sp,fp
   8d4c8:	df000017 	ldw	fp,0(sp)
   8d4cc:	dec00104 	addi	sp,sp,4
   8d4d0:	f800283a 	ret

0008d4d4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   8d4d4:	defffc04 	addi	sp,sp,-16
   8d4d8:	df000315 	stw	fp,12(sp)
   8d4dc:	df000304 	addi	fp,sp,12
   8d4e0:	e13ffe15 	stw	r4,-8(fp)
   8d4e4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   8d4e8:	000530fa 	rdctl	r2,ienable
   8d4ec:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   8d4f0:	e0bfff17 	ldw	r2,-4(fp)
   8d4f4:	00c00044 	movi	r3,1
   8d4f8:	1884983a 	sll	r2,r3,r2
   8d4fc:	1007883a 	mov	r3,r2
   8d500:	e0bffd17 	ldw	r2,-12(fp)
   8d504:	1884703a 	and	r2,r3,r2
   8d508:	1004c03a 	cmpne	r2,r2,zero
   8d50c:	10803fcc 	andi	r2,r2,255
}
   8d510:	e037883a 	mov	sp,fp
   8d514:	df000017 	ldw	fp,0(sp)
   8d518:	dec00104 	addi	sp,sp,4
   8d51c:	f800283a 	ret

0008d520 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   8d520:	defff504 	addi	sp,sp,-44
   8d524:	dfc00a15 	stw	ra,40(sp)
   8d528:	df000915 	stw	fp,36(sp)
   8d52c:	df000904 	addi	fp,sp,36
   8d530:	e13ffc15 	stw	r4,-16(fp)
   8d534:	e17ffd15 	stw	r5,-12(fp)
   8d538:	e1bffe15 	stw	r6,-8(fp)
   8d53c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   8d540:	00bffa84 	movi	r2,-22
   8d544:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   8d548:	e0bffd17 	ldw	r2,-12(fp)
   8d54c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   8d550:	e0bff817 	ldw	r2,-32(fp)
   8d554:	10800808 	cmpgei	r2,r2,32
   8d558:	1000271e 	bne	r2,zero,8d5f8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8d55c:	0005303a 	rdctl	r2,status
   8d560:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8d564:	e0fffa17 	ldw	r3,-24(fp)
   8d568:	00bfff84 	movi	r2,-2
   8d56c:	1884703a 	and	r2,r3,r2
   8d570:	1001703a 	wrctl	status,r2
  
  return context;
   8d574:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   8d578:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   8d57c:	00c00274 	movhi	r3,9
   8d580:	18c6e804 	addi	r3,r3,7072
   8d584:	e0bff817 	ldw	r2,-32(fp)
   8d588:	100490fa 	slli	r2,r2,3
   8d58c:	1885883a 	add	r2,r3,r2
   8d590:	e0fffe17 	ldw	r3,-8(fp)
   8d594:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   8d598:	00c00274 	movhi	r3,9
   8d59c:	18c6e804 	addi	r3,r3,7072
   8d5a0:	e0bff817 	ldw	r2,-32(fp)
   8d5a4:	100490fa 	slli	r2,r2,3
   8d5a8:	1885883a 	add	r2,r3,r2
   8d5ac:	10800104 	addi	r2,r2,4
   8d5b0:	e0ffff17 	ldw	r3,-4(fp)
   8d5b4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   8d5b8:	e0bffe17 	ldw	r2,-8(fp)
   8d5bc:	10000526 	beq	r2,zero,8d5d4 <alt_iic_isr_register+0xb4>
   8d5c0:	e0bff817 	ldw	r2,-32(fp)
   8d5c4:	e13ffc17 	ldw	r4,-16(fp)
   8d5c8:	100b883a 	mov	r5,r2
   8d5cc:	008d3980 	call	8d398 <alt_ic_irq_enable>
   8d5d0:	00000406 	br	8d5e4 <alt_iic_isr_register+0xc4>
   8d5d4:	e0bff817 	ldw	r2,-32(fp)
   8d5d8:	e13ffc17 	ldw	r4,-16(fp)
   8d5dc:	100b883a 	mov	r5,r2
   8d5e0:	008d4340 	call	8d434 <alt_ic_irq_disable>
   8d5e4:	e0bff715 	stw	r2,-36(fp)
   8d5e8:	e0bff917 	ldw	r2,-28(fp)
   8d5ec:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8d5f0:	e0bffb17 	ldw	r2,-20(fp)
   8d5f4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   8d5f8:	e0bff717 	ldw	r2,-36(fp)
}
   8d5fc:	e037883a 	mov	sp,fp
   8d600:	dfc00117 	ldw	ra,4(sp)
   8d604:	df000017 	ldw	fp,0(sp)
   8d608:	dec00204 	addi	sp,sp,8
   8d60c:	f800283a 	ret

0008d610 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   8d610:	defff904 	addi	sp,sp,-28
   8d614:	dfc00615 	stw	ra,24(sp)
   8d618:	df000515 	stw	fp,20(sp)
   8d61c:	df000504 	addi	fp,sp,20
   8d620:	e13ffc15 	stw	r4,-16(fp)
   8d624:	e17ffd15 	stw	r5,-12(fp)
   8d628:	e1bffe15 	stw	r6,-8(fp)
   8d62c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   8d630:	e13ffd17 	ldw	r4,-12(fp)
   8d634:	e17ffe17 	ldw	r5,-8(fp)
   8d638:	e1bfff17 	ldw	r6,-4(fp)
   8d63c:	008d8640 	call	8d864 <open>
   8d640:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   8d644:	e0bffb17 	ldw	r2,-20(fp)
   8d648:	10001c16 	blt	r2,zero,8d6bc <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   8d64c:	00c00274 	movhi	r3,9
   8d650:	18fb4504 	addi	r3,r3,-4844
   8d654:	e0bffb17 	ldw	r2,-20(fp)
   8d658:	10800324 	muli	r2,r2,12
   8d65c:	1885883a 	add	r2,r3,r2
   8d660:	10c00017 	ldw	r3,0(r2)
   8d664:	e0bffc17 	ldw	r2,-16(fp)
   8d668:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   8d66c:	00c00274 	movhi	r3,9
   8d670:	18fb4504 	addi	r3,r3,-4844
   8d674:	e0bffb17 	ldw	r2,-20(fp)
   8d678:	10800324 	muli	r2,r2,12
   8d67c:	1885883a 	add	r2,r3,r2
   8d680:	10800104 	addi	r2,r2,4
   8d684:	10c00017 	ldw	r3,0(r2)
   8d688:	e0bffc17 	ldw	r2,-16(fp)
   8d68c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   8d690:	00c00274 	movhi	r3,9
   8d694:	18fb4504 	addi	r3,r3,-4844
   8d698:	e0bffb17 	ldw	r2,-20(fp)
   8d69c:	10800324 	muli	r2,r2,12
   8d6a0:	1885883a 	add	r2,r3,r2
   8d6a4:	10800204 	addi	r2,r2,8
   8d6a8:	10c00017 	ldw	r3,0(r2)
   8d6ac:	e0bffc17 	ldw	r2,-16(fp)
   8d6b0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   8d6b4:	e13ffb17 	ldw	r4,-20(fp)
   8d6b8:	008b5540 	call	8b554 <alt_release_fd>
  }
} 
   8d6bc:	e037883a 	mov	sp,fp
   8d6c0:	dfc00117 	ldw	ra,4(sp)
   8d6c4:	df000017 	ldw	fp,0(sp)
   8d6c8:	dec00204 	addi	sp,sp,8
   8d6cc:	f800283a 	ret

0008d6d0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   8d6d0:	defffb04 	addi	sp,sp,-20
   8d6d4:	dfc00415 	stw	ra,16(sp)
   8d6d8:	df000315 	stw	fp,12(sp)
   8d6dc:	df000304 	addi	fp,sp,12
   8d6e0:	e13ffd15 	stw	r4,-12(fp)
   8d6e4:	e17ffe15 	stw	r5,-8(fp)
   8d6e8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   8d6ec:	01000274 	movhi	r4,9
   8d6f0:	213b4804 	addi	r4,r4,-4832
   8d6f4:	e17ffd17 	ldw	r5,-12(fp)
   8d6f8:	01800044 	movi	r6,1
   8d6fc:	01c07fc4 	movi	r7,511
   8d700:	008d6100 	call	8d610 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   8d704:	01000274 	movhi	r4,9
   8d708:	213b4504 	addi	r4,r4,-4844
   8d70c:	e17ffe17 	ldw	r5,-8(fp)
   8d710:	000d883a 	mov	r6,zero
   8d714:	01c07fc4 	movi	r7,511
   8d718:	008d6100 	call	8d610 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   8d71c:	01000274 	movhi	r4,9
   8d720:	213b4b04 	addi	r4,r4,-4820
   8d724:	e17fff17 	ldw	r5,-4(fp)
   8d728:	01800044 	movi	r6,1
   8d72c:	01c07fc4 	movi	r7,511
   8d730:	008d6100 	call	8d610 <alt_open_fd>
}  
   8d734:	e037883a 	mov	sp,fp
   8d738:	dfc00117 	ldw	ra,4(sp)
   8d73c:	df000017 	ldw	fp,0(sp)
   8d740:	dec00204 	addi	sp,sp,8
   8d744:	f800283a 	ret

0008d748 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8d748:	defffe04 	addi	sp,sp,-8
   8d74c:	dfc00115 	stw	ra,4(sp)
   8d750:	df000015 	stw	fp,0(sp)
   8d754:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8d758:	00800274 	movhi	r2,9
   8d75c:	10bff804 	addi	r2,r2,-32
   8d760:	10800017 	ldw	r2,0(r2)
   8d764:	10000526 	beq	r2,zero,8d77c <alt_get_errno+0x34>
   8d768:	00800274 	movhi	r2,9
   8d76c:	10bff804 	addi	r2,r2,-32
   8d770:	10800017 	ldw	r2,0(r2)
   8d774:	103ee83a 	callr	r2
   8d778:	00000206 	br	8d784 <alt_get_errno+0x3c>
   8d77c:	00800274 	movhi	r2,9
   8d780:	1086d504 	addi	r2,r2,6996
}
   8d784:	e037883a 	mov	sp,fp
   8d788:	dfc00117 	ldw	ra,4(sp)
   8d78c:	df000017 	ldw	fp,0(sp)
   8d790:	dec00204 	addi	sp,sp,8
   8d794:	f800283a 	ret

0008d798 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   8d798:	defffd04 	addi	sp,sp,-12
   8d79c:	df000215 	stw	fp,8(sp)
   8d7a0:	df000204 	addi	fp,sp,8
   8d7a4:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   8d7a8:	e0bfff17 	ldw	r2,-4(fp)
   8d7ac:	10800217 	ldw	r2,8(r2)
   8d7b0:	10d00034 	orhi	r3,r2,16384
   8d7b4:	e0bfff17 	ldw	r2,-4(fp)
   8d7b8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   8d7bc:	e03ffe15 	stw	zero,-8(fp)
   8d7c0:	00001d06 	br	8d838 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   8d7c4:	00c00274 	movhi	r3,9
   8d7c8:	18fb4504 	addi	r3,r3,-4844
   8d7cc:	e0bffe17 	ldw	r2,-8(fp)
   8d7d0:	10800324 	muli	r2,r2,12
   8d7d4:	1885883a 	add	r2,r3,r2
   8d7d8:	10c00017 	ldw	r3,0(r2)
   8d7dc:	e0bfff17 	ldw	r2,-4(fp)
   8d7e0:	10800017 	ldw	r2,0(r2)
   8d7e4:	1880111e 	bne	r3,r2,8d82c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   8d7e8:	00c00274 	movhi	r3,9
   8d7ec:	18fb4504 	addi	r3,r3,-4844
   8d7f0:	e0bffe17 	ldw	r2,-8(fp)
   8d7f4:	10800324 	muli	r2,r2,12
   8d7f8:	1885883a 	add	r2,r3,r2
   8d7fc:	10800204 	addi	r2,r2,8
   8d800:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   8d804:	1000090e 	bge	r2,zero,8d82c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   8d808:	e0bffe17 	ldw	r2,-8(fp)
   8d80c:	10c00324 	muli	r3,r2,12
   8d810:	00800274 	movhi	r2,9
   8d814:	10bb4504 	addi	r2,r2,-4844
   8d818:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   8d81c:	e0bfff17 	ldw	r2,-4(fp)
   8d820:	18800226 	beq	r3,r2,8d82c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   8d824:	00bffcc4 	movi	r2,-13
   8d828:	00000a06 	br	8d854 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   8d82c:	e0bffe17 	ldw	r2,-8(fp)
   8d830:	10800044 	addi	r2,r2,1
   8d834:	e0bffe15 	stw	r2,-8(fp)
   8d838:	00800274 	movhi	r2,9
   8d83c:	10bff704 	addi	r2,r2,-36
   8d840:	10800017 	ldw	r2,0(r2)
   8d844:	1007883a 	mov	r3,r2
   8d848:	e0bffe17 	ldw	r2,-8(fp)
   8d84c:	18bfdd2e 	bgeu	r3,r2,8d7c4 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   8d850:	0005883a 	mov	r2,zero
}
   8d854:	e037883a 	mov	sp,fp
   8d858:	df000017 	ldw	fp,0(sp)
   8d85c:	dec00104 	addi	sp,sp,4
   8d860:	f800283a 	ret

0008d864 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   8d864:	defff604 	addi	sp,sp,-40
   8d868:	dfc00915 	stw	ra,36(sp)
   8d86c:	df000815 	stw	fp,32(sp)
   8d870:	df000804 	addi	fp,sp,32
   8d874:	e13ffd15 	stw	r4,-12(fp)
   8d878:	e17ffe15 	stw	r5,-8(fp)
   8d87c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   8d880:	00bfffc4 	movi	r2,-1
   8d884:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   8d888:	00bffb44 	movi	r2,-19
   8d88c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   8d890:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   8d894:	e13ffd17 	ldw	r4,-12(fp)
   8d898:	01400274 	movhi	r5,9
   8d89c:	297ff504 	addi	r5,r5,-44
   8d8a0:	008d9d80 	call	8d9d8 <alt_find_dev>
   8d8a4:	e0bff815 	stw	r2,-32(fp)
   8d8a8:	e0bff817 	ldw	r2,-32(fp)
   8d8ac:	1000051e 	bne	r2,zero,8d8c4 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   8d8b0:	e13ffd17 	ldw	r4,-12(fp)
   8d8b4:	008da680 	call	8da68 <alt_find_file>
   8d8b8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   8d8bc:	00800044 	movi	r2,1
   8d8c0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   8d8c4:	e0bff817 	ldw	r2,-32(fp)
   8d8c8:	10002926 	beq	r2,zero,8d970 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
   8d8cc:	e13ff817 	ldw	r4,-32(fp)
   8d8d0:	008db7c0 	call	8db7c <alt_get_fd>
   8d8d4:	e0bff915 	stw	r2,-28(fp)
   8d8d8:	e0bff917 	ldw	r2,-28(fp)
   8d8dc:	1000030e 	bge	r2,zero,8d8ec <open+0x88>
    {
      status = index;
   8d8e0:	e0bff917 	ldw	r2,-28(fp)
   8d8e4:	e0bffa15 	stw	r2,-24(fp)
   8d8e8:	00002306 	br	8d978 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
   8d8ec:	e0bff917 	ldw	r2,-28(fp)
   8d8f0:	10c00324 	muli	r3,r2,12
   8d8f4:	00800274 	movhi	r2,9
   8d8f8:	10bb4504 	addi	r2,r2,-4844
   8d8fc:	1885883a 	add	r2,r3,r2
   8d900:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   8d904:	e0fffe17 	ldw	r3,-8(fp)
   8d908:	00900034 	movhi	r2,16384
   8d90c:	10bfffc4 	addi	r2,r2,-1
   8d910:	1886703a 	and	r3,r3,r2
   8d914:	e0bffc17 	ldw	r2,-16(fp)
   8d918:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   8d91c:	e0bffb17 	ldw	r2,-20(fp)
   8d920:	1000051e 	bne	r2,zero,8d938 <open+0xd4>
   8d924:	e13ffc17 	ldw	r4,-16(fp)
   8d928:	008d7980 	call	8d798 <alt_file_locked>
   8d92c:	e0bffa15 	stw	r2,-24(fp)
   8d930:	e0bffa17 	ldw	r2,-24(fp)
   8d934:	10001016 	blt	r2,zero,8d978 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   8d938:	e0bff817 	ldw	r2,-32(fp)
   8d93c:	10800317 	ldw	r2,12(r2)
   8d940:	10000826 	beq	r2,zero,8d964 <open+0x100>
   8d944:	e0bff817 	ldw	r2,-32(fp)
   8d948:	10800317 	ldw	r2,12(r2)
   8d94c:	e13ffc17 	ldw	r4,-16(fp)
   8d950:	e17ffd17 	ldw	r5,-12(fp)
   8d954:	e1bffe17 	ldw	r6,-8(fp)
   8d958:	e1ffff17 	ldw	r7,-4(fp)
   8d95c:	103ee83a 	callr	r2
   8d960:	00000106 	br	8d968 <open+0x104>
   8d964:	0005883a 	mov	r2,zero
   8d968:	e0bffa15 	stw	r2,-24(fp)
   8d96c:	00000206 	br	8d978 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
   8d970:	00bffb44 	movi	r2,-19
   8d974:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   8d978:	e0bffa17 	ldw	r2,-24(fp)
   8d97c:	1000080e 	bge	r2,zero,8d9a0 <open+0x13c>
  {
    alt_release_fd (index);  
   8d980:	e13ff917 	ldw	r4,-28(fp)
   8d984:	008b5540 	call	8b554 <alt_release_fd>
    ALT_ERRNO = -status;
   8d988:	008d7480 	call	8d748 <alt_get_errno>
   8d98c:	e0fffa17 	ldw	r3,-24(fp)
   8d990:	00c7c83a 	sub	r3,zero,r3
   8d994:	10c00015 	stw	r3,0(r2)
    return -1;
   8d998:	00bfffc4 	movi	r2,-1
   8d99c:	00000106 	br	8d9a4 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   8d9a0:	e0bff917 	ldw	r2,-28(fp)
}
   8d9a4:	e037883a 	mov	sp,fp
   8d9a8:	dfc00117 	ldw	ra,4(sp)
   8d9ac:	df000017 	ldw	fp,0(sp)
   8d9b0:	dec00204 	addi	sp,sp,8
   8d9b4:	f800283a 	ret

0008d9b8 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   8d9b8:	deffff04 	addi	sp,sp,-4
   8d9bc:	df000015 	stw	fp,0(sp)
   8d9c0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   8d9c4:	000170fa 	wrctl	ienable,zero
}
   8d9c8:	e037883a 	mov	sp,fp
   8d9cc:	df000017 	ldw	fp,0(sp)
   8d9d0:	dec00104 	addi	sp,sp,4
   8d9d4:	f800283a 	ret

0008d9d8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   8d9d8:	defffa04 	addi	sp,sp,-24
   8d9dc:	dfc00515 	stw	ra,20(sp)
   8d9e0:	df000415 	stw	fp,16(sp)
   8d9e4:	df000404 	addi	fp,sp,16
   8d9e8:	e13ffe15 	stw	r4,-8(fp)
   8d9ec:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   8d9f0:	e0bfff17 	ldw	r2,-4(fp)
   8d9f4:	10800017 	ldw	r2,0(r2)
   8d9f8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   8d9fc:	e13ffe17 	ldw	r4,-8(fp)
   8da00:	0081b300 	call	81b30 <strlen>
   8da04:	10800044 	addi	r2,r2,1
   8da08:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   8da0c:	00000d06 	br	8da44 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   8da10:	e0bffc17 	ldw	r2,-16(fp)
   8da14:	10c00217 	ldw	r3,8(r2)
   8da18:	e0bffd17 	ldw	r2,-12(fp)
   8da1c:	1809883a 	mov	r4,r3
   8da20:	e17ffe17 	ldw	r5,-8(fp)
   8da24:	100d883a 	mov	r6,r2
   8da28:	008dd080 	call	8dd08 <memcmp>
   8da2c:	1000021e 	bne	r2,zero,8da38 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   8da30:	e0bffc17 	ldw	r2,-16(fp)
   8da34:	00000706 	br	8da54 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   8da38:	e0bffc17 	ldw	r2,-16(fp)
   8da3c:	10800017 	ldw	r2,0(r2)
   8da40:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   8da44:	e0fffc17 	ldw	r3,-16(fp)
   8da48:	e0bfff17 	ldw	r2,-4(fp)
   8da4c:	18bff01e 	bne	r3,r2,8da10 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   8da50:	0005883a 	mov	r2,zero
}
   8da54:	e037883a 	mov	sp,fp
   8da58:	dfc00117 	ldw	ra,4(sp)
   8da5c:	df000017 	ldw	fp,0(sp)
   8da60:	dec00204 	addi	sp,sp,8
   8da64:	f800283a 	ret

0008da68 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   8da68:	defffb04 	addi	sp,sp,-20
   8da6c:	dfc00415 	stw	ra,16(sp)
   8da70:	df000315 	stw	fp,12(sp)
   8da74:	df000304 	addi	fp,sp,12
   8da78:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   8da7c:	00800274 	movhi	r2,9
   8da80:	10bff304 	addi	r2,r2,-52
   8da84:	10800017 	ldw	r2,0(r2)
   8da88:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   8da8c:	00003106 	br	8db54 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   8da90:	e0bffd17 	ldw	r2,-12(fp)
   8da94:	10800217 	ldw	r2,8(r2)
   8da98:	1009883a 	mov	r4,r2
   8da9c:	0081b300 	call	81b30 <strlen>
   8daa0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   8daa4:	e0bffd17 	ldw	r2,-12(fp)
   8daa8:	10c00217 	ldw	r3,8(r2)
   8daac:	e0bffe17 	ldw	r2,-8(fp)
   8dab0:	10bfffc4 	addi	r2,r2,-1
   8dab4:	1885883a 	add	r2,r3,r2
   8dab8:	10800003 	ldbu	r2,0(r2)
   8dabc:	10803fcc 	andi	r2,r2,255
   8dac0:	1080201c 	xori	r2,r2,128
   8dac4:	10bfe004 	addi	r2,r2,-128
   8dac8:	10800bd8 	cmpnei	r2,r2,47
   8dacc:	1000031e 	bne	r2,zero,8dadc <alt_find_file+0x74>
    {
      len -= 1;
   8dad0:	e0bffe17 	ldw	r2,-8(fp)
   8dad4:	10bfffc4 	addi	r2,r2,-1
   8dad8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   8dadc:	e0bffe17 	ldw	r2,-8(fp)
   8dae0:	e0ffff17 	ldw	r3,-4(fp)
   8dae4:	1885883a 	add	r2,r3,r2
   8dae8:	10800003 	ldbu	r2,0(r2)
   8daec:	10803fcc 	andi	r2,r2,255
   8daf0:	1080201c 	xori	r2,r2,128
   8daf4:	10bfe004 	addi	r2,r2,-128
   8daf8:	10800be0 	cmpeqi	r2,r2,47
   8dafc:	1000081e 	bne	r2,zero,8db20 <alt_find_file+0xb8>
   8db00:	e0bffe17 	ldw	r2,-8(fp)
   8db04:	e0ffff17 	ldw	r3,-4(fp)
   8db08:	1885883a 	add	r2,r3,r2
   8db0c:	10800003 	ldbu	r2,0(r2)
   8db10:	10803fcc 	andi	r2,r2,255
   8db14:	1080201c 	xori	r2,r2,128
   8db18:	10bfe004 	addi	r2,r2,-128
   8db1c:	10000a1e 	bne	r2,zero,8db48 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   8db20:	e0bffd17 	ldw	r2,-12(fp)
   8db24:	10c00217 	ldw	r3,8(r2)
   8db28:	e0bffe17 	ldw	r2,-8(fp)
   8db2c:	1809883a 	mov	r4,r3
   8db30:	e17fff17 	ldw	r5,-4(fp)
   8db34:	100d883a 	mov	r6,r2
   8db38:	008dd080 	call	8dd08 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   8db3c:	1000021e 	bne	r2,zero,8db48 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   8db40:	e0bffd17 	ldw	r2,-12(fp)
   8db44:	00000806 	br	8db68 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   8db48:	e0bffd17 	ldw	r2,-12(fp)
   8db4c:	10800017 	ldw	r2,0(r2)
   8db50:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   8db54:	e0fffd17 	ldw	r3,-12(fp)
   8db58:	00800274 	movhi	r2,9
   8db5c:	10bff304 	addi	r2,r2,-52
   8db60:	18bfcb1e 	bne	r3,r2,8da90 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   8db64:	0005883a 	mov	r2,zero
}
   8db68:	e037883a 	mov	sp,fp
   8db6c:	dfc00117 	ldw	ra,4(sp)
   8db70:	df000017 	ldw	fp,0(sp)
   8db74:	dec00204 	addi	sp,sp,8
   8db78:	f800283a 	ret

0008db7c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   8db7c:	defffc04 	addi	sp,sp,-16
   8db80:	df000315 	stw	fp,12(sp)
   8db84:	df000304 	addi	fp,sp,12
   8db88:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   8db8c:	00bffa04 	movi	r2,-24
   8db90:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   8db94:	e03ffd15 	stw	zero,-12(fp)
   8db98:	00001d06 	br	8dc10 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
   8db9c:	00c00274 	movhi	r3,9
   8dba0:	18fb4504 	addi	r3,r3,-4844
   8dba4:	e0bffd17 	ldw	r2,-12(fp)
   8dba8:	10800324 	muli	r2,r2,12
   8dbac:	1885883a 	add	r2,r3,r2
   8dbb0:	10800017 	ldw	r2,0(r2)
   8dbb4:	1000131e 	bne	r2,zero,8dc04 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
   8dbb8:	00c00274 	movhi	r3,9
   8dbbc:	18fb4504 	addi	r3,r3,-4844
   8dbc0:	e0bffd17 	ldw	r2,-12(fp)
   8dbc4:	10800324 	muli	r2,r2,12
   8dbc8:	1885883a 	add	r2,r3,r2
   8dbcc:	e0ffff17 	ldw	r3,-4(fp)
   8dbd0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   8dbd4:	00800274 	movhi	r2,9
   8dbd8:	10bff704 	addi	r2,r2,-36
   8dbdc:	10c00017 	ldw	r3,0(r2)
   8dbe0:	e0bffd17 	ldw	r2,-12(fp)
   8dbe4:	1880040e 	bge	r3,r2,8dbf8 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
   8dbe8:	00800274 	movhi	r2,9
   8dbec:	10bff704 	addi	r2,r2,-36
   8dbf0:	e0fffd17 	ldw	r3,-12(fp)
   8dbf4:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   8dbf8:	e0bffd17 	ldw	r2,-12(fp)
   8dbfc:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   8dc00:	00000606 	br	8dc1c <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   8dc04:	e0bffd17 	ldw	r2,-12(fp)
   8dc08:	10800044 	addi	r2,r2,1
   8dc0c:	e0bffd15 	stw	r2,-12(fp)
   8dc10:	e0bffd17 	ldw	r2,-12(fp)
   8dc14:	10800810 	cmplti	r2,r2,32
   8dc18:	103fe01e 	bne	r2,zero,8db9c <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   8dc1c:	e0bffe17 	ldw	r2,-8(fp)
}
   8dc20:	e037883a 	mov	sp,fp
   8dc24:	df000017 	ldw	fp,0(sp)
   8dc28:	dec00104 	addi	sp,sp,4
   8dc2c:	f800283a 	ret

0008dc30 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   8dc30:	defffb04 	addi	sp,sp,-20
   8dc34:	df000415 	stw	fp,16(sp)
   8dc38:	df000404 	addi	fp,sp,16
   8dc3c:	e13ffe15 	stw	r4,-8(fp)
   8dc40:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   8dc44:	e0bfff17 	ldw	r2,-4(fp)
   8dc48:	10840070 	cmpltui	r2,r2,4097
   8dc4c:	1000021e 	bne	r2,zero,8dc58 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   8dc50:	00840004 	movi	r2,4096
   8dc54:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   8dc58:	e0fffe17 	ldw	r3,-8(fp)
   8dc5c:	e0bfff17 	ldw	r2,-4(fp)
   8dc60:	1885883a 	add	r2,r3,r2
   8dc64:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   8dc68:	e0bffe17 	ldw	r2,-8(fp)
   8dc6c:	e0bffc15 	stw	r2,-16(fp)
   8dc70:	00000506 	br	8dc88 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   8dc74:	e0bffc17 	ldw	r2,-16(fp)
   8dc78:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   8dc7c:	e0bffc17 	ldw	r2,-16(fp)
   8dc80:	10800804 	addi	r2,r2,32
   8dc84:	e0bffc15 	stw	r2,-16(fp)
   8dc88:	e0fffc17 	ldw	r3,-16(fp)
   8dc8c:	e0bffd17 	ldw	r2,-12(fp)
   8dc90:	18bff836 	bltu	r3,r2,8dc74 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   8dc94:	e0bffe17 	ldw	r2,-8(fp)
   8dc98:	108007cc 	andi	r2,r2,31
   8dc9c:	10000226 	beq	r2,zero,8dca8 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   8dca0:	e0bffc17 	ldw	r2,-16(fp)
   8dca4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   8dca8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   8dcac:	e037883a 	mov	sp,fp
   8dcb0:	df000017 	ldw	fp,0(sp)
   8dcb4:	dec00104 	addi	sp,sp,4
   8dcb8:	f800283a 	ret

0008dcbc <atexit>:
   8dcbc:	200b883a 	mov	r5,r4
   8dcc0:	000d883a 	mov	r6,zero
   8dcc4:	0009883a 	mov	r4,zero
   8dcc8:	000f883a 	mov	r7,zero
   8dccc:	008dd841 	jmpi	8dd84 <__register_exitproc>

0008dcd0 <exit>:
   8dcd0:	defffe04 	addi	sp,sp,-8
   8dcd4:	000b883a 	mov	r5,zero
   8dcd8:	dc000015 	stw	r16,0(sp)
   8dcdc:	dfc00115 	stw	ra,4(sp)
   8dce0:	2021883a 	mov	r16,r4
   8dce4:	008deb40 	call	8deb4 <__call_exitprocs>
   8dce8:	00800274 	movhi	r2,9
   8dcec:	10bfee04 	addi	r2,r2,-72
   8dcf0:	11000017 	ldw	r4,0(r2)
   8dcf4:	20800f17 	ldw	r2,60(r4)
   8dcf8:	10000126 	beq	r2,zero,8dd00 <exit+0x30>
   8dcfc:	103ee83a 	callr	r2
   8dd00:	8009883a 	mov	r4,r16
   8dd04:	008e0540 	call	8e054 <_exit>

0008dd08 <memcmp>:
   8dd08:	01c000c4 	movi	r7,3
   8dd0c:	3980192e 	bgeu	r7,r6,8dd74 <memcmp+0x6c>
   8dd10:	2904b03a 	or	r2,r5,r4
   8dd14:	11c4703a 	and	r2,r2,r7
   8dd18:	10000f26 	beq	r2,zero,8dd58 <memcmp+0x50>
   8dd1c:	20c00003 	ldbu	r3,0(r4)
   8dd20:	28800003 	ldbu	r2,0(r5)
   8dd24:	1880151e 	bne	r3,r2,8dd7c <memcmp+0x74>
   8dd28:	31bfff84 	addi	r6,r6,-2
   8dd2c:	01ffffc4 	movi	r7,-1
   8dd30:	00000406 	br	8dd44 <memcmp+0x3c>
   8dd34:	20c00003 	ldbu	r3,0(r4)
   8dd38:	28800003 	ldbu	r2,0(r5)
   8dd3c:	31bfffc4 	addi	r6,r6,-1
   8dd40:	18800e1e 	bne	r3,r2,8dd7c <memcmp+0x74>
   8dd44:	21000044 	addi	r4,r4,1
   8dd48:	29400044 	addi	r5,r5,1
   8dd4c:	31fff91e 	bne	r6,r7,8dd34 <memcmp+0x2c>
   8dd50:	0005883a 	mov	r2,zero
   8dd54:	f800283a 	ret
   8dd58:	20c00017 	ldw	r3,0(r4)
   8dd5c:	28800017 	ldw	r2,0(r5)
   8dd60:	1880041e 	bne	r3,r2,8dd74 <memcmp+0x6c>
   8dd64:	31bfff04 	addi	r6,r6,-4
   8dd68:	21000104 	addi	r4,r4,4
   8dd6c:	29400104 	addi	r5,r5,4
   8dd70:	39bff936 	bltu	r7,r6,8dd58 <memcmp+0x50>
   8dd74:	303fe91e 	bne	r6,zero,8dd1c <memcmp+0x14>
   8dd78:	003ff506 	br	8dd50 <memcmp+0x48>
   8dd7c:	1885c83a 	sub	r2,r3,r2
   8dd80:	f800283a 	ret

0008dd84 <__register_exitproc>:
   8dd84:	defffa04 	addi	sp,sp,-24
   8dd88:	00800274 	movhi	r2,9
   8dd8c:	10bfee04 	addi	r2,r2,-72
   8dd90:	dc000315 	stw	r16,12(sp)
   8dd94:	14000017 	ldw	r16,0(r2)
   8dd98:	dc400415 	stw	r17,16(sp)
   8dd9c:	dfc00515 	stw	ra,20(sp)
   8dda0:	80805217 	ldw	r2,328(r16)
   8dda4:	2023883a 	mov	r17,r4
   8dda8:	10003e26 	beq	r2,zero,8dea4 <__register_exitproc+0x120>
   8ddac:	10c00117 	ldw	r3,4(r2)
   8ddb0:	020007c4 	movi	r8,31
   8ddb4:	40c0180e 	bge	r8,r3,8de18 <__register_exitproc+0x94>
   8ddb8:	00800034 	movhi	r2,0
   8ddbc:	10800004 	addi	r2,r2,0
   8ddc0:	1000061e 	bne	r2,zero,8dddc <__register_exitproc+0x58>
   8ddc4:	00bfffc4 	movi	r2,-1
   8ddc8:	dfc00517 	ldw	ra,20(sp)
   8ddcc:	dc400417 	ldw	r17,16(sp)
   8ddd0:	dc000317 	ldw	r16,12(sp)
   8ddd4:	dec00604 	addi	sp,sp,24
   8ddd8:	f800283a 	ret
   8dddc:	01006404 	movi	r4,400
   8dde0:	d9400015 	stw	r5,0(sp)
   8dde4:	d9800115 	stw	r6,4(sp)
   8dde8:	d9c00215 	stw	r7,8(sp)
   8ddec:	00000000 	call	0 <__reset-0x80000>
   8ddf0:	d9400017 	ldw	r5,0(sp)
   8ddf4:	d9800117 	ldw	r6,4(sp)
   8ddf8:	d9c00217 	ldw	r7,8(sp)
   8ddfc:	103ff126 	beq	r2,zero,8ddc4 <__register_exitproc+0x40>
   8de00:	80c05217 	ldw	r3,328(r16)
   8de04:	10000115 	stw	zero,4(r2)
   8de08:	10c00015 	stw	r3,0(r2)
   8de0c:	80805215 	stw	r2,328(r16)
   8de10:	10006215 	stw	zero,392(r2)
   8de14:	10006315 	stw	zero,396(r2)
   8de18:	10c00117 	ldw	r3,4(r2)
   8de1c:	88000d1e 	bne	r17,zero,8de54 <__register_exitproc+0xd0>
   8de20:	19000084 	addi	r4,r3,2
   8de24:	2109883a 	add	r4,r4,r4
   8de28:	18c00044 	addi	r3,r3,1
   8de2c:	2109883a 	add	r4,r4,r4
   8de30:	1109883a 	add	r4,r2,r4
   8de34:	10c00115 	stw	r3,4(r2)
   8de38:	0005883a 	mov	r2,zero
   8de3c:	21400015 	stw	r5,0(r4)
   8de40:	dfc00517 	ldw	ra,20(sp)
   8de44:	dc400417 	ldw	r17,16(sp)
   8de48:	dc000317 	ldw	r16,12(sp)
   8de4c:	dec00604 	addi	sp,sp,24
   8de50:	f800283a 	ret
   8de54:	02400044 	movi	r9,1
   8de58:	12806217 	ldw	r10,392(r2)
   8de5c:	48d2983a 	sll	r9,r9,r3
   8de60:	19000804 	addi	r4,r3,32
   8de64:	18d1883a 	add	r8,r3,r3
   8de68:	2109883a 	add	r4,r4,r4
   8de6c:	4211883a 	add	r8,r8,r8
   8de70:	2109883a 	add	r4,r4,r4
   8de74:	1109883a 	add	r4,r2,r4
   8de78:	1211883a 	add	r8,r2,r8
   8de7c:	5254b03a 	or	r10,r10,r9
   8de80:	21c02215 	stw	r7,136(r4)
   8de84:	41802215 	stw	r6,136(r8)
   8de88:	12806215 	stw	r10,392(r2)
   8de8c:	01000084 	movi	r4,2
   8de90:	893fe31e 	bne	r17,r4,8de20 <__register_exitproc+0x9c>
   8de94:	11006317 	ldw	r4,396(r2)
   8de98:	2252b03a 	or	r9,r4,r9
   8de9c:	12406315 	stw	r9,396(r2)
   8dea0:	003fdf06 	br	8de20 <__register_exitproc+0x9c>
   8dea4:	00800274 	movhi	r2,9
   8dea8:	10872804 	addi	r2,r2,7328
   8deac:	80805215 	stw	r2,328(r16)
   8deb0:	003fbe06 	br	8ddac <__register_exitproc+0x28>

0008deb4 <__call_exitprocs>:
   8deb4:	00800274 	movhi	r2,9
   8deb8:	10bfee04 	addi	r2,r2,-72
   8debc:	10800017 	ldw	r2,0(r2)
   8dec0:	defff304 	addi	sp,sp,-52
   8dec4:	df000b15 	stw	fp,44(sp)
   8dec8:	d8800015 	stw	r2,0(sp)
   8decc:	10805204 	addi	r2,r2,328
   8ded0:	dd400815 	stw	r21,32(sp)
   8ded4:	dfc00c15 	stw	ra,48(sp)
   8ded8:	ddc00a15 	stw	r23,40(sp)
   8dedc:	dd800915 	stw	r22,36(sp)
   8dee0:	dd000715 	stw	r20,28(sp)
   8dee4:	dcc00615 	stw	r19,24(sp)
   8dee8:	dc800515 	stw	r18,20(sp)
   8deec:	dc400415 	stw	r17,16(sp)
   8def0:	dc000315 	stw	r16,12(sp)
   8def4:	d9000115 	stw	r4,4(sp)
   8def8:	2839883a 	mov	fp,r5
   8defc:	d8800215 	stw	r2,8(sp)
   8df00:	057fffc4 	movi	r21,-1
   8df04:	d8800017 	ldw	r2,0(sp)
   8df08:	ddc00217 	ldw	r23,8(sp)
   8df0c:	14805217 	ldw	r18,328(r2)
   8df10:	90001726 	beq	r18,zero,8df70 <__call_exitprocs+0xbc>
   8df14:	94400117 	ldw	r17,4(r18)
   8df18:	8c3fffc4 	addi	r16,r17,-1
   8df1c:	80001116 	blt	r16,zero,8df64 <__call_exitprocs+0xb0>
   8df20:	8c400044 	addi	r17,r17,1
   8df24:	8427883a 	add	r19,r16,r16
   8df28:	8c63883a 	add	r17,r17,r17
   8df2c:	95802204 	addi	r22,r18,136
   8df30:	9ce7883a 	add	r19,r19,r19
   8df34:	8c63883a 	add	r17,r17,r17
   8df38:	b4e7883a 	add	r19,r22,r19
   8df3c:	9463883a 	add	r17,r18,r17
   8df40:	e0001726 	beq	fp,zero,8dfa0 <__call_exitprocs+0xec>
   8df44:	8c87c83a 	sub	r3,r17,r18
   8df48:	b0c7883a 	add	r3,r22,r3
   8df4c:	18c01e17 	ldw	r3,120(r3)
   8df50:	1f001326 	beq	r3,fp,8dfa0 <__call_exitprocs+0xec>
   8df54:	843fffc4 	addi	r16,r16,-1
   8df58:	9cffff04 	addi	r19,r19,-4
   8df5c:	8c7fff04 	addi	r17,r17,-4
   8df60:	857ff71e 	bne	r16,r21,8df40 <__call_exitprocs+0x8c>
   8df64:	00800034 	movhi	r2,0
   8df68:	10800004 	addi	r2,r2,0
   8df6c:	10002a1e 	bne	r2,zero,8e018 <__call_exitprocs+0x164>
   8df70:	dfc00c17 	ldw	ra,48(sp)
   8df74:	df000b17 	ldw	fp,44(sp)
   8df78:	ddc00a17 	ldw	r23,40(sp)
   8df7c:	dd800917 	ldw	r22,36(sp)
   8df80:	dd400817 	ldw	r21,32(sp)
   8df84:	dd000717 	ldw	r20,28(sp)
   8df88:	dcc00617 	ldw	r19,24(sp)
   8df8c:	dc800517 	ldw	r18,20(sp)
   8df90:	dc400417 	ldw	r17,16(sp)
   8df94:	dc000317 	ldw	r16,12(sp)
   8df98:	dec00d04 	addi	sp,sp,52
   8df9c:	f800283a 	ret
   8dfa0:	91000117 	ldw	r4,4(r18)
   8dfa4:	88c00017 	ldw	r3,0(r17)
   8dfa8:	213fffc4 	addi	r4,r4,-1
   8dfac:	24001526 	beq	r4,r16,8e004 <__call_exitprocs+0x150>
   8dfb0:	88000015 	stw	zero,0(r17)
   8dfb4:	183fe726 	beq	r3,zero,8df54 <__call_exitprocs+0xa0>
   8dfb8:	00800044 	movi	r2,1
   8dfbc:	1408983a 	sll	r4,r2,r16
   8dfc0:	91406217 	ldw	r5,392(r18)
   8dfc4:	95000117 	ldw	r20,4(r18)
   8dfc8:	214a703a 	and	r5,r4,r5
   8dfcc:	28000b26 	beq	r5,zero,8dffc <__call_exitprocs+0x148>
   8dfd0:	91406317 	ldw	r5,396(r18)
   8dfd4:	2148703a 	and	r4,r4,r5
   8dfd8:	20000c1e 	bne	r4,zero,8e00c <__call_exitprocs+0x158>
   8dfdc:	99400017 	ldw	r5,0(r19)
   8dfe0:	d9000117 	ldw	r4,4(sp)
   8dfe4:	183ee83a 	callr	r3
   8dfe8:	90c00117 	ldw	r3,4(r18)
   8dfec:	1d3fc51e 	bne	r3,r20,8df04 <__call_exitprocs+0x50>
   8dff0:	b8c00017 	ldw	r3,0(r23)
   8dff4:	1cbfd726 	beq	r3,r18,8df54 <__call_exitprocs+0xa0>
   8dff8:	003fc206 	br	8df04 <__call_exitprocs+0x50>
   8dffc:	183ee83a 	callr	r3
   8e000:	003ff906 	br	8dfe8 <__call_exitprocs+0x134>
   8e004:	94000115 	stw	r16,4(r18)
   8e008:	003fea06 	br	8dfb4 <__call_exitprocs+0x100>
   8e00c:	99000017 	ldw	r4,0(r19)
   8e010:	183ee83a 	callr	r3
   8e014:	003ff406 	br	8dfe8 <__call_exitprocs+0x134>
   8e018:	90c00117 	ldw	r3,4(r18)
   8e01c:	1800071e 	bne	r3,zero,8e03c <__call_exitprocs+0x188>
   8e020:	90c00017 	ldw	r3,0(r18)
   8e024:	18000926 	beq	r3,zero,8e04c <__call_exitprocs+0x198>
   8e028:	9009883a 	mov	r4,r18
   8e02c:	b8c00015 	stw	r3,0(r23)
   8e030:	00000000 	call	0 <__reset-0x80000>
   8e034:	bc800017 	ldw	r18,0(r23)
   8e038:	003fb506 	br	8df10 <__call_exitprocs+0x5c>
   8e03c:	90c00017 	ldw	r3,0(r18)
   8e040:	902f883a 	mov	r23,r18
   8e044:	1825883a 	mov	r18,r3
   8e048:	003fb106 	br	8df10 <__call_exitprocs+0x5c>
   8e04c:	0007883a 	mov	r3,zero
   8e050:	003ffb06 	br	8e040 <__call_exitprocs+0x18c>

0008e054 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   8e054:	defffc04 	addi	sp,sp,-16
   8e058:	df000315 	stw	fp,12(sp)
   8e05c:	df000304 	addi	fp,sp,12
   8e060:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   8e064:	0001883a 	nop
   8e068:	e0bfff17 	ldw	r2,-4(fp)
   8e06c:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
   8e070:	e0bffd17 	ldw	r2,-12(fp)
   8e074:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   8e078:	e0bffe17 	ldw	r2,-8(fp)
   8e07c:	10000226 	beq	r2,zero,8e088 <_exit+0x34>
    ALT_SIM_FAIL();
   8e080:	002af070 	cmpltui	zero,zero,43969
   8e084:	00000106 	br	8e08c <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   8e088:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   8e08c:	003fff06 	br	8e08c <_exit+0x38>
